<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>居中对齐的几种方法</title>
      <link href="/2022/03/25/css-center/"/>
      <url>/2022/03/25/css-center/</url>
      
        <content type="html"><![CDATA[<h1 id="居中对齐的几种方法"><a href="#居中对齐的几种方法" class="headerlink" title="居中对齐的几种方法"></a>居中对齐的几种方法</h1><p>看面试题，自己总结了下，顺便写了对应例子，加深印象。</p><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="给-div设置一个宽度，再添加-margin-0-auto"><a href="#给-div设置一个宽度，再添加-margin-0-auto" class="headerlink" title="给 div设置一个宽度，再添加 margin: 0 auto"></a>给<code> div</code>设置一个宽度，再添加<code> margin: 0 auto</code></h3><p><b style="color: red">必须要添加宽度，只对块级元素有效</b></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.inline-block-box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>块级元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inline-block-box&quot;</span>&gt;</span>行内块元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>行内元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/24/d3PXbaQ47yeNMcB.png" alt="image-20220324213321588"></p><br><h3 id="给父元素添加-text-aligin-center"><a href="#给父元素添加-text-aligin-center" class="headerlink" title="给父元素添加 text-aligin: center"></a>给父元素添加<code> text-aligin: center</code></h3><p><b style="color: red">只对行内块元素、行内元素有效</b></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: purple;<br>&#125;<br><br><span class="hljs-selector-class">.inline-block-box</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: purple;<br>&#125;<br><br><span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: skyblue;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/24/34np6EksUagW8X5.png" alt="image-20220324214157484"></p><br><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><h3 id="计算法"><a href="#计算法" class="headerlink" title="计算法"></a>计算法</h3><h4 id="父元素跟着子元素-margin-top-移动问题"><a href="#父元素跟着子元素-margin-top-移动问题" class="headerlink" title="父元素跟着子元素 margin-top 移动问题"></a>父元素跟着子元素 margin-top 移动问题</h4><p>开始之前，先看下一个小问题</p><p>下面的例子中，我们想要让子元素离父元素有距离</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">150px</span> auto;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/24/Lwy6iaJDdVrYnKm.png" alt="image-20220324220516244"></p><br><p>结果，子元素并没有外边距效果，反而是父元素出现了外边距的效果。</p><p>这是因为，根据规范，父元素的子元素的上边距(<code> margin-top</code>)，如果碰不到有效的<code> border</code>或者<code> padding</code>，就会一层一层的找自己的祖先元素，直到找到祖先元素有有效的<code> border</code>或<code>border</code>为止</p><br><p>解决方案：</p><ol><li>给父元素添加<code> padding-top</code></li><li>给父元素添加<code> border-top</code></li><li><strong>给父元素添加<code> overflow: hidden</code></strong>(<b style="color: red">推荐</b>)</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br><br>  <span class="hljs-comment">/* padding-top: 1px; */</span><br>  <span class="hljs-comment">/* border-top: 1px solid transparent; */</span><br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>首先<code> margin</code>左右可以直接设置<code> auto</code>实现居中，但是的上下不行。</p><p>计算法：<code>margin上下值 = (父元素高度-子元素高度)/2</code></p><p>在这个例子中，父元素的高度为<code> 400px</code>，子元素的高度为<code> 100px</code>，所以<code> margin上下值</code>设置为<code> 150px</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: purple;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">150px</span> auto;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/24/zV8YmsNHEGtWyXP.png" alt="image-20220324222200326"></p><br><h3 id="绝对定位四-0-法"><a href="#绝对定位四-0-法" class="headerlink" title="绝对定位四 0 法"></a>绝对定位四 0 法</h3><p><strong>设置四个方向都为 0，然后设置<code> margin</code>为<code> auto</code>，因为宽高固定，所以对应方向平分，可以实现水平垂直居中</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">.container &#123;<br>  <span class="hljs-attr">position</span>: relative;<br>  width: 600px;<br>  height: 400px;<br>  background-color: pink;<br>  color: #fff;<br>&#125;<br><br>.box &#123;<br>  <span class="hljs-attr">position</span>: absolute;<br>  width: 200px;<br>  height: 100px;<br>  top: <span class="hljs-number">0</span>;<br>  right: <span class="hljs-number">0</span>;<br>  bottom: <span class="hljs-number">0</span>;<br>  left: <span class="hljs-number">0</span>;<br>  margin: auto;<br>  background-color: purple;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="绝对定位-计算法-margin负值"><a href="#绝对定位-计算法-margin负值" class="headerlink" title="绝对定位 + 计算法( margin负值)"></a>绝对定位 + 计算法(<code> margin</code>负值)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">margin</span>: -<span class="hljs-number">50px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> -<span class="hljs-number">100px</span>;<br>  <span class="hljs-comment">/* margin-top、margin-left 分别是该子元素高宽的一半(负值)*/</span><br>  <span class="hljs-attribute">background-color</span>: purple;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="绝对定位-transform"><a href="#绝对定位-transform" class="headerlink" title="绝对定位 +  transform"></a>绝对定位 + <code> transform</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>  <span class="hljs-attribute">background-color</span>: purple;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="flex-布局法"><a href="#flex-布局法" class="headerlink" title="flex 布局法"></a>flex 布局法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-comment">/* 垂直居中 */</span><br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-comment">/* 水平居中 */</span><br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: purple;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>对于<strong>宽高不定</strong>的元素，后面两种方法(<b style="color: red">绝对定位+<code> transform</code>、<code> flex</code>布局法</b>)，可以实现元素的水平垂直居中。</p><br><p>参考资料：</p><ul><li><p><a href="https://segmentfault.com/a/1190000022021557">104 道 CSS 面试题，助你查漏补缺</a></p></li><li><p><a href="https://blog.csdn.net/weixin_45786214/article/details/106297864">父盒子跟随子盒子 margin-top 移动问题</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码之mustache模板引擎(一)</title>
      <link href="/2022/03/24/vue-mustache-1/"/>
      <url>/2022/03/24/vue-mustache-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-源码之-mustache-模板引擎-一"><a href="#Vue-源码之-mustache-模板引擎-一" class="headerlink" title="Vue 源码之 mustache 模板引擎(一)"></a>Vue 源码之 mustache 模板引擎(一)</h1><p>个人练习结果仓库(持续更新)：<a href="https://github.com/13535944743/Vue_Source_Code_Practise">Vue 源码解析</a></p><br><p>抽空把之前学的东西写成笔记。</p><p>学习视频链接：<a href="https://www.bilibili.com/video/BV1EV411h79m">【尚硅谷】Vue 源码解析之 mustache 模板引擎</a></p><h2 id="模板引擎是什么"><a href="#模板引擎是什么" class="headerlink" title="模板引擎是什么"></a>模板引擎是什么</h2><p><strong>模板引擎是将数据变为视图最优雅的解决方案。</strong></p><p><img src="https://s2.loli.net/2022/03/12/wQJFumIdge6ZzbT.png" alt="image-20220312180129318"></p><p>其中，Vue 中的列表渲染指令<code> v-for</code>就是一种模板引擎。而**插值表达式<code>&#123;&#123;&#125;&#125;`**便是本次要研究的` mustache模板引擎`的语法<br>## 将数据变为视图的方法### 纯 DOM 法很笨拙。需要频繁创建节点，添加数据，添加节点。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cc&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;女&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> list = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;list&quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>  <span class="hljs-keyword">const</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;li&quot;</span>); <span class="hljs-comment">// 新建li元素</span><br><br>  <span class="hljs-keyword">const</span> bd = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;div&quot;</span>);<br>  bd.className = <span class="hljs-string">&quot;bd&quot;</span>;<br>  bd.innerText = arr[i].name + <span class="hljs-string">&quot;的基本信息&quot;</span>;<br>  li.appendChild(bd);<br><br>  <span class="hljs-keyword">const</span> hd = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;div&quot;</span>);<br>  hd.className = <span class="hljs-string">&quot;hd&quot;</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">in</span> arr[i]) &#123;<br>    <span class="hljs-keyword">const</span> p = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;p&quot;</span>);<br>    p.innerText = item + <span class="hljs-string">&quot;: &quot;</span> + arr[i][item];<br>    hd.appendChild(p);<br>  &#125;<br><br>  li.appendChild(hd);<br>  list.appendChild(li);<br>&#125;<br></code></pre></td></tr></table></figure>![image-20220312182355046](https://s2.loli.net/2022/03/12/chJLPs9TlfwmSey.png)<br>### 数组 join 法本质上就是字符串拼接，只是用过数组 join 法，可以让结构变得更清晰<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cc&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;女&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>  list.innerHTML += [<br>    <span class="hljs-string">&quot;&lt;li&gt;&quot;</span>,<br>    <span class="hljs-string">&#x27;  &lt;div class=&quot;hd&quot;&gt;&#x27;</span> + arr[i].name + <span class="hljs-string">&quot;的基本信息&lt;/div&gt;&quot;</span>,<br>    <span class="hljs-string">&#x27;  &lt;div class=&quot;bd&quot;&gt;&#x27;</span>,<br>    <span class="hljs-string">&quot;    &lt;p&gt;name: &quot;</span> + arr[i].name + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;    &lt;p&gt;age: &quot;</span> + arr[i].age + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;    &lt;p&gt;sex&quot;</span> + arr[i].sex + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;  &lt;/div&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;&lt;/li&gt;&quot;</span>,<br>  ].join(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>### ES6 的模板字符串法- 反引号中，文本可以直接换行- 反引号中的$&#123;expression&#125;占位符中 expression 可以为任意的 JavaScript 表达式，甚至为模板字符串<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cc&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;女&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>  list.innerHTML += <span class="hljs-string">`</span><br><span class="hljs-string">      &lt;li&gt;</span><br><span class="hljs-string">          &lt;div class=&quot;hd&quot;&gt;<span class="hljs-subst">$&#123;arr[i].name&#125;</span> 的基本信息&lt;/div&gt;</span><br><span class="hljs-string">          &lt;div class=&quot;bd&quot;&gt;</span><br><span class="hljs-string">            &lt;p&gt;name: <span class="hljs-subst">$&#123;arr[i].name&#125;</span> &lt;/p&gt;</span><br><span class="hljs-string">            &lt;p&gt;age: <span class="hljs-subst">$&#123;arr[i].age&#125;</span> &lt;/p&gt;</span><br><span class="hljs-string">            &lt;p&gt;sex: <span class="hljs-subst">$&#123;arr[i].sex&#125;</span> &lt;/p&gt;</span><br><span class="hljs-string">          &lt;/div&gt;</span><br><span class="hljs-string">        &lt;/li&gt;</span><br><span class="hljs-string">      `</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br>### 模板引擎 mustache[mustache 仓库](https://github.com/janl/mustache.js)mustache 是**最早的模板引擎库**。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/mustache.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">  // console.log(Mustache)</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">  const templateStr = `</span></span><br><span class="xml"><span class="handlebars">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">      </span><span class="hljs-template-variable">&#123;&#123; #<span class="hljs-name">arr</span> &#125;&#125;</span><span class="xml"></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hd&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">name</span> &#125;&#125;</span><span class="xml">的基本信息<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bd&quot;</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">name</span> &#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>age: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">age</span> &#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>sex: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">sex</span> &#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">      </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">/arr</span> &#125;&#125;</span><span class="xml"></span></span><br><span class="xml"><span class="handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">  `;</span></span><br><span class="xml"><span class="handlebars">  const data = &#123;</span></span><br><span class="xml"><span class="handlebars">    arr: [</span></span><br><span class="xml"><span class="handlebars">      &#123;</span></span><br><span class="xml"><span class="handlebars">        name: &quot;clz&quot;,</span></span><br><span class="xml"><span class="handlebars">        age: 21,</span></span><br><span class="xml"><span class="handlebars">        sex: &quot;男&quot;,</span></span><br><span class="xml"><span class="handlebars">      &#125;,</span></span><br><span class="xml"><span class="handlebars">      &#123;</span></span><br><span class="xml"><span class="handlebars">        name: &quot;cc&quot;,</span></span><br><span class="xml"><span class="handlebars">        age: 21,</span></span><br><span class="xml"><span class="handlebars">        sex: &quot;女&quot;,</span></span><br><span class="xml"><span class="handlebars">      &#125;,</span></span><br><span class="xml"><span class="handlebars">      &#123;</span></span><br><span class="xml"><span class="handlebars">        name: &quot;赤蓝紫&quot;,</span></span><br><span class="xml"><span class="handlebars">        age: 21,</span></span><br><span class="xml"><span class="handlebars">        sex: &quot;男&quot;,</span></span><br><span class="xml"><span class="handlebars">      &#125;,</span></span><br><span class="xml"><span class="handlebars">    ],</span></span><br><span class="xml"><span class="handlebars">  &#125;;</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">  const domStr = Mustache.render(templateStr, data);</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">  document.getElementsByClassName(&quot;container&quot;)[0].innerHTML = domStr;</span></span><br><span class="xml"><span class="handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>引入` mustache`后，就会后一个` Mustache`对象，其中有一个方法` render`就可以用来实现将数据变为视图。- render 的第一个参数是模板字符串，第二个参数是数据- 如果需要使用数据，直接通过` &#123;&#123; &#125;&#125;</code>使用即可</p><ul><li>要实现循环的话，则需要用<code> &#123;&#123; #arr &#125;&#125;</code>,<code> &#123;&#123; /arr &#125;&#125;</code>包住要循环的内容</li></ul><h2 id="mustache-的基本使用"><a href="#mustache-的基本使用" class="headerlink" title="mustache 的基本使用"></a><span id="jump">mustache 的基本使用</span></h2><p><a href="https://unpkg.com/mustache@4.2.0/mustache.js">mustache.js</a></p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁&lt;/h2&gt;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> domStr = Mustache.render(templateStr, data);<br><br><span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;container&quot;</span>)[<span class="hljs-number">0</span>].innerHTML = domStr;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/I9EnyTRuYc1ibga.png" alt="image-20220312211938118"></p><h3 id="循环简单数组"><a href="#循环简单数组" class="headerlink" title="循环简单数组"></a>循环简单数组</h3><p>循环的不是对象数组，而是简单数组时，使用<code> .</code>即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &#123;&#123;#arr&#125;&#125;</span><br><span class="hljs-string">    &lt;h2 style=&quot;color: &#123;&#123;.&#125;&#125;&quot;&gt;&#123;&#123;.&#125;&#125;&lt;/h2&gt;</span><br><span class="hljs-string">  &#123;&#123;/arr&#125;&#125;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">arr</span>: [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;purple&quot;</span>],<br>&#125;;<br><br><span class="hljs-keyword">const</span> domStr = Mustache.render(templateStr, data);<br><br><span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;container&quot;</span>)[<span class="hljs-number">0</span>].innerHTML = domStr;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/t5acM2UO3xPIDAB.png" alt="image-20220312212348808"></p><br><h3 id="数组嵌套"><a href="#数组嵌套" class="headerlink" title="数组嵌套"></a>数组嵌套</h3><p>就是上面两部分的结合版本。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;ul&gt;</span><br><span class="hljs-string">    &#123;&#123;#arr&#125;&#125;</span><br><span class="hljs-string">      &lt;li&gt;</span><br><span class="hljs-string">        &#123;&#123;name&#125;&#125;喜欢的颜色是:</span><br><span class="hljs-string">        &lt;ol&gt;</span><br><span class="hljs-string">          &#123;&#123;#colors&#125;&#125;</span><br><span class="hljs-string">            &lt;li&gt;&#123;&#123;.&#125;&#125;&lt;/li&gt;</span><br><span class="hljs-string">          &#123;&#123;/colors&#125;&#125;</span><br><span class="hljs-string">        &lt;/ol&gt;</span><br><span class="hljs-string">      &lt;/li&gt;</span><br><span class="hljs-string">    &#123;&#123;/arr&#125;&#125;</span><br><span class="hljs-string">  &lt;/ul&gt;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">arr</span>: [<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>      <span class="hljs-attr">colors</span>: [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;purple&quot;</span>],<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cc&quot;</span>,<br>      <span class="hljs-attr">colors</span>: [<span class="hljs-string">&quot;white&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;black&quot;</span>],<br>    &#125;,<br>  ],<br>&#125;;<br><br><span class="hljs-keyword">const</span> domStr = Mustache.render(templateStr, data);<br><br><span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;container&quot;</span>)[<span class="hljs-number">0</span>].innerHTML = domStr;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/zHboe6pFn8cBfyq.png" alt="image-20220312214124863"></p><br><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>和循环类似，通过使用<code> &#123;&#123;#布尔值属性&#125;&#125;</code>,<code>&#123;&#123;/布尔值属性&#125;&#125;</code>，包住要条件渲染的内容即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &#123;&#123;#arr&#125;&#125;</span><br><span class="hljs-string">    &#123;&#123;#show&#125;&#125;</span><br><span class="hljs-string">      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="hljs-string">    &#123;&#123;/show&#125;&#125;</span><br><span class="hljs-string">  &#123;&#123;/arr&#125;&#125;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">arr</span>: [<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>      <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;czh&quot;</span>,<br>      <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>    &#125;,<br>  ],<br>&#125;;<br><br><span class="hljs-keyword">const</span> domStr = Mustache.render(templateStr, data);<br><br><span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;container&quot;</span>)[<span class="hljs-number">0</span>].innerHTML = domStr;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/Vxk2CwiaAsbRHcM.png" alt="image-20220312214938151"></p><br><p>通过查看 DOM 树，可以发现和 Vue 中的<code> v-if</code>指令类似，是压根就没有上 DOM 树。另外，Vue 中的<code> v-show</code>指令则是动态为元素添加或移除<code> display: none;</code>来控制元素的显示与隐藏。</p><br><h3 id="es6-之前使用-mustache"><a href="#es6-之前使用-mustache" class="headerlink" title="es6 之前使用 mustache"></a>es6 之前使用 mustache</h3><p>众所周知，es6 之前是没有模板字符串(反引号)的。那么方便的使用 mustache 呢？</p><p>当然，可以使用上面的数组 join 法，不过，还有一个更方便的方法。</p><p>通过使用<code> script</code>标签，只要添加<code>type</code>为<code> text/template</code>，然后在里面填模板字符串即可(实际上，只要不被浏览器识别即可)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/template&quot;</span> id=<span class="hljs-string">&quot;templateStr&quot;</span>&gt;<br>  &#123;&#123;#arr&#125;&#125;<br>    &#123;&#123;#show&#125;&#125;<br>      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>    &#123;&#123;/show&#125;&#125;<br>  &#123;&#123;/arr&#125;&#125;<br>&lt;/script&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/mustache.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">const</span> templateStr = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;templateStr&#x27;</span>).innerHTML</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">const</span> data = &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">arr</span>: [</span></span><br><span class="javascript"><span class="xml">      &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span></span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">      &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;czh&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span></span></span><br><span class="javascript"><span class="xml">      &#125;</span></span><br><span class="javascript"><span class="xml">    ]</span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">const</span> domStr = Mustache.render(templateStr, data)</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;container&#x27;</span>)[<span class="hljs-number">0</span>].innerHTML = domStr</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>只能说<strong>想到这个方法的人太优秀了</strong></p><br><h2 id="mustache-底层原理"><a href="#mustache-底层原理" class="headerlink" title="mustache 底层原理"></a>mustache 底层原理</h2><br><h3 id="正则表达式实现最简单的-mustache"><a href="#正则表达式实现最简单的-mustache" class="headerlink" title="正则表达式实现最简单的 mustache"></a>正则表达式实现最简单的 mustache</h3><br><h4 id="String-prototype-replace"><a href="#String-prototype-replace" class="headerlink" title="String.prototype.replace()"></a>String.prototype.replace()</h4><p>在开始之前，首先需要了解一下字符串的<code> replace</code>方法</p><blockquote><p><strong>语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">str.replace(regexp|substr, newSubStr|<span class="hljs-function"><span class="hljs-keyword">function</span>)</span><br></code></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><p><code>regexp </code>(pattern)：一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp"><code>RegExp</code></a> 对象或者其字面量。该正则所匹配的内容会被第二个参数的返回值替换掉。</p></li><li><p><code>substr </code>(pattern)：一个将被 <code>newSubStr</code> 替换的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String"><code>字符串</code></a>。其被视为一整个字符串，而不是一个正则表达式。仅第一个匹配项会被替换。</p></li><li><p><code>newSubStr</code> (replacement)：用于替换掉第一个参数在原字符串中的匹配部分的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String"><code>字符串</code></a>。该字符串中可以内插一些特殊的变量名。参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E4%BD%BF%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0">使用字符串作为参数</a>。</p></li><li><p><code>function</code> (replacement)：一个用来创建新子字符串的函数，该函数的返回值将替换掉第一个参数匹配到的结果。参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E6%8C%87%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0">指定一个函数作为参数</a>。</p></li></ul><p><strong>返回值</strong></p><p>一个部分或全部匹配由替代模式所取代的新的字符串。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁&lt;/h2&gt;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(templateStr.replace(<span class="hljs-regexp">/\&#123;\&#123;\w+\&#125;\&#125;/g</span>, <span class="hljs-string">&quot;123&quot;</span>));<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/rRUxDw2Gg9IYu1e.png" alt="image-20220313091349829"></p><br><p>可以发现，上面的做法还无法实现，所以研究一下，第二个参数为函数的情况</p><blockquote><table><thead><tr><th align="left">变量名</th><th align="left">代表的值</th></tr></thead><tbody><tr><td align="left"><code>match</code></td><td align="left">匹配的子串。（对应于上述的$&amp;。）</td></tr><tr><td align="left"><code>p1,p2, ...</code></td><td align="left">假如 replace()方法的第一个参数是一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp"><code>RegExp</code></a> 对象，则代表第 n 个括号匹配的字符串。（对应于上述的$1，$2 等。）例如，如果是用 <code>/(\a+)(\b+)/</code> 这个来匹配，<code>p1</code> 就是匹配的 <code>\a+</code>，<code>p2</code> 就是匹配的 <code>\b+</code>。</td></tr><tr><td align="left"><code>offset</code></td><td align="left">匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是 <code>&#39;abcd&#39;</code>，匹配到的子字符串是 <code>&#39;bc&#39;</code>，那么这个参数将会是 1）</td></tr><tr><td align="left"><code>string</code></td><td align="left">被匹配的原字符串。</td></tr><tr><td align="left">NamedCaptureGroup</td><td align="left">命名捕获组匹配的对象</td></tr></tbody></table></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁&lt;/h2&gt;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>&#125;;<br><br>templateStr.replace(<span class="hljs-regexp">/\&#123;\&#123;(\w+)\&#125;\&#125;/g</span>, <span class="hljs-function">(<span class="hljs-params">match, p1, offset, string</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(match);<br>  <span class="hljs-built_in">console</span>.log(p1);<br>  <span class="hljs-built_in">console</span>.log(offset);<br>  <span class="hljs-built_in">console</span>.log(string);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/7AVX6LyhJfCvual.png" alt="image-20220313092139759"></p><p>可以发现，只需要在正则表达式中使用<code> ()</code>把要捕获的内容包起来，然后通过<code> replace</code>方法的函数参数中的 p1 参数获取捕获内容，既然如此，那就可以开始使用正则表达式实现简单的 mustache 了。</p><br><h4 id="实现简单的-mustache"><a href="#实现简单的-mustache" class="headerlink" title="实现简单的 mustache"></a>实现简单的 mustache</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁&lt;/h2&gt;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> render = <span class="hljs-function">(<span class="hljs-params">templateStr, data</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> templateStr.replace(<br>    <span class="hljs-regexp">/\&#123;\&#123;(\w+)\&#125;\&#125;/g</span>,<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">match, p1, offset, string</span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> data[p1]; <span class="hljs-comment">// 把正则所匹配的内容替换成return的内容</span><br>    &#125;<br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> domStr = render(templateStr, data);<br><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.container&quot;</span>).innerHTML = domStr;<br></code></pre></td></tr></table></figure><br><h3 id="mustache-底层-tokens-原理"><a href="#mustache-底层-tokens-原理" class="headerlink" title="mustache 底层 tokens 原理"></a>mustache 底层 tokens 原理</h3><p><img src="https://s2.loli.net/2022/03/13/mF5Bg6EGYriKyVz.png" alt="image-20220313094603475"></p><p><strong>mustache 底层主要干两件事</strong>：</p><ul><li>将模板字符串编译为 tokens 形式</li><li>tokens 结合数据，解析为 dom 字符串</li></ul><br><h4 id="tokens-是什么"><a href="#tokens-是什么" class="headerlink" title="tokens 是什么"></a>tokens 是什么</h4><ul><li>tokens 是一个嵌套数组，也可以说是<strong>模板字符串的 JS 表示</strong>。</li><li><strong>tokens</strong>是<strong>抽象语法树</strong>(AST)、<strong>虚拟节点</strong>的开山鼻祖</li></ul><br><p>看下下面的例子，就能明白了</p><hr><p>简单 tokens</p><p><strong>模板字符串</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>tokens</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;h2&gt;我是&quot;</span>],<br>  [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>],<br>  [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;, 年龄为&quot;</span>],<br>  [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>],<br>  [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;岁&lt;/h2&gt;&quot;</span>],<br>];<br></code></pre></td></tr></table></figure><hr><p>简单数组情况下的 tokens</p><p><strong>模板字符串</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;&#123;#arr&#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: &#123;&#123;.&#125;&#125;&quot;</span>&gt;</span>&#123;&#123;.&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>&#123;&#123;/arr&#125;&#125;<br></code></pre></td></tr></table></figure><br><p><strong>tokens</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>    [<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;arr&quot;</span>, [<br>        [<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;&lt;h2 style=&#x27;color: &quot;</span>],<br>        [<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;.&quot;</span>],<br>        [<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;&#x27;&gt;&quot;</span>],<br>        [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>        [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;/h2&gt;&quot;</span>]<br>    ]]<br>]<br></code></pre></td></tr></table></figure><hr><p>嵌套数组情况下的 tokens</p><p><strong>模板字符串</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  &#123;&#123;#arr&#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    &#123;&#123;name&#125;&#125;喜欢的颜色是:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>      &#123;&#123;#colors&#125;&#125;<br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;.&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      &#123;&#123;/colors&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  &#123;&#123;/arr&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>tokens</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>    [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;ul&gt;&quot;</span>],<br>    [<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;arr&quot;</span>, [<br>        [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;li&quot;</span>],<br>        [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>],<br>        [<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;喜欢的颜色是:&lt;ol&gt;&quot;</span>],<br>        [<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;colors&quot;</span>, [<br>            [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;li&gt;&quot;</span>],<br>            [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>            [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;/li&gt;&quot;</span>]<br>        ]],<br>        [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;/ol&gt;&lt;/li&gt;&quot;</span>]<br>    ]],<br>    [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;/ul&gt;&quot;</span>]<br>]<br></code></pre></td></tr></table></figure><br><h4 id="查看-mustache-的-tokens"><a href="#查看-mustache-的-tokens" class="headerlink" title="查看 mustache 的 tokens"></a>查看 mustache 的 tokens</h4><p>进入之前下载的源码文件中，<code> ctrl+f</code>，搜索<code> parseTemplate</code>，到该方法最后把返回值存好并打印</p><p><img src="https://s2.loli.net/2022/03/13/KRfBS2sopDuvXYg.png" alt="image-20220313122831330"></p><br><p>重新去跑<a href="#jump">mustache 的基本使用</a>的代码，就可以在控制台中看到<code> tokens</code></p><p>如循环简单数组</p><p><img src="https://s2.loli.net/2022/03/13/IslPNEDt2xLywkp.png" alt="image-20220313123423702"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义工具函数库(三)</title>
      <link href="/2022/03/22/javascript-toolFunction-3/"/>
      <url>/2022/03/22/javascript-toolFunction-3/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义工具函数库-三"><a href="#自定义工具函数库-三" class="headerlink" title="自定义工具函数库(三)"></a>自定义工具函数库(三)</h1><p>最终仓库：<a href="https://github.com/13535944743/utils">utils: 自定义工具库</a></p><h2 id="1-自定义-instanceof"><a href="#1-自定义-instanceof" class="headerlink" title="1. 自定义 instanceof"></a>1. 自定义 instanceof</h2><blockquote><ul><li>语法: myInstanceOf(obj, Type)</li><li>功能: 判断 obj 是否是 Type 类型的实例</li><li>实现: Type 的原型对象是否是 obj 的原型链上的某个对象, 如果是返回 true, 否则返回 false</li></ul></blockquote><p>之前的笔记：<a href="https://www.clzczh.top/2022/03/16/javascript-prototype/">详解原型链</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 自定义instanceof</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myInstanceof</span>(<span class="hljs-params">obj, fn</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> prototype = fn.prototype; <span class="hljs-comment">// 获取函数的显示原型</span><br><br>  <span class="hljs-keyword">let</span> proto = obj.__proto__; <span class="hljs-comment">// 获取obj的隐式原型对象</span><br><br>  <span class="hljs-comment">// 遍历原型链</span><br>  <span class="hljs-keyword">while</span> (proto) &#123;<br>    <span class="hljs-keyword">if</span> (prototype === proto) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    proto = proto.__proto__;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>对象相关<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./myInstanceof.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;&#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> Person();</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(myInstanceof(p, Person));</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(myInstanceof(p, <span class="hljs-built_in">Object</span>));</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(myInstanceof(Person, <span class="hljs-built_in">Object</span>));</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(myInstanceof(Person, <span class="hljs-built_in">Function</span>));</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(myInstanceof(p, <span class="hljs-built_in">Function</span>));</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-对象-数组拷贝"><a href="#2-对象-数组拷贝" class="headerlink" title="2. 对象/数组拷贝"></a>2. 对象/数组拷贝</h2><h3 id="2-1-浅拷贝与深拷贝"><a href="#2-1-浅拷贝与深拷贝" class="headerlink" title="2.1 浅拷贝与深拷贝"></a>2.1 浅拷贝与深拷贝</h3><p><strong>深拷贝和浅拷贝只针对 Object 和 Array 这样的引用数据类型</strong>。</p><ul><li>浅拷贝：只复制某个对象的引用地址值，而不复制对象本身，新旧对象还是共享同一块内存(<b style="color: red">即修改旧对象引用类型也会修改到新对象</b>)</li><li>深拷贝：新建一个一摸一样的对象，新对象与旧对象不共享内存，所以修改新对象不会跟着修改原对象。</li></ul><h3 id="2-2-浅拷贝"><a href="#2-2-浅拷贝" class="headerlink" title="2.2 浅拷贝"></a>2.2 浅拷贝</h3><h4 id="2-2-1-利用扩展运算符…实现"><a href="#2-2-1-利用扩展运算符…实现" class="headerlink" title="2.2.1 利用扩展运算符…实现"></a>2.2.1 利用扩展运算符…实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 浅拷贝1：利用扩展运算符...实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shallowClone</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; target !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(target)) &#123;<br>      <span class="hljs-keyword">return</span> [...target];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123; ...target &#125;;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> target; <span class="hljs-comment">// 是null或者不是引用数据类型直接返回</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// const obj = &#123; x: &#x27;clz&#x27;, y: &#123; age: 21 &#125; &#125;</span><br><span class="hljs-comment">// const cloneObj = shallowClone(obj)</span><br><span class="hljs-comment">// console.log(cloneObj)</span><br><br><span class="hljs-comment">// obj.y.age = 111</span><br><span class="hljs-comment">// console.log(obj, cloneObj)    // 浅拷贝，修改旧对象的引用类型会同步修改新对象</span><br><br><span class="hljs-comment">// obj.x = &#x27;xxx&#x27;               // 修改的若不是引用数据类型的没有影响</span><br><span class="hljs-comment">// console.log(obj, cloneObj)</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-遍历实现"><a href="#2-2-2-遍历实现" class="headerlink" title="2.2.2 遍历实现"></a>2.2.2 遍历实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 浅拷贝2：遍历实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shallowClone</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; target !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">let</span> ret = <span class="hljs-built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> target) &#123;<br>      <span class="hljs-comment">// 遍历拷贝</span><br>      <span class="hljs-keyword">if</span> (target.hasOwnProperty(key)) &#123;<br>        <span class="hljs-comment">// 不需要考虑原型链上的属性</span><br>        ret[key] = target[key];<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> target; <span class="hljs-comment">// 是null或者不是引用数据类型直接返回</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// const obj = &#123; x: &#x27;clz&#x27;, y: &#123; age: 21 &#125; &#125;</span><br><span class="hljs-comment">// const cloneObj = shallowClone(obj)</span><br><span class="hljs-comment">// console.log(cloneObj)</span><br><br><span class="hljs-comment">// obj.y.age = 111</span><br><span class="hljs-comment">// console.log(obj, cloneObj)    // 浅拷贝，修改旧对象的引用类型会同步修改新对象</span><br><br><span class="hljs-comment">// obj.x = &#x27;xxx&#x27;               // 修改的若不是引用数据类型的没有影响</span><br><span class="hljs-comment">// console.log(obj, cloneObj)</span><br></code></pre></td></tr></table></figure><h3 id="2-3-深拷贝"><a href="#2-3-深拷贝" class="headerlink" title="2.3 深拷贝"></a>2.3 深拷贝</h3><h4 id="2-3-1-JSON-转换"><a href="#2-3-1-JSON-转换" class="headerlink" title="2.3.1 JSON 转换"></a>2.3.1 JSON 转换</h4><p><b style="color: red">不能拷贝对象方法</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 深拷贝1: 通过JSON转换</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(target); <span class="hljs-comment">// 转换为字符串</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.parse(str); <span class="hljs-comment">// 再把字符串转换为对象</span><br>&#125;<br><br><span class="hljs-comment">// const obj = &#123; x: &#x27;clz&#x27;, y: &#123; age: 21 &#125;, z: &#123; name: &#x27;clz&#x27; &#125;, f: function () &#123; &#125; &#125;</span><br><span class="hljs-comment">// const cloneObj = deepClone(obj)</span><br><span class="hljs-comment">// console.log(cloneObj)</span><br><br><span class="hljs-comment">// // obj.y.z = obj.z</span><br><span class="hljs-comment">// // obj.z.y = obj.y  // 循环引用</span><br><br><span class="hljs-comment">// obj.y.age = 111</span><br><span class="hljs-comment">// console.log(obj, cloneObj)</span><br></code></pre></td></tr></table></figure><h4 id="2-3-2-递归"><a href="#2-3-2-递归" class="headerlink" title="2.3.2 递归"></a>2.3.2 递归</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 深拷贝2: 通过递归实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; target !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">const</span> ret = <span class="hljs-built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> target) &#123;<br>      <span class="hljs-keyword">if</span> (target.hasOwnProperty(key)) &#123;<br>        ret[key] = deepClone(target[key]); <span class="hljs-comment">// 递归调用函数实现深拷贝，直接赋值的话则只是浅拷贝，因为是引用数据类型时只是复制了引用地址而已</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> target;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">x</span>: <span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-attr">y</span>: &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;, <span class="hljs-attr">z</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span> &#125;, <span class="hljs-attr">f</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125; &#125;;<br><span class="hljs-keyword">const</span> cloneObj = deepClone(obj);<br><br>obj.y.age = <span class="hljs-number">111</span>;<br><span class="hljs-built_in">console</span>.log(obj, cloneObj);<br></code></pre></td></tr></table></figure><p>开开心心收工？有点问题，如果对象中有循环引用，即”你中有我，我中有你”的话，就会导致形成死循环，会导致无法跑出结果，直到超出最大调用堆栈大小</p><p>怎么解决这个 bug 呢？使用 map 来存取拷贝过的数据，每次调用函数时判断有无拷贝过，有的话，直接返回之前拷贝的数据就行了。而且，这里还有个有意思的地方：<b style="color: red">递归调用函数需要共享变量时，可以通过添加一个参数，一直传同一个变量</b></p><p>改进后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 深拷贝2: 通过递归实现：使用map来存取拷贝过的数据，每次调用函数时判断有无拷贝过，有的话，直接返回之前拷贝的数据就行了。</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">target, map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>()</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; target !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">const</span> cache = map.get(target);<br>    <span class="hljs-keyword">if</span> (cache) &#123;<br>      <span class="hljs-keyword">return</span> cache; <span class="hljs-comment">// 有拷贝过的话，直接返回之前拷贝过的数据</span><br>    &#125;<br><br>    <span class="hljs-keyword">const</span> ret = <span class="hljs-built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;<br><br>    map.set(target, ret); <span class="hljs-comment">// 键为拷贝的目标，值为拷贝的结果</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> target) &#123;<br>      <span class="hljs-keyword">if</span> (target.hasOwnProperty(key)) &#123;<br>        ret[key] = deepClone(target[key], map); <span class="hljs-comment">// 递归调用函数实现深拷贝，直接赋值的话则只是浅拷贝，因为是引用数据类型时只是复制了引用地址而已</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> target;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// const obj = &#123; x: &#x27;clz&#x27;, y: &#123; age: 21 &#125;, z: &#123; name: &#x27;clz&#x27; &#125;, f: function () &#123; &#125; &#125;</span><br><br><span class="hljs-comment">// obj.y.z = obj.z</span><br><span class="hljs-comment">// obj.z.y = obj.y  // 循环引用可能会造成死循环</span><br><br><span class="hljs-comment">// const cloneObj = deepClone(obj)</span><br><br><span class="hljs-comment">// obj.y.age = 111</span><br><span class="hljs-comment">// console.log(obj, cloneObj)</span><br></code></pre></td></tr></table></figure><p><strong>优化遍历性能</strong>：</p><blockquote><ul><li>数组: while | for | forEach() 优于 for-in | keys()&amp;forEach()</li><li>对象: for-in 与 keys()&amp;forEach() 差不多</li></ul></blockquote><p>变更部分：分成数组和对象分别处理，使用更优的遍历方式(<strong>个人看不出有什么大的区别</strong>，先记一下)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(target)) &#123;<br>  target.forEach(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    ret[index] = deepClone(item, map);<br>  &#125;);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-built_in">Object</span>.keys(target).forEach(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>    ret[key] = deepClone(target[key], map);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-事件"><a href="#3-事件" class="headerlink" title="3. 事件"></a>3. 事件</h2><p><a href="https://clz.vercel.app/2021/09/09/javascript-Event/">JavaScript 事件回顾</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.outter</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.inner</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: auto;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: blue;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;outter&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> outter = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.outter&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> inner = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.inner&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      outter.addEventListener(</span><br><span class="javascript">        <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;捕获 outter&quot;</span>);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-literal">true</span></span><br><span class="javascript">      ); <span class="hljs-comment">// true表示在事件捕获阶段， false或不传参表示在事件冒泡阶段</span></span><br><span class="javascript"></span><br><span class="javascript">      inner.addEventListener(</span><br><span class="javascript">        <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;捕获 inner&quot;</span>);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-literal">true</span></span><br><span class="javascript">      );</span><br><span class="javascript"></span><br><span class="javascript">      outter.addEventListener(</span><br><span class="javascript">        <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;冒泡 outter&quot;</span>);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-literal">false</span></span><br><span class="javascript">      ); <span class="hljs-comment">// true表示在事件捕获阶段， false或不传参表示在事件冒泡阶段</span></span><br><span class="javascript"></span><br><span class="javascript">      inner.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;冒泡 inner&quot;</span>);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-1-自定义事件委托函数"><a href="#3-1-自定义事件委托函数" class="headerlink" title="3.1 自定义事件委托函数"></a>3.1 自定义事件委托函数</h3><p>自定义事件委托函数关键：获取真正触发事件的目标元素，若和子元素相匹配，则使用 call 调用回调函数(this 指向，变更为 target)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addEventListener</span>(<span class="hljs-params">el, type, fn, selector</span>) </span>&#123;<br>  <span class="hljs-comment">// selector是子元素</span><br>  el = <span class="hljs-built_in">document</span>.querySelector(el);<br><br>  <span class="hljs-keyword">if</span> (!selector) &#123;<br>    el.addEventListener(type, fn); <span class="hljs-comment">// 没有传递子元素的选择器，则是普通的给el元素绑定事件</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    el.addEventListener(type, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>      <span class="hljs-keyword">const</span> target = e.target; <span class="hljs-comment">// 获取真正触发事件的目标元素</span><br><br>      <span class="hljs-keyword">if</span> (target.matches(selector)) &#123;<br>        <span class="hljs-comment">// 判断选择器与目标元素是否符合</span><br>        fn.call(target, e);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;items&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>01<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>02<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>03<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>04<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>05<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>06<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  addEventListener(</span><br><span class="javascript">    <span class="hljs-string">&quot;#items&quot;</span>,</span><br><span class="javascript">    <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.style.color = <span class="hljs-string">&quot;red&quot;</span>;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-string">&quot;li&quot;</span></span><br><span class="javascript">  );</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-手写事件总线"><a href="#3-2-手写事件总线" class="headerlink" title="3.2 手写事件总线"></a>3.2 手写事件总线</h3><blockquote><p>on(eventName, listener): 绑定事件监听<br>emit(eventName, data): 分发事件<br>off(eventName): 解绑指定事件名的事件监听, 如果没有指定解绑所有</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 事件总线</span><br><span class="hljs-comment">// on(eventName, listener): 绑定事件监听</span><br><span class="hljs-comment">// emit(eventName, data): 分发事件</span><br><span class="hljs-comment">// off(eventName): 解绑指定事件名的事件监听, 如果没有指定解绑所有</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventBus</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.callbacks = &#123;&#125;;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">on</span>(<span class="hljs-params">eventName, fn</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.callbacks[eventName]) &#123;<br>      <span class="hljs-built_in">this</span>.callbacks[eventName].push(fn);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks[eventName] = [fn];<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">emit</span>(<span class="hljs-params">eventName, data</span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> callbacks = <span class="hljs-built_in">this</span>.callbacks[eventName];<br>    <span class="hljs-keyword">if</span> (callbacks &amp;&amp; <span class="hljs-built_in">this</span>.callbacks[eventName].length !== <span class="hljs-number">0</span>) &#123;<br>      callbacks.forEach(<span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> &#123;<br>        callback(data);<br>      &#125;);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">off</span>(<span class="hljs-params">eventName</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (eventName) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.callbacks[eventName]) &#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.callbacks[eventName];<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks = &#123;&#125;;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> eventBus = <span class="hljs-keyword">new</span> EventBus();<br><br>eventBus.on(<span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>登录了`</span>);<br>&#125;);<br><br>eventBus.on(<span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>又登录了`</span>);<br>&#125;);<br><br>eventBus.on(<span class="hljs-string">&quot;logout&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>退出登录了`</span>);<br>&#125;);<br><br><span class="hljs-comment">// eventBus.off(&#x27;login&#x27;)</span><br><span class="hljs-comment">// console.log(eventBus)</span><br><br>eventBus.emit(<span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-string">&quot;赤蓝紫&quot;</span>);<br>eventBus.emit(<span class="hljs-string">&quot;logout&quot;</span>, <span class="hljs-string">&quot;赤蓝紫&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="4-自定义发布订阅"><a href="#4-自定义发布订阅" class="headerlink" title="4. 自定义发布订阅"></a>4. 自定义发布订阅</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 自定义消息订阅与发布</span><br><span class="hljs-comment">// PubSub: 包含所有功能的订阅/发布消息的管理者</span><br><span class="hljs-comment">// PubSub.subscribe(msg, subscriber): 订阅消息: 指定消息名和订阅者回调函数</span><br><span class="hljs-comment">// PubSub.publish(msg, data): 发布消息: 指定消息名和数据</span><br><span class="hljs-comment">// PubSub.unsubscribe(flag): 取消订阅: 根据标识取消某个或某些消息的订阅</span><br><span class="hljs-comment">//  1).没有传值, flag为undefined：清空全部订阅</span><br><span class="hljs-comment">//  2).传入token字符串: 清除唯一订阅</span><br><span class="hljs-comment">//  3).msgName字符串: 清除指定消息的全部订阅</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PubSub</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.callbacks = &#123;&#125;;<br>    <span class="hljs-built_in">this</span>.id = <span class="hljs-number">0</span>; <span class="hljs-comment">// 订阅唯一标识</span><br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">subscribe</span>(<span class="hljs-params">msg, subscriber</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> token = <span class="hljs-string">&quot;token_&quot;</span> + ++<span class="hljs-built_in">this</span>.id;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.callbacks[msg]) &#123;<br>      <span class="hljs-comment">// 有过此消息的另一个订阅</span><br>      <span class="hljs-built_in">this</span>.callbacks[msg][token] = subscriber;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks[msg] = &#123;<br>        [token]: subscriber,<br>      &#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> token; <span class="hljs-comment">// 返回token。用于取消唯一订阅</span><br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">publish</span>(<span class="hljs-params">msg, data</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> callbacksOfmsg = <span class="hljs-built_in">this</span>.callbacks[msg];<br>    <span class="hljs-keyword">if</span> (callbacksOfmsg) &#123;<br>      <span class="hljs-comment">// 有此消息的订阅</span><br>      <span class="hljs-built_in">Object</span>.values(callbacksOfmsg).forEach(<span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> &#123;<br>        callback(data);<br>      &#125;);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">unsubscribe</span>(<span class="hljs-params">flag</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (flag === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 1. 清空全部订阅</span><br>      <span class="hljs-built_in">this</span>.callbacks = &#123;&#125;;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> flag === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>      <span class="hljs-keyword">if</span> (flag.indexOf(<span class="hljs-string">&quot;token&quot;</span>) === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 2. 取消唯一订阅</span><br>        <span class="hljs-keyword">const</span> callbacks = <span class="hljs-built_in">Object</span>.values(<span class="hljs-built_in">this</span>.callbacks).find(<span class="hljs-function">(<span class="hljs-params">callbacksOfmsg</span>) =&gt;</span><br>          callbacksOfmsg.hasOwnProperty(flag)<br>        ); <span class="hljs-comment">// 找到flag对应的callbacks：callbacks: &#123;pay: &#123;token_1: f1, token_2: f2&#125;&#125;</span><br>        <span class="hljs-keyword">delete</span> callbacks[flag];<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 3. 取消指定消息的全部订阅</span><br>        <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.callbacks[flag];<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;如果传入参数, 必须是字符串类型&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> pubsub = <span class="hljs-keyword">new</span> PubSub();<br><br><span class="hljs-keyword">let</span> pid1 = pubsub.subscribe(<span class="hljs-string">&quot;pay&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;商家接单: &quot;</span>, data);<br>&#125;);<br><span class="hljs-keyword">let</span> pid2 = pubsub.subscribe(<span class="hljs-string">&quot;pay&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;骑手接单&quot;</span>);<br>&#125;);<br><span class="hljs-keyword">let</span> pid3 = pubsub.subscribe(<span class="hljs-string">&quot;feedback&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`评价: <span class="hljs-subst">$&#123;data.title&#125;</span><span class="hljs-subst">$&#123;data.feedback&#125;</span>`</span>);<br>&#125;);<br><br><span class="hljs-comment">// console.log(pubsub)</span><br><br>pubsub.publish(<span class="hljs-string">&quot;pay&quot;</span>, &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;炸鸡&quot;</span>,<br>  <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;预定11:11起送&quot;</span>,<br>&#125;);<br><br>pubsub.publish(<span class="hljs-string">&quot;feedback&quot;</span>, &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;炸鸡&quot;</span>,<br>  <span class="hljs-attr">feedback</span>: <span class="hljs-string">&quot;还好&quot;</span>,<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;%c%s&quot;</span>, <span class="hljs-string">&quot;color: blue;font-size: 20px&quot;</span>, <span class="hljs-string">&quot;取消订阅&quot;</span>);<br><br><span class="hljs-comment">// // 1. 取消全部订阅</span><br><span class="hljs-comment">// pubsub.unsubscribe()</span><br><span class="hljs-comment">// console.log(pubsub)</span><br><br><span class="hljs-comment">// // 2. 取消唯一订阅</span><br><span class="hljs-comment">// pubsub.unsubscribe(pid1)</span><br><span class="hljs-comment">// console.log(pubsub)</span><br><br><span class="hljs-comment">// 3. 取消指定消息的订阅</span><br>pubsub.unsubscribe(<span class="hljs-string">&quot;pay&quot;</span>);<br><span class="hljs-built_in">console</span>.log(pubsub);<br></code></pre></td></tr></table></figure><h2 id="5-封装-axios"><a href="#5-封装-axios" class="headerlink" title="5. 封装 axios"></a>5. 封装 axios</h2><p>详见：<a href="https://www.clzczh.top/2022/03/10/axios-1/">axios 笔记</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 封装axios</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">axios</span>(<span class="hljs-params">&#123; url, method = <span class="hljs-string">&quot;GET&quot;</span>, params = &#123;&#125;, data = &#123;&#125; &#125;</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    method = method.toUpperCase();<br><br>    <span class="hljs-keyword">let</span> queryString = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-built_in">Object</span>.keys(params).forEach(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      queryString += <span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;params[key]&#125;</span>&amp;`</span>; <span class="hljs-comment">// 查询参数以key1=value1&amp;key2=value2的形式连接起来</span><br>    &#125;);<br><br>    queryString = queryString.slice(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 去掉后面可能出现的&amp;</span><br>    url += <span class="hljs-string">`?<span class="hljs-subst">$&#123;queryString&#125;</span>`</span>;<br><br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    xhr.open(method, url);<br>    <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&quot;GET&quot;</span>) &#123;<br>      xhr.send();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      xhr.setRequestHeader(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>      xhr.send(<span class="hljs-built_in">JSON</span>.stringify(data)); <span class="hljs-comment">// 只能发送字符串形式的数据</span><br>    &#125;<br><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123; status &#125; = xhr;<br>        <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) &#123;<br>          <span class="hljs-keyword">const</span> response = &#123;<br>            status,<br>            <span class="hljs-attr">data</span>: <span class="hljs-built_in">JSON</span>.parse(xhr.response),<br>          &#125;;<br><br>          resolve(response);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          reject(<span class="hljs-string">`<span class="hljs-subst">$&#123;status&#125;</span>`</span>);<br>        &#125;<br>      &#125;<br>    &#125;;<br>  &#125;);<br>&#125;<br><br>axios.get = <span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(<span class="hljs-built_in">Object</span>.assign(options, &#123; url, <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span> &#125;)); <span class="hljs-comment">// 把methods和url合并到options中去</span><br>&#125;;<br><br>axios.post = <span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(<span class="hljs-built_in">Object</span>.assign(options, &#123; url, <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span> &#125;));<br>&#125;;<br><br>axios.put = <span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(<span class="hljs-built_in">Object</span>.assign(options, &#123; url, <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;PUT&quot;</span> &#125;));<br>&#125;;<br><br>axios.delete = <span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(<span class="hljs-built_in">Object</span>.assign(options, &#123; url, <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;DELETE&quot;</span> &#125;));<br>&#125;;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: data1 &#125; = <span class="hljs-keyword">await</span> axios(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://api.apiopen.top/getJoke&quot;</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>      <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">a</span>: <span class="hljs-number">10</span>,<br>        <span class="hljs-attr">b</span>: <span class="hljs-number">15</span>,<br>      &#125;,<br>    &#125;);<br>    <span class="hljs-built_in">console</span>.log(data1);<br><br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: data2 &#125; = <span class="hljs-keyword">await</span> axios.post(<br>      <span class="hljs-string">&quot;https://api.apiopen.top/getJoke&quot;</span>,<br>      &#123;<br>        <span class="hljs-attr">params</span>: &#123;<br>          <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>        &#125;,<br>      &#125;<br>    );<br>    <span class="hljs-built_in">console</span>.log(data2);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>  &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义工具函数库(二)   数组相关</title>
      <link href="/2022/03/20/javascript-toolFunction-2/"/>
      <url>/2022/03/20/javascript-toolFunction-2/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义工具函数库-二-数组相关"><a href="#自定义工具函数库-二-数组相关" class="headerlink" title="自定义工具函数库(二) 数组相关"></a>自定义工具函数库(二) 数组相关</h1><p>最终仓库：<a href="https://github.com/13535944743/utils">utils: 自定义工具库</a></p><p>以前的笔记：<a href="https://www.clzczh.top/2021/11/14/js-array-methods/">JS 数组常用的方法</a></p><h2 id="1-数组声明式系列方法"><a href="#1-数组声明式系列方法" class="headerlink" title="1. 数组声明式系列方法"></a>1. 数组声明式系列方法</h2><h3 id="1-1-map-函数封装实现"><a href="#1-1-map-函数封装实现" class="headerlink" title="1.1 map 函数封装实现"></a>1.1 map 函数封装实现</h3><blockquote><p><code> map()</code>方法创建一个新数组，其结果是该数组中的每个元素各自调用一次提供的函数后的返回值</p></blockquote><p>循环，数组的每个元素都调用一次函数，并把每次循环得到的返回值都存好，循环结束后，把存好的数组返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// map函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">map</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = [];<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    ret.push(callback(arr[i], i));<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>map函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./map.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result = map(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(index);</span><br><span class="javascript">        <span class="hljs-keyword">return</span> item + <span class="hljs-number">1</span>;</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.map((item, index) =&gt; &#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//   console.log(index)</span></span><br><span class="javascript">      <span class="hljs-comment">//   return item + 1</span></span><br><span class="javascript">      <span class="hljs-comment">// &#125;)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-reduce-函数"><a href="#1-2-reduce-函数" class="headerlink" title="1.2 reduce 函数"></a>1.2 reduce 函数</h3><blockquote><p>对数组中的每个元素执行一个由您提供的<strong>reducer</strong>函数(升序执行)，将其结果汇总为单个返回值。</p></blockquote><p>循环遍历数组，并每次都把调用函数得到的值，重新赋值给<code> ret</code>变量，然后作为下一次调用函数时的第一个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// reduce函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduce</span>(<span class="hljs-params">arr, callback, initValue</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = initValue;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>    ret = callback(ret, item); <span class="hljs-comment">// 每次调用都把最新的值重新赋给ret</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>reduce函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./reduce.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result = reduce(</span><br><span class="javascript">        arr,</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">preValue, curValue</span>) =&gt;</span> preValue + curValue,</span><br><span class="javascript">        <span class="hljs-number">10</span></span><br><span class="javascript">      );</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.reduce(</span></span><br><span class="javascript">      <span class="hljs-comment">//   (preValue, curValue) =&gt; preValue + curValue,</span></span><br><span class="javascript">      <span class="hljs-comment">//   0)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-3-filter-函数"><a href="#1-3-filter-函数" class="headerlink" title="1.3 filter 函数"></a>1.3 filter 函数</h3><blockquote><p>创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p></blockquote><p>循环，如果以该数组元素作为参数调用函数的返回值为<code> true</code>，则存好。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// filter函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (callback(arr[i], i)) &#123;<br>      ret.push(arr[i]);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>filter函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./filter.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result = filter(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> index % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.filter(item =&gt; item &gt;= 3)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-4-find-函数"><a href="#1-4-find-函数" class="headerlink" title="1.4 find 函数"></a>1.4 find 函数</h3><blockquote><p>返回数组中满足提供的测试函数的第一个元素的值。否则返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// find函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (callback(arr[i], i)) &#123;<br>      <span class="hljs-keyword">return</span> arr[i];<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>find函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./find.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result1 = find(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt;= <span class="hljs-number">3</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result1);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result2 = find(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt;= <span class="hljs-number">10</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result2);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.find((item, index) =&gt; item &gt;= 3)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-5-findIndex-函数"><a href="#1-5-findIndex-函数" class="headerlink" title="1.5 findIndex 函数"></a>1.5 findIndex 函数</h3><blockquote><p>返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。若没有找到对应元素则返回-1。</p></blockquote><p>和 find()函数类似，只不过是返回满足条件的第一个元素的索引，以及没有满足的是返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// findIndex函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findIndex</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (callback(arr[i], i)) &#123;<br>      <span class="hljs-keyword">return</span> i;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>findIndex函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./findIndex.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result1 = findIndex(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt;= <span class="hljs-number">3</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result1);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result2 = findIndex(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt;= <span class="hljs-number">10</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result2);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.findIndex((item, index) =&gt; item &gt;= 10)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-6-every-函数"><a href="#1-6-every-函数" class="headerlink" title="1.6 every 函数"></a>1.6 every 函数</h3><blockquote><p>测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// every函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">every</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (!callback(arr[i], i)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>every函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./every.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result1 = every(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt;= <span class="hljs-number">3</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result1);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result2 = every(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &lt; <span class="hljs-number">10</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result2);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.every((item, index) =&gt; item &lt; 10)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-7-some-函数"><a href="#1-7-some-函数" class="headerlink" title="1.7 some 函数"></a>1.7 some 函数</h3><blockquote><p>测试数组中是不是至少有 1 个元素通过了被提供的函数测试。它返回的是一个 Boolean 类型的值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// some函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">some</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (callback(arr[i], i)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>some函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./some.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result1 = some(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &lt; <span class="hljs-number">3</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result1);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result2 = some(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &lt; <span class="hljs-number">0</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result2);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.some((item, index) =&gt; item &lt; 3)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-数组去重"><a href="#2-数组去重" class="headerlink" title="2. 数组去重"></a>2. 数组去重</h2><h3 id="2-1-forEach-indexOf"><a href="#2-1-forEach-indexOf" class="headerlink" title="2.1 forEach() + indexOf()"></a>2.1 forEach() + indexOf()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组去重方法1：forEach() + indexOf()</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ret = [];<br><br>  arr.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (ret.indexOf(item) === -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// 如果数组中不存在当前值，则存进去</span><br>      ret.push(item);<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-forEach-容器-对象"><a href="#2-2-forEach-容器-对象" class="headerlink" title="2.2 forEach() + 容器(对象)"></a>2.2 forEach() + 容器(对象)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组去重方法2：forEach() + 容器(对象)</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ret = [];<br>  <span class="hljs-keyword">const</span> obj = &#123;&#125;; <span class="hljs-comment">// 键是数组之前出现过的元素，值是是否有出现过。</span><br>  <span class="hljs-comment">// 出现过值是true，没出现过只是undefined</span><br><br>  arr.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (obj[item]) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    obj[item] = <span class="hljs-literal">true</span>;<br>    ret.push(item);<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-Set-Array-from-或-扩展运算符-…"><a href="#2-3-Set-Array-from-或-扩展运算符-…" class="headerlink" title="2.3 Set + Array.from() 或 扩展运算符(…)"></a>2.3 Set + Array.from() 或 扩展运算符(…)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组去重方法3：Set + Array.from() 或 扩展运算符(...)</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr);<br>  <span class="hljs-comment">// return Array.from(set)      // Array.from()可以通过可迭代对象(包括数组、Set等)创建一个新的数组</span><br><br>  <span class="hljs-keyword">return</span> [...set]; <span class="hljs-comment">// 使用ES6的扩展运算符`...`</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-concat-函数"><a href="#3-concat-函数" class="headerlink" title="3. concat 函数"></a>3. concat 函数</h2><blockquote><p>用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// concat函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">concat</span>(<span class="hljs-params">arr, ...args</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ret = [...arr];<br><br>  args.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(item)) &#123;<br>      <span class="hljs-comment">// 如果是数组，则通过扩展运算符把数组中的元素push到新数组中</span><br>      ret.push(...item);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ret.push(item);<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>concat函数实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./concat.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 自定义函数</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result = concat(arr, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>]);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 内置方法</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.concat([4, 5, 6], 7, 8)</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-slice-数组切片"><a href="#4-slice-数组切片" class="headerlink" title="4. slice 数组切片"></a>4. slice 数组切片</h2><blockquote><p>返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的<strong>浅拷贝</strong>（包括 <code>begin</code>，不包括<code>end</code>）。原始数组不会被改变。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// slice函数实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">slice</span>(<span class="hljs-params">arr, begin, end</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (arr.length === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> [];<br>  &#125;<br><br>  begin = begin || <span class="hljs-number">0</span>; <span class="hljs-comment">// 如果begin没有传，则从0开始切</span><br>  <span class="hljs-keyword">if</span> (begin &gt;= arr.length) &#123;<br>    <span class="hljs-keyword">return</span> [];<br>  &#125;<br><br>  end = end || arr.length;<br><br>  <span class="hljs-keyword">const</span> ret = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= begin &amp;&amp; i &lt; end) &#123;<br>      ret.push(arr[i]);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>slice函数实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./slice.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>];</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 自定义函数</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result1 = slice(arr, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result1);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result2 = slice(arr);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result2);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result3 = slice(arr, <span class="hljs-number">2</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result3);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result4 = slice(arr, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result4);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 内置方法</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.slice(2, 6) // 截取索引在[2， 6)范围内的元素</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-数组扁平化"><a href="#5-数组扁平化" class="headerlink" title="5. 数组扁平化"></a>5. 数组扁平化</h2><p>数组扁平化是指将一个多维数组变为一维数组</p><p><strong>内置方法 flat</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [[<span class="hljs-number">5</span>], <span class="hljs-number">6</span>], <span class="hljs-number">7</span>];<br><br><span class="hljs-keyword">const</span> result = arr.flat(<span class="hljs-literal">Infinity</span>);<br><span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">//  [1, 2, 3, 4, 5, 6, 7]</span><br></code></pre></td></tr></table></figure><h3 id="5-1-递归"><a href="#5-1-递归" class="headerlink" title="5.1 递归"></a>5.1 递归</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组扁平化(1): 通过concat和forEach实现，遇到多维数组时，通过递归调用flatten实现扁平化</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flatten</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = [];<br><br>  arr.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(item)) &#123;<br>      ret = ret.concat(flatten(item)); <span class="hljs-comment">// 如果是数组，继续打平</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ret = ret.concat(item);<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-扩展运算符…"><a href="#5-2-扩展运算符…" class="headerlink" title="5.2 扩展运算符…"></a>5.2 扩展运算符…</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组扁平化(2): 通过concat函数和扩展运算符...实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flatten</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = [...arr];<br><br>  <span class="hljs-keyword">while</span> (ret.some(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-built_in">Array</span>.isArray(item))) &#123;<br>    ret = [].concat(...ret);<br>    <span class="hljs-comment">// 举例：arr = [1, 2, 3, 4, [5, 6]]</span><br>    <span class="hljs-comment">// 则ret = [].concat(1, 2, 3, 4, [5, 6]) = [1, 2, 3, 4, 5, 6]</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="5-3-toString-join-split-map"><a href="#5-3-toString-join-split-map" class="headerlink" title="5.3 toString / join + split + map"></a>5.3 toString / join + split + map</h3><p>先通过<code> toString</code>或<code> join</code>把数组转成字符串，在通过<code> split</code>转换成数组，最后还需要通过<code> map</code>函数，把数组的每一个元素变回数字。(不考虑其他类型的数组的话)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flatten</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> arr<br>    .toString()<br>    .split(<span class="hljs-string">&quot;,&quot;</span>)<br>    .map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-built_in">Number</span>(item));<br>  <span class="hljs-comment">// return arr.join().split(&#x27;,&#x27;).map(item =&gt; Number(item))</span><br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="5-4-reduce"><a href="#5-4-reduce" class="headerlink" title="5.4 reduce"></a>5.4 reduce</h3><p>遍历数组，如果是数组，则递归遍历，否则，通过<code> concat</code>拼接起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flatten</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> arr.reduce(<span class="hljs-function">(<span class="hljs-params">pre, cur</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> pre.concat(<span class="hljs-built_in">Array</span>.isArray(cur) ? flatten(cur) : cur);<br>  &#125;, []);<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="6-数组分块"><a href="#6-数组分块" class="headerlink" title="6. 数组分块"></a>6. 数组分块</h2><blockquote><p>语法：<code> chunk(array, size)</code></p><p>功能：将数组拆分成多个 size 大小长度的区块，每个区块组成小数组，整体组成一个二维数组</p><p>例子：[1, 2, 3, 4, 5, 6]调用 chunk(arr, 4) =&gt; [[1, 2, 3, 4], [5, 6]]</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组分块：这里用了比较巧妙的方法。暂存分块好的数组为0时，把它push到ret数组中，然后通过数组的引用性质，给temp数组push值，从而也改变ret数组的值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">chunk</span>(<span class="hljs-params">arr, size = <span class="hljs-number">1</span></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = [];<br>  <span class="hljs-keyword">let</span> temp = []; <span class="hljs-comment">// 暂存分块好的数组，再push到ret中</span><br><br>  arr.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (temp.length === <span class="hljs-number">0</span>) &#123;<br>      ret.push(temp);<br>      <span class="hljs-comment">// console.log(1, ret)   // 如需测试，请在node环境测试</span><br>    &#125;<br><br>    temp.push(item);<br>    <span class="hljs-comment">// console.log(2, ret)</span><br><br>    <span class="hljs-keyword">if</span> (temp.length === size) &#123;<br>      temp = [];<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">// console.log(chunk([1, 2, 3, 4, 5, 6, 7], 3))</span><br></code></pre></td></tr></table></figure><h2 id="7-数组差集"><a href="#7-数组差集" class="headerlink" title="7. 数组差集"></a>7. 数组差集</h2><blockquote><ul><li>语法: difference(arr1, arr2)</li><li>功能: 得到当前数组中所有不在 arr 中的元素组成的数组(不改变原数组)</li><li>例子: difference([1,3,5,7], [5, 8]) ==&gt; [1, 3, 7]</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组差集</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">difference</span>(<span class="hljs-params">arr1, arr2 = []</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (arr1.length === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> [];<br>  &#125;<br>  <span class="hljs-keyword">if</span> (arr2.length === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> arr1.slice();<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> ret = arr1.filter(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> !arr2.includes(item));<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">// console.log(difference([1, 2, 3, 4], [3, 4, 5]))</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义工具函数库(一)  函数相关</title>
      <link href="/2022/03/19/javascript-toolFunction-1/"/>
      <url>/2022/03/19/javascript-toolFunction-1/</url>
      
        <content type="html"><![CDATA[<h2 id="自定义工具函数库-一-函数相关"><a href="#自定义工具函数库-一-函数相关" class="headerlink" title="自定义工具函数库(一) 函数相关"></a>自定义工具函数库(一) 函数相关</h2><p>最终仓库：<a href="https://github.com/13535944743/utils">utils: 自定义工具库</a></p><p>之前在哔哩哔哩看的视频的笔记。整理了一下。</p><h3 id="1-1-call-函数封装实现"><a href="#1-1-call-函数封装实现" class="headerlink" title="1.1 call 函数封装实现"></a>1.1 call 函数封装实现</h3><p>原理：为传入的 obj 添加临时方法，然后去调用这个临时方法，这样子，这个方法的<code>this</code>就会指向调用它的对象了，最后还需要把临时方法删除掉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// call函数封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">call</span>(<span class="hljs-params">fn, obj, ...args</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (obj === <span class="hljs-literal">undefined</span> || obj === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 如果call函数的第二个参数undefined(包括不传参)或null时，让obj等于全局对象</span><br>    obj = globalThis; <span class="hljs-comment">// 浏览器下globalThis是window，而node环境下则是global</span><br>  &#125;<br><br>  <span class="hljs-comment">// 为obj添加临时方法</span><br>  obj.temp = fn;<br><br>  <span class="hljs-comment">// 调用temp方法，此时方法中的this就是指向obj</span><br>  <span class="hljs-keyword">let</span> result = obj.temp(...args);<br><br>  <span class="hljs-comment">// 删除temp方法</span><br>  <span class="hljs-keyword">delete</span> obj.temp;<br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>  <span class="hljs-keyword">return</span> a + b + <span class="hljs-built_in">this</span>.c;<br>&#125;<br><br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>,<br>&#125;;<br><br><span class="hljs-comment">// 添加全局属性</span><br><span class="hljs-built_in">window</span>.c = <span class="hljs-number">100</span>;<br><br><span class="hljs-built_in">console</span>.log(call(add, obj, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">// 6：1 + 2 + obj.c，此时add函数中的this是obj</span><br><span class="hljs-built_in">console</span>.log(obj); <span class="hljs-comment">// &#123;c: 3&#125;</span><br><br><span class="hljs-built_in">console</span>.log(call(add, <span class="hljs-literal">null</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">// 103：1 + 2 + window.c，此时add函数中的this是window</span><br></code></pre></td></tr></table></figure><br><h3 id="1-2-apply-函数"><a href="#1-2-apply-函数" class="headerlink" title="1.2 apply 函数"></a>1.2 apply 函数</h3><p>原理：和<code> call</code>函数一样，就只是第三个参数是数组，而不是多个参数而已，所以不需要使用扩展运算符<code> ...</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// apply函数封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">apply</span>(<span class="hljs-params">fn, obj, args</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (obj === <span class="hljs-literal">undefined</span> || obj === <span class="hljs-literal">null</span>) &#123;<br>    obj = globalThis;<br>  &#125;<br>  obj.temp = fn;<br><br>  <span class="hljs-keyword">let</span> result = obj.temp(...args);<br><br>  <span class="hljs-keyword">delete</span> obj.temp;<br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="1-3-bind-函数"><a href="#1-3-bind-函数" class="headerlink" title="1.3 bind 函数"></a>1.3 bind 函数</h3><p>需要依赖自定义 call 函数或内置 call 函数</p><p>这个函数功能和<code> call</code>函数一样，所以可以调用内置的<code> call</code>函数来实现，当然也可以调用自定义版本的。</p><p>不同的是，返回是一个函数，而不是立即调用。而且<strong>在调用<code> bind</code>时可以传参，调用返回的函数也可以传参，只是如果传两次参数，则只有第一次的参数会起作用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// bind函数封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bind</span>(<span class="hljs-params">fn, obj, ...args1</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args2</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> fn.call(obj, ...args1, ...args2); <span class="hljs-comment">// 如果传两次参数，则只有第一次的参数会起作用。如果只传一次，则那一次的参数就会起作用</span><br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./bind.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>);</span><br><span class="javascript">        <span class="hljs-keyword">return</span> a + b + <span class="hljs-built_in">this</span>.c;</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> obj = &#123;</span><br><span class="javascript">        <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 添加全局属性</span></span><br><span class="javascript">      <span class="hljs-built_in">window</span>.c = <span class="hljs-number">100</span>;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> fn1 = bind(add, obj, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(fn1());</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> fn2 = bind(add, obj, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(fn2(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>));</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> fn3 = bind(add, obj);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(fn3(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>));</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> fn4 = bind(add, <span class="hljs-literal">null</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(fn4());</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 内置版本</span></span><br><span class="javascript">      <span class="hljs-comment">// const fn1 = add.bind(obj, 3, 4)</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(fn1())</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// const fn2 = add.bind(obj, 3, 4)</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(fn2(5, 6))</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// const fn3 = add.bind(obj)</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(fn3(5, 6))</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// const fn4 = add.bind(null, 3, 4)</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(fn4())</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="1-4-函数节流和函数防抖"><a href="#1-4-函数节流和函数防抖" class="headerlink" title="1.4 函数节流和函数防抖"></a>1.4 函数节流和函数防抖</h3><ul><li>事件频繁触发可能造成问题<ul><li>一些浏览器事件如<code> window.onresize</code>、<code> window.mousedown</code>等，触发频率高，会造成界面卡顿</li><li>向后台发送请求，频繁触发的话，对服务器会造成不必要的麻烦</li></ul></li></ul><p>解决方案：通过函数节流和函数防抖限制事件处理函数的频繁调用</p><br><h4 id="1-4-1-函数节流-throttle"><a href="#1-4-1-函数节流-throttle" class="headerlink" title="1.4.1 函数节流(throttle)"></a>1.4.1 函数节流(throttle)</h4><ul><li><p><strong>在函数需要频繁触发时：函数执行一次后，经过设定的间隔后才可以执行第二次。</strong></p></li><li><p>适合多次时间按时间平均分配触发</p></li></ul><p>场景：</p><ul><li>resize 事件(窗口调整)</li><li>scroll 事件(页面滚动)</li><li>mousemove 事件(拖拽功能)</li><li>click 事件(疯狂点击点击)</li></ul><p>语法：<code> throttle(callback, wait)</code></p><p>功能：创建一个节流函数，在 wait 毫秒内最多执行<code> callback</code>一次</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数节流</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">callback, wait</span>) </span>&#123;<br>  <span class="hljs-comment">// 定义开始时间</span><br>  <span class="hljs-keyword">let</span> start = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">// 返回结果是一个函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>    <span class="hljs-comment">// 获取当前时间戳</span><br>    <span class="hljs-keyword">let</span> now = <span class="hljs-built_in">Date</span>.now();<br><br>    <span class="hljs-keyword">if</span> (now - start &gt;= wait) &#123;<br>      callback.call(<span class="hljs-built_in">this</span>, event); <span class="hljs-comment">// 满足条件，执行回调函数</span><br><br>      <span class="hljs-comment">// 修改开始时间</span><br>      start = now;<br>    &#125;<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">// // 之前青训营时，月影老师教的版本：通过定义一个计时器，当计时器到期时，清除之前的计时器，而清除计时器的时候才可以再次调用回调函数</span><br><span class="hljs-comment">// function throttle(fn, time = 500) &#123;</span><br><span class="hljs-comment">//   let timer;</span><br><span class="hljs-comment">//   return function (...args) &#123;</span><br><span class="hljs-comment">//     if (timer == null) &#123;</span><br><span class="hljs-comment">//       fn.apply(this, args);</span><br><span class="hljs-comment">//       timer = setTimeout(() =&gt; &#123;</span><br><span class="hljs-comment">//         timer = null;/* 到期的话，清除之前的计时器 */</span><br><span class="hljs-comment">//       &#125;, time)</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">2000px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./throttle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// window.addEventListener(&#x27;scroll&#x27;, () =&gt; &#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//   console.log(this.scrollY) // 直接绑定滚动事件，一滚动，疯狂输出</span></span><br><span class="javascript">      <span class="hljs-comment">// &#125;)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">window</span>.addEventListener(</span><br><span class="javascript">        <span class="hljs-string">&quot;scroll&quot;</span>,</span><br><span class="javascript">        throttle(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.scrollY); <span class="hljs-comment">// 成功实现节流</span></span><br><span class="javascript">        &#125;, <span class="hljs-number">500</span>)</span><br><span class="javascript">      );</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h4 id="1-4-2-函数防抖-debounce"><a href="#1-4-2-函数防抖-debounce" class="headerlink" title="1.4.2 函数防抖(debounce)"></a>1.4.2 函数防抖(debounce)</h4><ul><li>在函数需要频繁触发时：<strong>在规定时间内，只让最后一次生效，前面的不生效</strong></li><li>适合多个事件一次相应的情况</li></ul><p>场景：输入框实时搜索联想（keyup / input）</p><blockquote><p>语法：<code> debounce(callback, wait)</code></p><p>功能：创建一个防抖动函数，该函数会从上一次被触发后，延迟<code> wait</code>毫秒后调用<code> callback</code></p><p>如果触发一次，还没过<code> wait</code>毫秒，再次触发，那么又得重新计时，依此类推，直到延迟<code> wait</code>毫秒后才调用<code> callback</code>(即<b style="color: red">频繁触发时，只让最后一次生效</b>)</p></blockquote><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数防抖</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">callback, time</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 定时器变量</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">clearTimeout</span>(timer); <span class="hljs-comment">// 每一次新的触发都会把前一次的定时器给清除掉，直到没有新的触发且时间经过time毫秒后才调用callback</span><br><br>    <span class="hljs-comment">// 启动计时器</span><br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      callback.call(<span class="hljs-built_in">this</span>, e);<br>    &#125;, time);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./debounce.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;input&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      input.onkeydown = debounce(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(e.keyCode);</span><br><span class="javascript">      &#125;, <span class="hljs-number">1000</span>);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><a href="https://www.bilibili.com/video/BV1Cy4y117vt">尚硅谷 Web 前端自定义工具函数库视频教程_哔哩哔哩_bilibili</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript实现继承的六种方式</title>
      <link href="/2022/03/17/javascript-inherit/"/>
      <url>/2022/03/17/javascript-inherit/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-实现继承的六种方式"><a href="#JavaScript-实现继承的六种方式" class="headerlink" title="JavaScript 实现继承的六种方式"></a>JavaScript 实现继承的六种方式</h1><hr><p><strong>父类</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;1 + 1 = 2&quot;</span>);<br>  &#125;;<br>&#125;<br><br>Person.prototype.listen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;エウテルペ&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><hr><h2 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h2><p><strong>将父类的实例作为子类的原型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;1 + 1 = 2&quot;</span>);<br>  &#125;;<br>&#125;<br><br>Person.prototype.listen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;エウテルペ&quot;</span>);<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><br>Student.prototype = <span class="hljs-keyword">new</span> Person(); <span class="hljs-comment">//关键</span><br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student();<br><br>stu.grade = <span class="hljs-number">3</span>;<br><br><span class="hljs-built_in">console</span>.log(stu.grade); <span class="hljs-comment">// 3</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br></code></pre></td></tr></table></figure><br><p><strong>优点</strong>：</p><ul><li><p>简单易实现</p></li><li><p>父类新增原型方法/原型属性，子类都能访问</p></li><li><p>实例是子类的实例也是父类的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">stu <span class="hljs-keyword">instanceof</span> Student; <span class="hljs-comment">// true</span><br>stu <span class="hljs-keyword">instanceof</span> Person; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li></ul><br><p><strong>缺点</strong>：</p><ul><li>为子类新增属性和方法，不能在构造函数中</li><li>无法实现多继承</li><li>创建子类实例时，不能向父类构造函数传参数</li><li>所有新实例都会共享父类实例的属性。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改！）</li></ul><br><p><strong>存在的问题：</strong></p><ul><li><p><code>prototype</code>里有个属性<code>constructor</code>指向构造函数本身，但是，<code> Student</code>的原型已经被父类的实例取代了，所以指向也不正确，所以需要修复构造函数指向(这里网上的教程只是对组合继承、寄生组合式继承进行了修复，不知道是不是因为这个不常用的关系)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-built_in">console</span>.log(Student.prototype.constructor);<br><br>Student.prototype = <span class="hljs-keyword">new</span> Person(); <span class="hljs-comment">//关键</span><br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student();<br><br>stu.grade = <span class="hljs-number">3</span>;<br><br><span class="hljs-built_in">console</span>.log(stu.grade); <span class="hljs-comment">// 3</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br><span class="hljs-built_in">console</span>.log(Student.prototype.constructor);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/5jp73YhObJIxtM2.png" alt="image-20220317095122520"></p></li></ul><br><p><strong>解决问题</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">Student.prototype.constructor = Student;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/4eCavAGMltys9TK.png" alt="image-20220317095215698"></p><hr><h2 id="2-借用构造函数继承"><a href="#2-借用构造函数继承" class="headerlink" title="2. 借用构造函数继承"></a>2. 借用构造函数继承</h2><p><strong>在一个类中执行另一个类的构造函数，通过<code> call</code>函数设置<code> this</code>的指向，这样就可以得到另一个类的所有属性</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">WebsiteMaster</span>(<span class="hljs-params">site</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.site = site;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, grade, site</span>) </span>&#123;<br>  Person.call(<span class="hljs-built_in">this</span>, name);<br>  WebsiteMaster.call(<span class="hljs-built_in">this</span>, site);<br>  <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;https://clz.vercel.app&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade, stu.site); <span class="hljs-comment">// clz, 3, https://clz.vercel.app</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// Uncaught TypeError: stu.listen is not a function</span><br></code></pre></td></tr></table></figure><br><p><strong>优点：</strong></p><ul><li>创建子类实例时，可以向父类传递参数</li><li>可以实现多继承(call 多个对象)</li><li>不需要修复构造函数指向</li></ul><br><p><strong>缺点：</strong></p><ul><li><p>方法在构造函数中定义，无法复用</p></li><li><p>只能继承父类的实例属性，不能继承原型属性、方法</p></li><li><p>实例并不是父类的实例，而只是子类的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">stu <span class="hljs-keyword">instanceof</span> Student; <span class="hljs-comment">// true</span><br>stu <span class="hljs-keyword">instanceof</span> Person; <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>继承继着不再是人了(笑)</p></li></ul><hr><h2 id="3-原型式继承"><a href="#3-原型式继承" class="headerlink" title="3. 原型式继承"></a>3. 原型式继承</h2><p>为父类实例添加属性、方法，作为子类实例。</p><blockquote><p>道格拉斯·克罗克福德在一篇文章中介绍了一种实现继承的方法，这种方法并没有使用严格意义上的构造函数。它的想法是借助原型可以基于已有的对象创建新对象，同时还不必因此创建自定义类型。为了达到这个目的，他给出了如下函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">object</span>(<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  F.prototype = o;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F();<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">object</span>(<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  F.prototype = o;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F();<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br><span class="hljs-keyword">const</span> stu = object(person);<br><br>stu.grade = <span class="hljs-number">3</span>;<br>stu.study = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;FrontEnd&quot;</span>);<br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade); <span class="hljs-comment">// clz, 3</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br><br>stu.study(); <span class="hljs-comment">// FrontEnd</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/HRrLnl6oKQhDiv7.png" alt="image-20220316224057344"></p><br><p><strong>优点</strong>：</p><ul><li>感觉没啥优点，不太像继承</li></ul><br><p><strong>缺点：</strong></p><ul><li>不支持多继承</li><li>实例是父类的实例</li></ul><hr><h2 id="4-寄生式继承"><a href="#4-寄生式继承" class="headerlink" title="4. 寄生式继承"></a>4. 寄生式继承</h2><p>为父类实例添加属性、方法，作为子类实例。(原理和原型式继承一样)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">object</span>(<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  F.prototype = o;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, grade</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> person = object(<span class="hljs-keyword">new</span> Person(name));<br><br>  person.grade = grade;<br>  person.study = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;FrontEnd&quot;</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> person;<br>&#125;<br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-number">3</span>);<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade); <span class="hljs-comment">// clz, 3</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br><br>stu.study(); <span class="hljs-comment">// FrontEnd</span><br></code></pre></td></tr></table></figure><p><strong>优点</strong>：</p><ul><li>有了子类的雏形，但是换汤不换药，原理和原型式继承一样</li></ul><br><p><strong>缺点：</strong></p><ul><li><p>不支持多继承</p></li><li><p>实例是父类的实例，不是子类的实例(因为只是在父类的实例上添加属性、方法而已)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">stu <span class="hljs-keyword">instanceof</span> Student; <span class="hljs-comment">// false</span><br>stu <span class="hljs-keyword">instanceof</span> Person; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="5-组合继承"><a href="#5-组合继承" class="headerlink" title="5. 组合继承"></a>5. 组合继承</h2><p>原型链继承+借用构造函数继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">WebsiteMaster</span>(<span class="hljs-params">site</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.site = site;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, grade, site</span>) </span>&#123;<br>  Person.call(<span class="hljs-built_in">this</span>, name); <span class="hljs-comment">// 继承属性</span><br>  WebsiteMaster.call(<span class="hljs-built_in">this</span>, site);<br>  <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><br>Student.prototype = <span class="hljs-keyword">new</span> Person(); <span class="hljs-comment">// 继承方法</span><br>Student.prototype.constructor = Student;<br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;https://clz.vercel.app&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade, stu.site); <span class="hljs-comment">// clz, 3, https://clz.vercel.app</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br><br><span class="hljs-built_in">console</span>.log(stu.constructor);<br></code></pre></td></tr></table></figure><br><p><strong>优点</strong>：</p><ul><li>可以继承实例属性、方法，也可以继承原型属性、方法</li><li>可传参、可复用</li><li>实例既是子类的实例，也是父类的实例</li></ul><br><p><strong>缺点</strong>：</p><ul><li>调用了两次父类构造函数，耗内存</li><li>需要修复构造函数指向</li></ul><br><h2 id="6-寄生组合式继承"><a href="#6-寄生组合式继承" class="headerlink" title="6. 寄生组合式继承"></a>6. 寄生组合式继承</h2><p>通过<code> Object.create()</code>来代替给子类原型赋值的过程，解决了两次调用父类构造函数的问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">WebsiteMaster</span>(<span class="hljs-params">site</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.site = site;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, grade, site</span>) </span>&#123;<br>  Person.call(<span class="hljs-built_in">this</span>, name); <span class="hljs-comment">// 继承属性</span><br>  WebsiteMaster.call(<span class="hljs-built_in">this</span>, site);<br>  <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><br>Student.prototype = <span class="hljs-built_in">Object</span>.create(Person.prototype); <span class="hljs-comment">// 继承方法</span><br>Student.prototype.constructor = Student; <span class="hljs-comment">// 修复构造函数指向</span><br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;https://clz.vercel.app&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade, stu.site); <span class="hljs-comment">// clz, 3, https://clz.vercel.app</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br></code></pre></td></tr></table></figure><br><p>有人可能会提出：为什么不可以直接把父类原型赋值给子类原型来实现呢？</p><p>这是因为直接赋值的话，那就是引用关系。下面就来看看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">WebsiteMaster</span>(<span class="hljs-params">site</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.site = site;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, grade, site</span>) </span>&#123;<br>  Person.call(<span class="hljs-built_in">this</span>, name); <span class="hljs-comment">// 继承属性</span><br>  WebsiteMaster.call(<span class="hljs-built_in">this</span>, site);<br>  <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><br>Student.prototype = Person.prototype; <span class="hljs-comment">// 继承方法</span><br>Student.prototype.constructor = Student; <span class="hljs-comment">// 修复实例</span><br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;https://clz.vercel.app&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade, stu.site); <span class="hljs-comment">// clz, 3, https://clz.vercel.app</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br><br>Student.prototype.listen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;EGOIST&quot;</span>);<br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(Person.prototype.listen);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/tSLzqmKE1jRk4iJ.png" alt="image-20220316234707764"></p><p>可以看到，修改<code> Student</code>原型上的方法时，<code> Person</code>的原型上的也会跟着变化。</p><blockquote><p>**<code>Object.create()</code>**方法创建一个新对象，使用现有的对象来提供新创建的对象的<code>__proto__</code>。</p><p>所以，此时修改<code> Student</code>原型上的方法时，<code> Person</code>的原型上的不会跟着变化。</p></blockquote><hr><p>es6 之前没有<code> Object.create()</code>方法，可以自己实现(实际就是原型式继承的关键函数)</p><p><strong>关键</strong>：</p><ul><li>接受一个对象 obj</li><li>返回一个新对象 newObj</li><li>让<code> newObj.__proto__ === obj</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">object</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125; <span class="hljs-comment">// 新的构造函数</span><br>  F.prototype = obj; <span class="hljs-comment">// 继承传入的参数obj</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F(); <span class="hljs-comment">// 返回新的函数对象</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><p>参考链接：</p><ul><li><p><a href="https://zhuanlan.zhihu.com/p/37735247">js 继承的几种方式 - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://www.cnblogs.com/ranyonsue/p/11201730.html">js 继承的 6 种方式 - ranyonsue - 博客园 (cnblogs.com)</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github添加README文件后导致的问题</title>
      <link href="/2022/03/17/git-readme/"/>
      <url>/2022/03/17/git-readme/</url>
      
        <content type="html"><![CDATA[<h1 id="github-添加-README-文件后导致的问题"><a href="#github-添加-README-文件后导致的问题" class="headerlink" title="github 添加 README 文件后导致的问题"></a>github 添加 README 文件后导致的问题</h1><p>github 添加<code> README.md</code>文件后，<code> git push origin main</code>报错，<code> git pull origin main</code>后再推也无济于事。</p><p>这是因为<code> github</code>处添加<code> README</code>文件导致历史不一样。</p><p>通过<code> git pull</code>指令后添加<code> --allow-unrelated-histories</code>选项解决问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull origin main --allow-unrelated-histories<br></code></pre></td></tr></table></figure><p>该选项可以合并两个独立启动仓库的历史。</p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解原型与原型链</title>
      <link href="/2022/03/16/javascript-prototype/"/>
      <url>/2022/03/16/javascript-prototype/</url>
      
        <content type="html"><![CDATA[<h1 id="详解原型与原型链"><a href="#详解原型与原型链" class="headerlink" title="详解原型与原型链"></a>详解原型与原型链</h1><p>其实，刚开始学 JavaScript 时，就有学过原型与原型链的相关知识了，只是当时还没有养成写笔记的习惯，导致现在已经忘的七七八八了。</p><p>这边文章真是花了很多心思，写了两天，看了很多篇篇博文，其中有小参考的，有解决一点疑惑的，但是最后只标注了一篇帮助最大的。</p><br><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p><strong>实例的构造函数属性(<code> constructor</code>)指向其构造函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person.constructor === Person); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><br><p><b style="color: red">实例的构造函数并不是自身属性，而是从原型对象上继承的属性</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person.constructor === Person); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(Person.prototype.constructor === Person); <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">console</span>.log(person.hasOwnProperty(<span class="hljs-string">&quot;constructor&quot;</span>)); <span class="hljs-comment">// false：constructor属性并不是实例自身的属性，而是继承来的</span><br></code></pre></td></tr></table></figure><br><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><ul><li><strong><code>__proto__(隐式原型)</code>：每个对象(除了<code> null</code>)都具有的属性</strong>，该属性指向该对象的原型</li><li><strong><code>prototype(显式原型)</code>：只有函数对象才有的属性</strong>，该属性指向函数的原型对象</li></ul><p>来看来看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-built_in">console</span>.log(obj);<br><span class="hljs-built_in">console</span>.log(add);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/8GRutdoLNb27qAz.png" alt="image-20220314161614197"></p><br><p><b syule="color: red">红框框中的<code> [[prototype]]</code>和<code> __proto__</code>意义相同，都是指对象的内部属性</b></p><p><strong>而所有函数都拥有<code> prototype</code>属性</strong>，所以可以通过<code> f.prototype</code>得到，那么自然也不需要通过<code> [[prototype]]</code>显示出来(毕竟<code> prototype</code>是显式原型，而<code> __proto__</code>是隐式原型，好吧，这是我猜的)</p><p><img src="https://s2.loli.net/2022/03/14/l1ebmHdsivJWNoT.png" alt="image-20220314162705526"></p><br><p><b style="color: red">箭头函数没有<code> prototype</code>属性</b></p><br><h3 id="访问原型"><a href="#访问原型" class="headerlink" title="访问原型"></a>访问原型</h3><p>通过实例对象访问原型对象有 3 种方法</p><ul><li><code>obj.__proto__</code></li><li><code>obj.constructor.prototype</code></li><li><code>Object.getPrototypeOf(obj)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br><span class="hljs-keyword">const</span> proto1 = person.__proto__;<br><span class="hljs-keyword">const</span> proto2 = person.constructor.prototype;<br><span class="hljs-keyword">const</span> proto3 = <span class="hljs-built_in">Object</span>.getPrototypeOf(person);<br><br><span class="hljs-keyword">const</span> proto = Person.prototype; <span class="hljs-comment">// 原型</span><br><br><span class="hljs-built_in">console</span>.log(proto1 === proto); <span class="hljs-comment">// true: 第一种方法</span><br><span class="hljs-built_in">console</span>.log(proto2 === proto); <span class="hljs-comment">// true: 第二种方法</span><br><span class="hljs-built_in">console</span>.log(proto3 === proto); <span class="hljs-comment">// true: 第三种方法</span><br></code></pre></td></tr></table></figure><br><p><strong>比较安全的做法是<code>Object.getPrototypeOf(obj)</code></strong></p><p><strong>以下部分会涉及一丢丢原型链的知识(如果没看懂，可以看下原型链再来看)</strong></p><ul><li><p><code> __proto__</code>属性是私有属性，存在浏览器兼容性问题，缺乏非浏览器环境的支持</p></li><li><p>如果 obj 的<code> constructor</code>属性被覆盖，那么<code>obj.constructor.prototype</code>将会失效。(因为 obj 自身是没有<code> constructor</code>属性的，是通过原型链去它的原型上获取<code> constructor</code>属性，所以覆盖该属性时，将不会再去原型链上查找)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Temp</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br>person.constructor = Temp;<br><br><span class="hljs-keyword">const</span> proto = Person.prototype; <span class="hljs-comment">// 原型</span><br><br><span class="hljs-built_in">console</span>.log(person.__proto__ === proto); <span class="hljs-comment">// true: 第一种方法</span><br><span class="hljs-built_in">console</span>.log(person.constructor.prototype === proto); <span class="hljs-comment">// false: 第二种方法</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getPrototypeOf(person) === proto); <span class="hljs-comment">// true: 第三种方法</span><br></code></pre></td></tr></table></figure></li></ul><br><h3 id="设置原型"><a href="#设置原型" class="headerlink" title="设置原型"></a>设置原型</h3><p>设置原型对象有 3 种方法</p><ul><li><code>obj.__proto__=prototypeObj</code></li><li><code>Object.setPrototypeOf(obj, prototypeObj)</code></li><li><code>Object.create(prototypeObj)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> proto = &#123;<br>  <span class="hljs-comment">// 原型对象</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;prototype&quot;</span>,<br>&#125;;<br><br><span class="hljs-comment">// 第一种方法</span><br><span class="hljs-keyword">const</span> obj1 = &#123;&#125;;<br>obj1.__proto__ = proto; <span class="hljs-comment">// 设置原型</span><br><span class="hljs-built_in">console</span>.log(obj1.name); <span class="hljs-comment">// prototype</span><br><span class="hljs-built_in">console</span>.log(obj1.__proto__ === proto); <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 第二种方法</span><br><span class="hljs-keyword">const</span> obj2 = &#123;&#125;;<br><span class="hljs-built_in">Object</span>.setPrototypeOf(obj2, proto); <span class="hljs-comment">// 设置原型</span><br><span class="hljs-built_in">console</span>.log(obj2.name); <span class="hljs-comment">// prototype</span><br><span class="hljs-built_in">console</span>.log(obj2.__proto__ === proto); <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 第三种方法</span><br><span class="hljs-keyword">const</span> obj3 = <span class="hljs-built_in">Object</span>.create(proto); <span class="hljs-comment">// 创建对象并设置原型</span><br><span class="hljs-built_in">console</span>.log(obj3.name); <span class="hljs-comment">// prototype</span><br><span class="hljs-built_in">console</span>.log(obj3.__proto__ === proto); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><br><h3 id="检测原型"><a href="#检测原型" class="headerlink" title="检测原型"></a>检测原型</h3><p>使用<code> obj1.isPrototypeOf(obj2)</code>方法判断<code> obj1</code>是否为·<code> obj2</code>的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> proto = &#123;<br>  <span class="hljs-comment">// 原型对象</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;prototype&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> proto1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;prototype&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> obj = &#123;&#125;;<br>obj.__proto__ = proto; <span class="hljs-comment">// 设置原型</span><br><br><span class="hljs-built_in">console</span>.log(proto.isPrototypeOf(obj)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.isPrototypeOf(obj)); <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">console</span>.log(proto1.isPrototypeOf(obj)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><br><h2 id="prototype、-proto-、constructor-之间的关系"><a href="#prototype、-proto-、constructor-之间的关系" class="headerlink" title="prototype、__proto__、constructor 之间的关系"></a>prototype、<code>__proto__</code>、constructor 之间的关系</h2><p><img src="https://s2.loli.net/2022/03/14/FO6IgxSiPm9pVWu.png" alt="image-20220314170210850"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(person.__proto__ === Person.prototype); <span class="hljs-comment">// true：因为创建person对象的构造函数是Person，所以person对象的隐式原型(__proto__)指向Person函数的原型(prototype)</span><br><span class="hljs-built_in">console</span>.log(Person.prototype.constructor === Person); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><br><p><strong>同一个构造函数创建的多个实例的原型是同一个</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-keyword">const</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(person1 === person2); <span class="hljs-comment">// false: 不是同一个对象</span><br><span class="hljs-built_in">console</span>.log(person1.__proto__ === person2.__proto__); <span class="hljs-comment">// true：同一个构造函数创建的实例对象的原型是同一个</span><br></code></pre></td></tr></table></figure><br><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>由上面的知识可以知道，实例对象具有属性<code> __proto__</code>，会指向原型对象。而原型对象也是对象，所以也会有属性<code> __proto__</code>，也会继续指向它的原型对象。</p><p><b style="color: red">实例对象在查找属性时，如果查找不到，就会沿着<code> __proto__</code>去它的原型上查找，还找不到，则继续去原型的原型上查找，直到找到或到最顶层为止。这就是原型链的概念。</b></p><br><p><strong>对象本身的方法(第一层：把方法当成属性)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;听音乐&quot;</span>);<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person);<br><span class="hljs-built_in">console</span>.log(<br>  <span class="hljs-string">&quot;实例对象本身是否有listenMusic方法&quot;</span>,<br>  person.hasOwnProperty(<span class="hljs-string">&quot;listenMusic&quot;</span>)<br>);<br>person.listenMusic();<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/wVuWlXUHCbSGhx9.png" alt="image-20220315094508947"></p><br><p><strong>对象的原型上添加方法(第二层)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>Person.prototype.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;听音乐&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person);<br><span class="hljs-built_in">console</span>.log(<br>  <span class="hljs-string">&quot;实例对象本身是否有listenMusic方法&quot;</span>,<br>  person.hasOwnProperty(<span class="hljs-string">&quot;listenMusic&quot;</span>)<br>);<br>person.listenMusic();<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/5bNeTitq3vJIU16.png" alt="image-20220314183755250"></p><br><p><strong>原型的原型上的方法(第三层)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>Person.prototype.__proto__.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;听音乐&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person);<br>person.listenMusic();<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/WwhLDopOEvJuxcG.png" alt="image-20220314184300125"></p><br><p>但是呢，没法玩第四层，因为已经到顶了(<strong><code> Object.prototype</code>没有原型(原型为 null)</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>Person.prototype.__proto__.__proto__.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;听音乐&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person);<br>person.listenMusic();<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/xD67UynCkVE4waz.png" alt="image-20220314184424877"></p><hr><p><strong>person -&gt; Person.prototype -&gt; Object.prototype -&gt; null</strong></p><p>那么，这里就来看看第三层是不是真的是<code> Object.prototype</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>Person.prototype.__proto__.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;听音乐&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person);<br><br><span class="hljs-built_in">console</span>.log(Person.prototype.__proto__ === person.__proto__.__proto__);<br><span class="hljs-built_in">console</span>.log(person.__proto__.__proto__ === <span class="hljs-built_in">Object</span>.prototype); <span class="hljs-comment">// 这里就是判断处</span><br><br>person.listenMusic();<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/Vq8hgzA6YsF5KLm.png" alt="image-20220315095211650"></p><p>发现，确实如此。</p><p><strong>下面这张图就是原型链的简单图</strong>(找不到是在哪里截的图了，侵删)</p><p><img src="https://s2.loli.net/2022/03/14/gvmpCyaXMPxNiZ1.png" alt="image-20220314233252631"></p><br><h3 id="原型链的作用"><a href="#原型链的作用" class="headerlink" title="原型链的作用"></a>原型链的作用</h3><h4 id="为对象设置默认值"><a href="#为对象设置默认值" class="headerlink" title="为对象设置默认值"></a>为对象设置默认值</h4><blockquote><p>利用原型为对象设置默认值。当原型属性与私有属性同名时，删除私有属性之后，可以访问原型属性，即可以把原型属性值作为初始化默认值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br>Person.prototype.name = <span class="hljs-string">&quot;赤蓝紫&quot;</span>;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person.name); <span class="hljs-comment">// clz</span><br><br><span class="hljs-keyword">delete</span> person.name;<br><span class="hljs-built_in">console</span>.log(person.name); <span class="hljs-comment">// 赤蓝紫</span><br></code></pre></td></tr></table></figure><br><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承内容部分之后单独写。</p><br><h4 id="扩展原型方法"><a href="#扩展原型方法" class="headerlink" title="扩展原型方法"></a>扩展原型方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Array</span>.prototype.test = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;扩展原型方法: 有风险&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>arr.test(); <span class="hljs-comment">// 扩展原型方法: 有风险</span><br></code></pre></td></tr></table></figure><br><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p>typeof 是判断类型时大多数人的选择(当然也包括我啦)，但是，判断非基本数据类型(<code>function</code>除外)时，只能得到<code> Object</code>。(null 也是，但是 null 这个属于是历史遗留 bug 了)。</p><blockquote><p><strong>js 在底层存储变量的时候，会在变量的机器码的低位 1-3 位存储其类型信息</strong></p><ul><li>000：对象</li><li>010：浮点数</li><li>100：字符串</li><li>110：布尔</li><li>1：整数</li></ul><p>null：所有机器码均为 0<br>undefined：用 −2^30 整数来表示</p></blockquote><hr><p><code> symbol</code>和<code> bigint</code>是后来新增的数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> num = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-keyword">const</span> bool = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">const</span> n = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">const</span> u = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">const</span> sym = <span class="hljs-built_in">Symbol</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">const</span> big = <span class="hljs-built_in">BigInt</span>(<span class="hljs-number">123</span>);<br><br><span class="hljs-keyword">const</span> fun = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> num); <span class="hljs-comment">// number</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> str); <span class="hljs-comment">// string</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> bool); <span class="hljs-comment">// boolean</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> n); <span class="hljs-comment">// object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> u); <span class="hljs-comment">// undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> sym); <span class="hljs-comment">// symbol</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> big); <span class="hljs-comment">//bigint</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fun); <span class="hljs-comment">//function</span><br></code></pre></td></tr></table></figure><br><p><strong><code>function</code>除外的非基本数据类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [];<br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>&#125;;<br><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> arr);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> set);<br></code></pre></td></tr></table></figure><p><strong>清一色<code> object</code></strong></p><br><p>通过<code>Object.prototype.toString.call(obj)</code>来识别对象类型。会返回<code>&quot;[object Type]&quot;</code>来告诉你所指对象的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">let</span> arr = []<br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>])<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(arr))  <span class="hljs-comment">// [object Array]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(obj))  <span class="hljs-comment">// [object Object]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(set))  <span class="hljs-comment">// [object Set]</span><br></code></pre></td></tr></table></figure><hr><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p><strong><code>instanceof</code>只要右边变量的 prototype 在左边变量的原型链上，就会返回<code>true</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> Person); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>); <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> Test); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><br><h2 id="普通对象与函数对象"><a href="#普通对象与函数对象" class="headerlink" title="普通对象与函数对象"></a>普通对象与函数对象</h2><ul><li><p><strong>所有的函数都是通过<code> new Function()</code>来创建的，即是函数对象</strong></p></li><li><p>**其他的都是普通对象 **</p></li></ul><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">const</span> fn2 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br><span class="hljs-keyword">const</span> fn3 = <span class="hljs-function">() =&gt;</span> &#123;&#125;;<br><span class="hljs-keyword">const</span> fn4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>();<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn1); <span class="hljs-comment">//function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn2); <span class="hljs-comment">//function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn3); <span class="hljs-comment">//function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn4); <span class="hljs-comment">//function</span><br><br><span class="hljs-keyword">const</span> obj1 = &#123;&#125;;<br><span class="hljs-keyword">const</span> obj2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><span class="hljs-keyword">const</span> obj3 = <span class="hljs-keyword">new</span> fn1();<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj1); <span class="hljs-comment">//object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj2); <span class="hljs-comment">//object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj3); <span class="hljs-comment">//object</span><br></code></pre></td></tr></table></figure><br><p>上面的例子中，<code> fn1</code>、<code> fn2</code>、<code> fn3</code>、<code> fn4</code>是函数对象，<code> obj1</code>、<code> obj2</code>、<code> obj3</code>是普通对象</p><blockquote><ul><li><strong>Object 是构造函数，即也是函数，所以<code> Object</code>也是函数对象，相当于<code>Function</code>的实例，即<code> Object.__proto__ === Function.prototype</code></strong></li><li><strong><code>Object.prototype</code>是<code>Object</code>构造函数的原型，处于原型链的顶端，<code>Object.prototype.__proto__</code>已经没有可以指向的上层原型，因此其值为<code>null</code></strong></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span>); <span class="hljs-comment">// function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.__proto__ === <span class="hljs-built_in">Function</span>.prototype); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.__proto__); <span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure><br><blockquote><ul><li><strong><code> Function.prototype</code>是<code> Function</code>的原型，是所有函数对象的原型</strong></li><li><strong><code>Function.prototype</code>是一个普通对象，所以<code> Function.prototype.__proto__ === Object.prototype</code></strong></li><li><strong><code>Function</code>函数不通过任何东西创建，<code>JS</code>引擎启动时，添加到内存中</strong>，所以**<code> Function.__proto__ === Function.prototype</code>**</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Function</span>); <span class="hljs-comment">// function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.prototype.__proto__ === <span class="hljs-built_in">Object</span>.prototype); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.__proto__ === <span class="hljs-built_in">Function</span>.prototype); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><br><h2 id="经典原型链图"><a href="#经典原型链图" class="headerlink" title="经典原型链图"></a>经典原型链图</h2><p><img src="https://s2.loli.net/2022/03/15/HXe9vi2ADnSVC6J.png" alt="img"></p><br><h2 id="练手福利"><a href="#练手福利" class="headerlink" title="练手福利"></a>练手福利</h2><p>题目来自<a href="https://juejin.cn/post/7018355953955241997">JavaScript 之彻底理解原型与原型链</a></p><p>有加一道</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">User</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>User.prototype.sayHello = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br><span class="hljs-keyword">var</span> u1 = <span class="hljs-keyword">new</span> User();<br><span class="hljs-keyword">var</span> u2 = <span class="hljs-keyword">new</span> User();<br><br><span class="hljs-built_in">console</span>.log(u1.sayHello === u2.sayHello);<br><span class="hljs-built_in">console</span>.log(User.prototype.constructor);<br><br><span class="hljs-built_in">console</span>.log(User.prototype === <span class="hljs-built_in">Function</span>.prototype);<br><span class="hljs-built_in">console</span>.log(User.prototype.__proto__ === <span class="hljs-built_in">Function</span>.prototype.__proto__);<br><span class="hljs-built_in">console</span>.log(User.prototype === u1.__proto__);<br><br><span class="hljs-built_in">console</span>.log(User.__proto__ === <span class="hljs-built_in">Function</span>.prototype);<br><span class="hljs-built_in">console</span>.log(User.__proto__ === <span class="hljs-built_in">Function</span>.__proto__);<br><br><span class="hljs-built_in">console</span>.log(u1.__proto__ === u2.__proto__);<br><span class="hljs-built_in">console</span>.log(u1.__proto__ === User.__proto__);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.__proto__ === <span class="hljs-built_in">Object</span>.__proto__);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.prototype.__proto__ === <span class="hljs-built_in">Object</span>.prototype.__proto__);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.prototype.__proto__ === <span class="hljs-built_in">Object</span>.prototype);<br></code></pre></td></tr></table></figure><br><p><strong>校对答案</strong>：(可能有点难，细嚼慢咽后再反复看就行)</p><p><img src="https://s2.loli.net/2022/03/15/h6jEpTSG4RaIfoQ.png" alt="image-20220315162828873"></p><br><p>参考链接：<a href="http://c.biancheng.net/view/5805.html">JS 原型（prototype）和原型链完全攻略</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微软自带的日语输入法怎么切换平假名和片假名</title>
      <link href="/2022/03/16/life-skill/"/>
      <url>/2022/03/16/life-skill/</url>
      
        <content type="html"><![CDATA[<h1 id="微软自带的日语输入法怎么切换平假名和片假名"><a href="#微软自带的日语输入法怎么切换平假名和片假名" class="headerlink" title="微软自带的日语输入法怎么切换平假名和片假名"></a>微软自带的日语输入法怎么切换平假名和片假名</h1><p>使用按键 ctrl+caps lock，切换平假名。</p><p>使用按键 alt+caps lock，切换片假名。</p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue Router深入学习(二)</title>
      <link href="/2022/03/15/vue-router-deep-2/"/>
      <url>/2022/03/15/vue-router-deep-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-Router-深入学习-二"><a href="#Vue-Router-深入学习-二" class="headerlink" title="Vue Router 深入学习(二)"></a>Vue Router 深入学习(二)</h1><p>通过阅读文档，自己写一些 demo 来加深自己的理解。(主要针对 Vue3)<br>上一篇：<a href="https://clz.vercel.app/2022/03/12/vue-router-deep-1/">Vue Router 深入学习(一)</a></p><h2 id="1-路由元信息"><a href="#1-路由元信息" class="headerlink" title="1. 路由元信息"></a>1. 路由元信息</h2><blockquote><p>有时，你可能希望将任意信息附加到路由上，如过渡名称、谁可以访问路由等。这些事情可以通过接收属性对象的<code>meta</code>属性来实现，并且它可以在路由地址和导航守卫上都被访问到。定义路由的时候你可以这样配置 <code>meta</code> 字段</p></blockquote><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;用户&quot;</span>,<br>      <span class="hljs-attr">isLogin</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><h3 id="1-1-简单使用"><a href="#1-1-简单使用" class="headerlink" title="1.1 简单使用"></a>1.1 简单使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;用户&quot;</span>,<br>      <span class="hljs-attr">isLogin</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; route.meta &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(route.meta);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/spOZRvIcYXwPtHm.png" alt="image-20220304103855475"></p><h3 id="1-2-搭配路由守卫使用"><a href="#1-2-搭配路由守卫使用" class="headerlink" title="1.2 搭配路由守卫使用"></a>1.2 搭配路由守卫使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;用户&quot;</span>,<br>      <span class="hljs-attr">isLogin</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;:id(\\d+)&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/UserId.vue&quot;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;id&quot;</span>,<br>          <span class="hljs-attr">requireAuth</span>: <span class="hljs-literal">true</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;:name&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/UserName.vue&quot;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;name&quot;</span>,<br>          <span class="hljs-attr">requireAuth</span>: <span class="hljs-literal">false</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>&#125;);<br></code></pre></td></tr></table></figure><p>路由前置守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (to.meta.requireAuth) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>      <span class="hljs-attr">query</span>: &#123;<br>        <span class="hljs-attr">redirect</span>: to.path, <span class="hljs-comment">// 保存要去的位置，获得权限后再去</span><br>      &#125;,<br>    &#125;;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/nImTkXpSrcCadJB.gif" alt="vue-router"></p><h2 id="2-数据获取"><a href="#2-数据获取" class="headerlink" title="2. 数据获取"></a>2. 数据获取</h2><blockquote><p>有时候，进入某个路由后，需要从服务器获取数据。例如，在渲染用户信息时，你需要从服务器获取用户的数据。</p></blockquote><h3 id="2-1-导航完成后获取数据"><a href="#2-1-导航完成后获取数据" class="headerlink" title="2.1 导航完成后获取数据"></a>2.1 导航完成后获取数据</h3><blockquote><p>当你使用这种方式时，我们会马上导航和渲染组件，然后在组件的 created 钩子中获取数据。这让我们有机会在数据获取期间展示一个 loading 状态，还可以在不同视图间展示不同的 loading 状态。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>id: &#123;&#123; post.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 222 &#125; &#125;&quot;</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 333 &#125; &#125;&quot;</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 444 &#125; &#125;&quot;</span>&gt;</span>444<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; reactive, watchEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">let</span> post = reactive(&#123;</span><br><span class="javascript">    <span class="hljs-attr">id</span>: <span class="hljs-literal">null</span>,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> fetchData = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// 数据获取，不需要生命周期钩子。因为beforeCreate和created没有API，因为setup实际上就相当于这两个生命周期函数</span></span><br><span class="javascript">    post.id = route.params.id;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><br><span class="javascript">  watchEffect(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> id = post.id;</span><br><span class="javascript">    fetchData();</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/468dhyarpVXUOWm.gif" alt="vue-router"></p><h3 id="2-2-在导航完成前获取数据"><a href="#2-2-在导航完成前获取数据" class="headerlink" title="2.2 在导航完成前获取数据"></a>2.2 在导航完成前获取数据</h3><blockquote><p>通过这种方式，我们在导航转入新的路由前获取数据。我们可以在接下来的组件的 <code>beforeRouteEnter</code> 守卫中获取数据，当数据获取成功后只调用 <code>next</code> 方法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>id: &#123;&#123; post.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 222 &#125; &#125;&quot;</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 333 &#125; &#125;&quot;</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 444 &#125; &#125;&quot;</span>&gt;</span>444<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">post</span>: &#123;&#125;,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">beforeRouteEnter</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-comment">// 不要写在setup里</span></span><br><span class="javascript">      next(<span class="hljs-function">(<span class="hljs-params">vm</span>) =&gt;</span> &#123;</span><br><span class="javascript">        vm.setData(to.params);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">beforeRouteUpdate</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.post = to.params;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">setData</span>(<span class="hljs-params">post</span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.post = post;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果和上图一样。这里有点问题，通过<code>beforeRouteEnter</code>无法获取到<code> setup</code>里的函数、数据等，所以变成了使用 Vue2 的形式来实现。</p><h2 id="3-过渡动效"><a href="#3-过渡动效" class="headerlink" title="3. 过渡动效"></a>3. 过渡动效</h2><h3 id="3-1-transition-简单了解"><a href="#3-1-transition-简单了解" class="headerlink" title="3.1 transition 简单了解"></a>3.1 transition 简单了解</h3><blockquote><p><code>&lt;Transition&gt;</code> 会在一个元素或组件进入和离开 DOM 时应用动画</p></blockquote><p><img src="https://s2.loli.net/2022/03/15/FBeshZCdVrvYul6.png" alt="image-20220304182013408"></p><h3 id="3-2-简单使用"><a href="#3-2-简单使用" class="headerlink" title="3.2 简单使用"></a>3.2 简单使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; Component &#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fade&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 router-view 上使用 v-slot 获取对应的组件，使用 component 动态组件来渲染这个组件，然后用 transition 包裹住这个动态组件</p><p><b style="color: red">对应的路由组件只能有一个根元素，否则过渡将没有效果</b></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.fade-enter-from</span>,<br><span class="hljs-selector-class">.fade-leave-to</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100px</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fade-enter-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2022/03/15/HNFL6CBem9nM3ao.gif" alt="vue-router"></p><h4 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; Component &#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fade&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.fade-enter-from</span>,</span><br><span class="css">  <span class="hljs-selector-class">.fade-leave-to</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100px</span>);</span><br><span class="css">    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.fade-enter-active</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-单个路由的过渡"><a href="#3-3-单个路由的过渡" class="headerlink" title="3.3 单个路由的过渡"></a>3.3 单个路由的过渡</h3><p>原理很简单，路由配置时在<code>meta上</code>添加上<code>trasition</code>属性，再动态地和<code> name</code>结合在一起就行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/post&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Post&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Post.vue&quot;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">transition</span>: <span class="hljs-string">&quot;slide-left&quot;</span>,<br>    &#125;,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">transition</span>: <span class="hljs-string">&quot;slide-right&quot;</span>,<br>    &#125;,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; Component, route &#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">:name</span>=<span class="hljs-string">&quot;route.meta.transition || fade&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再添加上对应的 css 样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.fade-enter-from</span>,<br><span class="hljs-selector-class">.fade-leave-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fade-enter-active</span>,<br><span class="hljs-selector-class">.slide-left-enter-active</span>,<br><span class="hljs-selector-class">.slide-right-enter-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.slide-left-enter-from</span>,<br><span class="hljs-selector-class">.slide-left-leave-to</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">200px</span>);<br>&#125;<br><br><span class="hljs-selector-class">.slide-right-enter-from</span>,<br><span class="hljs-selector-class">.slide-right-leave-to</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">200px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/ueE7mi691FaULNR.gif"></p><h3 id="3-4-基于路由的动态过渡"><a href="#3-4-基于路由的动态过渡" class="headerlink" title="3.4 基于路由的动态过渡"></a>3.4 基于路由的动态过渡</h3><p>根据目标路由和当前路由之间的关系，动态地确定使用的过渡</p><p>如：添加一个 <a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%90%8E%E7%BD%AE%E9%92%A9%E5%AD%90">全局后置钩子</a>，根据路径的深度动态添加信息到 <code>meta</code> 字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">router.afterEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> toDepth = to.path.split(<span class="hljs-string">&quot;/&quot;</span>).length;<br>  <span class="hljs-keyword">const</span> fromDepth = <span class="hljs-keyword">from</span>.path.split(<span class="hljs-string">&quot;/&quot;</span>).length;<br><br>  to.meta.transition = toDepth &lt; fromDepth ? <span class="hljs-string">&quot;slide-right&quot;</span> : <span class="hljs-string">&quot;slide-left&quot;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/04/M2gyJ1QtPL4aqEV.gif" alt="vue-router"></p><h2 id="4-滚动行为"><a href="#4-滚动行为" class="headerlink" title="4. 滚动行为"></a>4. 滚动行为</h2><p>在创建 Router 示例时，提供一个<code> scrollBehavior</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  <span class="hljs-attr">routes</span>: [...],<br>  scrollBehavior (to, <span class="hljs-keyword">from</span>, savedPosition) &#123;<br>    <span class="hljs-comment">// return 期望滚动到哪个的位置</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="4-1-普通用法"><a href="#4-1-普通用法" class="headerlink" title="4.1 普通用法"></a>4.1 普通用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">50</span>, <span class="hljs-comment">// 始终滚动到距离顶部50px处</span><br>    &#125;;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/EV8YKSlftByWXr3.gif" alt="vue-router1"></p><p>如果浏览器支持<a href="https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions/behavior">滚动行为</a>，可以通过<code>behavior</code>变得更流畅</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">50</span>, <span class="hljs-comment">// 始终滚动到距离顶部50px处</span><br>      <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;smooth&quot;</span>,<br>    &#125;;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/oOms145iPFjnIMG.gif" alt="vue-router1"></p><h3 id="4-2-通过-el实现相对元素的偏移"><a href="#4-2-通过-el实现相对元素的偏移" class="headerlink" title="4.2 通过 el实现相对元素的偏移"></a>4.2 通过<code> el</code>实现相对元素的偏移</h3><p><code> el</code>可接受一个 CSS 选择器或一个 DOM 元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;h2&quot;</span>,<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">50</span>,<br>    &#125;;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/b4Dv5ZBGsw7OLNm.gif" alt="vue-router1"></p><h3 id="4-3-恢复之前的位置"><a href="#4-3-恢复之前的位置" class="headerlink" title="4.3 恢复之前的位置"></a>4.3 恢复之前的位置</h3><p>返回 <code>savedPosition</code>，在按下 后退/前进 按钮时，就会恢复之前的位置。像浏览器的原生表现那样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (savedPosition) &#123;<br>      <span class="hljs-comment">// console.log(savedPosition)</span><br>      <span class="hljs-keyword">return</span> savedPosition;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,<br>      &#125;;<br>    &#125;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/bg2IuKXjRE1rPoY.gif" alt="vue-router1"></p><h3 id="4-4-延迟滚动"><a href="#4-4-延迟滚动" class="headerlink" title="4.4 延迟滚动"></a>4.4 延迟滚动</h3><p>通过返回一个 Promise 来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        resolve(&#123;<br>          <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,<br>          <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;smooth&quot;</span>,<br>        &#125;);<br>      &#125;, <span class="hljs-number">500</span>);<br>    &#125;);<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/VkiJHyfjaZDvIPc.gif" alt="vue-router1"></p><h2 id="5-路由懒加载"><a href="#5-路由懒加载" class="headerlink" title="5. 路由懒加载"></a>5. 路由懒加载</h2><blockquote><p>把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，会更高效</p></blockquote><p>静态导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> User <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../components/User.vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: User,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><p>动态导入：(实际上还省字)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><h2 id="6-动态路由"><a href="#6-动态路由" class="headerlink" title="6. 动态路由"></a>6. 动态路由</h2><h3 id="6-1-添加路由"><a href="#6-1-添加路由" class="headerlink" title="6.1 添加路由"></a>6.1 添加路由</h3><p>路由配置：初始只有一个路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>在导航守卫处添加新路由：实际上要限制那些页面的权限就可以这样添加，只有满足条件才会动态添加路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  router.addRoute(&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./components/User.vue&quot;</span>),<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="6-2-删除路由"><a href="#6-2-删除路由" class="headerlink" title="6.2 删除路由"></a>6.2 删除路由</h3><p><b style="color: red">当路由被删除时，所有的别名和子路由都会被同时删掉</b></p><h4 id="6-2-1-通过添加一个名字冲突的路由"><a href="#6-2-1-通过添加一个名字冲突的路由" class="headerlink" title="6.2.1 通过添加一个名字冲突的路由"></a>6.2.1 通过添加一个名字冲突的路由</h4><p>如果添加与现有名称相同的路由，会先删除路由，再添加路由。</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">router.addRoute(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">component</span>: About &#125;);<br><span class="hljs-comment">// 这将会删除之前已经添加的路由，因为他们具有相同的名字且名字必须是唯一的</span><br>router.addRoute(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/other&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">component</span>: Other &#125;);<br></code></pre></td></tr></table></figure></blockquote><h4 id="6-2-2-通过调用-router-addRoute-返回的回调"><a href="#6-2-2-通过调用-router-addRoute-返回的回调" class="headerlink" title="6.2.2 通过调用 router.addRoute() 返回的回调"></a>6.2.2 通过调用 <code>router.addRoute()</code> 返回的回调</h4><p>情境：路由没有名称，没法覆盖删除掉路由</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> removeRoute = router.addRoute(routeRecord);<br>removeRoute(); <span class="hljs-comment">// 删除路由如果存在的话</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="6-2-3-通过使用-router-removeRoute-按名称删除路由"><a href="#6-2-3-通过使用-router-removeRoute-按名称删除路由" class="headerlink" title="6.2.3 通过使用 router.removeRoute() 按名称删除路由"></a>6.2.3 通过使用 <code>router.removeRoute()</code> 按名称删除路由</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">router.addRoute(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">component</span>: About &#125;);<br><span class="hljs-comment">// 删除路由</span><br>router.removeRoute(<span class="hljs-string">&quot;about&quot;</span>);<br></code></pre></td></tr></table></figure></blockquote><h3 id="6-3-添加嵌套路由"><a href="#6-3-添加嵌套路由" class="headerlink" title="6.3 添加嵌套路由"></a>6.3 添加嵌套路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">router.addRoute(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/admin&quot;</span>,<br>  <span class="hljs-attr">component</span>: Admin,<br>  <span class="hljs-attr">children</span>: [&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;settings&quot;</span>, <span class="hljs-attr">component</span>: AdminSettings &#125;],<br>&#125;);<br></code></pre></td></tr></table></figure><p>也可以将路由的<code> name</code>作为第一个参数传递给<code> router.addRoute()</code>，这样就可以有效的添加路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">router.addRoute(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/admin&quot;</span>, <span class="hljs-attr">component</span>: Admin &#125;);<br>router.addRoute(<span class="hljs-string">&quot;admin&quot;</span>, &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;settings&quot;</span>, <span class="hljs-attr">component</span>: AdminSettings &#125;);<br></code></pre></td></tr></table></figure><h3 id="6-4-查看现有路由"><a href="#6-4-查看现有路由" class="headerlink" title="6.4 查看现有路由"></a>6.4 查看现有路由</h3><ul><li><a href="https://router.vuejs.org/zh/api/#hasroute"><code>router.hasRoute()</code></a>：检查路由是否存在。</li><li><a href="https://router.vuejs.org/zh/api/#getroutes"><code>router.getRoutes()</code></a>：获取一个包含所有路由记录的数组。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解JavaScript 执行机制</title>
      <link href="/2022/03/14/javascript-eventloop/"/>
      <url>/2022/03/14/javascript-eventloop/</url>
      
        <content type="html"><![CDATA[<h1 id="详解-JavaScript-执行机制"><a href="#详解-JavaScript-执行机制" class="headerlink" title="详解 JavaScript 执行机制"></a>详解 JavaScript 执行机制</h1><h2 id="热身"><a href="#热身" class="headerlink" title="热身"></a>热身</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 先打印1， 3， 2s后打印2 */</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">/* 先打印1， 3， 后打印2 */</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>第一个例子的话不难理解，定时器函数就是 1s 后才调用回调函数.</p><p>而第二个例子则可能优点小问题，JavaScript 从上到下执行，那么遇到 0s 的计时器函数，就应该先输出 2 才对啊。这就是因为后面要提到的 JavaScript 执行机制导致的啦，因为 setTimeout 是异步任务。</p><h2 id="JavaScript-是单线程"><a href="#JavaScript-是单线程" class="headerlink" title="JavaScript 是单线程"></a>JavaScript 是单线程</h2><p>JavaScript 的核心特征就是<strong>单线程</strong>，即同一时间只能做一件事。</p><p>为什么它是单线程呢？因为 JavaScript 作为浏览器脚本语言，它的主要用途就是与用户互动、操作 DOM。既然如此，如果它不是单线程的话，假如一个线程在 DOM 节点上添加内容，同时另一个线程删除这个节点。可以看出，如果 JavaScript 不是单线程的话，那么将会导致同步问题。</p><br><h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><p>JavaScript 是单线程语言，这也就导致了如果有一个任务等待很长的时间，这个时候就会导致阻塞，程序就会“卡死”，用户体验非常差。所以 JavaScript 需要异步任务。</p><br><p>那么，为什么 JavsScript 明明是单线程的，为什么能异步呢？这是因为浏览器是多线程的，通过事件循环<code> Event Loop</code>即可实现异步。</p><br><p>所有任务都可以分成两种。</p><ul><li><strong>同步任务</strong>：在主线程上排队执行的任务，只有前一个任务执行完，才能执行后一个任务</li><li><strong>异步任务</strong>：不进入主线程，而是进入任务队列的任务。<b style="color: red">当异步任务的触发条件满足时，异步任务才会进入任务队列，而当主线程空了，就会去任务队列中取异步任务到主线程中执行</b></li></ul><br><p><strong>常见异步任务</strong>：</p><ul><li>JS 事件</li><li>AJAX 请求</li><li>setTimeout 和 setInterval</li><li>Promise(<b style="color: red">Promise 定义部分为同步任务，回调部分为异步任务</b>)</li></ul><br><h2 id="Event-Loop-事件循环机制-1"><a href="#Event-Loop-事件循环机制-1" class="headerlink" title="Event Loop 事件循环机制 1"></a>Event Loop 事件循环机制 1</h2><ol><li>所有同步任务进入主线程，而异步任务则是进入<code> Event Table</code>注册回调函数</li><li>当异步任务的<b style="color: red">触发条件满足</b>时，异步任务注册的回调函数将会从<code> Event Table</code>移入到任务队列<code> Event Queue</code>中</li><li>当主线程中的所有同步任务执行完毕后，系统就会去看看<code> Event Queue</code>中看看有没有回调函数，有的话就推到主线程中</li><li>主线程不断重复上面的步骤</li></ol><p><img src="https://s2.loli.net/2022/03/14/hANCZjRUYIsFrgf.jpg" alt="preview"></p><p>这就是<strong>Event Loop</strong></p><h2 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h2><p>异步任务又可以进行更精细的划分为宏任务和微任务。</p><h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><p>setTimeout、setInterval、requestAnimationFrame</p><ul><li>当宏任务队列中的任务全部都执行完之后，如果微任务队列不为空，则先执行微任务队列中的所有任务</li></ul><h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><p>Promise 回调部分、process.nextTick</p><ul><li>在上一个宏任务队列执行完毕后如果有微任务就会执行微任务队列中的所有元素</li></ul><h2 id="Event-Loop-事件循环机制-2"><a href="#Event-Loop-事件循环机制-2" class="headerlink" title="Event Loop 事件循环机制 2"></a>Event Loop 事件循环机制 2</h2><ol><li>首先执行<code> script</code>下的同步任务</li><li>执行过程中，如果遇到异步任务，则需要把它放到对应的任务队列中(遇到宏任务，则放到宏任务中；遇到微任务，则放到微任务队列中)</li><li>同步任务执行完毕，查看微任务队列<ul><li>如果存在微任务，则将微任务队列全部执行(<b style="color: red">包括执行微任务中产生的新微任务</b>)</li><li>如果不存在微任务，则查看宏任务队列，执行第一个宏任务，宏任务执行完后，又看看微任务队列是否有任务，有的话，又先全部执行完微任务队列，重复上述操作，知道宏任务队列为空。</li></ul></li></ol><p><img src="https://s2.loli.net/2022/03/14/xzo2leVm165AkLd.png" alt="preview"></p><h3 id="练手-1"><a href="#练手-1" class="headerlink" title="练手 1"></a>练手 1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">3</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>  &#125;<br>  resolve();<br>&#125;).then(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>);<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>);<br></code></pre></td></tr></table></figure><p>打印顺序：1, 3, 4, 5, 7, 6, 2</p><br><p>解析：</p><ol><li>首先，程序从上往下走，直接输出 1，遇到<code> setTimeout</code>后，把它放到宏任务队列中<ul><li>此时，宏任务队列中为<code>[setTimeout]</code>(<strong>这里用数组表示任务队列，左边代表先进入的任务队列</strong>)</li></ul></li><li>继续往下跑，遇到<code> Promise</code>，因为<b style="color: red">Promise 定义部分为同步任务</b>，依次输出 3, 4, 5，遇到<code> Promise.then()</code>，把它放到微任务队列中<ul><li>此时，宏任务队列为<code>[setTimeout]</code></li><li>此时，微任务队列为<code>[Promise.then()]</code></li></ul></li><li>输出 7 后，执行微任务队列中全部的任务，输出 6， 再执行宏任务队列中的任务，输出 2</li></ol><h3 id="练手-2"><a href="#练手-2" class="headerlink" title="练手 2"></a>练手 2</h3><p><strong>题目是本人自己想的，分析有误请见谅(希望评论指示)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>  <span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>  &#125;);<br>&#125;, <span class="hljs-number">10</span>);<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br>  resolve(<span class="hljs-number">5</span>);<br>&#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>    <span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>);<br>    &#125;);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>);<br>    &#125;);<br>  &#125;)<br>  .then(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">8</span>);<br>  &#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">9</span>);<br></code></pre></td></tr></table></figure><p>输出顺序：1, 4, 9, 5, 6, 8, 7, 2, 3</p><br><p>解析：</p><ol><li><strong>先输出 1</strong>， 遇到定时器，但是此时并不满足触发条件，所以 2(后面还有其他的内容)只能存放在<code> Event Table</code>中<ul><li>此时，<code> Event Table</code>中有<code> [2(后面还有其他的内容)]</code>。<b style="color: red"><code> Event Table</code>中没有顺序，满足触发条件后，就会进入对应的任务队列</b></li></ul></li><li><strong>输出 4</strong>，5(后面还有内容)进入微任务队列<ul><li>此时，<code> Event Table</code>中有<code> [2(后面还有其他的内容)]</code></li><li>微任务队列为[5(后面还有内容)]</li></ul></li><li>8 进入微任务队列<ul><li>此时，<code> Event Table</code>中有<code> [2(后面还有其他的内容)]</code></li><li>微任务队列为[5(后面还有内容), 8]</li></ul></li><li><strong>输出 9</strong>， 然后执行微任务中的任务<ol><li><strong>输出 5</strong>， 6 进入微任务队列, 7 进入宏任务队列<ul><li>此时，<code> Event Table</code>中有<code> [2(后面还有其他的内容)]</code></li><li>微任务队列为<code>[6, 8]</code>，<b style="color: red">6 会在 8 之前，因为 6 是微任务队列 5 里的微任务</b></li><li>宏任务队列为[7]</li></ul></li><li>依次执行完微任务队列中的任务，然后再执行宏任务队列的任务。<strong>输出顺序为 6，8，7</strong></li></ol></li><li>10ms 后，满足触发条件，进入宏任务队列，此时，宏任务队列和微任务队列中都没有任务，所以直接执行。<strong>输出 2</strong>，3 进入微任务队列，<strong>输出 3</strong></li></ol><br><h2 id="async-await"><a href="#async-await" class="headerlink" title="async, await"></a>async, await</h2><blockquote><p>async/await 本质上还是基于 Promise 的一些封装，而 Promise 是属于微任务的一种。所以在使用 await 关键字与 Promise.then 相同。<br>async 函数在 await 之前的代码都是同步执行的，await 之后的代码则是属于微任务(类似于 Promise)<b style="color: red">await 的表达式还是属于同步任务</b></p></blockquote><p>下面就继续练手</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">await</span> async2();<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>&#125;<br>async1();<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br><br>  <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>);<br>    resolve(<span class="hljs-number">6</span>);<br>  &#125;).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>  &#125;);<br><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>);<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">8</span>);<br></code></pre></td></tr></table></figure><p>输出顺序为：1, 2, 4, 5, 8, 6, 7, 3</p><br><p>分析：</p><ol><li><strong>先输出 1</strong>，调用<code> async1</code>函数，因为<code> await</code>之前包括<code> await</code>的表达式都是同步任务，所以，<strong>输出 2</strong>后，进入到<code> async2</code>函数中</li><li><strong>输出 4</strong>，<code>await</code>一个<code> Promise</code>也是同理，<strong>输出 5</strong>，6 进入微任务队列，因为<b style="color: red">await 之后的代码则是属于微任务(不包括 await 的表达式)</b>，所以 7 进入微任务队列<ul><li>此时，微任务队列为[6, 7]</li></ul></li><li>执行完<code> async2</code>函数后，回到<code> async1</code>函数中，之后的 3 进入微任务队列<ul><li>此时，微任务队列为[6, 7, 3]</li></ul></li><li><strong>输出 8</strong>，执行微任务队列中的任务，<strong>输出 6, 7, 3</strong></li></ol><br><p>参考链接：<br><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html">JavaScript 运行机制详解：再谈 Event Loop</a><br><a href="https://zhuanlan.zhihu.com/p/379475079">彻底搞懂 JavaScript 执行机制</a><br><a href="https://juejin.cn/post/7020328988715270157">JavaScript 之彻底理解 EventLoop</a><br><a href="https://segmentfault.com/a/1190000012806637">10 分钟理解 JS 引擎的执行机制</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS实现渐变字</title>
      <link href="/2022/03/13/gradients-word/"/>
      <url>/2022/03/13/gradients-word/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-实现渐变字"><a href="#CSS-实现渐变字" class="headerlink" title="CSS 实现渐变字"></a>CSS 实现渐变字</h1><p><img src="https://s2.loli.net/2022/03/13/AmGSj5UWvXZO6gw.png" alt="image-20220309200715875"></p><p>先来下前置知识。如果想速通，也可指直接到<a href="#jump">渐变字实现</a></p><h2 id="什么是渐变"><a href="#什么是渐变" class="headerlink" title="什么是渐变"></a>什么是渐变</h2><blockquote><p>CSS3 渐变（gradients）可以让你在两个或多个指定的颜色之间显示平稳的过渡。</p><p>以前，你必须使用图像来实现这些效果。但是，通过使用 CSS3 渐变（gradients），你可以减少下载的时间和宽带的使用。此外，渐变效果的元素在放大时看起来效果更好，因为渐变（gradient）是由浏览器生成的。</p></blockquote><h2 id="渐变类型"><a href="#渐变类型" class="headerlink" title="渐变类型"></a>渐变类型</h2><p>渐变主要有三种类型：线性渐变(<code> linear-gradient</code>)、径向渐变(<code> radial-gradient</code>)、圆锥渐变(<code> conic-gradient</code>)</p><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><p>线性渐变创建了一条沿直线前进的颜色带。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(direction, color-start, ..., color-end);<br></code></pre></td></tr></table></figure><ul><li>第一个参数为<strong>渐变方向</strong></li><li>第二个参数为<strong>渐变起点</strong></li><li>第三个参数为<strong>渐变终点</strong></li></ul><br><h4 id="基础线性渐变"><a href="#基础线性渐变" class="headerlink" title="基础线性渐变"></a>基础线性渐变</h4><p>使用<code> linear-gradient</code>函数，至少指定两种颜色即可(也被称为色标)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(red, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(red, blue, purple);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/R8zcYlsv2UZXOED.png" alt="image-20220309000309356"></p><h4 id="改变渐变方向"><a href="#改变渐变方向" class="headerlink" title="改变渐变方向"></a>改变渐变方向</h4><p>线性渐变的方向默认是从上到下，可以通过关键字<code> to</code>改变渐变方向。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, blue, purple);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to bottom right, red, blue, purple);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/xY7GDQJC35ef24R.png" alt="image-20220309000853385"></p><h4 id="设置渐变角度"><a href="#设置渐变角度" class="headerlink" title="设置渐变角度"></a>设置渐变角度</h4><p>上面说了，可以通过关键字<code> to</code>来改变角度，但是可选方向有较大限制。此时可以给渐变设置一个具体的角度。</p><p><img src="https://s2.loli.net/2022/03/13/CSpdiucQHfUPzsO.png" alt="image-20220309154501119"></p><p><strong>此图来自菜鸟教程</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span>,<br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">0deg</span>, red, blue, purple);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">60deg</span>, red, blue, purple);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">180deg</span>, red, blue, purple);<br>&#125;<br><br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(-<span class="hljs-number">60deg</span>, red, blue, purple);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/JQvosu2C3YmVD5z.png" alt="image-20220309001836218"></p><h4 id="颜色终止位置"><a href="#颜色终止位置" class="headerlink" title="颜色终止位置"></a>颜色终止位置</h4><p>可以给颜色设置像素值或百分比等其他数值来调整位置。没有明确设置的话，会自动计算</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">90deg</span>, red <span class="hljs-number">70%</span>, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">90deg</span>, red <span class="hljs-number">30%</span>, blue <span class="hljs-number">70%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">180deg</span>, red <span class="hljs-number">200px</span>, blue);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/ol751QfJuVFE4pR.png" alt="image-20220309083036610"></p><h4 id="创建实线"><a href="#创建实线" class="headerlink" title="创建实线"></a>创建实线</h4><p>根据颜色终止位置的知识点，很容易就能知道可以通过设置相邻的颜色的终止位置设置为相同即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red <span class="hljs-number">50%</span>, blue <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">135deg</span>, red <span class="hljs-number">33%</span>, blue <span class="hljs-number">33%</span>, blue <span class="hljs-number">66%</span>, purple <span class="hljs-number">66%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/vponawje52IUPA6.png" alt="image-20220309084146642"></p><h4 id="设置渐变中心点"><a href="#设置渐变中心点" class="headerlink" title="设置渐变中心点"></a>设置渐变中心点</h4><p>默认情况下，渐变会平滑地从一种颜色过渡到另一种颜色。但是可以设置一个值修改渐变的中心点。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, <span class="hljs-number">50%</span>, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, <span class="hljs-number">80%</span>, blue);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/RfwzUOsLdcDpEnl.png" alt="image-20220309084757700"></p><h4 id="创建色带和条纹"><a href="#创建色带和条纹" class="headerlink" title="创建色带和条纹"></a>创建色带和条纹</h4><p>要创建一个颜色的区域的话，一个颜色需要两个位置，这样子，这个颜色在两个颜色起止点都将会是完全饱和(即会保持该饱和度)。而和相邻的不同颜色还是正常的过渡。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<br>    to right,<br>    red <span class="hljs-number">30%</span>,<br>    blue <span class="hljs-number">35%</span>,<br>    blue <span class="hljs-number">65%</span>,<br>    purple <span class="hljs-number">70%</span><br>  );<br><br>  <span class="hljs-comment">/* 简洁写法 */</span><br>  <span class="hljs-comment">/* background: linear-gradient(to right, red 30%, blue 35% 65%, purple 70%);   */</span><br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red <span class="hljs-number">33%</span>, blue <span class="hljs-number">33%</span> <span class="hljs-number">66%</span>, purple <span class="hljs-number">66%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/EMTkJjYA6B38uc9.png" alt="image-20220309090648171"></p><h4 id="堆叠背景、渐变"><a href="#堆叠背景、渐变" class="headerlink" title="堆叠背景、渐变"></a>堆叠背景、渐变</h4><p>渐变支持透明度，因此可以堆叠多个背景。背景从上到下堆叠，第一个指定在顶部</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">480px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to left, transparent <span class="hljs-number">50%</span>, red),<br>    <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;https://s2.loli.net/2022/03/09/8OjEFf5GQy6iTcm.png&quot;</span>) no-repeat;<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">800px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">480px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;https://s2.loli.net/2022/03/09/8OjEFf5GQy6iTcm.png&quot;</span>)<br>      no-repeat, <span class="hljs-built_in">linear-gradient</span>(to left, transparent <span class="hljs-number">50%</span>, red);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">800px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/B3ObCwQDSXgoKVG.png" alt="image-20220309114848001"></p><br><p>同理：渐变也是可以和其他渐变叠加的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">480px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to left, transparent, red), <span class="hljs-built_in">linear-gradient</span>(to top, transparent, blue);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/m94dTQjl7fZE8au.png" alt="image-20220309122310300"></p><h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><p>径向渐变类似于线性渐变，只是它们从中心点向外辐射。可以指定该中心点在哪里。也可以把它们做成圆形或椭圆形。</p><p>语法：</p><p><code>radial-gradient(center, shape size, start-color, ..., last-color);</code></p><ul><li>第一个参数为<strong>渐变起点</strong></li><li>第二个参数为<strong>渐变形状</strong>和<strong>渐变大小</strong></li><li>第三个参数为<strong>渐变起点色标</strong></li><li>第四个参数为<strong>渐变终点色标</strong></li></ul><br><h4 id="基础径向渐变"><a href="#基础径向渐变" class="headerlink" title="基础径向渐变"></a>基础径向渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red, blue, purple);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/4Lg2QEa5jIsRM9J.png" alt="image-20220309123443478"></p><h4 id="颜色终止位置-1"><a href="#颜色终止位置-1" class="headerlink" title="颜色终止位置"></a>颜色终止位置</h4><p>和线性渐变一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/tyrkoNGT74EevBm.png" alt="image-20220309131245750"></p><h4 id="设置渐变中心"><a href="#设置渐变中心" class="headerlink" title="设置渐变中心"></a>设置渐变中心</h4><p>通过关键字<code>at</code>实现: 第一个参数是横轴，最左是 0%, 最右是 100%. 第二个参数是纵轴.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-comment">/* 关键字at: 第一个参数是横轴，最左是0%, 最右是100%. 第二个参数是纵轴. */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(at <span class="hljs-number">0%</span> <span class="hljs-number">100%</span>, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(<br>    at <span class="hljs-number">100px</span> <span class="hljs-number">200px</span>,<br>    red <span class="hljs-number">10px</span>,<br>    yellow <span class="hljs-number">30%</span>,<br>    <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/dFDMOVX4xnE8tGK.png" alt="image-20220309131916527"></p><h4 id="设置形状"><a href="#设置形状" class="headerlink" title="设置形状"></a>设置形状</h4><p>shape 参数定义了形状。可以是值 circle 或 ellipse。其中，circle 表示圆形，ellipse 表示椭圆形。默认值是 ellipse</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(circle, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(ellipse, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/nV4MxdHZIANbzD7.png" alt="image-20220309154415832"></p><p><b style="color: red">如果盒子是正方形，那么设置形状为椭圆可能不起效</b></p><h4 id="设置渐变大小"><a href="#设置渐变大小" class="headerlink" title="设置渐变大小"></a>设置渐变大小</h4><p>size 参数定义了渐变的大小。它可以是以下四个值：</p><ul><li><code>closest-side</code>，指定径向渐变的半径长度为<strong>从圆心到离圆心最近的边</strong></li><li><code>farthest-side</code>，指定径向渐变的半径长度为<strong>从圆心到离圆心最远的边</strong></li><li><code>closest-corner</code>，指定径向渐变的半径长度为<strong>从圆心到离圆心最近的角</strong></li><li><code>farthest-corner</code>，指定径向渐变的半径长度为<strong>从圆心到离圆心最远的角</strong></li></ul><p>默认值为<code>farthest-corner</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span>,<br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(closest-side, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(farthest-side, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(<br>    closest-corner,<br>    red <span class="hljs-number">10px</span>,<br>    yellow <span class="hljs-number">30%</span>,<br>    <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span><br>  );<br>&#125;<br><br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(<br>    farthest-corner,<br>    red <span class="hljs-number">10px</span>,<br>    yellow <span class="hljs-number">30%</span>,<br>    <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/UGvjcOD1HkRQySW.png" alt="image-20220309171611188"></p><h4 id="堆叠径向渐变"><a href="#堆叠径向渐变" class="headerlink" title="堆叠径向渐变"></a>堆叠径向渐变</h4><p>和线性渐变一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(<br>      at <span class="hljs-number">50%</span> <span class="hljs-number">0</span>,<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>),<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    ), <span class="hljs-built_in">radial-gradient</span>(at <span class="hljs-number">25%</span> <span class="hljs-number">75%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.5</span>), <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>)),<br>    <span class="hljs-built_in">radial-gradient</span>(at <span class="hljs-number">75%</span> <span class="hljs-number">75%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>), <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/Ol4kNXsi9pQMyYh.png" alt="image-20220309174059818"></p><h3 id="重复渐变"><a href="#重复渐变" class="headerlink" title="重复渐变"></a>重复渐变</h3><blockquote><p><code>linear-gradient</code>和<code>radial-gradient</code>属性不支持自动重复色标。但是，<code>repeating-linear-gradient</code> 和<code>repeating-radial-gradient</code>属性可用于提供此功能。</p></blockquote><h4 id="重复线性渐变"><a href="#重复线性渐变" class="headerlink" title="重复线性渐变"></a>重复线性渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">repeating-linear-gradient</span>(<span class="hljs-number">45deg</span>, red <span class="hljs-number">0</span> <span class="hljs-number">20px</span>, blue <span class="hljs-number">20px</span> <span class="hljs-number">40px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/E98RIZTLbDrVWgu.png" alt="image-20220309175418709"></p><p>看多难受，勿贪看。</p><h4 id="重复径向渐变"><a href="#重复径向渐变" class="headerlink" title="重复径向渐变"></a>重复径向渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">repeating-radial-gradient</span>(red <span class="hljs-number">0</span> <span class="hljs-number">20px</span>, blue <span class="hljs-number">20px</span> <span class="hljs-number">40px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/6womYBMjpVqb591.png" alt="image-20220309175910740"></p><h2 id="background-clip-属性"><a href="#background-clip-属性" class="headerlink" title="background-clip 属性"></a>background-clip 属性</h2><p><code>background-clip</code> 设置元素的背景（背景图片或颜色）是否延伸到边框、内边距盒子、内容盒子下面。</p><ul><li><p>border-box：背景延伸至边框外沿（但是在边框下层）。</p></li><li><p>padding-box：背景延伸至内边距（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding"><code>padding</code></a>）外沿。不会绘制到边框处。</p></li><li><p>content-box：背景被裁剪至内容区（content box）外沿。</p></li><li><p>text：背景被裁剪成文字的前景色。（即文字的背景即为区块的背景，文字之外的区域都将被裁剪掉）</p></li></ul><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">40px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span>,<br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">20px</span> dashed blue;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background-clip</span>: padding-box;<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background-clip</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background-clip</span>: content-box;<br>&#125;<br><br><span class="hljs-selector-class">.box4</span> &#123;<br>  -webkit-<span class="hljs-attribute">background-clip</span>: text;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/oqR4vUajV9PhWdz.png" alt="image-20220309193146881"></p><p><b style="color: red">一眼望去，最后一个最特殊</b>，所以要加上前缀<code> -webkit</code>，好吧，原因并不是这样。网上有种说法是 background-clip: text; 只兼容 chrome,要想兼容其他浏览器就要用: <code>-webkit-background-clip: text;</code>。然而，我的 chrome 浏览器都需要<code>-webkit-background-clip: text;</code>才能实现。<b style="color: red">另外，文字的颜色应该设置为透明，否则会覆盖掉背景色。</b></p><h2 id="渐变字实现"><a href="#渐变字实现" class="headerlink" title="渐变字实现"></a><span id="jump">渐变字实现</span></h2><p>看到这里，基本就能实现渐变字啦。</p><p>代码如下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>渐变字实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(</span><br><span class="css">          to right,</span><br><span class="css">          <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">0%</span>,</span><br><span class="css">          <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.8</span>) <span class="hljs-number">50%</span>,</span><br><span class="css">          <span class="hljs-built_in">rgb</span>(<span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">128</span>) <span class="hljs-number">80%</span></span><br><span class="css">        );</span><br><span class="css">        -webkit-<span class="hljs-attribute">background-clip</span>: text;</span><br><span class="css">        <span class="hljs-attribute">color</span>: transparent;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>赤蓝紫<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/BL9Zesh6qIzRw2g.png" alt="image-20220309200709951"></p><br /><p>参考链接：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Images/Using_CSS_gradients">使用 CSS 渐变 - CSS（层叠样式表） | MDN (mozilla.org)</a></p><p><a href="https://www.runoob.com/css3/css3-gradients.html">CSS3 渐变 | 菜鸟教程 </a></p><p><a href="https://blog.csdn.net/weixin_45337959/article/details/123004306">CSS3 新特性概述_阿锐丫的博客-CSDN 博客_css3 新增特性</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Router深入学习(一)</title>
      <link href="/2022/03/12/vue-router-deep-1/"/>
      <url>/2022/03/12/vue-router-deep-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-Router-深入学习-一"><a href="#Vue-Router-深入学习-一" class="headerlink" title="Vue Router 深入学习(一)"></a>Vue Router 深入学习(一)</h1><p>之前的笔记：<a href="https://clz.vercel.app/2021/10/15/vue-3/#toc-heading-9">Vue 路由</a></p><p>通过阅读文档，自己写一些 demo 来加深自己的理解。(主要针对 Vue3)</p><h2 id="1-动态路由匹配"><a href="#1-动态路由匹配" class="headerlink" title="1. 动态路由匹配"></a>1. 动态路由匹配</h2><h3 id="1-1-捕获所有路由-404-路由"><a href="#1-1-捕获所有路由-404-路由" class="headerlink" title="1.1 捕获所有路由(404 路由)"></a>1.1 捕获所有路由(404 路由)</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">// 将匹配所有内容并将其放在 `$route.params.pathMatch` 下</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:pathMatch(.*)*&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;NotFound&quot;</span>, <span class="hljs-attr">component</span>: NotFound &#125;,<br>  <span class="hljs-comment">// 将匹配以 `/user-` 开头的所有内容，并将其放在 `$route.params.afterUser` 下</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user-:afterUser(.*)&quot;</span>, <span class="hljs-attr">component</span>: UserGeneric &#125;,<br>];<br></code></pre></td></tr></table></figure></blockquote><p><strong>使用</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user-:afterUser(.*)&quot;</span>,<br>    <span class="hljs-comment">// 将匹配以 `/user-` 开头的所有内容，并将其放在 `$route.params.afterUser` 下</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:pathMatch(.*)*&quot;</span>,<br>    <span class="hljs-comment">// 将匹配所有内容并将其放在 `$route.params.pathMatch` 下</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;NotFound&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/NotFound.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>app.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  &#123;&#123; route.params &#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/NpOPi2VMot3wJfh.png" alt="image-20220302183444782"></p><h2 id="2-路由的匹配语法"><a href="#2-路由的匹配语法" class="headerlink" title="2 路由的匹配语法"></a>2 路由的匹配语法</h2><p>主要是通过正则表达式的语法来实现</p><h3 id="2-1-在参数中自定义正则"><a href="#2-1-在参数中自定义正则" class="headerlink" title="2.1 在参数中自定义正则"></a>2.1 在参数中自定义正则</h3><p>语法：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">// /:orderId -&gt; 仅匹配数字</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:orderId(\\d+)&quot;</span> &#125;,<br>  <span class="hljs-comment">// /:productName -&gt; 匹配其他任何内容</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:productName&quot;</span> &#125;,<br>];<br></code></pre></td></tr></table></figure></blockquote><p>实践：</p><p>路由配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:userid(\\d+)&quot;</span>, <span class="hljs-comment">// 两个\是因为会被转义</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;UserId&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/UserId.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:username&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;UserName&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/UserName.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/kU9syn7R3pvidCm.gif" alt="vue-router"></p><h3 id="2-2-可重复的参数"><a href="#2-2-可重复的参数" class="headerlink" title="2.2 可重复的参数"></a>2.2 可重复的参数</h3><p>可以使用<code> *</code>(0 个或多个)和<code> +</code>(1 个或多个)将参数标记为可重复</p><p>语法：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">// /:chapters -&gt;  匹配 /one, /one/two, /one/two/three, 等</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:chapters+&quot;</span> &#125;,<br>  <span class="hljs-comment">// /:chapters -&gt; 匹配 /, /one, /one/two, /one/two/three, 等</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:chapters*&quot;</span> &#125;,<br>];<br></code></pre></td></tr></table></figure></blockquote><p>实践：</p><p><b style="color: red">*</b>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:chapters*&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Chapters&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Chapters.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/EBaOnpYLSKrdQjz.gif" alt="vue-router"></p><p><b style="color: red">+</b>：</p><p><img src="https://s2.loli.net/2022/03/12/Yhb82rAMQsOk1vF.gif" alt="vue-router"></p><h3 id="2-3-可选参数"><a href="#2-3-可选参数" class="headerlink" title="2.3 可选参数"></a>2.3 可选参数</h3><p>使用 <code>?</code> 修饰符(0 个或 1 个)将一个参数标记为可选</p><p>语法：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">// 匹配 /users 和 /users/posva</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/users/:userId?&quot;</span> &#125;,<br>  <span class="hljs-comment">// 匹配 /users 和 /users/42</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/users/:userId(\\d+)?&quot;</span> &#125;,<br>];<br></code></pre></td></tr></table></figure></blockquote><p>实践：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:userid(\\d+)?&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:pathMatch(.*)*&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;NotFound&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/NotFound.vue&quot;</span>),<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/TVynubejJ6OfsFa.png" alt="image-20220303103934235"></p><p>如果没加可选限制，那么访问/user 时也会匹配到 404 去</p><p><img src="https://s2.loli.net/2022/03/12/cIr1pqQnsf4CeRE.png" alt="image-20220303104039713"></p><h2 id="3-编程式导航"><a href="#3-编程式导航" class="headerlink" title="3. 编程式导航"></a>3. 编程式导航</h2><p><strong><code>params</code> 不能与 <code>path</code> 一起使用，而应该使用<code>name</code>(命名路由)</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript">      <span class="hljs-keyword">const</span> router = useRouter();</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// // query编程式导航传参</span></span><br><span class="javascript">      <span class="hljs-comment">// router.push(&#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//   path: &quot;/user/123&quot;,</span></span><br><span class="javascript">      <span class="hljs-comment">//   query: &#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//     id: 666</span></span><br><span class="javascript">      <span class="hljs-comment">//   &#125;</span></span><br><span class="javascript">      <span class="hljs-comment">// &#125;)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// params编程式导航传参</span></span><br><span class="javascript">      router.push(&#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-comment">// 需要使用命名路由</span></span><br><span class="javascript">        <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">userid</span>: <span class="hljs-number">666</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-1-替换当前位置"><a href="#3-1-替换当前位置" class="headerlink" title="3.1 替换当前位置"></a>3.1 替换当前位置</h3><p>不会向<code> history</code>添加新纪录，而是替换当前的记录</p><p><strong>声明式</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">replace</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>编程式</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">router.replace(&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>&#125;);<br><br><span class="hljs-comment">// 或</span><br><span class="hljs-comment">// router.push(&#123;</span><br><span class="hljs-comment">//   path: &#x27;/home&#x27;,</span><br><span class="hljs-comment">//   replace: true</span><br><span class="hljs-comment">// &#125;)</span><br></code></pre></td></tr></table></figure><h2 id="4-命名视图"><a href="#4-命名视图" class="headerlink" title="4. 命名视图"></a>4. 命名视图</h2><p>需要同时同级展示多个视图，而不是嵌套展示时，命名视图就能够派上用场了</p><p>首先路由配置需要使用<code> components</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;home&quot;</span>,<br>    <span class="hljs-attr">components</span>: &#123;<br>      <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./views/First.vue&quot;</span>),<br>      <span class="hljs-attr">second</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./views/Second.vue&quot;</span>),<br>      <span class="hljs-attr">third</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./views/Third.vue&quot;</span>),<br>    &#125;,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><p>使用<code> router-view</code>时，添加上<code>name</code>属性即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;second&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;third&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例：</p><p><a href="https://codesandbox.io/s/ming-ming-shi-tu-8275iy">命名视图</a></p><h2 id="5-路由组件传参"><a href="#5-路由组件传参" class="headerlink" title="5. 路由组件传参"></a>5. 路由组件传参</h2><p>首先可通过<code> route</code>来实现路由传参，不过也可以通过<code> props</code>配置来开启<code> props传参</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    <span class="hljs-attr">props</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>&#125;);<br></code></pre></td></tr></table></figure><p>通过<code> props</code>获取参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> props = defineProps([<span class="hljs-string">&quot;id&quot;</span>]);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/q7KwpDYVS4EzRkN.png" alt="image-20220303194719540"></p><p><a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html">更多</a></p><p>参考链接：<a href="https://router.vuejs.org/zh/">Vue Router</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios笔记(二)    深入了解axios</title>
      <link href="/2022/03/10/axios-2/"/>
      <url>/2022/03/10/axios-2/</url>
      
        <content type="html"><![CDATA[<h1 id="axios-笔记-二-深入了解-axios"><a href="#axios-笔记-二-深入了解-axios" class="headerlink" title="axios 笔记(二) 深入了解 axios"></a>axios 笔记(二) 深入了解 axios</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><ul><li>前端最流行的 ajax 请求库</li><li>react / vue 官方推荐使用 axios 发送 ajax 请求</li><li><a href="https://github.com/axios/axios">axios 仓库</a></li></ul><h2 id="2-axios-特点"><a href="#2-axios-特点" class="headerlink" title="2. axios 特点"></a>2. axios 特点</h2><ul><li>基于 promise 的异步 ajax 请求库</li><li>浏览器端 / node 端都可以使用</li><li>支持请求 / 响应拦截器</li><li>支持请求取消</li><li>请求 / 响应数据转换</li><li>批量发送多个请求</li></ul><h2 id="3-axios-常用语法"><a href="#3-axios-常用语法" class="headerlink" title="3. axios 常用语法"></a>3. axios 常用语法</h2><ul><li><p>axios(config)：最本质的能发任何类型请求的方式</p></li><li><p>axios.get(url, config)：发 get 请求</p></li><li><p>axios.put(url, config)：发 put 请求</p></li><li><p>axios.defaults.xxx：请求的默认全局配置，如 baseURL</p></li><li><p>axios.interceptors.request.use()：添加请求拦截器</p></li><li><p>axios.interceptors.response.use()：添加响应拦截器</p></li><li><p>axios.create(config)：新建一个 axios 实例(没有以下的功能)</p></li><li><p>axios.Cancel()：用于创建取消请求的错误对象</p></li><li><p>axios.CancelToken()：用于创建取消请求的 token 对象</p></li><li><p>axios.isCancel()：判断是否是一个取消请求的错误</p></li><li><p>axios.all(promises)：用于批量执行多个异步错误</p></li></ul><h3 id="3-1-axios-简单使用"><a href="#3-1-axios-简单使用" class="headerlink" title="3.1 axios 简单使用"></a>3.1 axios 简单使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testGet()&quot;</span>&gt;</span>GET请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testPost()&quot;</span>&gt;</span>POST请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      axios.defaults.baseURL = <span class="hljs-string">&quot;http://localhost:3000&quot;</span>; <span class="hljs-comment">// 设置请求的基址,后面就不需要写完整的路径了</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// GET请求: 服务端获取数据</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> testGet = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios(&#123;</span><br><span class="javascript">          <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">        &#125;).then(</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(response);</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">            alert(error.message);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        );</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// POST请求: 服务端增加数据</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> testPost = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios(&#123;</span><br><span class="javascript">          <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;axios&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;clz&quot;</span>,</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">        &#125;).then(</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(response);</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">            alert(error.message);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        );</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-axios-create-config"><a href="#3-2-axios-create-config" class="headerlink" title="3.2 axios.create(config)"></a>3.2 axios.create(config)</h3><p>简单使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> instance1 = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;http://localhost:3000&quot;</span>,<br>&#125;);<br><br><span class="hljs-comment">// 使用instance发送请求</span><br>instance1(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>可以发现用法和 axios()很像，和下面一样效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.defaults.baseURL = <span class="hljs-string">&quot;http://localhost:3000&quot;</span>;<br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>那么，axios.create(config)肯定得有它的过人之处，否则，早就会被淘汰掉了。</p><p>先来一个情景：我们要向端口 3000 发送 get 请求，要向端口 4000 发送 post 请求</p><p><strong>通过 axios.create(config)实现</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> instance1 = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;http://localhost:3000&quot;</span>,<br>&#125;);<br><br><span class="hljs-comment">// 使用instance发送请求</span><br>instance1(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>&#125;);<br><br><span class="hljs-keyword">const</span> instance2 = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;http://localhost:4000&quot;</span>,<br>&#125;);<br><br><span class="hljs-comment">// 使用instance发送请求</span><br>instance2(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>直接通过 axios()实现</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.defaults.baseURL = <span class="hljs-string">&quot;http://localhost:3000&quot;</span>;<br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>&#125;);<br><br>axios.defaults.baseURL = <span class="hljs-string">&quot;http://localhost:4000&quot;</span>;<br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>可能有人会提出疑问：不是一样都能实现吗？但是，如果我需要最后在向端口 3000 再发送一次 GET 请求的话。</p><p>让我们再看一下代码：</p><p><strong>通过 axios.create(config)实现</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> instance1 = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;http://localhost:3000&quot;</span>,<br>&#125;);<br><br>instance1(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>&#125;);<br><br><span class="hljs-keyword">const</span> instance2 = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;http://localhost:4000&quot;</span>,<br>&#125;);<br><br>instance2(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>&#125;);<br><br>instance1(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>直接通过 axios()实现</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.defaults.baseURL = <span class="hljs-string">&quot;http://localhost:3000&quot;</span>;<br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>&#125;);<br><br>axios.defaults.baseURL = <span class="hljs-string">&quot;http://localhost:4000&quot;</span>;<br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>&#125;);<br><br>axios.defaults.baseURL = <span class="hljs-string">&quot;http://localhost:3000&quot;</span>;<br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>比较上面的两种情况，就能发现**axios.create(config)<strong>的好处了。因为是新建 axios 实例，所以 3000 和 4000 两个端口分别使用的是不同的 axios 实例。所以能够很好地各司其责。而 axios()则不能，仅仅只是简单地修改 baseURL，都需要每次发送请求前重新修改，还是未考虑异步的情况。这么一看，在这种情况下，</strong>axios.create()**新建 axios 实例还是很香的。</p><h3 id="3-3-拦截器及运行流程"><a href="#3-3-拦截器及运行流程" class="headerlink" title="3.3 拦截器及运行流程"></a>3.3 拦截器及运行流程</h3><h4 id="3-3-1-添加请求拦截器"><a href="#3-3-1-添加请求拦截器" class="headerlink" title="3.3.1 添加请求拦截器"></a>3.3.1 添加请求拦截器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.interceptors.request.use(<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) </span>&#123;<br>    <span class="hljs-comment">// Do something before request is sent</span><br>    <span class="hljs-keyword">return</span> config; <span class="hljs-comment">// 用于把任务串联起来</span><br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>    <span class="hljs-comment">// Do something with request error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error); <span class="hljs-comment">// 一定要返回错误，不让之后能进入成功的流程</span><br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h4 id="3-3-2-添加响应拦截器"><a href="#3-3-2-添加响应拦截器" class="headerlink" title="3.3.2 添加响应拦截器"></a>3.3.2 添加响应拦截器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.interceptors.response.use(<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>    <span class="hljs-comment">// Any status code that lie within the range of 2xx cause this function to trigger</span><br>    <span class="hljs-comment">// Do something with response data</span><br>    <span class="hljs-keyword">return</span> response;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>    <span class="hljs-comment">// Any status codes that falls outside the range of 2xx cause this function to trigger</span><br>    <span class="hljs-comment">// Do something with response error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h4 id="3-3-3-拦截器简单使用"><a href="#3-3-3-拦截器简单使用" class="headerlink" title="3.3.3 拦截器简单使用"></a>3.3.3 拦截器简单使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>拦截器简单使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 添加请求拦截器(回调函数，成功的必须返回config：用于把任务串联起来)</span></span><br><span class="javascript">      axios.interceptors.request.use(</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;request interceptor1 onResolved()&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> config;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;request interceptor1 onRejected()&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error); <span class="hljs-comment">// 一定要返回错误，不让之后能进入成功的流程</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">      );</span><br><span class="javascript">      axios.interceptors.request.use(</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;request interceptor2 onResolved()&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> config;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;request interceptor2 onRejected()&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      );</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 添加响应拦截器(回调函数，成功的必须返回response：用于把任务串联起来)</span></span><br><span class="javascript">      axios.interceptors.response.use(</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;response interceptor1 onResolved()&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> response;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;response interceptor1 onRejected()&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      );</span><br><span class="javascript">      axios.interceptors.response.use(</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;response interceptor2 onResolved()&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> response;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;response interceptor2 onRejected()&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      );</span><br><span class="javascript"></span><br><span class="javascript">      axios</span><br><span class="javascript">        .get(<span class="hljs-string">&quot;http://localhost:3000/posts&quot;</span>)</span><br><span class="javascript">        .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;data: &quot;</span>, response.data);</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        .catch(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;error: &quot;</span>, error.message);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/10/pRVPvKnuZqzJ3Uf.png" alt="image-20220301001039494"></p><p>先发送请求，再接收响应。所以会先触发请求拦截器，再触发响应拦截器，经过响应拦截器后才能得到数据</p><h4 id="3-3-4-取消请求"><a href="#3-3-4-取消请求" class="headerlink" title="3.3.4 取消请求"></a>3.3.4 取消请求</h4><p>express 知识：<a href="https://clz.vercel.app/tags/Express/">Express 笔记: clz</a></p><p>先搭建一个服务器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cors&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.use(cors()); <span class="hljs-comment">// 使用cors，允许跨域</span><br><br>app.use(express.json()); <span class="hljs-comment">// 解析Content-Type为 application/json格式的请求体</span><br><br>app.get(<span class="hljs-string">&quot;/product1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    res.send([<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;product1&quot;</span>,<br>      &#125;,<br>    ]);<br>  &#125;, <span class="hljs-number">2000</span>);<br>&#125;);<br><br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:3000&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>开启服务器，<code> node server.js</code>或<code> nodemon server.js</code>（支持热更新）</p><p><strong>取消请求的简单使用</strong>：</p><ol><li><p>先定义一个变量<code> cancel</code>，用于保存取消请求的函数</p></li><li><p>设置请求路径、请求方法时，还要设置属性<code> cancelToken</code>，值为一个<code> CancelToken对象</code>，CancelToken 类的构造函数的参数是用于请求的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">cancelToken: <span class="hljs-keyword">new</span> axios.CancelToken(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// c是用于取消当前请求的函数</span><br>  cancel = c; <span class="hljs-comment">// 保存取消请求函数，用于之后取消请求</span><br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>在需要请求的地方，调用保存的取消请求的函数</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>取消请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getProducts1()&quot;</span>&gt;</span>获取商品列表1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;cancelReq()&quot;</span>&gt;</span>取消请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/axios/dist/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> cancel; <span class="hljs-comment">// 用于保存取消请求的函数</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> getProducts1 = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios(&#123;</span><br><span class="javascript">          <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/products1&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">cancelToken</span>: <span class="hljs-keyword">new</span> axios.CancelToken(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-comment">// c是用于取消当前请求的函数</span></span><br><span class="javascript">            cancel = c; <span class="hljs-comment">// 保存取消请求函数，用于之后取消请求</span></span><br><span class="javascript">          &#125;),</span><br><span class="javascript">        &#125;).then(</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">            cancel = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 请求结束后保存的取消请求的函数不在需要保存</span></span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求1成功: &quot;</span>, response.data);</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">            cancel = <span class="hljs-literal">null</span>;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求1失败: &quot;</span>, error.message, error);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        );</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> cancelReq = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cancel === <span class="hljs-string">&quot;function&quot;</span>) &#123;</span><br><span class="javascript">          cancel(<span class="hljs-string">&quot;强制取消请求1&quot;</span>);</span><br><span class="javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;没有可以取消的请求&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/10/mdoGr4ALWMKQDlc.gif" alt="axios"></p><p>另外，取消请求的函数可以传参，传的参数将变成请求失败时，Cancel 对象的 message(这个时候并不是 Error 对象)<br></p><p><strong>取消请求优化</strong>：发送请求前取消掉未完成的请求</p><p>在点击事件最前面添加判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cancel === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>  cancel(<span class="hljs-string">&quot;取消请求&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里会出现一个问题，如果连续发送三个请求(在收到响应之前)，会发现，第三个请求没有取消掉前一个未完成的请求</p><p><img src="https://s2.loli.net/2022/03/10/356pd2mBaUYRKuw.gif" alt="axios"></p><p>为什么会这样呢？看下下面的流程图就可能可以迎刃而解了(有错可评论指出)</p><p><img src="https://s2.loli.net/2022/03/10/m8NGi7p5w6FyrjR.png" alt="image-20220301185301548"></p><p>为了解决上面的问题，这时候就需要使用<code> axios.isCancel(error)</code>判断是不是取消请求导致的请求失败，如果是，则此时不需要把<code> cancel</code>变为<code>null</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>  &lt;meta charset=&quot;UTF-8&quot;&gt;<br>  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>  &lt;title&gt;取消请求&lt;/title&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>  &lt;button onclick=&quot;getProducts1()&quot;&gt;获取商品列表1&lt;/button&gt;&lt;br&gt;<br><br>  &lt;button onclick=&quot;cancelReq()&quot;&gt;取消请求&lt;/button&gt;<br><br>  &lt;script src=&quot;./node_modules/axios/dist/axios.js&quot;&gt;&lt;/script&gt;<br>  &lt;script&gt;<br>    let cancel // 用于保存取消请求的函数<br><br>    const getProducts1 = () =&gt; &#123;<br>      if (typeof cancel === &#x27;function&#x27;) &#123;<br>        cancel(&#x27;取消请求&#x27;)<br>      &#125;<br><br>      axios(&#123;<br>        url: &#x27;http://localhost:3000/products1&#x27;,<br>        cancelToken: new axios.CancelToken((c) =&gt; &#123; // c是用于取消当前请求的函数<br>          cancel = c // 保存取消请求函数，用于之后取消请求<br>        &#125;)<br>      &#125;).then(response =&gt; &#123;<br>        cancel = null // 请求结束后保存的取消请求的函数不在需要保存<br>        console.log(&#x27;请求1成功: &#x27;, response.data)<br>      &#125;, error =&gt; &#123;<br>        if (axios.isCancel(error)) &#123;<br>          console.log(&#x27;请求1失败: &#x27;, error.message)<br>        &#125; else &#123;<br>          cancel = null<br>          console.log(&#x27;请求1失败: &#x27;, error.message)<br>        &#125;<br><br>      &#125;)<br>    &#125;<br><br>    const cancelReq = () =&gt; &#123;<br>      if (typeof cancel === &#x27;function&#x27;) &#123;<br>        cancel(&#x27;强制取消请求1&#x27;)<br>      &#125; else &#123;<br>        console.log(&#x27;没有可以取消的请求&#x27;)<br>      &#125;<br>    &#125;<br>  &lt;/script&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/10/kwRCNruZ1cSe8hs.png" alt="image-20220301185709307"></p><p><img src="https://s2.loli.net/2022/03/10/tqs5JXMgWpIhHwl.gif" alt="axios"></p><p><strong>通过拦截器再优化</strong>：增加代码可复用性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 请求拦截器</span><br>axios.interceptors.request.use(<span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cancel === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>    cancel(<span class="hljs-string">&quot;取消请求&quot;</span>);<br>  &#125;<br>  config.cancelToken = <span class="hljs-keyword">new</span> axios.CancelToken(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// c是用于取消当前请求的函数</span><br>    cancel = c; <span class="hljs-comment">// 保存取消请求函数，用于之后取消请求</span><br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> config;<br>&#125;);<br><br><span class="hljs-comment">// 响应拦截器</span><br>axios.interceptors.response.use(<br>  <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>    cancel = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> response;<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (axios.isCancel(error)) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求取消: &quot;</span>, error.message);<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;); <span class="hljs-comment">// 中断Promise链。因为返回一个pending状态的对象时，后续的回调就不能执行了。</span><br>      <span class="hljs-comment">// 因为后面的回调函数只有在状态发生变化时才能执行。</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      cancel = <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error); <span class="hljs-comment">// 将错误向下传递</span><br>    &#125;<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>取消请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getProducts1()&quot;</span>&gt;</span>获取商品列表1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getProducts2()&quot;</span>&gt;</span>获取商品列表2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;cancelReq()&quot;</span>&gt;</span>取消请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/axios/dist/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 请求拦截器</span></span><br><span class="javascript">      axios.interceptors.request.use(<span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cancel === <span class="hljs-string">&quot;function&quot;</span>) &#123;</span><br><span class="javascript">          cancel(<span class="hljs-string">&quot;取消请求&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        config.cancelToken = <span class="hljs-keyword">new</span> axios.CancelToken(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">// c是用于取消当前请求的函数</span></span><br><span class="javascript">          cancel = c; <span class="hljs-comment">// 保存取消请求函数，用于之后取消请求</span></span><br><span class="javascript">        &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">return</span> config;</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 响应拦截器</span></span><br><span class="javascript">      axios.interceptors.response.use(</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">          cancel = <span class="hljs-literal">null</span>;</span><br><span class="javascript">          <span class="hljs-keyword">return</span> response;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (axios.isCancel(error)) &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求取消: &quot;</span>, error.message);</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;); <span class="hljs-comment">// 中断Promise链。因为返回一个pending状态的对象时，后续的回调就不能执行了。</span></span><br><span class="javascript">            <span class="hljs-comment">// 因为后面的回调函数只有在状态发生变化时才能执行。</span></span><br><span class="javascript">          &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">            cancel = <span class="hljs-literal">null</span>;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error); <span class="hljs-comment">// 将错误向下传递</span></span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      );</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> cancel; <span class="hljs-comment">// 用于保存取消请求的函数</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> getProducts1 = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios(&#123;</span><br><span class="javascript">          <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/products1&quot;</span>,</span><br><span class="javascript">        &#125;).then(</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求1成功: &quot;</span>, response.data);</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求1失败: &quot;</span>, error.message);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        );</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> getProducts2 = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios(&#123;</span><br><span class="javascript">          <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/products1&quot;</span>,</span><br><span class="javascript">        &#125;).then(</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求2成功: &quot;</span>, response.data);</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求2失败: &quot;</span>, error.message);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        );</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> cancelReq = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cancel === <span class="hljs-string">&quot;function&quot;</span>) &#123;</span><br><span class="javascript">          cancel(<span class="hljs-string">&quot;强制取消请求1&quot;</span>);</span><br><span class="javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;没有可以取消的请求&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios笔记(一)    简单入门</title>
      <link href="/2022/03/10/axios-1/"/>
      <url>/2022/03/10/axios-1/</url>
      
        <content type="html"><![CDATA[<h1 id="axios-笔记-一-简单入门"><a href="#axios-笔记-一-简单入门" class="headerlink" title="axios 笔记(一) 简单入门"></a>axios 笔记(一) 简单入门</h1><p>又是前端必备知识的笔记。</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>之前的笔记：<a href="https://clz.vercel.app/2022/02/09/yc-http/">HTTP 笔记 | 赤蓝紫 (clz.vercel.app)</a></p><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><blockquote><p>HTTP 是一种能够获取如 HTML 这样的网络资源的<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Protocol">protocol</a>(通讯协议)。它是在 Web 上进行数据交换的基础，是一种 client-server 协议，也就是说，请求通常是由像浏览器这样的接受方发起的。一个完整的 Web 文档通常是由不同的子文档拼接而成的，像是文本、布局描述、图片、视频、脚本等等。</p></blockquote><p>文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview">HTTP</a></p><h3 id="2-HTTP-请求交互的基本过程"><a href="#2-HTTP-请求交互的基本过程" class="headerlink" title="2. HTTP 请求交互的基本过程"></a>2. HTTP 请求交互的基本过程</h3><p><img src="https://s2.loli.net/2022/03/10/xBUuGF69vNS78mI.png" alt="image-20220228094936947"></p><ol><li>浏览器向服务器发送请求报文</li><li>后台服务器接收到请求后，调度服务器应用处理请求，向浏览器返回 HTTP 响应(响应报文)</li><li>浏览器接收到响应，解析显示响应体 / 调用监视回调</li></ol><p>查看 HTTP 请求响应信息：DevTools Network 面板</p><p><img src="https://s2.loli.net/2022/03/10/AZN5J6KEwiovrYu.png" alt="image-20220228095526783"></p><h3 id="3-API-分类"><a href="#3-API-分类" class="headerlink" title="3. API 分类"></a>3. API 分类</h3><h4 id="3-1-REST-API-restful"><a href="#3-1-REST-API-restful" class="headerlink" title="3.1 REST API(restful)"></a>3.1 REST API(restful)</h4><p><a href="https://clz.vercel.app/2022/02/28/RESTful/">RESTful 接口设计规范</a></p><ul><li>发送请求进行 CRUD 哪个操作由请求方式来决定</li><li>同一个请求路径可以进行多个操作</li><li>请求方式会用到 GET / POST / PUT / DELETE 等</li></ul><h4 id="3-2-非-REST-API-restless"><a href="#3-2-非-REST-API-restless" class="headerlink" title="3.2 非 REST API(restless)"></a>3.2 非 REST API(restless)</h4><ul><li>请求方式不决定请求的 CRUD 操作(甚至可以用 GET 请求进行删除操作)</li><li>一个请求路径只对应一个操作</li><li>请求方式一般只有 GET / POST</li></ul><h3 id="4-json-server-搭建-REST-接口"><a href="#4-json-server-搭建-REST-接口" class="headerlink" title="4. json-server 搭建 REST 接口"></a>4. json-server 搭建 REST 接口</h3><p><a href="https://github.com/typicode/json-server">json-server 仓库</a></p><ol><li><p>全局安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g json-server<br></code></pre></td></tr></table></figure></li><li><p>新建<code> db.json</code>文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;posts&quot;</span>: [&#123; <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;json-server&quot;</span>, <span class="hljs-attr">&quot;author&quot;</span>: <span class="hljs-string">&quot;typicode&quot;</span> &#125;],<br>  <span class="hljs-attr">&quot;comments&quot;</span>: [&#123; <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">&quot;body&quot;</span>: <span class="hljs-string">&quot;some comment&quot;</span>, <span class="hljs-attr">&quot;postId&quot;</span>: <span class="hljs-number">1</span> &#125;],<br>  <span class="hljs-attr">&quot;profile&quot;</span>: &#123; <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;typicode&quot;</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>开启服务器(支持热更新)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">json-server --watch db.json<br></code></pre></td></tr></table></figure></li><li><p>打开<code> http://localhost:3000/</code>，可以在 Resources 中看到所有的接口</p><p><img src="https://s2.loli.net/2022/03/10/aMDp4T9JQ2ruvqV.png" alt="image-20220228105153779"></p></li><li><p>点击对应接口，可以获取对应数据</p><p><img src="https://s2.loli.net/2022/03/10/pg9WGrXK1HhINBm.png" alt="image-20220228105310624"></p></li><li><p>支持携带参数</p><ul><li><p>params 参数</p><p><img src="https://s2.loli.net/2022/03/10/Ux4IzmPwQ3BFLuA.png" alt="image-20220228105412534"></p></li><li><p>query 参数</p><p><img src="https://s2.loli.net/2022/03/10/j65GDoirbMQa27A.png" alt="image-20220228105530166"></p></li><li><p>两种参数区别：query 参数是从所有的数据中筛选，所以最后是数组的形式；params 参数则是特定查找的形式，所以最后是对象的形式</p></li></ul></li></ol><h2 id="使用-axios-请求-REST-接口"><a href="#使用-axios-请求-REST-接口" class="headerlink" title="使用 axios 请求 REST 接口"></a>使用 axios 请求 REST 接口</h2><p><b style="color:red">上面开启的服务器不要关</b></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testGet()&quot;</span>&gt;</span>GET请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testPost()&quot;</span>&gt;</span>POST请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testPut()&quot;</span>&gt;</span>PUT请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testDelete()&quot;</span>&gt;</span>DELETE请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> testGet = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios</span><br><span class="javascript">          .get(<span class="hljs-string">&quot;http://localhost:3000/posts&quot;</span>, &#123;</span><br><span class="javascript">            <span class="hljs-comment">// params: &#123;</span></span><br><span class="javascript">            <span class="hljs-comment">//   id: 2</span></span><br><span class="javascript">            <span class="hljs-comment">// &#125;</span></span><br><span class="javascript">          &#125;)</span><br><span class="javascript">          .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;/posts get&quot;</span>, response.data);</span><br><span class="javascript">          &#125;);</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> testPost = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios</span><br><span class="javascript">          .post(<span class="hljs-string">&quot;http://localhost:3000/posts&quot;</span>, &#123;</span><br><span class="javascript">            <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;czh&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;czh&quot;</span>,</span><br><span class="javascript">          &#125;)</span><br><span class="javascript">          .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;/posts post&quot;</span>, response.data);</span><br><span class="javascript">          &#125;);</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> testPut = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios</span><br><span class="javascript">          .put(<span class="hljs-string">&quot;http://localhost:3000/posts/3&quot;</span>, &#123;</span><br><span class="javascript">            <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;czh...&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;czh...&quot;</span>,</span><br><span class="javascript">          &#125;)</span><br><span class="javascript">          .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;/posts put&quot;</span>, response.data);</span><br><span class="javascript">          &#125;);</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> testDelete = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios.delete(<span class="hljs-string">&quot;http://localhost:3000/posts/3&quot;</span>).then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;/posts delete&quot;</span>, response.data);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="XHR"><a href="#XHR" class="headerlink" title="XHR"></a>XHR</h2><h3 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><blockquote><p><code>XMLHttpRequest</code>（XHR）对象用于与服务器交互。通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。<code>XMLHttpRequest</code> 在 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/AJAX">AJAX</a> 编程中被大量使用。</p></blockquote><p>文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a></p><h3 id="2-ajax-请求与一般的-http-请求"><a href="#2-ajax-请求与一般的-http-请求" class="headerlink" title="2. ajax 请求与一般的 http 请求"></a>2. ajax 请求与一般的 http 请求</h3><ul><li><p>ajax 请求是一种特殊的 http 请求</p></li><li><p>对服务器端来说，没有任何请求，区别在于<strong>浏览器端</strong>(ajax 请求有专门的 ajax 引擎帮忙发送)</p></li><li><p>浏览器端发送请求，只有 XHR 或 fetch 发出的才是 ajax 请求，其他的都不是 ajax 请求</p></li><li><p>浏览器端接收到响应(一般请求浏览器会自动更新页面，而 ajax 请求需要手动更新)</p><ul><li><p>一般请求：浏览器会直接显示响应体数据，即刷新/跳转页面</p></li><li><p>ajax 请求：浏览器不会对页面进行任何更新操作，而只是调用监视的回调函数并传入响应相关数据</p></li></ul></li></ul><h3 id="3-常用-API"><a href="#3-常用-API" class="headerlink" title="3. 常用 API"></a>3. 常用 API</h3><ul><li><p>XMLHttpRequest()：创建 XHR 对象的构造函数</p></li><li><p>status：响应状态码，如 200、404 等</p></li><li><p>statusText：响应状态文本</p></li><li><p>readyState：标识请求状态的只读属性</p><p>​ 0: 初始</p><p>​ 1: open()之后</p><p>​ 2: send()之后</p><p>​ 3: 请求中</p><p>​ 4: 请求完成</p></li><li><p>onreadystatechange：绑定 readyState 改变的监听</p></li><li><p>responseType：指定响应数据类型</p></li><li><p>timeout：指定请求超时时间，默认为 0，表示没有限制</p></li><li><p>open()：初始化一个请求。参数为<code> (method, url [, async])</code></p></li><li><p>send(data)：发送请求</p></li><li><p>setRequestHeader(name, value)：设置请求头</p></li><li><p>getResponseHeader(name)：获取指定名称的响应头值</p></li></ul><h2 id="封装-axios"><a href="#封装-axios" class="headerlink" title="封装 axios"></a>封装 axios</h2><p>axios</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">axios</span>(<span class="hljs-params">&#123; url, method = <span class="hljs-string">&quot;GET&quot;</span>, params = &#123;&#125;, data = &#123;&#125; &#125;</span>) </span>&#123;<br>  <span class="hljs-comment">// 返回Promise对象</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 处理method大小写</span><br>    method = method.toUpperCase();<br><br>    <span class="hljs-comment">// 把请求参数拼接到url中</span><br>    <span class="hljs-keyword">let</span> queryString = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-built_in">Object</span>.keys(params).forEach(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      queryString += <span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;params[key]&#125;</span>&amp;`</span>;<br>    &#125;);<br><br>    <span class="hljs-keyword">if</span> (queryString) &#123;<br>      <span class="hljs-comment">// 有查询参数,需要把最后的&amp;去掉</span><br>      queryString = queryString.substring(<span class="hljs-number">0</span>, queryString.length - <span class="hljs-number">1</span>);<br>      url += <span class="hljs-string">`?<span class="hljs-subst">$&#123;queryString&#125;</span>`</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 1. 执行异步ajax请求</span><br>    <span class="hljs-comment">// 1.1 创建xhr对象</span><br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br><br>    <span class="hljs-comment">// 1.2 打开连接，初始化请求</span><br>    xhr.open(method, url, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 第三个参数表示是否异步执行操作，默认为true。如果值为false，send()方法直到收到答复前不会返回。</span><br><br>    <span class="hljs-comment">// 1.3 发送请求</span><br>    <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&quot;GET&quot;</span> || method === <span class="hljs-string">&quot;DELETE&quot;</span>) &#123;<br>      xhr.send();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&quot;POST&quot;</span> || method === <span class="hljs-string">&quot;PUT&quot;</span>) &#123;<br>      xhr.setRequestHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>); <span class="hljs-comment">// 设置请求头，通知服务器请求体的格式是json</span><br>      xhr.send(<span class="hljs-built_in">JSON</span>.stringify(data)); <span class="hljs-comment">// 发送json格式请求体参数</span><br>    &#125;<br><br>    <span class="hljs-comment">// 1.4 绑定状态的监听,监听的定义能放在后面是因为这里是异步发送请求</span><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (xhr.readyState !== <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">const</span> &#123;<br>        status, <span class="hljs-comment">// 响应状态在[200, 300)之间代表成功,否则失败</span><br>        statusText,<br>      &#125; = xhr;<br><br>      <span class="hljs-comment">// 2.1 如果请求成功，调用resolve()</span><br>      <span class="hljs-keyword">if</span> (status &gt;= <span class="hljs-number">200</span> &amp;&amp; status &lt; <span class="hljs-number">300</span>) &#123;<br>        <span class="hljs-keyword">const</span> response = &#123;<br>          <span class="hljs-attr">data</span>: <span class="hljs-built_in">JSON</span>.parse(xhr.response), <span class="hljs-comment">// 把响应转化成JSON对象</span><br>          status,<br>          statusText,<br>        &#125;;<br>        resolve(response);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 2.2 如果请求失败，调用reject()</span><br>        reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;request error status is &quot;</span> + status));<br>      &#125;<br>    &#125;;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// GET请求: 服务端获取数据</span><br><span class="hljs-keyword">const</span> testGet = <span class="hljs-function">() =&gt;</span> &#123;<br>  axios(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/posts&quot;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>    <span class="hljs-attr">params</span>: &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    &#125;,<br>  &#125;).then(<br>    <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(response);<br>    &#125;,<br>    <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>      alert(error.message);<br>    &#125;<br>  );<br>&#125;;<br><br><span class="hljs-comment">// POST请求: 服务端增加数据</span><br><span class="hljs-keyword">const</span> testPost = <span class="hljs-function">() =&gt;</span> &#123;<br>  axios(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/posts&quot;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;axios&quot;</span>,<br>      <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    &#125;,<br>  &#125;).then(<br>    <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(response);<br>    &#125;,<br>    <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>      alert(error.message);<br>    &#125;<br>  );<br>&#125;;<br><br><span class="hljs-comment">// PUT请求: 服务端更新数据</span><br><span class="hljs-keyword">const</span> testPut = <span class="hljs-function">() =&gt;</span> &#123;<br>  axios(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/posts/1&quot;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;put&quot;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;axios!!!!!&quot;</span>,<br>      <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;clz!!!!!!&quot;</span>,<br>    &#125;,<br>  &#125;).then(<br>    <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(response);<br>    &#125;,<br>    <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>      alert(error.message);<br>    &#125;<br>  );<br>&#125;;<br><br><span class="hljs-comment">// DELETE请求: 服务端删除数据</span><br><span class="hljs-keyword">const</span> testDelete = <span class="hljs-function">() =&gt;</span> &#123;<br>  axios(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/posts/2&quot;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;delete&quot;</span>,<br>  &#125;).then(<br>    <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(response);<br>    &#125;,<br>    <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>      alert(error.message);<br>    &#125;<br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><p><b style="color: red">发送 POST、PUT 等需要修改服务器端的资源的请求时会发送 OPTIONS 请求，查看是否能够修改，即预请求。而 GET 请求不需要，因为 GET 请求不需要修改服务器上的资源</b></p><p><img src="https://s2.loli.net/2022/03/10/XfniK4GOZEIRcVs.png" alt="image-20220228151239576"></p><p>学习链接：<a href="https://www.bilibili.com/video/BV1NJ41197u6">尚硅谷_axios 核心技术</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>params编程式导航踩坑</title>
      <link href="/2022/03/08/vue-router-proplem-2/"/>
      <url>/2022/03/08/vue-router-proplem-2/</url>
      
        <content type="html"><![CDATA[<h1 id="params-编程式导航踩坑"><a href="#params-编程式导航踩坑" class="headerlink" title="params 编程式导航踩坑"></a>params 编程式导航踩坑</h1><h2 id="1-params-不能与-path-一起使用"><a href="#1-params-不能与-path-一起使用" class="headerlink" title="1. params 不能与 path 一起使用"></a>1. <code>params</code> 不能与 <code>path</code> 一起使用</h2><p>先来一下路由配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:userid&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>先来一下：query 编程式导航</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> router = useRouter();</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// query编程式导航传参</span></span><br><span class="javascript">      router.push(&#123;</span><br><span class="javascript">        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/123&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">query</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">userid</span>: <span class="hljs-number">666</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/lJkUbH12vCRnus6.png" alt="image-20220303114728772"></p><p>一切正常</p><p>然后，换成 params 编程式导航</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> router = useRouter();</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// params编程式导航传参</span></span><br><span class="javascript">      router.push(&#123;</span><br><span class="javascript">        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">userid</span>: <span class="hljs-number">123</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后跳转到 <a href="http://localhost:3000/#/user%EF%BC%8C%E6%B2%A1%E6%9C%89%E5%90%8E%E9%9D%A2%E7%9A%84">http://localhost:3000/#/user，没有后面的</a> params 参数，这是因为<b style="color: red"><code>params</code> 不能与 <code>path</code> 一起使用</b>，一起使用后，后面的 params 参数将不再起作用。</p><h2 id="2-需要和命名路由搭配使用"><a href="#2-需要和命名路由搭配使用" class="headerlink" title="2. 需要和命名路由搭配使用"></a>2. 需要和命名路由搭配使用</h2><p>先说一下，一开始，本人还以为<code>name</code>就是类似<code>path</code>的用法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> router = useRouter();</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// params编程式导航传参</span></span><br><span class="javascript">      router.push(&#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;user&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">userid</span>: <span class="hljs-number">123</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后报错</p><p><img src="https://s2.loli.net/2022/03/08/BUNkO9yWdXK4JEe.png" alt="image-20220303115736810"></p><p>通过查阅资料后，才知道，这里的 name 属性就是命名路由名称。</p><p>修改路由的配置：变成命名路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:userid&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;user&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/YI82MDXWtHruqwy.png" alt="image-20220303120329957"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue Router </tag>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷新页面后this.$route.params 为空</title>
      <link href="/2022/03/08/vue-router-proplem-1/"/>
      <url>/2022/03/08/vue-router-proplem-1/</url>
      
        <content type="html"><![CDATA[<h1 id="刷新页面后-this-route-params-为空"><a href="#刷新页面后-this-route-params-为空" class="headerlink" title="刷新页面后 this.$route.params 为空"></a>刷新页面后 this.$route.params 为空</h1><p>深度学习<code> vue-router</code>时，按官方文档的教程看下来，结果发现刷新页面后，打印的<code>this.$route.params </code>为空</p><h2 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h2><h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>路由配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br>Vue.use(VueRouter);<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>      <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>),<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    &#125;,<br>  ],<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$route.params);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/FWeYxVU8bqB29yJ.png" alt="image-20220302152502581"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="1-在导航守卫中获取"><a href="#1-在导航守卫中获取" class="headerlink" title="1. 在导航守卫中获取"></a>1. 在导航守卫中获取</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(to.params);<br>  next();<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/dqoSPzYgaDeFAUy.gif" alt="vue-router2"></p><h4 id="2-在跳转后的页面获取，而不是在-app-vue-中获取"><a href="#2-在跳转后的页面获取，而不是在-app-vue-中获取" class="headerlink" title="2. 在跳转后的页面获取，而不是在 app.vue 中获取"></a>2. 在跳转后的页面获取，而不是在 app.vue 中获取</h4><p>User.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$route.params);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">color</span>: purple;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-在-updated生命周期钩子中获取-可能实际开发用不上"><a href="#3-在-updated生命周期钩子中获取-可能实际开发用不上" class="headerlink" title="3. 在 updated生命周期钩子中获取(可能实际开发用不上)"></a>3. 在<code> updated</code>生命周期钩子中获取(可能实际开发用不上)</h4><p>为什么会出这个问题呢？</p><p>以下是个人现阶段的理解。(可能有误)</p><p>结论：<b style="Color: red">此时打印<code> this.$route.params</code>应该在<code> updated</code>生命周期钩子中打印</b></p><p>首先先在<code> created</code>和<code> mounted</code>钩子中打印<code> this.$route</code>看一下情况。</p><p><img src="https://s2.loli.net/2022/03/08/pOfQMSabTkjCt3Z.png" alt="image-20220302153712535"></p><p>发现，信息不符合。猜测可能是组件创建、渲染阶段时，路由还没有跳转，所以打印的信息不对。路由跳转后，修改数据<code> this.$route</code>是在数据更新阶段，所以获取最新的路由信息应该在<code> updated</code>中获取。</p><p><img src="https://s2.loli.net/2022/03/08/oBSyKRIdsVfhw83.png" alt="image-20220302154158334"></p><p>问题解决</p><h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><p>首先，路由配置也不太一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="1-在导航守卫中获取-1"><a href="#1-在导航守卫中获取-1" class="headerlink" title="1. 在导航守卫中获取"></a>1. 在导航守卫中获取</h4><p>和 Vue2 的相同。</p><h4 id="2-在跳转后的页面获取，而不是在-app-vue-中获取-1"><a href="#2-在跳转后的页面获取，而不是在-app-vue-中获取-1" class="headerlink" title="2. 在跳转后的页面获取，而不是在 app.vue 中获取"></a>2. 在跳转后的页面获取，而不是在 app.vue 中获取</h4><p><strong>这个在开发中用到的可能性还大一些。毕竟开发时每个页面都需要路由信息的很少，都需要的话就可以采用上面在导航守卫中获取的做法</strong></p><p>User.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; onUpdated &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(route.params);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">color</span>: purple;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果和上图一样</p><h4 id="3-强行实现-不建议"><a href="#3-强行实现-不建议" class="headerlink" title="3. 强行实现(不建议)"></a>3. 强行实现(不建议)</h4><p>Vue3 中，针对 Vue2 的解决方案 3 不再有效。在 Vue3 中，路由的变化不再属于是数据的更新，所以也不会触发<code> onUpdated</code>钩子</p><p>app.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; onUpdated &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// console.log(route.params)</span></span><br><span class="javascript"></span><br><span class="javascript">  onUpdated(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(route.params);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/6mokixOAbLd2PrR.gif" alt="vue-router"></p><p>那么怎么解决呢？</p><br /><p>这个只是个人学习时，想到的暴力法。(现在也只会这个暴力法，开发时应该是嗤之以鼻的做法)</p><p>app.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; onUpdated &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(route.params);</span><br><span class="javascript">  &#125;, <span class="hljs-number">200</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果还是同上</p><h2 id="最后的坑-又能解释的希望评论告知"><a href="#最后的坑-又能解释的希望评论告知" class="headerlink" title="最后的坑(又能解释的希望评论告知)"></a>最后的坑(又能解释的希望评论告知)</h2><p>app.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  params: &#123;&#123; route.params &#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; onUpdated &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(route);</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(route.params);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/v7SWpIYkjZx9FCV.png" alt="image-20220308160130992"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue Router </tag>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeanCloud国际版遇到的问题及解决方案</title>
      <link href="/2022/03/07/valine-problem/"/>
      <url>/2022/03/07/valine-problem/</url>
      
        <content type="html"><![CDATA[<h1 id="LeanCloud-国际版遇到的问题及解决方案"><a href="#LeanCloud-国际版遇到的问题及解决方案" class="headerlink" title="LeanCloud 国际版遇到的问题及解决方案"></a>LeanCloud 国际版遇到的问题及解决方案</h1><p>首先，为什么要用<code> LeanCloud国际版</code>呢？就是因为设置邮件提醒功能时，需要绑定访问域名来唤醒 leancloud，而国际版提供免费域名，国内的需要备案域名。</p><p><img src="https://s2.loli.net/2022/03/07/52vX34VkWodfMUj.png" alt="image-20220307123838756"></p><p><br />只能说弄这个博客，真的是非常能感受到迭代的快(虽然遇到的不是技术点上的)：</p><ul><li>搭建博客时，刚好遇上 github 默认分支从<code> master</code>变为<code> master</code>，然后网上的教程都还是<code> master</code></li><li>这次的问题也是因为 us.avoscloud.com 这个域名被弃用了，然而报错提示的确实跨域问题</li></ul><p><img src="https://s2.loli.net/2022/03/07/zpYQtBL8f2Fq5ng.png" alt="img"></p><p>这一次属于是长教训了，不看公告，一个月前的事情现在才知道</p><p><img src="https://s2.loli.net/2022/03/07/gLp8f4vniyNwt6D.png" alt="image-20220307122010510"></p><p>最后通过到 leancloud 社区直接询问，通过<a href="https://forum.leancloud.cn/users/shifuchen">shifuchen 大佬</a>的回答解决问题</p><p>那么怎么解决这个问题呢？</p><ul><li><p>首先，登录<a href="https://console.leancloud.app/apps">LeanCloud</a>，进入自己的应用。然后进入<code> 设置 -&gt; 应用凭证</code>，复制<strong>REST API 服务器地址</strong></p><p><img src="https://s2.loli.net/2022/03/07/jFlm6HG42sVtfwM.png" alt="image-20220307122544336"></p><p><img src="https://s2.loli.net/2022/03/07/owuWH5fLhX9T7nm.png" alt="image-20220307122650723"></p></li><li><p>然后，回到你的博客的主题文件夹中，找到使用 valine 部分，<a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a>主题的就在<code> layout \ _partial \ valine.ejs</code>中</p><p><img src="https://s2.loli.net/2022/03/07/uaCetFqbYPLDXpf.png" alt="image-20220307123020590"></p></li><li><p>新建<code>Valine</code>实例时，添加<code> serverURLs</code>属性，值为刚刚复制的地址</p><p><img src="https://s2.loli.net/2022/03/07/xJrIPAlsfVc18i5.png" alt="image-20220307123226134"></p></li></ul><p>成功：<a href="https://clz.vercel.app/contact/">contact | 赤蓝紫</a></p><p><img src="https://s2.loli.net/2022/03/07/zlyf1ZWcmFYhNOX.png" alt="image-20220307123328264"></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(二)    JavaScript</title>
      <link href="/2022/03/06/leetcode-2/"/>
      <url>/2022/03/06/leetcode-2/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-刷题-二-JavaScript"><a href="#LeetCode-刷题-二-JavaScript" class="headerlink" title="LeetCode 刷题(二) JavaScript"></a>LeetCode 刷题(二) JavaScript</h1><h2 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/description/">合并两个有序链表</a></h2><p>通过递归实现：判断 list1 和 list2 那个链表的头结点的值更小，然后递归下去决定下一个添加到结果的节点，当两个链表中有为空时，递归结束。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> mergeTwoLists = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">list1, list2</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (list1 === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> list2;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (list2 === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> list1;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (list1.val &lt; list2.val) &#123;<br>    list1.next = mergeTwoLists(list1.next, list2);<br>    <span class="hljs-keyword">return</span> list1;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    list2.next = mergeTwoLists(list1, list2.next);<br>    <span class="hljs-keyword">return</span> list2;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="删除有序数组中的重复项"><a href="#删除有序数组中的重复项" class="headerlink" title="删除有序数组中的重复项"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/description/">删除有序数组中的重复项</a></h2><h3 id="1-简单版本"><a href="#1-简单版本" class="headerlink" title="1. 简单版本"></a>1. 简单版本</h3><p>遍历一遍，通过<code> indexOf</code>和<code> lastIndexOf</code>来判断是否有重复项，有的话，则不相等。然后通过<code> splice</code>删除掉重复项，删除后，因为少一位了，此时的索引也需要-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number[]&#125;</span> <span class="hljs-variable">nums</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> removeDuplicates = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (nums.indexOf(nums[i]) !== nums.lastIndexOf(nums[i])) &#123;<br>      nums.splice(i, <span class="hljs-number">1</span>);<br>      i--;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> nums.length;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2-双指针法"><a href="#2-双指针法" class="headerlink" title="2. 双指针法"></a>2. 双指针法</h3><p>定义两个指针 fast 和 slow，起始都为 1(因为 0 时不可能会有重复)，其中 fast 指针一直在走，而当<code> nums[fast]</code>不等于<code> nums[fast - 1]</code>时，即是不重复项，那么此时就让<code> nums[slow] = nums[fast]</code>，即存下不重复项，<code> slow</code>指针才继续走一步，遍历完后，<code>slow</code>就是删掉重复项后数组的长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number[]&#125;</span> <span class="hljs-variable">nums</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> removeDuplicates = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> n = nums.length;<br>  <span class="hljs-keyword">if</span> (n === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> fast = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">let</span> slow = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">while</span> (fast &lt; n) &#123;<br>    <span class="hljs-keyword">if</span> (nums[fast] !== nums[fast - <span class="hljs-number">1</span>]) &#123;<br>      nums[slow] = nums[fast];<br>      slow++;<br>    &#125;<br>    fast++;<br>  &#125;<br><br>  <span class="hljs-built_in">console</span>.log(slow);<br><br>  <span class="hljs-keyword">return</span> slow;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a><a href="https://leetcode-cn.com/problems/remove-element/description/">移除元素</a></h2><h3 id="1-双指针法"><a href="#1-双指针法" class="headerlink" title="1. 双指针法"></a>1. 双指针法</h3><p>和上面的做法一样，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> removeElement = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, val</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> n = nums.length;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> right = <span class="hljs-number">0</span>; right &lt; n; right++) &#123;<br>    <span class="hljs-keyword">if</span> (nums[right] !== val) &#123;<br>      nums[left] = nums[right]; <span class="hljs-comment">// 不等于要移除的元素，则存起来，等于则不存</span><br>      left++;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> left;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2-双指针优化"><a href="#2-双指针优化" class="headerlink" title="2. 双指针优化"></a>2. 双指针优化</h3><p>做法和双指针法类似，不同的是，初始时，左指针指向 0，右指针指向数组最后一位。</p><p>通过判断 left 指针指向的元素等不等于 val</p><ul><li>等于的话，则把 right 指针指向的元素赋值给 left 指针，然后 right–，继续判断 left 指针指向的元素等不等于 left</li><li>不等于的话，则 left 指针前进</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number[]&#125;</span> <span class="hljs-variable">nums</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number&#125;</span> <span class="hljs-variable">val</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> removeElement = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, val</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>,<br>    right = nums.length;<br><br>  <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-keyword">if</span> (nums[left] === val) &#123;<br>      nums[left] = nums[right - <span class="hljs-number">1</span>]; <span class="hljs-comment">// 把后面的元素放到前面，避免重复赋值。如1,2,3,4,5要去掉1</span><br>      right--;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      left++;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> left;<br>&#125;;<br></code></pre></td></tr></table></figure><p><b style="color: red">可以避免元素的重复赋值操作</b>：</p><p>假设数组为<code> [1, 2, 3, 4]</code>，要删除的元素为 1</p><ul><li>使用普通的双指针法：第一位等于要删的元素，跳过，后面一次赋值<code> nums[0]=2</code>，<code> nums[1]=3</code>，<code> nums[2]=4</code></li><li>使用优化的双指针法：第一轮需要赋值<code> nums[0]=4</code>，后面就不需要在赋值了</li></ul><h2 id="实现-strStr"><a href="#实现-strStr" class="headerlink" title="实现 strStr()"></a><a href="https://leetcode-cn.com/problems/implement-strstr/description/">实现 strStr()</a></h2><h3 id="1-暴力匹配"><a href="#1-暴力匹配" class="headerlink" title="1. 暴力匹配"></a>1. 暴力匹配</h3><p>就是直接嵌套循环，时间复杂度较大。KMP 算法比较麻烦，先留个坑(希望之后会补坑)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> <span class="hljs-variable">haystack</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> <span class="hljs-variable">needle</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> strStr = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">haystack, needle</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> hLen = haystack.length;<br>  <span class="hljs-keyword">let</span> nLen = needle.length;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i + nLen &lt;= hLen; i++) &#123;<br>    <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; nLen; j++) &#123;<br>      <span class="hljs-keyword">if</span> (haystack[i + j] !== needle[j]) &#123;<br>        flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>      <span class="hljs-keyword">return</span> i;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="搜索插入位置"><a href="#搜索插入位置" class="headerlink" title="搜索插入位置"></a><a href="https://leetcode-cn.com/problems/search-insert-position/description/">搜索插入位置</a></h2><p>有序插入：二分法：就是每次都取在中间的那个值，如果<code>target</code>小于等于中间那个值的话，就是说<code> target</code>在左半边，此时，让 right=mid-1，大于则让<code> left=mid+1</code>。最后返回<code> right+1</code>。（这里返回<code> right+1</code>的原因是<code>target</code>小于等于中间那个值都会继续往左移，所以<code>right</code>停的位置会比<code>target</code>小，那么插的位置就是<code> right+1</code>了）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> searchInsert = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, target</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span><br>  <span class="hljs-keyword">let</span> ans = nums.length<br><br>  <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>    <span class="hljs-keyword">let</span> mid = right - <span class="hljs-built_in">Number</span>.parseInt((right - left) / <span class="hljs-number">2</span>)<br><br>    <span class="hljs-keyword">if</span> (target &lt;= nums[mid]) &#123;<br>      right = mid - <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      left = mid + <span class="hljs-number">1</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> right + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express实战(二)    登录验证、身份认证、增删改查</title>
      <link href="/2022/03/06/express-4/"/>
      <url>/2022/03/06/express-4/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-实战-二-登录验证、身份认证、增删改查"><a href="#Express-实战-二-登录验证、身份认证、增删改查" class="headerlink" title="Express 实战(二) 登录验证、身份认证、增删改查"></a>Express 实战(二) 登录验证、身份认证、增删改查</h1><p>最终结果：<a href="https://github.com/13535944743/realworld-api-express-practise-">realworld-api-express-practise- </a></p><h2 id="1-数据验证-登录验证"><a href="#1-数据验证-登录验证" class="headerlink" title="1. 数据验证(登录验证)"></a>1. 数据验证(登录验证)</h2><p>validate \ user.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.login = [<br>  validate([<br>    body(<span class="hljs-string">&quot;user.email&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;邮箱不能为空&quot;</span>),<br>    body(<span class="hljs-string">&quot;user.password&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;密码不能为空&quot;</span>),<br>  ]),<br>  validate([<br>    <span class="hljs-comment">// 只有上面的验证通过才会执行，利用的是中间件的机制</span><br>    body(<span class="hljs-string">&quot;user.email&quot;</span>).custom(<span class="hljs-keyword">async</span> (email, &#123; req &#125;) =&gt; &#123;<br>      <span class="hljs-comment">// 这里参数的req解构是官网文档用法</span><br>      <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> User.findOne(&#123;<br>        email,<br>      &#125;).select([<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;bio&quot;</span>, <span class="hljs-string">&quot;image&quot;</span>]); <span class="hljs-comment">// 这里需要获取密码的话，因为用户密码的模式设计那里设置了select: false，即通过查找不能查到密码，此时需要通过select()实现能查出密码</span><br>      <span class="hljs-keyword">if</span> (!user) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;用户不存在&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-comment">// 将数据挂载到请求对象上，这样子后续的中间件也可以直接使用</span><br>      req.user = user;<br>    &#125;),<br>  ]),<br>  validate([<br>    body(<span class="hljs-string">&quot;user.password&quot;</span>).custom(<span class="hljs-keyword">async</span> (password, &#123; req &#125;) =&gt; &#123;<br>      <span class="hljs-keyword">if</span> (md5(password) !== req.user.password) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;密码错误&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-built_in">console</span>.log(req.user);<br>    &#125;),<br>  ]),<br>];<br></code></pre></td></tr></table></figure><p>user 的路由那里也要加上</p><p>router \ user.js</p><p><img src="https://s2.loli.net/2022/03/06/VOkFwbflWv32tqx.png" alt="image-20220212175651983"></p><p><img src="https://s2.loli.net/2022/03/06/Q72rvg8PFGHahKW.png" alt="image-20220212175753306"></p><p><img src="https://s2.loli.net/2022/03/06/QeX7S6bxAN98OCP.png" alt="image-20220212175808931"></p><h2 id="2-基于-JWT-的身份认证"><a href="#2-基于-JWT-的身份认证" class="headerlink" title="2. 基于 JWT 的身份认证"></a>2. 基于 JWT 的身份认证</h2><p><a href="https://jwt.io/">JSON Web Tokens - jwt.io</a></p><p>JWT 原理：服务器认证之后，生成一个 JSON 对象，类似下面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;姓名&quot;</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-string">&quot;角色&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>    <span class="hljs-string">&quot;到期时间&quot;</span>: <span class="hljs-string">&quot;2022-02-28&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>以后，用户和服务端通信，都要发回这个 JSON 对象，服务器只靠这个对象确认用户身份。为了防止用户篡改数据，服务器在生成这个对象时，会加上签名。</p><p>实际 JWT：</p><p><img src="https://s2.loli.net/2022/03/06/e6YlBAa9SKiLIyP.png" alt="image-20220212181436946"></p><p>JWT 的三个部分：</p><ul><li>Header（头部）</li><li>Payload（负载）</li><li>Signature（签名）</li></ul><p>Header.Payload.Signature</p><h3 id="2-1-Header"><a href="#2-1-Header" class="headerlink" title="2.1 Header"></a>2.1 Header</h3><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;HS256&quot;</span>,<span class="hljs-comment">// 表示签名的算法，默认是HMAC SHA256</span><br>    <span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><span class="hljs-comment">// 表示令牌（token）的类型，ＪＷＴ令牌写为ＪＷＴ</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最后通过<code> Base64URL</code>算法将上面的ＪＳＯＮ对象转成字符串</p><h3 id="2-2-Payload"><a href="#2-2-Payload" class="headerlink" title="2.2 Payload"></a>2.2 Payload</h3><p>Payload 也是一个 JSON 对象，用来存实际需要传的数据。JWT 规定了 7 个官方字段</p><ul><li>iss(issuer)：签发人</li><li>exp(expiration time)：过期时间</li><li>sub(subject)：主题</li><li>aud(audience)：受众</li><li>nbf(Not Before)：生效时间</li><li>iat(Issued At)：签发时间</li><li>jti(JWT ID)：编号</li></ul><p>除了官方字段，还可以定义私有字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;sub&quot;</span>: <span class="hljs-string">&quot;134567890&quot;</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-string">&quot;admin&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p><b style="color: red">JWT 默认是不加密的，所以需要保密的信息不应该放在这部分</b></p><p>最后通过<code> Base64URL</code>算法将上面的 JSON 对象转成字符串</p><h3 id="2-3-Signature"><a href="#2-3-Signature" class="headerlink" title="2.3 Signature"></a>2.3 Signature</h3><p>Signature 是对前两部分的签名，防止数据篡改</p><p>首先，需要指定一个密钥(<b style="color: red">这个密钥只有服务器知道，不能泄露给用户</b>)。然后，使用 Header 里面指定的签名算法，按以下公式产生签名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">HMACSHA256(<br>  base64UrlEncode(header) + <span class="hljs-string">&quot;.&quot;</span> + base64UrlEncode(payload),<br>  secret <span class="hljs-comment">// 私钥</span><br>);<br></code></pre></td></tr></table></figure><p>得到签名后，将 Header、Payload、Signature 三个部分拼接成一个字符串，用<code> .</code>分隔，可以返回给用户</p><p><b style="Color: red">在 JWT 中，消息体是透明的，使用签名可以保证消息不被篡改，但不能实现数据加密功能</b></p><p>将 Header 和 Payload 串型化的算法是<code> BaseURL</code>，和<code> Base64</code>算法类似，但有一些不同。</p><p>JWT 作为一个令牌(token)，有时候需要放到 URL 中(如 api.example.com/?token=xxx)。</p><ul><li>Base64 中的三个字符<code> +</code>, <code> /</code>, <code> =</code> ，在 URL 中有特殊意义</li><li>Base64URL：<code> =</code>被省略，<code> +</code>替换成<code> -</code>，<code> /</code>替换成<code> _</code></li></ul><h3 id="2-4-JWT-的使用方式"><a href="#2-4-JWT-的使用方式" class="headerlink" title="2.4 JWT 的使用方式"></a>2.4 JWT 的使用方式</h3><p>客户端收到服务器返回的 JWT，可以存在 Cookie 里，也可以存在 localStorage 中。之后，客户端与服务器通信，都要带上这个 JWT，可以将 JWT 放在 Cookie 里自动发送，不过这样子不能跨域。<b style="color: red">更好的做法是：放在 HTTP 请求头的<code> Authorization</code>字段里面</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Authorization: Bearer &lt;token&gt;<br></code></pre></td></tr></table></figure><h3 id="2-5-使用-jsonwebtoken"><a href="#2-5-使用-jsonwebtoken" class="headerlink" title="2.5 使用 jsonwebtoken"></a>2.5 使用 jsonwebtoken</h3><p><a href="https://github.com/auth0/node-jsonwebtoken">jsonwebtoken 仓库</a></p><p>了解 jsonwebtoken 的使用</p><p>先安装，<code> npm install jsonwebtoken</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;jsonwebtoken&quot;</span>);<br><br><span class="hljs-comment">// 生成jwt：jwt.sign</span><br><span class="hljs-comment">// // 同步方式:</span><br><span class="hljs-comment">// const token = jwt.sign(&#123; foo: &#x27;bar&#x27; &#125;, &#x27;hello&#x27;);</span><br><span class="hljs-comment">// console.log(token)</span><br><br><span class="hljs-comment">// 异步方式：就只是加多一个回调函数</span><br><span class="hljs-keyword">const</span> token = jwt.sign(<br>  &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br>  &#125;,<br>  <span class="hljs-string">&quot;hello&quot;</span>,<br>  <span class="hljs-function">(<span class="hljs-params">err, token</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成token失败&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(token);<br>  &#125;<br>);<br><br><span class="hljs-comment">// 验证jwt：jwt.verify</span><br><span class="hljs-comment">// 同步方式：</span><br><span class="hljs-comment">// const result = jwt.verify(&#x27;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\</span><br><span class="hljs-comment">// eyJmb28iOiJiYXIiLCJpYXQiOjE2NDQ2NjY1NDd9.\</span><br><span class="hljs-comment">// 0Vy596XulYTCxeTrBp27U2T4BMh93IPN5l2b0GqxAMY&#x27;, &#x27;hello&#x27;)</span><br><br><span class="hljs-comment">// console.log(result)</span><br><br><span class="hljs-comment">// 异步方式：</span><br>jwt.verify(<span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\</span><br><span class="hljs-string">eyJmb28iOiJiYXIiLCJpYXQiOjE2NDQ2NjY1NDd9.\</span><br><span class="hljs-string">0Vy596XulYTCxeTrBp27U2T4BMh93IPN5l2b0GqxAMY&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, ret</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;验证token失败&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(ret);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="2-5-1-生成-token"><a href="#2-5-1-生成-token" class="headerlink" title="2.5.1 生成 token"></a>2.5.1 生成 token</h4><p>util \ jwt.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;jsonwebtoken&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; promisify &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;util&quot;</span>); <span class="hljs-comment">// 将回调函数转换成Promise形式</span><br><br><span class="hljs-built_in">exports</span>.sign = promisify(jwt.sign);<br><br><span class="hljs-built_in">exports</span>.verify = promisify(jwt.verify);<br><br><span class="hljs-built_in">exports</span>.decode = promisify(jwt.decode); <span class="hljs-comment">// 不验证，直接解析</span><br></code></pre></td></tr></table></figure><p>config \ config.default.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">dbURL</span>: <span class="hljs-string">&quot;mongodb://localhost:27017/realworld&quot;</span>, <span class="hljs-comment">// MongoDB默认端口17017</span><br>  <span class="hljs-attr">jwtSecret</span>: <span class="hljs-string">&quot;c06eddf5-78eb-494f-b2c6-4a6d45b56cd5&quot;</span>, <span class="hljs-comment">// uuid随机生成(直接搜索uuid)</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>controller userController.js（只改登录部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 类前面引入</span><br><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../util/jwt&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; jwtSecret &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../config/config.default&#x27;</span>)<br><br><span class="hljs-comment">// 用户登录</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 1. 数据验证</span><br>    <span class="hljs-comment">// 2. 生成token</span><br>    <span class="hljs-keyword">const</span> user = req.user.toJSON()<br><br>    <span class="hljs-keyword">const</span> token = <span class="hljs-keyword">await</span> jwt.sign(&#123;<br>      <span class="hljs-attr">userId</span>: user._id    <span class="hljs-comment">// 生成token不需要全部user信息，只要_id即可</span><br>    &#125;, jwtSecret)<br><br>    <span class="hljs-comment">// 3. 发送成功响应(包含token的用户信息)</span><br>    <span class="hljs-keyword">delete</span> user.password<br>    res.status(<span class="hljs-number">200</span>).json(&#123;<br>      ...user,<br>      token<br>    &#125;)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/7E9rMZ3c8QU42sS.png" alt="image-20220212204150260"></p><h3 id="2-6-中间件统一处理-JWT-身份认证"><a href="#2-6-中间件统一处理-JWT-身份认证" class="headerlink" title="2.6 中间件统一处理 JWT 身份认证"></a>2.6 中间件统一处理 JWT 身份认证</h3><p>middleware \ authorization.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; verify &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../util/jwt&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; jwtSecret &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config/config.default&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; User &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../model/index&quot;</span>);<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>  <span class="hljs-comment">// 1. 从请求头获取token</span><br>  <span class="hljs-keyword">let</span> token = req.headers[<span class="hljs-string">&quot;authorization&quot;</span>];<br><br>  token = token ? token.split(<span class="hljs-string">&quot;Bearer &quot;</span>)[<span class="hljs-number">1</span>] : <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">if</span> (!token) &#123;<br>    <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">401</span>).end(<span class="hljs-string">&quot;请求头无token或token格式不对&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 2. 验证token是否有效</span><br>    <span class="hljs-comment">//    无效 ==&gt; 响应401状态码</span><br>    <span class="hljs-comment">//    有效 ==&gt; 把用户信息读取出来，并挂载到req请求对象中，继续往后执行</span><br>    <span class="hljs-keyword">const</span> decodedToken = <span class="hljs-keyword">await</span> verify(token, jwtSecret);<br>    req.user = <span class="hljs-keyword">await</span> User.findById(decodedToken.userId);<br><br>    next();<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">401</span>).end(<span class="hljs-string">&quot;token无效&quot;</span>);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/QsY2dEJHM48ISLB.png" alt="image-20220213193413017"></p><p><img src="https://s2.loli.net/2022/03/06/bqK4VkZ9XQsWIyH.png" alt="image-20220213193952500"></p><h3 id="2-7-JWT-过期时间"><a href="#2-7-JWT-过期时间" class="headerlink" title="2.7 JWT 过期时间"></a>2.7 JWT 过期时间</h3><p><img src="https://s2.loli.net/2022/03/06/6lFVXrutyLmdkOo.png" alt="image-20220213194228528"></p><p>设置为 15 秒，体验下过期</p><p><img src="https://s2.loli.net/2022/03/06/XBpAb8rQvGM9qDS.gif" alt="jwt"></p><h3 id="2-8-Postman-自动添加-token"><a href="#2-8-Postman-自动添加-token" class="headerlink" title="2.8 Postman 自动添加 token"></a>2.8 Postman 自动添加 token</h3><p><img src="https://s2.loli.net/2022/03/06/ES316tO8CoMA9BY.png" alt="image-20220213195824827"></p><p><img src="https://s2.loli.net/2022/03/06/2c8tgln6ekvhGYq.png" alt="image-20220213200015365"></p><h2 id="3-新增文章"><a href="#3-新增文章" class="headerlink" title="3. 新增文章"></a>3. 新增文章</h2><p><strong>和注册类似</strong></p><h3 id="3-1-数据验证"><a href="#3-1-数据验证" class="headerlink" title="3.1 数据验证"></a>3.1 数据验证</h3><p>validate \ article.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> validate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../middleware/validate&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; body &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-validator&quot;</span>);<br><br><span class="hljs-built_in">exports</span>.createArticle = validate([<br>  body(<span class="hljs-string">&quot;article.title&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;文章标题不能为空&quot;</span>),<br>  body(<span class="hljs-string">&quot;article.description&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;文章摘要不能为空&quot;</span>),<br>  body(<span class="hljs-string">&quot;article.body&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;文章内容不能为空&quot;</span>),<br>]);<br></code></pre></td></tr></table></figure><h3 id="3-2-文章模型"><a href="#3-2-文章模型" class="headerlink" title="3.2 文章模型"></a>3.2 文章模型</h3><p>model \ article.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><br><span class="hljs-keyword">const</span> baseModel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./base-model&quot;</span>);<br><br><span class="hljs-keyword">const</span> Schema = mongoose.Schema;<br><br><span class="hljs-comment">// 创建文章模型</span><br><span class="hljs-keyword">const</span> articleSchema = mongoose.Schema(&#123;<br>  ...baseModel,<br>  <span class="hljs-attr">title</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">description</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">body</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">tagList</span>: &#123;<br>    <span class="hljs-attr">type</span>: [<span class="hljs-built_in">String</span>],<br>    <span class="hljs-attr">default</span>: <span class="hljs-literal">null</span>,<br>  &#125;,<br>  <span class="hljs-attr">favoritesCount</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">Number</span>,<br>    <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  <span class="hljs-attr">author</span>: &#123;<br>    <span class="hljs-attr">type</span>: Schema.Types.ObjectId,<br>    <span class="hljs-attr">ref</span>: <span class="hljs-string">&quot;User&quot;</span>, <span class="hljs-comment">// 存用户id，之后映射到用户模型去</span><br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-built_in">module</span>.exports = articleSchema;<br></code></pre></td></tr></table></figure><p><b style="Color: red">ref 中的值需要时，model \ index.js 中导出的模型类中启用的名字</b></p><p><img src="https://s2.loli.net/2022/03/06/LgHpIeY5b8FUqdj.png" alt="image-20220214134231860"></p><h3 id="3-3-文章相关路由"><a href="#3-3-文章相关路由" class="headerlink" title="3.3 文章相关路由"></a>3.3 文章相关路由</h3><p><b style="color: red">新增文章部分加上了 JWT 身份认证和数据验证</b></p><p>router \ article.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-keyword">const</span> articleController = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../controller/articleController&quot;</span>);<br><span class="hljs-keyword">const</span> authorization = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../middleware/authorization&quot;</span>);<br><span class="hljs-keyword">const</span> articleValidate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../validate/article&quot;</span>);<br><br><span class="hljs-keyword">const</span> router = express.Router();<br><br><span class="hljs-comment">// 获取所有文章(可增加条件筛选)</span><br>router.get(<span class="hljs-string">&quot;/&quot;</span>, articleController.listArticles);<br><br><span class="hljs-comment">// 获取关注用户的所有文章(可增加条件筛选)</span><br>router.get(<span class="hljs-string">&quot;/feed&quot;</span>, articleController.feedArticles);<br><br><span class="hljs-comment">// 获取单篇文章</span><br>router.get(<span class="hljs-string">&quot;/:slug&quot;</span>, articleController.getArticle); <span class="hljs-comment">// slug类似id，用于确定特定文章</span><br><br><span class="hljs-comment">// 新增文章</span><br>router.post(<br>  <span class="hljs-string">&quot;/&quot;</span>,<br>  authorization,<br>  articleValidate.createArticle,<br>  articleController.createArticle<br>);<br><br><span class="hljs-comment">// 更新文章</span><br>router.put(<span class="hljs-string">&quot;/:slug&quot;</span>, articleController.updateArticle);<br><br><span class="hljs-comment">// 删除文章</span><br>router.delete(<span class="hljs-string">&quot;/:slug&quot;</span>, articleController.deleteArticle);<br><br><span class="hljs-comment">// 增加一篇文章的评论</span><br>router.post(<span class="hljs-string">&quot;/:slug/comments&quot;</span>, articleController.addComments);<br><br><span class="hljs-comment">// 获取一篇文章的所有评论</span><br>router.get(<span class="hljs-string">&quot;/:slug/comments&quot;</span>, articleController.getComments);<br><br><span class="hljs-comment">// 删除文章的一条评论</span><br>router.delete(<span class="hljs-string">&quot;/:slug/comments/:id&quot;</span>, articleController.deleteComment);<br><br><span class="hljs-comment">// 喜欢一篇文章</span><br>router.post(<span class="hljs-string">&quot;/:slug/favorite&quot;</span>, articleController.likeArticle);<br><br><span class="hljs-comment">// 取消喜欢一篇文章</span><br>router.delete(<span class="hljs-string">&quot;/:slug/favorite&quot;</span>, articleController.unlikeArticle);<br><br><span class="hljs-built_in">module</span>.exports = router;<br></code></pre></td></tr></table></figure><h3 id="3-4-处理请求"><a href="#3-4-处理请求" class="headerlink" title="3.4 处理请求"></a>3.4 处理请求</h3><p>controller \ articleController.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; Article &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../model/index&quot;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">articleController</span> </span>&#123;<br>  <span class="hljs-comment">// 获取所有文章(可增加条件筛选)</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">listArticles</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;获取所有文章&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 获取关注用户的所有文章(可增加条件筛选)</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">feedArticles</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;获取关注用户的所有文章&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 获取单篇文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;获取单篇文章&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 新增文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">createArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> article = <span class="hljs-keyword">new</span> Article(req.body.article);<br><br>      article.author = req.user._id; <span class="hljs-comment">// 作者在数据库中只存一个用户id，通过id去获取用户</span><br>      article.populate(<span class="hljs-string">&quot;author&quot;</span>); <span class="hljs-comment">// 简单来说，就是通过populate()以及文章模型中的ref: &#x27;User&#x27;，可以通过id把用户信息放到author中</span><br><br>      <span class="hljs-comment">// article.populate(&#x27;author&#x27;).execPopulate()</span><br><br>      <span class="hljs-keyword">await</span> article.save();<br>      res.status(<span class="hljs-number">201</span>).json(&#123;<br>        article,<br>      &#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 更新文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">updateArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;更新文章&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 删除文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">deleteArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;删除文章&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 增加一篇文章的评论</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">addComments</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;增加一篇文章的评论&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 获取一篇文章的所有评论</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getComments</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;获取一篇文章的评论&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 删除文章的一条评论</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">deleteComment</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;删除文章的一条评论&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 喜欢一篇文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">likeArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;喜欢一篇文章&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 取消喜欢一篇文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">unlikeArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;取消喜欢一篇文章&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-keyword">new</span> articleController();<br></code></pre></td></tr></table></figure><p><b style="Color: red">疑点：老师说查询时不需要 execPopulate()，new 出来时需要，相当于执行一次查询。但是个人试验时发现都不需要 execPopulate()，加上反而会出错</b>，类似<code> &quot;article.populate(...).execPopulate is not a function&quot;</code></p><p>可能是时代变了，现在 new 出来的时候，也执行了</p><p><img src="https://s2.loli.net/2022/03/06/ekR29q7nSZfCylB.png" alt="image-20220214134928849"></p><h2 id="4-查询文章"><a href="#4-查询文章" class="headerlink" title="4. 查询文章"></a>4. 查询文章</h2><h3 id="4-1-数据验证"><a href="#4-1-数据验证" class="headerlink" title="4.1 数据验证"></a>4.1 数据验证</h3><p>model \ article.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.getArticle = validate([<br>  param(<span class="hljs-string">&quot;slug&quot;</span>).custom(<span class="hljs-keyword">async</span> (value) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!mongoose.isValidObjectId(value)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;文章ID类型错误&quot;</span>);<br>    &#125;<br>  &#125;),<br>]);<br></code></pre></td></tr></table></figure><h3 id="4-2-路由"><a href="#4-2-路由" class="headerlink" title="4.2 路由"></a>4.2 路由</h3><p>router \ article.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取单篇文章</span><br>router.get(<span class="hljs-string">&quot;/:slug&quot;</span>, articleValidate.getArticle, articleController.getArticle); <span class="hljs-comment">// slug类似id，用于确定特定文章</span><br></code></pre></td></tr></table></figure><h3 id="4-3-处理请求"><a href="#4-3-处理请求" class="headerlink" title="4.3 处理请求"></a>4.3 处理请求</h3><p>controller \ articleController.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取单篇文章</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> article = <span class="hljs-keyword">await</span> Article.findById(req.params.slug).populate(<span class="hljs-string">&#x27;author&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> (!article) &#123;<br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">404</span>).end()<br>    &#125;<br><br>    res.status(<span class="hljs-number">200</span>).json(<br>      article<br>    )<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-获取所有文章"><a href="#5-获取所有文章" class="headerlink" title="5. 获取所有文章"></a>5. 获取所有文章</h2><p>controller \ articleController.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取所有文章(可增加条件筛选)</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">listArticles</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123;<br>        offset = <span class="hljs-number">0</span>,<span class="hljs-comment">// offset默认为0</span><br>        limit = <span class="hljs-number">20</span>,<br>        tag,<br>        author<br>      &#125; = req.query<br><br>      <span class="hljs-keyword">const</span> filter = &#123;&#125;   <span class="hljs-comment">// 用于筛选</span><br><br>      <span class="hljs-keyword">if</span> (tag) &#123;<br>        filter.tagList = tag<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (author) &#123;<br>        <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> User.findOne(&#123; <span class="hljs-attr">username</span>: author &#125;)<br>        filter.author = user ? user._id : <span class="hljs-literal">null</span>  <span class="hljs-comment">// 如果有这个作者，则获取作者的id用于筛选。没有则为null</span><br>      &#125;<br><br>      <span class="hljs-keyword">const</span> articlesCount = <span class="hljs-keyword">await</span> Article.countDocuments()<br><br>      <span class="hljs-keyword">const</span> articles = <span class="hljs-keyword">await</span> Article.find(filter)   <span class="hljs-comment">// 筛选出有这个标签的文章</span><br>        .skip(<span class="hljs-built_in">Number</span>.parseInt(offset))       <span class="hljs-comment">// 跳过多少条</span><br>        .limit(<span class="hljs-built_in">Number</span>.parseInt(limit))      <span class="hljs-comment">// 取多少条</span><br>        .sort(&#123;       <span class="hljs-comment">// 排序， -1代表倒叙，1代表正序</span><br>          <span class="hljs-attr">createdAt</span>: -<span class="hljs-number">1</span><br>        &#125;)<br><br>      res.status(<span class="hljs-number">200</span>).json(&#123;<br>        articles,<br>        articlesCount<br>      &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="6-更新文章"><a href="#6-更新文章" class="headerlink" title="6. 更新文章"></a>6. 更新文章</h2><h3 id="6-1-封装验证-ID-是否有效"><a href="#6-1-封装验证-ID-是否有效" class="headerlink" title="6.1 封装验证 ID 是否有效"></a>6.1 封装验证 ID 是否有效</h3><p>修改 validate 中间件</p><p>middle \ validate.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; validationResult, buildCheckFunction &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-validator&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; isValidObjectId &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><br><span class="hljs-built_in">exports</span> = <span class="hljs-built_in">module</span>.exports = <span class="hljs-function">(<span class="hljs-params">validations</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-built_in">Promise</span>.all(validations.map(<span class="hljs-function">(<span class="hljs-params">validation</span>) =&gt;</span> validation.run(req)));<br><br>    <span class="hljs-keyword">const</span> errors = validationResult(req);<br>    <span class="hljs-keyword">if</span> (errors.isEmpty()) &#123;<br>      <span class="hljs-keyword">return</span> next();<br>    &#125;<br><br>    res.status(<span class="hljs-number">400</span>).json(&#123; <span class="hljs-attr">errors</span>: errors.array() &#125;);<br>  &#125;;<br>&#125;;<br><br><span class="hljs-built_in">exports</span>.isValidObjectId = <span class="hljs-function">(<span class="hljs-params">location, fields</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 第一个参数是验证的数据的位置，第二个参数是验证数据字段</span><br>  <span class="hljs-keyword">return</span> buildCheckFunction(location)(fields).custom(<span class="hljs-keyword">async</span> (value) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!isValidObjectId(value)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;ID不是有效的ObjectID&quot;</span>);<br>    &#125;<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="6-2-修改-article-的验证以及添加更新文章的验证"><a href="#6-2-修改-article-的验证以及添加更新文章的验证" class="headerlink" title="6.2 修改 article 的验证以及添加更新文章的验证"></a>6.2 修改 article 的验证以及添加更新文章的验证</h3><p>validate \ article.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> validate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../middleware/validate&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; body, param &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-validator&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; Article &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../model&quot;</span>);<br><br><span class="hljs-built_in">exports</span>.createArticle = validate([<br>  body(<span class="hljs-string">&quot;article.title&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;文章标题不能为空&quot;</span>),<br>  body(<span class="hljs-string">&quot;article.description&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;文章摘要不能为空&quot;</span>),<br>  body(<span class="hljs-string">&quot;article.body&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;文章内容不能为空&quot;</span>),<br>]);<br><br><span class="hljs-built_in">exports</span>.getArticle = validate([<br>  validate.isValidObjectId([<span class="hljs-string">&quot;params&quot;</span>], <span class="hljs-string">&quot;slug&quot;</span>), <span class="hljs-comment">// 第一个参数是验证的数据的位置，第二个参数是验证数据字段</span><br><br>  <span class="hljs-comment">// param(&#x27;slug&#x27;).custom(async value =&gt; &#123;</span><br>  <span class="hljs-comment">//   if (!mongoose.isValidObjectId(value)) &#123;</span><br><br>  <span class="hljs-comment">//     return Promise.reject(&#x27;文章ID类型错误&#x27;)</span><br>  <span class="hljs-comment">//   &#125;</span><br><br>  <span class="hljs-comment">// &#125;)</span><br>]);<br><br><span class="hljs-built_in">exports</span>.updateArticle = [<br>  validate([<br>    validate.isValidObjectId([<span class="hljs-string">&quot;params&quot;</span>], <span class="hljs-string">&quot;slug&quot;</span>), <span class="hljs-comment">// 第一个参数是验证的数据的位置，第二个参数是验证数据字段</span><br>  ]),<br>  <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>    <span class="hljs-comment">// 校验文章是否存在</span><br>    <span class="hljs-keyword">const</span> articleId = req.params.slug;<br>    <span class="hljs-keyword">const</span> article = <span class="hljs-keyword">await</span> Article.findById(articleId);<br>    req.article = article; <span class="hljs-comment">// 把article挂载到req上</span><br><br>    <span class="hljs-keyword">if</span> (!article) &#123;<br>      <span class="hljs-comment">// 要修改的文章不存在</span><br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">404</span>).end();<br>    &#125;<br>    next(); <span class="hljs-comment">// 文章存在，下一个中间件处理</span><br>  &#125;,<br>  <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>    <span class="hljs-comment">// 判断文章作者是否是登录用户(禁止修改别人的文章)</span><br><br>    <span class="hljs-keyword">if</span> (req.user._id.toString() !== req.article.author.toString()) &#123;<br>      <span class="hljs-comment">// ObjectId是一个对象，不能直接比较</span><br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">403</span>).end();<br>    &#125;<br>    next();<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><h3 id="6-3-增加-article-的路由——更新文章"><a href="#6-3-增加-article-的路由——更新文章" class="headerlink" title="6.3 增加 article 的路由——更新文章"></a>6.3 增加 article 的路由——更新文章</h3><p>route \ article.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 更新文章</span><br>router.put(<br>  <span class="hljs-string">&quot;/:slug&quot;</span>,<br>  authorization,<br>  articleValidate.updateArticle,<br>  articleController.updateArticle<br>);<br></code></pre></td></tr></table></figure><h3 id="6-4-处理请求（更新文章）"><a href="#6-4-处理请求（更新文章）" class="headerlink" title="6.4 处理请求（更新文章）"></a>6.4 处理请求（更新文章）</h3><p>controller \ articleController.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 更新文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">updateArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> article = req.article<br>      <span class="hljs-keyword">const</span> bodyArticle = req.body.article<br><br>      article.title = bodyArticle.title || article.title  <span class="hljs-comment">// 有修改的则用修改的，否则用原来的</span><br>      article.description = bodyArticle.description || article.description<br>      article.body = bodyArticle.body || article.body<br><br>      <span class="hljs-keyword">await</span> article.save()<br>      res.status(<span class="hljs-number">200</span>).json(&#123;<br>        article<br>      &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="7-删除文章"><a href="#7-删除文章" class="headerlink" title="7. 删除文章"></a>7. 删除文章</h2><h3 id="7-1-数据验证"><a href="#7-1-数据验证" class="headerlink" title="7.1 数据验证"></a>7.1 数据验证</h3><p>middle \ validate.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.deleteArticle = <span class="hljs-built_in">exports</span>.updateArticle;<br></code></pre></td></tr></table></figure><h3 id="7-2-路由"><a href="#7-2-路由" class="headerlink" title="7.2 路由"></a>7.2 路由</h3><p>route \ article.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 删除文章</span><br>router.delete(<br>  <span class="hljs-string">&quot;/:slug&quot;</span>,<br>  authorization,<br>  articleValidate.deleteArticle,<br>  articleController.deleteArticle<br>);<br></code></pre></td></tr></table></figure><h3 id="7-3-处理请求"><a href="#7-3-处理请求" class="headerlink" title="7.3 处理请求"></a>7.3 处理请求</h3><p>controller \ articleController.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 删除文章</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">deleteArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> article = req.article<br>    <span class="hljs-keyword">await</span> article.remove()<br>    res.status(<span class="hljs-number">204</span>).end()<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express实战(一)	项目结构搭建及验证、加密</title>
      <link href="/2022/03/06/express-3/"/>
      <url>/2022/03/06/express-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-实战-一-项目结构搭建及验证、加密"><a href="#Express-实战-一-项目结构搭建及验证、加密" class="headerlink" title="Express 实战(一) 项目结构搭建及验证、加密"></a>Express 实战(一) 项目结构搭建及验证、加密</h1><p>开源项目：</p><ul><li><p><a href="https://github.com/gothinkster/realworld">github 仓库</a></p></li><li><p><a href="https://realworld-docs.netlify.app/docs/specs/backend-specs/endpoints">接口文档</a></p></li></ul><br><p><a href="https://clz.vercel.app/2022/02/28/RESTful/">RESTful 接口设计规范</a></p><p>最终结果：<a href="https://github.com/13535944743/realworld-api-express-practise-">realworld-api-express-practise- </a></p><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir realworld-api-express<br>cd realworld-api-express<br>npm init -y<br>npm install express<br></code></pre></td></tr></table></figure><p>目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.<br>├── node_modules npm安装的第三方包目录，使用 npm 装包会自动创建<br>├── config# 配置文件<br>|├── config.default.js<br>├── controller# 解析用户的输入，处理后返回相应的结果<br>├── model# 数据持久层<br>├── middleware# 中间件<br>├── router# 配置URL路由<br>├── util# 工具模块<br>├── app.js 服务端程序入口文件，执行该文件会启动我们的 Web 服务器<br>├── package.json 项目包说明文件，存储第三方包依赖等信息<br>└── package-lock.json npm的包锁定文件，用来锁定第三方包的版本和提高npm下载速度<br></code></pre></td></tr></table></figure><h2 id="3-配置常用中间件"><a href="#3-配置常用中间件" class="headerlink" title="3. 配置常用中间件"></a>3. 配置常用中间件</h2><ul><li><strong>解析请求体</strong><ul><li>express.json()</li><li>express.urlencoded()</li></ul></li><li><strong>日志输出</strong><ul><li>morgan()</li></ul></li><li><strong>提供跨域资源请求</strong><ul><li>cors()</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> morgan = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;morgan&quot;</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cors&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">// 日志输出</span><br>app.use(morgan(<span class="hljs-string">&quot;dev&quot;</span>));<br><br><span class="hljs-comment">// 解析请求体的中间件</span><br>app.use(express.json());<br>app.use(express.urlencoded());<br><br><span class="hljs-comment">// 提供跨域资源请求</span><br>app.use(cors());<br><br><span class="hljs-keyword">const</span> PORT = process.env.PORT || <span class="hljs-number">3000</span>; <span class="hljs-comment">// process.env.PORT读取当前目录下环境变量port的值，若没有则默认端口为3000</span><br><br>app.post(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(req.body);<br>&#125;);<br><br>app.listen(PORT, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Server is running at http://localhost:<span class="hljs-subst">$&#123;PORT&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/1LCVTXJmcyZiSKA.png" alt="image-20220211002712124"></p><h2 id="4-路由设计"><a href="#4-路由设计" class="headerlink" title="4. 路由设计"></a>4. 路由设计</h2><p><a href="https://realworld-docs.netlify.app/docs/specs/backend-specs/endpoints">接口文档</a></p><p>用户相关路由(user.js)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-keyword">const</span> router = express.Router();<br><br><span class="hljs-comment">// 用户登录</span><br>router.post(<span class="hljs-string">&quot;/users/login&quot;</span>, <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    res.send(<span class="hljs-string">&quot;用户登录&quot;</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err);<br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">// 用户注册</span><br>router.post(<span class="hljs-string">&quot;/users&quot;</span>, <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    res.send(<span class="hljs-string">&quot;用户注册&quot;</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err);<br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">// 获取当前用户</span><br>router.get(<span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    res.send(<span class="hljs-string">&quot;获取当前用户&quot;</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err);<br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">// 更新用户</span><br>router.put(<span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    res.send(<span class="hljs-string">&quot;更新用户&quot;</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err);<br>  &#125;<br>&#125;);<br><br><span class="hljs-built_in">module</span>.exports = router;<br></code></pre></td></tr></table></figure><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-keyword">const</span> router = express.Router();<br><br><span class="hljs-comment">// 用户相关路由</span><br>router.use(<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./user&quot;</span>));<br><br><span class="hljs-comment">// 用户资料相关路由</span><br>router.use(<span class="hljs-string">&quot;/profiles&quot;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./profile&quot;</span>));<br><br><span class="hljs-built_in">module</span>.exports = router;<br></code></pre></td></tr></table></figure><p>app.js 挂载路由级别中间件</p><p><img src="https://s2.loli.net/2022/03/06/GjxSF28w5asHzKA.png" alt="image-20220211125351747"></p><p>其他路由做法类似</p><h2 id="5-提取控制器模块"><a href="#5-提取控制器模块" class="headerlink" title="5. 提取控制器模块"></a>5. 提取控制器模块</h2><p>简单来说，就是把路由处理的回调函数单独抽出来，放到另一个地方，方便维护等操作。</p><p>示例(userController)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 用户登录</span><br><span class="hljs-built_in">exports</span>.login = <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    res.send(<span class="hljs-string">&quot;用户登录&quot;</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/n9uJZeIOog8tMlU.png" alt="image-20220211185051313"></p><p>再优化一下(将控制器封装成类)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">userController</span> </span>&#123;<br>  <span class="hljs-comment">// 用户登录</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;用户登录&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 用户注册</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">register</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;用户注册&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 获取当前用户</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getCurrentUser</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;获取当前用户&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 更新用户</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">updateUser</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;更新用户&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-keyword">new</span> userController();<br></code></pre></td></tr></table></figure><h2 id="6-配置错误处理中间件"><a href="#6-配置错误处理中间件" class="headerlink" title="6. 配置错误处理中间件"></a>6. 配置错误处理中间件</h2><p>error-handler</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 错误处理中间件必须要四个参数</span><br>    res.status(<span class="hljs-number">500</span>).json(&#123;<br>      <span class="hljs-attr">error</span>: err.message,<br>    &#125;);<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/lckJVbijDN7ShK8.png" alt="image-20220211210724530"></p><p><b style="color: red">错误处理中间件应该在最后才挂载</b></p><p>测试：<img src="https://s2.loli.net/2022/03/06/UwrY8Ha2xVnSPBX.png" alt="image-20220211210925234"></p><p>​ <img src="https://s2.loli.net/2022/03/06/fV9Y3abCJ1WjneS.png" alt="image-20220211210949033"></p><h2 id="7-统一管理测试接口-postman"><a href="#7-统一管理测试接口-postman" class="headerlink" title="7. 统一管理测试接口(postman)"></a>7. 统一管理测试接口(postman)</h2><p><img src="https://s2.loli.net/2022/03/06/Ewk4XzUAx3MFjyS.png" alt="image-20220211212812413"></p><p>选择对应环境(Development 或 Production)，没有则点击 No Environment，然后点击小眼睛，添加环境</p><p>设置基础路径(选择环境后，点击小眼睛进行编辑，如下图所示)</p><p><img src="https://s2.loli.net/2022/03/06/zwvo7CjGmUr2euN.png" alt="image-20220211213132330"></p><p><img src="https://s2.loli.net/2022/03/06/23lmkYXwPHbdRr5.png" alt="image-20220211213615327"></p><h2 id="8-使用-mongodb-数据库"><a href="#8-使用-mongodb-数据库" class="headerlink" title="8. 使用 mongodb 数据库"></a>8. 使用 mongodb 数据库</h2><h3 id="8-1-安装-mongodb"><a href="#8-1-安装-mongodb" class="headerlink" title="8.1 安装 mongodb"></a>8.1 安装 mongodb</h3><p><a href="https://www.mongodb.com/try/download/community">MongoDB Community Download | MongoDB</a></p><p>先打开 MongoDB Compass</p><p><img src="https://s2.loli.net/2022/03/06/zwLaTcpu3FEs6RD.png" alt="image-20220212132611027"></p><h3 id="8-2-连接-Mongodb-数据库"><a href="#8-2-连接-Mongodb-数据库" class="headerlink" title="8.2 连接 Mongodb 数据库"></a>8.2 连接 Mongodb 数据库</h3><p>首先，需要安装 Mongoose，<code> npm install mongoose</code></p><p><a href="http://www.mongoosejs.net/docs/">Mongoose 5.0 中文文档</a></p><p>model \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><br><span class="hljs-keyword">const</span> &#123; dbURL &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config/config.default&quot;</span>);<br><br><span class="hljs-comment">// 连接MongoDB数据库</span><br>mongoose.connect(dbURL);<br><br><span class="hljs-keyword">var</span> db = mongoose.connection;<br><br><span class="hljs-comment">// 数据库连接失败</span><br>db.on(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;MongoDB 数据库连接失败&quot;</span>, err);<br>&#125;);<br><br><span class="hljs-comment">// 数据库连接成功</span><br>db.once(<span class="hljs-string">&quot;open&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;MongoDB 数据库连接成功&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>数据库地址在配置中(便于上线等操作时直接更换地址)</p><p>config \ config.default.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">dbURL</span>: <span class="hljs-string">&quot;mongodb://localhost:27017/realworld&quot;</span>, <span class="hljs-comment">// MongoDB默认端口17017</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>运行(<code> nodemon app.js</code>)</p><p><img src="https://s2.loli.net/2022/03/06/mr56Ij931dMCGvQ.png" alt="image-20220212133236905"></p><h3 id="8-3-增加数据模块-以-user-为例"><a href="#8-3-增加数据模块-以-user-为例" class="headerlink" title="8.3 增加数据模块(以 user 为例)"></a>8.3 增加数据模块(以 user 为例)</h3><p>根据接口文档，确定属性</p><p><a href="https://realworld-docs.netlify.app/docs/specs/backend-specs/endpoints">接口文档</a></p><p><img src="https://s2.loli.net/2022/03/06/1U2MkDzV4AmBZHb.png" alt="image-20220212133538143"></p><p>model \ base-model.js（<strong>存放共有的属性</strong>，如创建时间，更新时间等）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">createdAt</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">Date</span>,<br>    <span class="hljs-attr">default</span>: <span class="hljs-built_in">Date</span>.now,<br>  &#125;,<br>  <span class="hljs-attr">updatedAt</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">Date</span>,<br>    <span class="hljs-attr">default</span>: <span class="hljs-built_in">Date</span>.now,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>model \ user.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><br><span class="hljs-keyword">const</span> baseModel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./base-model&quot;</span>);<br><br><span class="hljs-comment">// 创建用户模型</span><br><span class="hljs-keyword">const</span> userSchema = mongoose.Schema(&#123;<br>  ...baseModel,<br>  <span class="hljs-attr">username</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">email</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">password</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">bio</span>: &#123;<br>    <span class="hljs-comment">// 简介</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">default</span>: <span class="hljs-literal">null</span>,<br>  &#125;,<br>  <span class="hljs-attr">image</span>: &#123;<br>    <span class="hljs-comment">// 头像</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">default</span>: <span class="hljs-literal">null</span>,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-built_in">module</span>.exports = userSchema;<br></code></pre></td></tr></table></figure><p>module \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><br><span class="hljs-keyword">const</span> &#123; dbURL &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config/config.default&quot;</span>);<br><br><span class="hljs-comment">// 连接MongoDB数据库</span><br>mongoose.connect(dbURL);<br><br><span class="hljs-keyword">var</span> db = mongoose.connection;<br><br><span class="hljs-comment">// 数据库连接失败</span><br>db.on(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;MongoDB 数据库连接失败&quot;</span>, err);<br>&#125;);<br><br><span class="hljs-comment">// 数据库连接成功</span><br>db.once(<span class="hljs-string">&quot;open&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;MongoDB 数据库连接成功&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 组织导出模型类</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">User</span>: mongoose.model(<span class="hljs-string">&quot;User&quot;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./user&quot;</span>)),<br>  <span class="hljs-attr">Article</span>: mongoose.model(<span class="hljs-string">&quot;Article&quot;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./article&quot;</span>)),<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="8-4-注册，操作数据库"><a href="#8-4-注册，操作数据库" class="headerlink" title="8.4 注册，操作数据库"></a>8.4 注册，操作数据库</h3><p>controller \ userController.js</p><p><img src="https://s2.loli.net/2022/03/06/TDULJdzurGaHR9e.png" alt="image-20220212140140573"></p><p><img src="https://s2.loli.net/2022/03/06/hxuJtTKnz2U61mE.png" alt="image-20220212134443019"></p><h2 id="9-验证"><a href="#9-验证" class="headerlink" title="9. 验证"></a>9. 验证</h2><p>首先，mongodb 添加模式时的<code> required: true</code>可以实现一点验证是否缺必需参数。但是，还远远不够，以下提供两个验证的库。</p><ul><li><a href="https://github.com/sindresorhus/awesome-nodejs">awesome-nodejs</a></li><li><a href="https://github.com/express-validator/express-validator">express-validator</a></li></ul><h3 id="9-1-基本使用"><a href="#9-1-基本使用" class="headerlink" title="9.1 基本使用"></a>9.1 基本使用</h3><p>具体使用可查看<a href="https://express-validator.github.io/docs/">文档</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install express-validator<br></code></pre></td></tr></table></figure><p>router \ user.js</p><p><img src="https://s2.loli.net/2022/03/06/B7hdIYKL5UibsrD.png" alt="image-20220212150822951"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 用户注册</span><br>router.post(<br>  <span class="hljs-string">&quot;/users&quot;</span>,<br>  [<br>    <span class="hljs-comment">// 1. 配置验证规则</span><br>    body(<span class="hljs-string">&quot;user.username&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;用户名不能为空&quot;</span>), <span class="hljs-comment">// withMessage()定制错误提示消息</span><br>    body(<span class="hljs-string">&quot;user.email&quot;</span>)<br>      .notEmpty()<br>      .withMessage(<span class="hljs-string">&quot;邮箱不能为空&quot;</span>)<br>      .isEmail()<br>      .withMessage(<span class="hljs-string">&quot;邮箱格式不正确&quot;</span>)<br>      .bail() <span class="hljs-comment">// 前面验证失败则不会往后执行</span><br>      .custom(<span class="hljs-keyword">async</span> (email) =&gt; &#123;<br>        <span class="hljs-comment">// 自定义验证</span><br>        <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> User.findOne(&#123; email &#125;);<br>        <span class="hljs-keyword">if</span> (user) &#123;<br>          <span class="hljs-comment">// 有相同邮箱的用户存在</span><br>          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;邮箱已存在&quot;</span>);<br>        &#125;<br>      &#125;),<br>    body(<span class="hljs-string">&quot;user.password&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;密码不能为空&quot;</span>),<br>  ],<br>  <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 2. 判断验证结果</span><br>    <span class="hljs-keyword">const</span> errors = validationResult(req);<br>    <span class="hljs-keyword">if</span> (!errors.isEmpty()) &#123;<br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">400</span>).json(&#123; <span class="hljs-attr">errors</span>: errors.array() &#125;);<br>    &#125;<br><br>    next(); <span class="hljs-comment">// 这个一定要加，不然通过验证的情况就会卡住</span><br>  &#125;,<br>  userController.register<br>); <span class="hljs-comment">// 3. 通过验证</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/SVXpFAc5r1bZGCz.png" alt="image-20220212150745557"></p><h3 id="9-2-提取验证中间件模块"><a href="#9-2-提取验证中间件模块" class="headerlink" title="9.2 提取验证中间件模块"></a>9.2 提取验证中间件模块</h3><p>首先根据官方文档，增加验证中间件</p><p><img src="https://s2.loli.net/2022/03/06/CuIfyMkhGjaBiOF.png" alt="image-20220212151331241"></p><p>middleware \ validate.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; validationResult &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-validator&quot;</span>);<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function">(<span class="hljs-params">validations</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-built_in">Promise</span>.all(validations.map(<span class="hljs-function">(<span class="hljs-params">validation</span>) =&gt;</span> validation.run(req)));<br><br>    <span class="hljs-keyword">const</span> errors = validationResult(req);<br>    <span class="hljs-keyword">if</span> (errors.isEmpty()) &#123;<br>      <span class="hljs-keyword">return</span> next();<br>    &#125;<br><br>    res.status(<span class="hljs-number">400</span>).json(&#123; <span class="hljs-attr">errors</span>: errors.array() &#125;);<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>新增文件夹 validate(验证业务逻辑代码)</p><p>validate \ user.js(用户的验证逻辑)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> validate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../middleware/validate&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; body, validationResult &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-validator&quot;</span>);<br><br><span class="hljs-keyword">const</span> &#123; User &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../model&quot;</span>);<br><br><span class="hljs-built_in">exports</span>.register = validate([<br>  <span class="hljs-comment">// 1. 配置验证规则</span><br>  body(<span class="hljs-string">&quot;user.username&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;用户名不能为空&quot;</span>), <span class="hljs-comment">// withMessage()定制错误提示消息</span><br>  body(<span class="hljs-string">&quot;user.email&quot;</span>)<br>    .notEmpty()<br>    .withMessage(<span class="hljs-string">&quot;邮箱不能为空&quot;</span>)<br>    .isEmail()<br>    .withMessage(<span class="hljs-string">&quot;邮箱格式不正确&quot;</span>)<br>    .bail() <span class="hljs-comment">// 前面验证失败则不会往后执行</span><br>    .custom(<span class="hljs-keyword">async</span> (email) =&gt; &#123;<br>      <span class="hljs-comment">// 自定义验证</span><br>      <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> User.findOne(&#123; email &#125;);<br>      <span class="hljs-keyword">if</span> (user) &#123;<br>        <span class="hljs-comment">// 有相同邮箱的用户存在</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;邮箱已存在&quot;</span>);<br>      &#125;<br>    &#125;),<br>  body(<span class="hljs-string">&quot;user.password&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;密码不能为空&quot;</span>),<br>]);<br></code></pre></td></tr></table></figure><p>修改<code> router \ user.js</code></p><p><img src="https://s2.loli.net/2022/03/06/6tmrvNaL92XyxDs.png" alt="image-20220212151657837"></p><h2 id="10-密码加密处理"><a href="#10-密码加密处理" class="headerlink" title="10. 密码加密处理"></a>10. 密码加密处理</h2><p>开始前，先了解一下，MD5 的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;crypto&quot;</span>);<br><br><span class="hljs-comment">// 获取crypto支持的散列算法</span><br><span class="hljs-built_in">console</span>.log(crypto.getHashes());<br><br><span class="hljs-keyword">const</span> ret = crypto<br>  .createHash(<span class="hljs-string">&quot;md5&quot;</span>) <span class="hljs-comment">// 必须是crypto支持的散列算法</span><br>  .update(<span class="hljs-string">&quot;456&quot;</span>)<br>  .digest(<span class="hljs-string">&quot;hex&quot;</span>); <span class="hljs-comment">// hex代表生成的序列是十进制的</span><br><br><span class="hljs-built_in">console</span>.log(ret);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/rbVPspS6oA781fJ.png" alt="image-20220212152639731"></p><p>开搞。</p><ol><li><p>封装 md5 模块</p><p>util \ md5.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;crypto&quot;</span>);<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function">(<span class="hljs-params">str</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// str是明文，即要加密的数据</span><br>  <span class="hljs-keyword">return</span> crypto<br>    .createHash(<span class="hljs-string">&quot;md5&quot;</span>) <span class="hljs-comment">// 必须是crypto支持的散列算法</span><br>    .update(str) <span class="hljs-comment">// 可以凭借字符串，达到混淆效果，如hunxiao + str</span><br>    .digest(<span class="hljs-string">&quot;hex&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>使用 md5 模块</p><p><img src="https://s2.loli.net/2022/03/06/wg6r2EeWGoXsM3d.png" alt="image-20220212155626831"></p><p><img src="https://s2.loli.net/2022/03/06/uaKD8TVZwJgAyoR.png" alt="image-20220212155939195"></p></li><li><p>上面返回给用户的数据中，密码也给返回了，所以有点危险</p><p>用户模型修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">password: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> md5(value),    <span class="hljs-comment">// 对密码赋值时，会调用md5进行加密</span><br>    <span class="hljs-attr">select</span>: <span class="hljs-literal">false</span>    <span class="hljs-comment">// 查询数据时，不显示出来</span><br><br>  &#125;<br></code></pre></td></tr></table></figure><p>结果还是不对，因为注册的用户是新 new 出来的对象，而不是查询出来的</p><p>直接删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 用户注册</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">register</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">let</span> user = <span class="hljs-keyword">new</span> User(req.body.user)<br>    <span class="hljs-keyword">await</span> user.save()<br><br>    user = user.toJSON()    <span class="hljs-comment">// 因为user是mongodb的对象，不能直接delete，所以先把它转成JSON</span><br>    <span class="hljs-keyword">delete</span> user.password<br><br>    <span class="hljs-comment">// 发送成功响应</span><br>    res.status(<span class="hljs-number">201</span>).json(&#123;<br>      user<br>    &#125;)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/c1PziKea9bGo2Iu.png" alt="image-20220212162415623"></p></li></ol><p>视频教程：<a href="https://www.bilibili.com/video/BV1mQ4y1C7Cn">Node.js 系列教程之 Express_哔哩哔哩_bilibili</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise学习笔记(二)</title>
      <link href="/2022/03/05/promise-2/"/>
      <url>/2022/03/05/promise-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise-学习笔记-二"><a href="#Promise-学习笔记-二" class="headerlink" title="Promise 学习笔记(二)"></a>Promise 学习笔记(二)</h1><h2 id="1-改变-promise-的状态"><a href="#1-改变-promise-的状态" class="headerlink" title="1. 改变 promise 的状态"></a>1. 改变 promise 的状态</h2><p>promise 的状态一开始是 pending，改变 promise 的状态有三个方法：</p><ul><li>调用 resolve 函数：pending =&gt; fulfilled(resolved)</li><li>调用 reject 函数：pending =&gt; rejected</li><li>抛出异常：pending =&gt; rejected</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 0. 初始状态：pending</span><br><span class="hljs-keyword">const</span> p0 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;&#125;);<br><span class="hljs-built_in">console</span>.log(p0);<br><br><span class="hljs-comment">// 1. 调用resolve函数：pending =&gt; fulfilled(resolved)</span><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-string">&quot;ok&quot;</span>);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(p1);<br><br><span class="hljs-comment">// 2. 调用reject函数：pending =&gt; rejected</span><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  reject(<span class="hljs-string">&quot;error&quot;</span>);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(p2);<br>p2.catch(<span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(reason);<br>&#125;);<br><br><span class="hljs-comment">// 3. 抛出异常：pending =&gt; rejected</span><br><span class="hljs-keyword">const</span> p3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;抛出异常&quot;</span>;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(p3);<br>p3.catch(<span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(reason);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/4k1fOsAVoqe3Sbi.png" alt="image-20220226173041998"></p><h2 id="2-指定多个回调"><a href="#2-指定多个回调" class="headerlink" title="2. 指定多个回调"></a>2. 指定多个回调</h2><p><strong>当 promise 改变为对应状态时都会调用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&quot;ok&quot;</span>);<br>p.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;指定的第一个回调函数&quot;</span>);<br>&#125;);<br><br>p.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;指定的第二个回调函数&quot;</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;%c---------------&quot;</span>, <span class="hljs-string">&quot;color: red; font-size: 24px&quot;</span>);<br>&#125;);<br><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;error&quot;</span>);<br>p1.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;指定的第一个回调函数&quot;</span>); <span class="hljs-comment">// 失败的结果，不会调用这个成功时才调用的函数</span><br>&#125;);<br><br>p1.catch(<span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;指定的第二个回调函数&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/nAWPjJdEcqt92si.png" alt="image-20220226174300677"></p><h2 id="3-then-方法返回结果"><a href="#3-then-方法返回结果" class="headerlink" title="3. then 方法返回结果"></a>3. then 方法返回结果</h2><p>then()方法返回新的 Promise 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&quot;ok&quot;</span>);<br><br><span class="hljs-comment">// 1. 抛出异常</span><br><span class="hljs-keyword">let</span> result1 = p1.then(<br>  <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;抛出异常&quot;</span>;<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.warn(reason);<br>  &#125;<br>);<br><span class="hljs-built_in">console</span>.log(result1); <span class="hljs-comment">// [[PromiseState]]: &quot;rejected&quot;</span><br><br><span class="hljs-comment">// 2. 非Promise类型的对象</span><br><span class="hljs-keyword">const</span> result2 = p1.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, CLZ!&quot;</span>; <span class="hljs-comment">// [[PromiseState]]: &quot;fulfilled&quot;</span><br>&#125;);<br><span class="hljs-built_in">console</span>.log(result2);<br><br><span class="hljs-comment">// 3. Promise类型的对象</span><br><span class="hljs-comment">// 3.1 结果成功</span><br><span class="hljs-keyword">const</span> result3 = p1.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&quot;success&quot;</span>);<br>  &#125;);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(result3);<br><br><span class="hljs-comment">// 3.2 结果失败</span><br><span class="hljs-keyword">const</span> result4 = p1.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    reject(<span class="hljs-string">&quot;error&quot;</span>);<br>  &#125;);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(result4);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/ax9SIO7D6gKcNvj.png" alt="image-20220226203535240"></p><h2 id="4-串联多个任务"><a href="#4-串联多个任务" class="headerlink" title="4. 串联多个任务"></a>4. 串联多个任务</h2><p><strong>链式调用</strong>原理：then()返回的是 Promise 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&quot;ok&quot;</span>);<br><br>p1.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&quot;success&quot;</span>);<br>  &#125;);<br>&#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value); <span class="hljs-comment">// success</span><br>    <span class="hljs-keyword">return</span> value;<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value); <span class="hljs-comment">// success</span><br>    <span class="hljs-keyword">return</span> value;<br>  &#125;);<br></code></pre></td></tr></table></figure><h2 id="5-异常穿透"><a href="#5-异常穿透" class="headerlink" title="5. 异常穿透"></a>5. 异常穿透</h2><ul><li>当使用 Promise 的 then 链式调用时，可以在最后指定失败的回调</li><li>前面任何操作出异常都会传给最后失败的回调处理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&quot;ok&quot;</span>);<br><br>p1.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&quot;success&quot;</span>);<br>  &#125;);<br>&#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;出现异常&quot;</span>;<br>    <span class="hljs-keyword">return</span> value;<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>    <span class="hljs-keyword">return</span> value;<br>  &#125;)<br>  .catch(<span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.warn(reason);<br>  &#125;);<br></code></pre></td></tr></table></figure><h2 id="6-中断-Promise-链"><a href="#6-中断-Promise-链" class="headerlink" title="6. 中断 Promise 链"></a>6. 中断 Promise 链</h2><p><b style="color: red">有且只有一个方式：返回一个 pending 状态的 Promise 对象</b></p><p>因为返回一个 pending 状态的对象时，后续的回调就不能执行了，因为后面的回调函数只有在状态发生变化时才能执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&quot;ok&quot;</span>);<br><br>p1.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&quot;success&quot;</span>);<br>  &#125;);<br>&#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;); <span class="hljs-comment">// 只输出1, 2</span><br>    <span class="hljs-comment">// return false    // 无效果</span><br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>  &#125;)<br>  .catch(<span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.warn(reason);<br>  &#125;);<br></code></pre></td></tr></table></figure><h2 id="7-Promise-自定义封装"><a href="#7-Promise-自定义封装" class="headerlink" title="7. Promise 自定义封装"></a>7. Promise 自定义封装</h2><h3 id="7-1-基本结构的搭建"><a href="#7-1-基本结构的搭建" class="headerlink" title="7.1 基本结构的搭建"></a>7.1 基本结构的搭建</h3><p>promise.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Promise</span>(<span class="hljs-params">executor</span>) </span>&#123;&#125;<br><br><span class="hljs-built_in">Promise</span>.prototype.then = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) </span>&#123;&#125;;<br></code></pre></td></tr></table></figure><p>测试用: index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>手写Promise<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./promise.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="javascript">        resolve(<span class="hljs-string">&quot;OK&quot;</span>);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      p.then(</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(value);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.warn(reason);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      );</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-2-resolve、reject-功能实现"><a href="#7-2-resolve、reject-功能实现" class="headerlink" title="7.2 resolve、reject 功能实现"></a>7.2 resolve、reject 功能实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// resolve函数</span><br><span class="hljs-keyword">const</span> resolve = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 1. 修改对象的状态(promiseState)</span><br>  <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&quot;fulfilled&quot;</span>;<br><br>  <span class="hljs-comment">// 2. 设置对象结果值(promiseResult)</span><br>  <span class="hljs-built_in">this</span>.PromiseResult = data;<br>&#125;;<br><br><span class="hljs-comment">// reject函数</span><br><span class="hljs-keyword">const</span> reject = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 1. 修改对象的状态(promiseState)</span><br>  <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&quot;rejected&quot;</span>;<br><br>  <span class="hljs-comment">// 2. 设置对象结果值(promiseResult)</span><br>  <span class="hljs-built_in">this</span>.PromiseResult = data;<br>&#125;;<br></code></pre></td></tr></table></figure><p>promise.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Promise</span>(<span class="hljs-params">executor</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&quot;pending&quot;</span>;<br>  <span class="hljs-built_in">this</span>.PromiseResult = <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-comment">// resolve函数</span><br>  <span class="hljs-keyword">const</span> resolve = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 1. 修改对象的状态(promiseState)</span><br>    <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&quot;fulfilled&quot;</span>;<br><br>    <span class="hljs-comment">// 2. 设置对象结果值(promiseResult)</span><br>    <span class="hljs-built_in">this</span>.PromiseResult = data;<br>  &#125;;<br><br>  <span class="hljs-comment">// reject函数</span><br>  <span class="hljs-keyword">const</span> reject = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 1. 修改对象的状态(promiseState)</span><br>    <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&quot;rejected&quot;</span>;<br><br>    <span class="hljs-comment">// 2. 设置对象结果值(promiseResult)</span><br>    <span class="hljs-built_in">this</span>.PromiseResult = data;<br>  &#125;;<br><br>  <span class="hljs-comment">// 同步调用执行器函数executor</span><br>  executor(resolve, reject);<br>&#125;<br><br><span class="hljs-built_in">Promise</span>.prototype.then = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) </span>&#123;&#125;;<br></code></pre></td></tr></table></figure><h3 id="7-3-实现抛出异常改变-promise-状态"><a href="#7-3-实现抛出异常改变-promise-状态" class="headerlink" title="7.3 实现抛出异常改变 promise 状态"></a>7.3 实现抛出异常改变 promise 状态</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 实现抛出异常改变promise状态</span><br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-comment">// 同步调用执行器函数executor</span><br>  executor(resolve, reject);<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>  reject(e);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-4-实现-Promise-状态只能修改一次"><a href="#7-4-实现-Promise-状态只能修改一次" class="headerlink" title="7.4 实现 Promise 状态只能修改一次"></a>7.4 实现 Promise 状态只能修改一次</h3><p><code>pending =&gt; fulfilled(resolved)</code>或<code>pending =&gt; rejected</code></p><p>只需要在 resolve 函数和 reject 函数最开始加上判断，Promise 的状态是不是 pending 就行，如果不是，直接 return</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState !== <span class="hljs-string">&quot;pending&quot;</span>) &#123;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-5-实现-then-方法"><a href="#7-5-实现-then-方法" class="headerlink" title="7.5 实现 then 方法"></a>7.5 实现 then 方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.prototype.then = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&quot;fulfilled&quot;</span>) &#123;<br>    onResolved(<span class="hljs-built_in">this</span>.PromiseResult);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&quot;rejected&quot;</span>) &#123;<br>    onRejected(<span class="hljs-built_in">this</span>.PromiseResult);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="7-6-实现异步任务的执行"><a href="#7-6-实现异步任务的执行" class="headerlink" title="7.6 实现异步任务的执行"></a>7.6 实现异步任务的执行</h3><p>当任务是异步任务时，则无法执行成功或失败的回调函数，因为执行 then 参数时，状态是 pending。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&quot;OK&quot;</span>);<br>  &#125;, <span class="hljs-number">0</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>实现方法：</p><ul><li><p>自定义 Promise 对象增加一个<code> callback</code>对象，用于存成功、失败的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.callback = &#123;&#125;;<br></code></pre></td></tr></table></figure></li><li><p><code> then</code>函数增加状态为<code> pending</code>的判断，这时候只是把回调函数存放起来，等到实际调用<code> resolve</code>或<code> reject</code>函数时才调用存起来的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&quot;fulfilled&quot;</span>) &#123;<br>  onResolved(<span class="hljs-built_in">this</span>.PromiseResult);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&quot;rejected&quot;</span>) &#123;<br>  onRejected(<span class="hljs-built_in">this</span>.PromiseResult);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">// 保存回调函数</span><br>  <span class="hljs-built_in">this</span>.callback = &#123;<br>    onResolved,<br>    onRejected,<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用<code> resolve</code>或<code> reject</code>函数时，判断是否需要调用存起来的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.callback.onResolved) &#123;<br>  <span class="hljs-comment">// ` resolve`或` reject`函数最后</span><br>  <span class="hljs-built_in">this</span>.callback.onResolved(data); <span class="hljs-comment">// reject函数对应修改为onRejected</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="7-7-指定多个回调函数"><a href="#7-7-指定多个回调函数" class="headerlink" title="7.7 指定多个回调函数"></a>7.7 指定多个回调函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&quot;OK&quot;</span>);<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br><br>p.then(<br>  <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.warn(reason);<br>  &#125;<br>);<br><br>p.then(<br>  <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    alert(value);<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    alert(reason);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p><strong>会发现，最后只会弹出 OK，而不会在控制台输出。</strong>只是因为前面保存的 callback 属性是对象，所以后面的会覆盖掉前面的，改进只需要把 callback 变为数组即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.callbacks = [];<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.prototype.then = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&quot;fulfilled&quot;</span>) &#123;<br>    onResolved(<span class="hljs-built_in">this</span>.PromiseResult);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&quot;rejected&quot;</span>) &#123;<br>    onRejected(<span class="hljs-built_in">this</span>.PromiseResult);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">this</span>.callbacks.push(&#123;<br>      onResolved,<br>      onRejected,<br>    &#125;);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.callbacks.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// ` resolve`或` reject`函数最后</span><br>  item.onResolved(data); <span class="hljs-comment">// reject函数对应修改为onRejected</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="7-8-then-方法返回结果"><a href="#7-8-then-方法返回结果" class="headerlink" title="7.8 then 方法返回结果"></a>7.8 then 方法返回结果</h3><p>成功时的代码修改如下图，失败的类似</p><p><strong>只实现同步</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&quot;fulfilled&quot;</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 获取回调函数的执行结果</span><br>      <span class="hljs-keyword">const</span> result = onResolved(<span class="hljs-built_in">this</span>.PromiseResult);<br><br>      <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>        <span class="hljs-comment">// 结果是Promise类型对象</span><br>        result.then(<br>          <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>            resolve(v);<br>          &#125;,<br>          <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>            reject(r);<br>          &#125;<br>        );<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        resolve(result);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      reject(e);<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// else if (this.PromiseState === &#x27;rejected&#x27;) &#123;</span><br>  <span class="hljs-comment">//   onRejected(this.PromiseResult)</span><br>  <span class="hljs-comment">// &#125; else &#123;</span><br>  <span class="hljs-comment">//   this.callbacks.push(&#123;</span><br>  <span class="hljs-comment">//     onResolved,</span><br>  <span class="hljs-comment">//     onRejected</span><br>  <span class="hljs-comment">//   &#125;)</span><br>  <span class="hljs-comment">// &#125;</span><br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>实现异步</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> self = <span class="hljs-built_in">this</span>;<br><br><span class="hljs-built_in">this</span>.callbacks.push(&#123;<br>  <span class="hljs-attr">onResolved</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">let</span> result = onResolved(self.PromiseResult);<br>      <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>        result.then(<br>          <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>            resolve(v);<br>          &#125;,<br>          <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>            reject(r);<br>          &#125;<br>        );<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        resolve(result);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      reject(e);<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">onRejected</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 类似上面</span><br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="7-9-then-方法封装优化"><a href="#7-9-then-方法封装优化" class="headerlink" title="7.9 then 方法封装优化"></a>7.9 then 方法封装优化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">type</span>) </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 获取回调函数的执行结果</span><br>    <span class="hljs-keyword">const</span> result = type(self.PromiseResult);<br><br>    <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>      <span class="hljs-comment">// 结果是Promise类型对象</span><br>      result.then(<br>        <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>          resolve(v);<br>        &#125;,<br>        <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>          reject(r);<br>        &#125;<br>      );<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      resolve(result);<br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    reject(e);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.prototype.then = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> self = <span class="hljs-built_in">this</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">type</span>) </span>&#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 获取回调函数的执行结果</span><br>        <span class="hljs-keyword">const</span> result = type(self.PromiseResult);<br><br>        <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>          <span class="hljs-comment">// 结果是Promise类型对象</span><br>          result.then(<br>            <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>              resolve(v);<br>            &#125;,<br>            <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>              reject(r);<br>            &#125;<br>          );<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          resolve(result);<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        reject(e);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&quot;fulfilled&quot;</span>) &#123;<br>      callback(onResolved);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&quot;rejected&quot;</span>) &#123;<br>      callback(onRejected);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks.push(&#123;<br>        <span class="hljs-attr">onResolved</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          callback(onResolved);<br>        &#125;,<br>        <span class="hljs-attr">onRejected</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          callback(onRejected);<br>        &#125;,<br>      &#125;);<br>    &#125;<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="7-10-catch-方法"><a href="#7-10-catch-方法" class="headerlink" title="7.10 catch 方法"></a>7.10 catch 方法</h3><p><strong>异常穿透</strong>：因为 catch 方法支持只传一个参数<code> reason =&gt; &#123;&#125;</code>，而 then 方法第二个参数才是<code> reason =&gt; &#123;&#125;</code>，所以会出问题：最后调用 catch 时没有 onRejected 方法</p><p>所以，需要在 then 方法开始的时候添加以下判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onRejected !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>  onRejected = <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">throw</span> reason;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>catch 方法还应实现值传递，即 then 可以不传参数，那么和上面的原理一样，还需要添加当 onResolved 不存在的情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onResolved !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>  onResolved = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>手写Promise<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./promise.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">          resolve(<span class="hljs-string">&quot;ok&quot;</span>);</span><br><span class="javascript">        &#125;, <span class="hljs-number">1000</span>);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      p.then()</span><br><span class="javascript">        .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-number">222</span>);</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-number">333</span>);</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        .catch(<span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.warn(reason);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-11-API"><a href="#7-11-API" class="headerlink" title="7.11 API"></a>7.11 API</h3><h4 id="7-11-1-resolve-方法和-reject-方法"><a href="#7-11-1-resolve-方法和-reject-方法" class="headerlink" title="7.11.1 resolve 方法和 reject 方法"></a>7.11.1 resolve 方法和 reject 方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// resolve方法</span><br><span class="hljs-built_in">Promise</span>.resolve = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>      value.then(<br>        <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>          resolve(v);<br>        &#125;,<br>        <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>          reject(r);<br>        &#125;<br>      );<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      resolve(value);<br>    &#125;<br>  &#125;);<br>&#125;;<br><br><span class="hljs-comment">// reject方法</span><br><span class="hljs-built_in">Promise</span>.reject = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">reason</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    reject(reason);<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="7-11-2-all-方法"><a href="#7-11-2-all-方法" class="headerlink" title="7.11.2 all 方法"></a>7.11.2 all 方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// all方法</span><br><span class="hljs-built_in">Promise</span>.all = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> arr = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) &#123;<br>      promises[i].then(<br>        <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>          arr[i] = v;<br>          <span class="hljs-keyword">if</span> (arr.length === promises.length) &#123;<br>            resolve(arr);<br>          &#125;<br>        &#125;,<br>        <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>          reject(r);<br>        &#125;<br>      );<br>    &#125;<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>手写Promise<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./promise.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="javascript">        resolve(<span class="hljs-string">&quot;p1: OK&quot;</span>);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> p2 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&quot;p2: OK&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> p3 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&quot;p3: OK&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> result1 = <span class="hljs-built_in">Promise</span>.all([p1, p2, p3]); <span class="hljs-comment">// 所有Promise的结果都成功</span></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result1);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> p4 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&quot;p4: OK&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> p5 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;p5: Err&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> p6 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;p6: Err&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> result2 = <span class="hljs-built_in">Promise</span>.all([p4, p5, p6]); <span class="hljs-comment">// 有Promise的结果失败</span></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result2);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/n7BaoepVFNtulUS.png" alt="image-20220227171844700"></p><h4 id="7-11-3-race-方法"><a href="#7-11-3-race-方法" class="headerlink" title="7.11.3 race 方法"></a>7.11.3 race 方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// race方法</span><br><span class="hljs-built_in">Promise</span>.race = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) &#123;<br>      promises[i].then(<br>        <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>          resolve(v);<br>        &#125;,<br>        <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>          reject(r);<br>        &#125;<br>      );<br>    &#125;<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="7-12-then-方法回调是异步执行"><a href="#7-12-then-方法回调是异步执行" class="headerlink" title="7.12 then 方法回调是异步执行"></a>7.12 then 方法回调是异步执行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1 3 2：then方法异步执行，得等同步方法执行完才执行</span><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-string">&quot;ok&quot;</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>&#125;);<br><br>p1.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p><strong>自定义 Promise 实现 then 方法回调异步执行</strong>：就是把原本调用成功、失败时的回调函数变为异步的就行了</p><p>如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&quot;fulfilled&quot;</span>) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    callback(onResolved);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/JWv3BpfiebkuGth.png" alt="image-20220227175150352"></p><h3 id="7-13-完整代码"><a href="#7-13-完整代码" class="headerlink" title="7.13. 完整代码"></a>7.13. 完整代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Promise</span>(<span class="hljs-params">executor</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&quot;pending&quot;</span>;<br>  <span class="hljs-built_in">this</span>.PromiseResult = <span class="hljs-literal">null</span>;<br>  <span class="hljs-built_in">this</span>.callbacks = [];<br><br>  <span class="hljs-comment">// resolve函数</span><br>  <span class="hljs-keyword">const</span> resolve = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState !== <span class="hljs-string">&quot;pending&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 1. 修改对象的状态(promiseState)</span><br>    <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&quot;fulfilled&quot;</span>;<br><br>    <span class="hljs-comment">// 2. 设置对象结果值(promiseResult)</span><br>    <span class="hljs-built_in">this</span>.PromiseResult = data;<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        item.onResolved(data);<br>      &#125;);<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-comment">// reject函数</span><br>  <span class="hljs-keyword">const</span> reject = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState !== <span class="hljs-string">&quot;pending&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 1. 修改对象的状态(promiseState)</span><br>    <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&quot;rejected&quot;</span>;<br><br>    <span class="hljs-comment">// 2. 设置对象结果值(promiseResult)</span><br>    <span class="hljs-built_in">this</span>.PromiseResult = data;<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        item.onRejected(data);<br>      &#125;);<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-comment">// 实现抛出异常改变promise状态</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 同步调用执行器函数executor</span><br>    executor(resolve, reject);<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    reject(e);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// then方法</span><br><span class="hljs-built_in">Promise</span>.prototype.then = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onRejected !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>    onRejected = <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">throw</span> reason;<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onResolved !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>    onResolved = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> value;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> self = <span class="hljs-built_in">this</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">type</span>) </span>&#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 获取回调函数的执行结果</span><br>        <span class="hljs-keyword">const</span> result = type(self.PromiseResult);<br><br>        <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>          <span class="hljs-comment">// 结果是Promise类型对象</span><br>          result.then(<br>            <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>              resolve(v);<br>            &#125;,<br>            <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>              reject(r);<br>            &#125;<br>          );<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          resolve(result);<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        reject(e);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&quot;fulfilled&quot;</span>) &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        callback(onResolved);<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&quot;rejected&quot;</span>) &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        callback(onRejected);<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks.push(&#123;<br>        <span class="hljs-attr">onResolved</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          callback(onResolved);<br>        &#125;,<br>        <span class="hljs-attr">onRejected</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          callback(onRejected);<br>        &#125;,<br>      &#125;);<br>    &#125;<br>  &#125;);<br>&#125;;<br><br><span class="hljs-comment">// catch方法</span><br><span class="hljs-built_in">Promise</span>.prototype.catch = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onRejected</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.then(<span class="hljs-literal">undefined</span>, onRejected);<br>&#125;;<br><br><span class="hljs-comment">// resolve方法</span><br><span class="hljs-built_in">Promise</span>.resolve = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>      value.then(<br>        <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>          resolve(v);<br>        &#125;,<br>        <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>          reject(r);<br>        &#125;<br>      );<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      resolve(value);<br>    &#125;<br>  &#125;);<br>&#125;;<br><br><span class="hljs-comment">// reject方法</span><br><span class="hljs-built_in">Promise</span>.reject = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">reason</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    reject(reason);<br>  &#125;);<br>&#125;;<br><br><span class="hljs-comment">// all方法</span><br><span class="hljs-built_in">Promise</span>.all = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> arr = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) &#123;<br>      promises[i].then(<br>        <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>          arr[i] = v;<br>          <span class="hljs-keyword">if</span> (arr.length === promises.length) &#123;<br>            resolve(arr);<br>          &#125;<br>        &#125;,<br>        <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>          reject(r);<br>        &#125;<br>      );<br>    &#125;<br>  &#125;);<br>&#125;;<br><br><span class="hljs-comment">// race方法</span><br><span class="hljs-built_in">Promise</span>.race = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) &#123;<br>      promises[i].then(<br>        <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>          resolve(v);<br>        &#125;,<br>        <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>          reject(r);<br>        &#125;<br>      );<br>    &#125;<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>封装成类版本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Promise</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&quot;pending&quot;</span>;<br>    <span class="hljs-built_in">this</span>.PromiseResult = <span class="hljs-literal">null</span>;<br>    <span class="hljs-built_in">this</span>.callbacks = [];<br><br>    <span class="hljs-comment">// resolve函数</span><br>    <span class="hljs-keyword">const</span> resolve = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState !== <span class="hljs-string">&quot;pending&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      <span class="hljs-comment">// 1. 修改对象的状态(promiseState)</span><br>      <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&quot;fulfilled&quot;</span>;<br><br>      <span class="hljs-comment">// 2. 设置对象结果值(promiseResult)</span><br>      <span class="hljs-built_in">this</span>.PromiseResult = data;<br><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.callbacks.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>          item.onResolved(data);<br>        &#125;);<br>      &#125;);<br>    &#125;;<br><br>    <span class="hljs-comment">// reject函数</span><br>    <span class="hljs-keyword">const</span> reject = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState !== <span class="hljs-string">&quot;pending&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      <span class="hljs-comment">// 1. 修改对象的状态(promiseState)</span><br>      <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&quot;rejected&quot;</span>;<br><br>      <span class="hljs-comment">// 2. 设置对象结果值(promiseResult)</span><br>      <span class="hljs-built_in">this</span>.PromiseResult = data;<br><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.callbacks.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>          item.onRejected(data);<br>        &#125;);<br>      &#125;);<br>    &#125;;<br><br>    <span class="hljs-comment">// 实现抛出异常改变promise状态</span><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 同步调用执行器函数executor</span><br>      executor(resolve, reject);<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      reject(e);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">then</span>(<span class="hljs-params">onResolved, onRejected</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onRejected !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      onRejected = <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">throw</span> reason;<br>      &#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onResolved !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      onResolved = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> self = <span class="hljs-built_in">this</span>;<br><br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">type</span>) </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">// 获取回调函数的执行结果</span><br>          <span class="hljs-keyword">const</span> result = type(self.PromiseResult);<br><br>          <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>            <span class="hljs-comment">// 结果是Promise类型对象</span><br>            result.then(<br>              <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>                resolve(v);<br>              &#125;,<br>              <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>                reject(r);<br>              &#125;<br>            );<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            resolve(result);<br>          &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>          reject(e);<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&quot;fulfilled&quot;</span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          callback(onResolved);<br>        &#125;);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&quot;rejected&quot;</span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          callback(onRejected);<br>        &#125;);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">this</span>.callbacks.push(&#123;<br>          <span class="hljs-attr">onResolved</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            callback(onResolved);<br>          &#125;,<br>          <span class="hljs-attr">onRejected</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            callback(onRejected);<br>          &#125;,<br>        &#125;);<br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">catch</span>(onRejected) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.then(<span class="hljs-literal">undefined</span>, onRejected);<br>  &#125;<br><br>  <span class="hljs-comment">// resolve方法(静态方法，属于类而不是属于实例对象)</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">resolve</span>(<span class="hljs-params">value</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>        value.then(<br>          <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>            resolve(v);<br>          &#125;,<br>          <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>            reject(r);<br>          &#125;<br>        );<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        resolve(value);<br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">// reject方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">reject</span>(<span class="hljs-params">reason</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      reject(reason);<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">// all方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">all</span>(<span class="hljs-params">promises</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> arr = [];<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) &#123;<br>        promises[i].then(<br>          <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>            arr[i] = v;<br>            <span class="hljs-keyword">if</span> (arr.length === promises.length) &#123;<br>              resolve(arr);<br>            &#125;<br>          &#125;,<br>          <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>            reject(r);<br>          &#125;<br>        );<br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">// race方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">race</span>(<span class="hljs-params">promises</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) &#123;<br>        promises[i].then(<br>          <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>            resolve(v);<br>          &#125;,<br>          <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>            reject(r);<br>          &#125;<br>        );<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-async-和-await"><a href="#8-async-和-await" class="headerlink" title="8. async 和 await"></a>8. async 和 await</h2><h3 id="8-1-async-函数"><a href="#8-1-async-函数" class="headerlink" title="8.1 async 函数"></a>8.1 async 函数</h3><ul><li>函数的返回值是 Promise 对象</li><li>Promise 对象的结果由 async 函数执行的返回值决定</li></ul><p>和 then 方法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 返回值为一个非Promise类型的数据</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">123</span>;<br>&#125;<br><span class="hljs-keyword">let</span> result1 = test1();<br><span class="hljs-built_in">console</span>.log(result1);<br><br><span class="hljs-comment">// 2. 返回值为一个Promise对象，结果为成功</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&quot;ok&quot;</span>);<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">let</span> result2 = test2();<br><span class="hljs-built_in">console</span>.log(result2);<br><br><span class="hljs-comment">// 3. 返回值为一个Promise对象，结果为失败</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test3</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    reject(<span class="hljs-string">&quot;error&quot;</span>);<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">let</span> result3 = test3();<br><span class="hljs-built_in">console</span>.log(result3);<br><br><span class="hljs-comment">// 4. 抛出异常</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test4</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;抛出异常&quot;</span>;<br>&#125;<br><span class="hljs-keyword">let</span> result4 = test4();<br><span class="hljs-built_in">console</span>.log(result4);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/TqvdYSm5NwipCaf.png" alt="image-20220227192621644"></p><h3 id="8-2-await-表达式"><a href="#8-2-await-表达式" class="headerlink" title="8.2 await 表达式"></a>8.2 await 表达式</h3><ul><li>await 右侧的表达式一般是 Promise 对象，但也可以是其他值</li><li>如果右侧的表达式是 promise 对象，await 返回的是 promise 成功的值</li><li>如果右侧的表达式是其他值，await 返回的就是该值</li></ul><p>注意：</p><ul><li><b style="color: red">await 必须写在 async 函数中，但 async 函数中不一定要 await</b></li><li>如果 await 的 promise 失败，则会抛出异常，所以需要通过<code> try...catch</code>捕捉处理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> test = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-comment">// 1. await右侧为其他类型的情况</span><br>  <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-number">123</span>;<br>  <span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// 123</span><br><br>  <span class="hljs-comment">// 2. await右侧为Promise的情况</span><br>  <span class="hljs-comment">// 2.1 成功</span><br>  result = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&quot;ok&quot;</span>);<br>  &#125;);<br>  <span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// ok</span><br><br>  <span class="hljs-comment">// 2.2 失败</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    result = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      reject(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;);<br>    <span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// ok</span><br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-built_in">console</span>.log(e);<br>  &#125;<br>&#125;;<br><br>test();<br></code></pre></td></tr></table></figure><h3 id="8-3-async-和-await-使用"><a href="#8-3-async-和-await-使用" class="headerlink" title="8.3 async 和 await 使用"></a>8.3 async 和 await 使用</h3><h4 id="8-3-1-读取文件"><a href="#8-3-1-读取文件" class="headerlink" title="8.3.1 读取文件"></a>8.3.1 读取文件</h4><p>情景：读取 resource 文件夹下的数据(1.txt，2.txt，3.txt)，分别是 111、222、333。并把数据拼接后在控制台打印出来。</p><p><strong>回调函数版本</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br>fs.readFile(<span class="hljs-string">&quot;./resource/1.txt&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, data1</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-keyword">throw</span> err;<br>  &#125;<br>  fs.readFile(<span class="hljs-string">&quot;./resource/2.txt&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, data2</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">throw</span> err;<br>    &#125;<br>    fs.readFile(<span class="hljs-string">&quot;./resource/3.txt&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, data3</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(data1 + data2 + data3);<br>    &#125;);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/2t65LCcdgmM7lwE.png" alt="image-20220227194850320"></p><p><strong>async+await 版本</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; promisify &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;util&quot;</span>);<br><br><span class="hljs-keyword">const</span> readFile = promisify(fs.readFile);<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myReadFile</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">let</span> data1 = <span class="hljs-keyword">await</span> readFile(<span class="hljs-string">&quot;./resource/1.txt&quot;</span>);<br>    <span class="hljs-keyword">let</span> data2 = <span class="hljs-keyword">await</span> readFile(<span class="hljs-string">&quot;./resource/2.txt&quot;</span>);<br>    <span class="hljs-keyword">let</span> data3 = <span class="hljs-keyword">await</span> readFile(<span class="hljs-string">&quot;./resource/3.txt&quot;</span>);<br><br>    <span class="hljs-built_in">console</span>.log(data1 + data2 + data3);<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-built_in">console</span>.log(e);<br>  &#125;<br>&#125;<br><br>myReadFile();<br></code></pre></td></tr></table></figure><h4 id="8-3-2-axios-使用"><a href="#8-3-2-axios-使用" class="headerlink" title="8.3.2 axios 使用"></a>8.3.2 axios 使用</h4><p>安装：<code> npm install axios</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;axios&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">&quot;https://qcgx2i.api.cloudendpoint.cn/hello&quot;</span>);<br>  <span class="hljs-built_in">console</span>.log(data);<br>&#125;)();<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/5Q6GFRT9nSvuPoI.png" alt="image-20220227195827006"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise学习笔记(一)</title>
      <link href="/2022/03/05/promise-1/"/>
      <url>/2022/03/05/promise-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise-学习笔记-一"><a href="#Promise-学习笔记-一" class="headerlink" title="Promise 学习笔记(一)"></a>Promise 学习笔记(一)</h1><p>一直有在用 Promise，但是没有系统学过 Promise，自然也不知道原理。现在就来学习一波。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>Promise 是 JS 中进行异步编程的新解决方案。在这之前使用过回调函数进行异步编程。</p><p>Promise 是一个构造函数，Promise 对象用来封装一个异步操作并可以获取其成功或失败的结果值</p><h3 id="Promise-优点"><a href="#Promise-优点" class="headerlink" title="Promise 优点"></a>Promise 优点</h3><ol><li><p>支持链式调用，可解决回调地狱问题</p><p><strong>回调地狱</strong>：回调函数嵌套使用</p></li></ol><p><img src="https://s2.loli.net/2022/03/05/NL5nd3WekJmDZSU.png" alt="image-20220225162417514"></p><pre><code>**回调地狱导致的问题**：</code></pre><ul><li><p>阅读困难（后期维护麻烦）</p></li><li><p>不便于异常处理</p></li></ul><ol start="2"><li>指定回调函数的方式更灵活<ul><li>Promise：启动异步任务 =&gt; 返回 Promise 对象 =&gt; Promise 对象绑定回调函数</li><li>纯用回调函数：必须在启动异步任务前指定</li></ul></li></ol><h2 id="2-Promise-体验"><a href="#2-Promise-体验" class="headerlink" title="2. Promise 体验"></a>2. Promise 体验</h2><h3 id="2-1-抽奖"><a href="#2-1-抽奖" class="headerlink" title="2.1 抽奖"></a>2.1 抽奖</h3><p>先来一个抽奖示例(隔 1s 后出结果)</p><h4 id="2-1-1-回调函数版本"><a href="#2-1-1-回调函数版本" class="headerlink" title="2.1.1 回调函数版本"></a>2.1.1 回调函数版本</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Promise初体验<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>抽奖<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rand</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">100</span> + <span class="hljs-number">1</span>); <span class="hljs-comment">// 返回1到100之前的随机数</span></span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#btn&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      btn.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">let</span> n = rand();</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">50</span>) &#123;</span><br><span class="javascript">            alert(<span class="hljs-string">&quot;恭喜你中奖了&quot;</span>);</span><br><span class="javascript">          &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">            alert(<span class="hljs-string">&quot;很遗憾，你没有中奖&quot;</span>);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;, <span class="hljs-number">1000</span>);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/CWhbzNoZcHAutRi.gif" alt="promise"></p><h4 id="2-1-2-Promise-版本"><a href="#2-1-2-Promise-版本" class="headerlink" title="2.1.2 Promise 版本"></a>2.1.2 Promise 版本</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Promise初体验<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>抽奖<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rand</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">100</span> + <span class="hljs-number">1</span>); <span class="hljs-comment">// 返回1到100之前的随机数</span></span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#btn&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      btn.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">// resolve 成功后执行的函数</span></span><br><span class="javascript">          <span class="hljs-comment">// reject 失败后执行的函数</span></span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-keyword">let</span> n = rand();</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">50</span>) &#123;</span><br><span class="javascript">              resolve(n); <span class="hljs-comment">// 可以将Promise的状态设置为成功</span></span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">              reject(n); <span class="hljs-comment">// 可以将Promise的状态设置为失败</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">          &#125;, <span class="hljs-number">1000</span>);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        p.then(</span><br><span class="javascript">          <span class="hljs-comment">// 通过then方法指定成功或失败时的回调函数，第一个参数是成功时的回调，第二个参数是失败时的回调</span></span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;</span><br><span class="javascript">            alert(<span class="hljs-string">`恭喜你，中奖了，中奖号码是<span class="hljs-subst">$&#123;value&#125;</span>`</span>);</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;</span><br><span class="javascript">            alert(<span class="hljs-string">`真遗憾，你没有中奖，中奖号码是<span class="hljs-subst">$&#123;value&#125;</span>`</span>);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        );</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-文件读取"><a href="#2-2-文件读取" class="headerlink" title="2.2 文件读取"></a>2.2 文件读取</h3><h4 id="2-2-1-回调函数版本"><a href="#2-2-1-回调函数版本" class="headerlink" title="2.2.1 回调函数版本"></a>2.2.1 回调函数版本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br>fs.readFile(<span class="hljs-string">&quot;./resource/content.txt&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-keyword">throw</span> err;<br>  &#125;<br><br>  <span class="hljs-built_in">console</span>.log(data.toString());<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="2-2-2-Promise-版本"><a href="#2-2-2-Promise-版本" class="headerlink" title="2.2.2 Promise 版本"></a>2.2.2 Promise 版本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  fs.readFile(<span class="hljs-string">&quot;./resource/content1.txt&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      reject(err);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      resolve(data);<br>    &#125;<br>  &#125;);<br>&#125;);<br><br>p.then(<br>  <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value.toString());<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(reason);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/nabwDJqGQHfRF3l.png" alt="image-20220225172452214"></p><h3 id="2-3-AJAX"><a href="#2-3-AJAX" class="headerlink" title="2.3 AJAX"></a>2.3 AJAX</h3><h4 id="2-3-1-原生版本-回调函数"><a href="#2-3-1-原生版本-回调函数" class="headerlink" title="2.3.1 原生版本(回调函数)"></a>2.3.1 原生版本(回调函数)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Promise封装AJAX<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// 1. 创建对象</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 2. 初始化</span></span><br><span class="javascript">        xhr.open(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;https://qcgx2i.api.cloudendpoint.cn/hello&quot;</span>); <span class="hljs-comment">// 接口可能会无效，换一个有效的就行</span></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 3. 发送</span></span><br><span class="javascript">        xhr.send();</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 4. 处理响应结果</span></span><br><span class="javascript">        xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) &#123;</span><br><span class="javascript">              <span class="hljs-built_in">console</span>.log(xhr.response);</span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">              <span class="hljs-built_in">console</span>.log(xhr.status);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;;</span><br><span class="javascript">      &#125;)();</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/MAZxnHgewTQrY9o.png" alt="image-20220225174738518"></p><h4 id="2-3-2-Promise-版本"><a href="#2-3-2-Promise-版本" class="headerlink" title="2.3.2 Promise 版本"></a>2.3.2 Promise 版本</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Promise封装AJAX<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="javascript"></span><br><span class="javascript">          xhr.open(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;https://qcgx2i.api.cloudendpoint.cn/hello&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">          xhr.send();</span><br><span class="javascript"></span><br><span class="javascript">          xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;</span><br><span class="javascript">              <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) &#123;</span><br><span class="javascript">                resolve(xhr.response); <span class="hljs-comment">// 成功</span></span><br><span class="javascript">              &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                reject(xhr.status);</span><br><span class="javascript">              &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">          &#125;;</span><br><span class="javascript">        &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        p.then(</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">statusCode</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.warn(statusCode);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        );</span><br><span class="javascript">      &#125;)();</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-转化为-Promise-风格-promisify"><a href="#3-转化为-Promise-风格-promisify" class="headerlink" title="3. 转化为 Promise 风格(promisify)"></a>3. 转化为 Promise 风格(promisify)</h2><p>**util.promisify()**：传入一个遵循常见的错误优先的回调风格的函数(即以<code> (err, value) =&gt; &#123;...&#125;</code>作为最后一个参数)，并返回 Promise 版本。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; promisify &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;util&quot;</span>);<br><br><span class="hljs-keyword">let</span> pReadfile = promisify(fs.readFile); <span class="hljs-comment">// 把callback形式的异步api转化成promise形式的</span><br><br>pReadfile(<span class="hljs-string">&quot;./resource/content.txt&quot;</span>).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(value.toString());<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="4-Promise-属性"><a href="#4-Promise-属性" class="headerlink" title="4. Promise 属性"></a>4. Promise 属性</h2><h3 id="4-1-Promise-状态"><a href="#4-1-Promise-状态" class="headerlink" title="4.1 Promise 状态"></a>4.1 Promise 状态</h3><p>实例对象中的一个属性<code> [[PromiseState]]</code>，有三个值</p><ul><li>pending：未决定</li><li>resolved(fulfilled)：成功</li><li>rejected：失败</li></ul><p><strong>Promise 的状态改变只有两种可能，且只能改变一次</strong>：</p><ul><li>pending 变为 resolved</li><li>pending 变为 rejected</li></ul><p>成功的结果数据一般称为<code> value</code>，失败的结果一般称为<code> reason</code></p><h3 id="4-2-Promise-对象的值"><a href="#4-2-Promise-对象的值" class="headerlink" title="4.2. Promise 对象的值"></a>4.2. Promise 对象的值</h3><p>实例对象中的一个属性<code> [[PromiseResult]]</code>，保存着异步任务成功或失败的结果</p><p>只能通过<code>resolve()</code>或<code>reject()</code>对<code> PromiseResult</code>进行修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  fs.readFile(<span class="hljs-string">&quot;./resource/content1.txt&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      reject(err); <span class="hljs-comment">// 通过reject()设置PromiseResult的值</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      resolve(data);<br>    &#125;<br>  &#125;);<br>&#125;);<br><br>p.then(<br>  <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 把PromiseResult的值取出来，进行相关操作</span><br>    <span class="hljs-built_in">console</span>.log(value.toString());<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(reason);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h2 id="5-Promise-工作流程"><a href="#5-Promise-工作流程" class="headerlink" title="5. Promise 工作流程"></a>5. Promise 工作流程</h2><p><img src="https://s2.loli.net/2022/03/05/97yj6Mev2ZS1gBw.png" alt="image-20220226145957472"></p><h2 id="6-Promise-API"><a href="#6-Promise-API" class="headerlink" title="6. Promise API"></a>6. Promise API</h2><h3 id="6-1-构造函数-Promise-excutor"><a href="#6-1-构造函数-Promise-excutor" class="headerlink" title="6.1 构造函数 Promise(excutor)"></a>6.1 构造函数 Promise(excutor)</h3><p><strong>excutor 函数</strong>：执行器, <code> (resolve, reject) =&gt; &#123;&#125;</code></p><p><strong>resolve 函数</strong>：内部定义成功后调用的函数</p><p><strong>reject 函数</strong>：内部定义失败后调用的函数</p><p><strong>构造函数会在 Promise 立即同步调用，异步操作在执行器中执行</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// 先输出1，再输出2</span><br></code></pre></td></tr></table></figure><h3 id="6-2-Promise-prototype-then-方法"><a href="#6-2-Promise-prototype-then-方法" class="headerlink" title="6.2 Promise.prototype.then 方法"></a>6.2 Promise.prototype.then 方法</h3><p>语法：<code> promise.then(onResolved, onRejected)</code></p><p><strong>onResolved 函数</strong>：成功的回调函数, <code> value =&gt; &#123;&#125;</code></p><p><strong>onRejected 函数</strong>：失败的回调函数, <code> reason =&gt; &#123;&#125;</code></p><p><strong>返回新的 Promise 对象</strong></p><h3 id="6-3-Promise-prototype-catch-方法"><a href="#6-3-Promise-prototype-catch-方法" class="headerlink" title="6.3 Promise.prototype.catch 方法"></a>6.3 Promise.prototype.catch 方法</h3><p>**与上面的 then()类似，不过只能指定失败的回调函数</p><h3 id="6-4-Promise-resolve-方法"><a href="#6-4-Promise-resolve-方法" class="headerlink" title="6.4 Promise.resolve 方法"></a>6.4 Promise.resolve 方法</h3><p>作用：接受一个参数，返回一个成功或失败的 Promise 对象。能够快速封装一个值，将这个值转化为 Promise 对象</p><ul><li><p>如果传入的参数是<strong>非 Promise 类型的对象</strong>，如字符串、数字等，则放回的结果是成功的 Promise 对象</p></li><li><p>如果传入的参数是<strong>Promise 对象</strong>，则参数的结果决定 resolve 的结果，即参数是成功的 Promise 对象的话，resolve 的结果是成功的，反之是失败的</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">123</span>); <span class="hljs-comment">// Promise &#123; 123 &#125;</span><br><br><span class="hljs-built_in">console</span>.log(p1);<br><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-built_in">Promise</span>.resolve(p1); <span class="hljs-comment">// 参数为成功的Promise对象</span><br><br><span class="hljs-built_in">console</span>.log(p2);<br><br><span class="hljs-keyword">const</span> p3 = <span class="hljs-built_in">Promise</span>.resolve(<br>  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 参数为失败的Promise对象</span><br>    reject(<span class="hljs-string">&quot;Error&quot;</span>);<br>  &#125;)<br>);<br><br>p3.catch(<span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(reason);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="6-5-Promise-reject-方法"><a href="#6-5-Promise-reject-方法" class="headerlink" title="6.5 Promise.reject 方法"></a>6.5 Promise.reject 方法</h3><p>接受一个参数，返回一个失败的 Promise 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-number">123</span>);<br><span class="hljs-built_in">console</span>.log(p1);<br><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-built_in">Promise</span>.reject(<br>  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&quot;传参为成功的Promise对象&quot;</span>);<br>  &#125;)<br>);<br><br><span class="hljs-built_in">console</span>.log(p2);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/2ECksUOuDadvfeg.png" alt="image-20220226153204273"></p><h3 id="6-5-Promise-all-方法"><a href="#6-5-Promise-all-方法" class="headerlink" title="6.5 Promise.all 方法"></a>6.5 Promise.all 方法</h3><p>参数：promises，promise 的数组</p><p>返回一个新的 Promise，当所有的 promise 都成功才成功，且结果为成功的结果组成的数组；有一个失败就<strong>直接</strong>失败，返回的结果就是失败的那一个的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-string">&quot;p1: OK&quot;</span>);<br>&#125;);<br><span class="hljs-keyword">const</span> p2 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&quot;p2: OK&quot;</span>);<br><span class="hljs-keyword">const</span> result1 = <span class="hljs-built_in">Promise</span>.all([p1, p2]); <span class="hljs-comment">// 所有Promise的结果都成功</span><br><span class="hljs-built_in">console</span>.log(result1);<br><br><span class="hljs-keyword">const</span> p3 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&quot;p3: OK&quot;</span>);<br><span class="hljs-keyword">const</span> p4 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;p4: Err&quot;</span>);<br><span class="hljs-keyword">const</span> p5 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;p5: Err&quot;</span>);<br><span class="hljs-keyword">const</span> result2 = <span class="hljs-built_in">Promise</span>.all([p3, p4, p5]); <span class="hljs-comment">// 有Promise的结果失败</span><br><span class="hljs-built_in">console</span>.log(result2);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/HxUQCL3VSXhbo2Y.png" alt="image-20220226170629148"></p><p>如果想要捕捉异常，直接链式调用即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p3 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&quot;p3: OK&quot;</span>);<br><span class="hljs-keyword">const</span> p4 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;p4: Err&quot;</span>);<br><span class="hljs-keyword">const</span> p5 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;p5: Err&quot;</span>);<br><span class="hljs-keyword">const</span> result2 = <span class="hljs-built_in">Promise</span>.all([p3, p4, p5]);<br><span class="hljs-built_in">console</span>.log(result2);<br><br>result2.catch(<span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(reason);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/ipGftrdm5kWMVlZ.png" alt="image-20220226170913348"></p><p>Promise.all()传入一个空数组，立即返回成功。</p><br><h3 id="6-6-Promise-race-方法"><a href="#6-6-Promise-race-方法" class="headerlink" title="6.6 Promise.race 方法"></a>6.6 Promise.race 方法</h3><p>参数：promises，promise 的数组</p><p>返回一个新的 Promise，第一个完成的结果是成功则成功，反之则失败</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&quot;p1: OK&quot;</span>);<br>  &#125;);<br>&#125;);<br><span class="hljs-keyword">const</span> p2 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;p2: Err&quot;</span>);<br><span class="hljs-keyword">const</span> result1 = <span class="hljs-built_in">Promise</span>.race([p1, p2]);<br><span class="hljs-built_in">console</span>.log(result1); <span class="hljs-comment">// [[PromiseResult]]: &quot;p2: Err&quot;</span><br><br>result1.catch(<span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(reason);<br>&#125;);<br></code></pre></td></tr></table></figure><p>Promise.race()传入空数组不做任何操作</p><br><p>本次学习是视频学习：<a href="https://www.bilibili.com/video/BV1GA411x7z1">尚硅谷 Web 前端 Promise 教程从入门到精通</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express(二) ——中间件</title>
      <link href="/2022/03/01/express-2/"/>
      <url>/2022/03/01/express-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-二-——中间件"><a href="#Express-二-——中间件" class="headerlink" title="Express(二) ——中间件"></a>Express(二) ——中间件</h1><p>在 Express 中，中间件是一个可以访问请求对象、响应对象和调用 next 方法的一个函数。</p><h2 id="1-简单例子-打印请求日志"><a href="#1-简单例子-打印请求日志" class="headerlink" title="1. 简单例子(打印请求日志)"></a>1. 简单例子(打印请求日志)</h2><p>一个 Express 应用，就是由许许多多的中间件来完成的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.use(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`请求日志：<span class="hljs-subst">$&#123;req.method&#125;</span> <span class="hljs-subst">$&#123;req.url&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()&#125;</span>`</span>);<br>  next(); <span class="hljs-comment">// 放行</span><br>&#125;);<br><br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;get / &quot;</span>);<br>&#125;);<br><br>app.post(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;post / &quot;</span>);<br>&#125;);<br><br>app.delete(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;delete /&quot;</span>);<br>&#125;);<br><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span>;<br><br>app.listen(port, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`http://localhost:<span class="hljs-subst">$&#123;port&#125;</span>/`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>可以发现：任何请求进来都会先打印请求日志，然后才会执行具体的业务处理函数</p><p><img src="https://s2.loli.net/2022/03/01/cmV8f4dyuF3RCn5.png" alt="image-20220209221247946"></p><h2 id="2-中间件的组成"><a href="#2-中间件的组成" class="headerlink" title="2. 中间件的组成"></a>2. 中间件的组成</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 其中use可以是get、post等，用于限定请求路径</span><br>  next(); <span class="hljs-comment">// 这个例子就是所有请求路径为根路径的请求都会通过这个中间件</span><br>  <span class="hljs-comment">// 如果当前中间件没有结束请求相应周期，则需要通过next()调用下一个中间件，否则，该请求将会被挂起</span><br>&#125;);<br></code></pre></td></tr></table></figure><p><b style="color:red">如果当前中间件没有结束请求相应周期，则需要通过 next()调用下一个中间件，否则，该请求将会被挂起</b></p><h2 id="3-中间件功能"><a href="#3-中间件功能" class="headerlink" title="3. 中间件功能"></a>3. 中间件功能</h2><ul><li>执行任何代码</li><li>修改 request 或 response 对象</li><li>结束请求响应周期</li><li>调用下一个中间件</li></ul><h2 id="4-中间件分类"><a href="#4-中间件分类" class="headerlink" title="4. 中间件分类"></a>4. 中间件分类</h2><h3 id="4-1-应用程序级别中间件"><a href="#4-1-应用程序级别中间件" class="headerlink" title="4.1 应用程序级别中间件"></a>4.1 应用程序级别中间件</h3><h4 id="4-1-1-不做任何限定的中间件"><a href="#4-1-1-不做任何限定的中间件" class="headerlink" title="4.1.1 不做任何限定的中间件"></a>4.1.1 不做任何限定的中间件</h4><p>即所有请求都会通过该中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&quot;不做任何限定的中间件&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="4-1-2-限定请求路径"><a href="#4-1-2-限定请求路径" class="headerlink" title="4.1.2 限定请求路径"></a>4.1.2 限定请求路径</h4><p>即只有请求路径匹配才会通过该中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-string">&quot;/user/:id&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&quot;限定请求路径的中间件&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="4-1-3-限定请求方法-请求路径"><a href="#4-1-3-限定请求方法-请求路径" class="headerlink" title="4.1.3 限定请求方法 + 请求路径"></a>4.1.3 限定请求方法 + 请求路径</h4><p>不能只限定请求方法，因为 app.get()第一个参数必须</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;限定请求方法 + 请求路径的中间件&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="4-1-4-多个处理函数"><a href="#4-1-4-多个处理函数" class="headerlink" title="4.1.4 多个处理函数"></a>4.1.4 多个处理函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第一次处理&quot;</span>);<br>    next(); <span class="hljs-comment">// 这个next()之后就是第二个处理函数</span><br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第二次处理&quot;</span>);<br>    next(); <span class="hljs-comment">// 这个next()之后则是脱离当前处理栈，往后寻找匹配调用</span><br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>也可以通过回调函数数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> first = <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第一次处理&quot;</span>);<br>  next();<br>&#125;;<br><br><span class="hljs-keyword">const</span> second = <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第二次处理&quot;</span>);<br>  next();<br>&#125;;<br><br>app.use([first, second]);<br></code></pre></td></tr></table></figure><h4 id="4-1-5-多个路由处理函数"><a href="#4-1-5-多个路由处理函数" class="headerlink" title="4.1.5 多个路由处理函数"></a>4.1.5 多个路由处理函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第一个路由处理函数&quot;</span>);<br>  next(); <span class="hljs-comment">// 如果这里是res.end()，那么就会结束响应。第二个路由处理函数就没有机会执行</span><br>&#125;);<br>app.use(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第二个路由处理函数&quot;</span>);<br>  res.end();<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="4-1-6-显示一个中间件子堆栈"><a href="#4-1-6-显示一个中间件子堆栈" class="headerlink" title="4.1.6 显示一个中间件子堆栈"></a>4.1.6 显示一个中间件子堆栈</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<br>  <span class="hljs-string">&quot;/:id&quot;</span>,<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (req.params.id === <span class="hljs-string">&quot;0&quot;</span>) &#123;<br>      next(<span class="hljs-string">&quot;route&quot;</span>); <span class="hljs-comment">// 跳过当前堆栈之后的所有中间件。即不执行后面的处理函数，而是直接去执行后面的路由处理函数</span><br>      <span class="hljs-comment">// (处理函数和路由处理函数看上面的例子)</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      next();<br>    &#125;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>    res.send(<span class="hljs-string">&quot;regular&quot;</span>);<br>  &#125;<br>);<br><br>app.get(<span class="hljs-string">&quot;/:id&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&quot;special&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>上面例子中，动态参数 id 不为 0 时，第一个处理函数会调用 next()，然后会执行第二个处理函数，然后会收到 regular 的响应。而当 id 为 0 时，会调用 next(‘route’)，会跳过当前堆栈之后的所有中间件。即不执行后面的处理函数，而是直接去执行后面的路由处理函数。所以不会打印 regular，而是打印 special。</p><h3 id="4-2-路由级别中间件"><a href="#4-2-路由级别中间件" class="headerlink" title="4.2 路由级别中间件"></a>4.2 路由级别中间件</h3><p>router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-comment">// 1.创建路由实例</span><br><span class="hljs-keyword">const</span> router = express.Router();<br><br><span class="hljs-comment">// 2. 配置路由</span><br>router.get(<span class="hljs-string">&quot;/aaa&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;get /aaa&quot;</span>);<br>&#125;);<br><br>router.post(<span class="hljs-string">&quot;/bbb&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;post /bbb&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 3. 导出路由实例</span><br><span class="hljs-built_in">module</span>.exports = router;<br><br><span class="hljs-comment">// 4. 将路由挂载(集成)到Express实例应用中(见app.js)</span><br></code></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router.js&quot;</span>);<br><br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 4. 将路由挂载(集成)到Express实例应用中</span><br>app.use(<span class="hljs-string">&quot;/abc&quot;</span>, router); <span class="hljs-comment">// 给路由限定访问前缀/abc</span><br><br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:3000/&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/2lUS43vHrokDjqp.gif" alt="路由级别中间件"></p><p><strong>链式路由处理程序</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">app<br>  .route(<span class="hljs-string">&quot;/abc&quot;</span>)<br>  .get(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(<span class="hljs-string">&quot;get&quot;</span>);<br>  &#125;)<br>  .post(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(<span class="hljs-string">&quot;post&quot;</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure><h3 id="4-3-错误处理中间件"><a href="#4-3-错误处理中间件" class="headerlink" title="4.3 错误处理中间件"></a>4.3 错误处理中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 四个参数都要有才是错误处理中间件。如果只有err、req、res，则err实际上是req对象</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;错误: &quot;</span>, err);<br>  res.status(<span class="hljs-number">500</span>).json(&#123;<br>    <span class="hljs-attr">error</span>: err.message,<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p><b style="color: red">四个参数都要有才是错误处理中间件。如果只有 err、req、res，则 err 实际上是 req 对象</b></p><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router.js&quot;</span>);<br><br>app.use(router);<br><br>app.use(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 四个参数都要有才是错误处理中间件。如果只有err、req、res，则err实际上是req对象</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;错误: &quot;</span>, err);<br>  res.status(<span class="hljs-number">500</span>).json(&#123;<br>    <span class="hljs-attr">error</span>: err.message,<br>  &#125;);<br>&#125;);<br><br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:3000/&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-comment">// 1.创建路由实例</span><br><span class="hljs-keyword">const</span> router = express.Router();<br><br><span class="hljs-comment">// 2. 配置路由</span><br>router.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> d = b + <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err); <span class="hljs-comment">// 跳过所有剩余的无错误处理路由和中间件函数</span><br>  &#125;<br>&#125;);<br><br>router.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第二个路由处理函数&quot;</span>);<br>  res.end();<br>&#125;);<br><br><span class="hljs-comment">// 3. 导出路由实例</span><br><span class="hljs-built_in">module</span>.exports = router;<br><br><span class="hljs-comment">// 4. 将路由挂载(集成)到Express实例应用中</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/Nanp5BT98fPM4Fr.png" alt="image-20220210103104627"></p><h3 id="4-4-内置中间件"><a href="#4-4-内置中间件" class="headerlink" title="4.4 内置中间件"></a>4.4 内置中间件</h3><ul><li>**express.json()**：解析 Content-Type 为<code> application/json</code>格式的请求体</li><li>**express.urlencoded()**：解析 Content-Type 为<code> application/x-www-form-urlencoded</code>格式的请求体</li><li>**express.raw()**：解析 Content-Type 为<code> application/octet-stream</code>格式的请求体</li><li>**express.text()**：解析 Content-Type 为<code> text/plain</code>格式的请求体</li><li>**express.static()**：托管静态资源文件</li></ul><h3 id="4-5-第三方中间件"><a href="#4-5-第三方中间件" class="headerlink" title="4.5 第三方中间件"></a>4.5 第三方中间件</h3><p><a href="https://www.expressjs.com.cn/resources/middleware.html">Express middleware</a></p><p>使用示例：morgan 日志中间件</p><ol><li><p><code> npm install morgan</code></p></li><li><pre><code class="js">const express = require(&quot;express&quot;);const morgan = require(&quot;morgan&quot;); // 1. 引入const app = express();app.use(morgan(&quot;tiny&quot;)); // 2. 挂载app.get(&quot;/&quot;, (req, res) =&gt; &#123;  res.send(&quot;Hello World!&quot;);&#125;);app.listen(3000, () =&gt; &#123;  console.log(&quot;http://localhost:3000/&quot;);&#125;);</code></pre></li><li><p>每次请求都会打印出请求日志</p><p><img src="https://s2.loli.net/2022/03/01/Ol7QrKS9HZB8Yin.png" alt="image-20220210105212413"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3快速入门(二)</title>
      <link href="/2022/03/01/vue3-2/"/>
      <url>/2022/03/01/vue3-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3-快速入门-二"><a href="#Vue3-快速入门-二" class="headerlink" title="Vue3 快速入门(二)"></a>Vue3 快速入门(二)</h1><p><a href="https://clz.vercel.app/2022/02/21/vue3-1/">Vue3 快速入门(一)</a></p><h2 id="1-父子组件间的数据共享"><a href="#1-父子组件间的数据共享" class="headerlink" title="1. 父子组件间的数据共享"></a>1. 父子组件间的数据共享</h2><h3 id="1-1-props-父传子"><a href="#1-1-props-父传子" class="headerlink" title="1.1 props 父传子"></a>1.1 props 父传子</h3><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;props.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 可省略prop. --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> props = defineProps(&#123;</span><br><span class="javascript">    <span class="hljs-comment">// defineProps在&lt;script setup&gt;中可直接使用，无需引入</span></span><br><span class="javascript">    <span class="hljs-attr">name</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,</span><br><span class="javascript">      <span class="hljs-attr">default</span>: <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// 也可以用下面数组的形式</span></span><br><span class="javascript">  <span class="hljs-comment">// const props = defineProps([&#x27;name&#x27;])</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clz&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> Son <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Son.vue&quot;</span>; <span class="hljs-comment">// 组件自动注册</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/lwhcFbBG27vEZQA.png" alt="image-20220301103045960"></p><h3 id="1-2-emit-子传父"><a href="#1-2-emit-子传父" class="headerlink" title="1.2 emit 子传父"></a>1.2 emit 子传父</h3><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>子组件数据：&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;send&quot;</span>&gt;</span>发送数据给父组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> msg = <span class="hljs-string">&quot;我是子组件的数据&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> emit = defineEmits([<span class="hljs-string">&quot;getMessage&quot;</span>]);</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> send = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    emit(<span class="hljs-string">&quot;getMessage&quot;</span>, msg);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>子组件数据：&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;send&quot;</span>&gt;</span>发送数据给父组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> msg = <span class="hljs-string">&quot;我是子组件的数据&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> emit = defineEmits([<span class="hljs-string">&quot;getMessage&quot;</span>]);</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> send = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    emit(<span class="hljs-string">&quot;getMessage&quot;</span>, msg);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/aEslPySCN5o4GtH.gif" alt="vue3"></p><h3 id="1-3-v-model-实现父子互传"><a href="#1-3-v-model-实现父子互传" class="headerlink" title="1.3 v-model 实现父子互传"></a>1.3 v-model 实现父子互传</h3><p>默认情况下，组件上的 <code>v-model</code> 使用 <code>modelValue</code> 作为 prop 和 <code>update:modelValue</code> 作为事件。可以通过向 <code>v-model</code> 传递参数来修改这些默认名称</p><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：&#123;&#123;modelValue&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span>改名<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeAge&quot;</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  defineProps(&#123;</span><br><span class="javascript">    <span class="hljs-attr">modelValue</span>: <span class="hljs-built_in">String</span>,</span><br><span class="javascript">    <span class="hljs-attr">age</span>: <span class="hljs-built_in">Number</span>,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> emit = defineEmits([<span class="hljs-string">&quot;update:modelValue&quot;</span>, <span class="hljs-string">&quot;update:age&quot;</span>]);</span><br><span class="javascript">  <span class="hljs-keyword">const</span> changeName = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    emit(<span class="hljs-string">&quot;update:modelValue&quot;</span>, <span class="hljs-string">&quot;赤蓝紫&quot;</span>);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> changeAge = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    emit(<span class="hljs-string">&quot;update:age&quot;</span>, <span class="hljs-number">999</span>);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;person.name&quot;</span> <span class="hljs-attr">v-model:age</span>=<span class="hljs-string">&quot;person.age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> Son <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Son.vue&quot;</span>; <span class="hljs-comment">// 组件自动注册</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> person = reactive(&#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/L9CNuhbZmwEe1Vi.gif" alt="vue3"></p><h3 id="1-4-子组件-ref-变量子传父"><a href="#1-4-子组件-ref-变量子传父" class="headerlink" title="1.4 子组件 ref 变量子传父"></a>1.4 子组件 ref 变量子传父</h3><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; ref, toRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> name = ref(<span class="hljs-string">&quot;clz&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> changeName = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        name.value = <span class="hljs-string">&quot;赤蓝紫&quot;</span>;</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        name,</span><br><span class="javascript">        changeName,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sonRef&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; nextTick, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> Son <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Son.vue&quot;</span>; <span class="hljs-comment">// 组件自动注册</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> sonRef = ref(<span class="hljs-string">&quot;sonRef&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">  nextTick(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(sonRef.value.name);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      sonRef.value.changeName();</span><br><span class="javascript">    &#125;, <span class="hljs-number">1000</span>);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/rOU97DXxPIEcKWk.gif" alt="vue3"></p><p>上面会发现用回了 setup 函数，这是因为需要引入一下<code> defineExpose</code></p><p>首先，变成<code> &lt;script setup&gt;</code>，发现无法得到相同效果，甚至会报错</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; ref, toRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> name = ref(<span class="hljs-string">&quot;clz&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">const</span> changeName = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    name.value = <span class="hljs-string">&quot;赤蓝紫&quot;</span>;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这是因为，标准组件写法中，子组件的数据都默认隐式暴露给父组件了，而在<code>&lt;script setup&gt;</code>模式下，所有数据只是默认 return 给 template 使用而已，不会暴露到组件外，所以父组件无法直接通过挂载 ref 变量获取子组件的数据。</p><p>可以通过<code> defineExpose</code>将子组件显示暴露出来，父组件才能通过 ref 变量获取子组件的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; ref, toRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> name = ref(<span class="hljs-string">&quot;clz&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">const</span> changeName = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    name.value = <span class="hljs-string">&quot;赤蓝紫&quot;</span>;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><br><span class="javascript">  defineExpose(&#123;</span><br><span class="javascript">    name,</span><br><span class="javascript">    changeName,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-5-provide-和-inject"><a href="#1-5-provide-和-inject" class="headerlink" title="1.5 provide 和 inject"></a>1.5 provide 和 inject</h3><p>使用<code> provide</code>和<code> inject</code>，无论组件层次结构多深，父组件都可以作为其所有子组件的依赖提供者。</p><p><b style="color: red">父组件通过 provide 来提供数据，子组件通过 inject 来使用这些数据</b></p><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// 父组件通过provide来提供数据，子组件通过inject来使用这些数据</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; reactive, toRefs, provide &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> Son <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Son.vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">components</span>: &#123;</span><br><span class="javascript">      Son,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> person = reactive(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;);</span><br><span class="javascript">      provide(<span class="hljs-string">&quot;person&quot;</span>, person); <span class="hljs-comment">//给自己的后代组件传递数据</span></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123; ...toRefs(person) &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.father</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#666</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    &#123;&#123;person&#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; inject &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> person = inject(<span class="hljs-string">&quot;person&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123; person &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.son</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eee</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/21/LBPortQcey89CGa.png" alt="image-20220220131546539"></p><h2 id="2-插槽-slot"><a href="#2-插槽-slot" class="headerlink" title="2. 插槽 slot"></a>2. 插槽 slot</h2><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 匿名插槽 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> /&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 具名插槽 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span> /&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 作用域插槽 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span> <span class="hljs-attr">:scope</span>=<span class="hljs-string">&quot;person&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> person = reactive(&#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;default&quot;</span>&gt;</span>匿名插槽<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>具名插槽<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>具名插槽<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>=<span class="hljs-string">&quot;&#123; scope &#125;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;area&quot;</span>&gt;</span>作用域插槽<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;area&quot;</span>&gt;</span>姓名：&#123;&#123;scope.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;area&quot;</span>&gt;</span>年龄&#123;&#123;scope.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> Son <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Son.vue&quot;</span>;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.default</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">color</span>: red;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.name</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">color</span>: blue;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.area</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">color</span>: purple;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/sEuYfkAc592HaQG.png" alt="image-20220221002538205"></p><h2 id="3-CSS-变量注入"><a href="#3-CSS-变量注入" class="headerlink" title="3. CSS 变量注入"></a>3. CSS 变量注入</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>CLZ<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> color = ref(<span class="hljs-string">&quot;red&quot;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="css">    <span class="hljs-comment">/* 使用v-bind绑定变量 */</span></span><br><span class="css">    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">v-bind</span>(<span class="hljs-string">&quot;color&quot;</span>);</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-定义组件的-name"><a href="#4-定义组件的-name" class="headerlink" title="4. 定义组件的 name"></a>4. 定义组件的 name</h2><p>用单独的<code> &lt;script&gt;</code>块定义即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>CLZ<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> color = ref(<span class="hljs-string">&quot;red&quot;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Test&quot;</span>,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="css">    <span class="hljs-comment">/* 使用v-bind绑定变量 */</span></span><br><span class="css">    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">v-bind</span>(<span class="hljs-string">&quot;color&quot;</span>);</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/S8x2g4jJszlRDfK.png" alt="image-20220221001111236"></p><h2 id="5-Vuex-的简单使用"><a href="#5-Vuex-的简单使用" class="headerlink" title="5. Vuex 的简单使用"></a>5. Vuex 的简单使用</h2><p>之前在字节的青训营里，有老师建议不要再学 Vuex 了，要就学<code> pinia</code>。然后实习要先搞一手老项目，用的就是<code> Vuex</code>，自然还是得学一下的。当然，之后再学一下<code> pinia</code>，看能不能自己悟出来，为什么老师更建议<code> pinia</code></p><h3 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>状态管理模式：</p><ul><li><strong>状态</strong>：驱动应用的数据源</li><li><strong>视图</strong>：以声明方式将状态映射到视图</li><li><strong>操作</strong>：响应在视图上的用户输入导致的状态变化</li></ul><p><img src="https://s2.loli.net/2022/03/01/JDqct9xvlMngdUC.png" alt="image-20220221220827405"></p><p>但是，当需要<strong>多个组件共享状态时</strong>，单向数据流的简洁性很容易被破坏。因为：</p><ul><li>多个视图依赖于同一状态</li><li>来自不同视图的行为需要变更同一状态</li></ul><p>Vuex 就是将组件的共享状态抽离出来，是代码变得更结构化且易维护</p><h3 id="5-2-State-和-Mutation"><a href="#5-2-State-和-Mutation" class="headerlink" title="5.2 State 和 Mutation"></a>5.2 State 和 Mutation</h3><p><strong>State</strong>：存储共享状态</p><p><strong>Mutation</strong>： 修改状态。更改 Vuex 的 store 中的状态的唯一方法是提交 mutation</p><p>store \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  <span class="hljs-function"><span class="hljs-title">state</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// 存储状态</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-comment">// 或下面的形式，注意：() =&gt; (&#123;&#125;), 右边有括号包住。因为要说明右面是对象形式，而不是函数形式</span><br>  <span class="hljs-comment">// state: () =&gt; (&#123;</span><br>  <span class="hljs-comment">//   count: 0</span><br>  <span class="hljs-comment">// &#125;),</span><br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">//  修改状态。更改Vuex的store中的状态的唯一方法是提交 mutation</span><br>    <span class="hljs-function"><span class="hljs-title">increment</span>(<span class="hljs-params">state</span>)</span> &#123;<br>      state.count++;<br>    &#125;,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store&quot;</span>;<br><br>createApp(App).use(store).mount(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;store.state.count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>---------以下是子组件----------<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> Son <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Son.vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> store = useStore(); <span class="hljs-comment">// 通过useStore()获取store，类似于useRoute()，之前是通过this.$store</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> add = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    store.commit(<span class="hljs-string">&quot;increment&quot;</span>); <span class="hljs-comment">// 通过store.commit()提交 mutation， 修改状态</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 可以携带参数，只要mutations下的函数有两个参数，第二个便是携带的参数</span></span><br><span class="javascript">    <span class="hljs-comment">// increment(state, n) &#123;</span></span><br><span class="javascript">    <span class="hljs-comment">//     state.count += n</span></span><br><span class="javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="javascript">    <span class="hljs-comment">// store.commit(&#x27;increment&#x27;, 10)</span></span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>components \ Son.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;store.state.count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> store = useStore();</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/37g2hntF9GQSCz1.gif" alt="vue3"></p><p>又有问题了，不通过<code>store.commit()</code>来修改，而是通过<code> store.state.***</code>来修改，会发现展示的效果不一样，但是呢，实际上存储的状态那边是没有更新的，所以<b style="color: red">状态的修改必须通过<code>mutations</code>下的方法修改</b>。下面就来瞧一瞧是不是真的。</p><p>add 方法变化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> add = <span class="hljs-function">() =&gt;</span> &#123;<br>  store.state.count++;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/3NbMzkdTFxnmU5t.gif" alt="vue3"></p><p>可以发现，状态确实没有发生变化，只是视图发生了变化</p><h3 id="5-3-Getter"><a href="#5-3-Getter" class="headerlink" title="5.3 Getter"></a>5.3 Getter</h3><p><strong>Getter</strong>：访问 State 存储的状态</p><h4 id="5-3-1-通过属性访问"><a href="#5-3-1-通过属性访问" class="headerlink" title="5.3.1 通过属性访问"></a>5.3.1 通过属性访问</h4><p>Getter 会暴露为 <code>store.getters</code> 对象，可以以属性的形式访问这些值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">store.getters.count;<br></code></pre></td></tr></table></figure><p>store \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  <span class="hljs-function"><span class="hljs-title">state</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> state.count;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">increment</span>(<span class="hljs-params">state</span>)</span> &#123;<br>      state.count++;<br>    &#125;,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store&quot;</span>;<br><br>createApp(App).use(store).mount(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--  注意这里 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;store.getters.count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>---------以下是子组件----------<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> Son <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Son.vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> store = useStore();</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> add = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    store.commit(<span class="hljs-string">&quot;increment&quot;</span>);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>components \ Son.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--  注意这里 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;store.getters.count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> store = useStore();</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>正常结果，Vue Devtools 下也实时更新</p><h4 id="5-3-2-通过方法访问"><a href="#5-3-2-通过方法访问" class="headerlink" title="5.3.2 通过方法访问"></a>5.3.2 通过方法访问</h4><p>通过让 getter 返回一个函数，来实现给 getter 传参。</p><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">getters: &#123;<br>  <span class="hljs-attr">getTodo</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> <span class="hljs-function">(<span class="hljs-params">id</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> state.todos.find(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.id === id)<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/D6VOnUgrJkfhNxp.png" alt="image-20220222111921712"></p><p><img src="https://s2.loli.net/2022/03/01/t5ZcqXydFIrPCkU.png" alt="image-20220222111935625"></p><h3 id="5-4-Action"><a href="#5-4-Action" class="headerlink" title="5.4 Action"></a>5.4 Action</h3><p><strong>Action</strong>：Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><h4 id="5-4-1-简单使用"><a href="#5-4-1-简单使用" class="headerlink" title="5.4.1 简单使用"></a>5.4.1 简单使用</h4><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 <code>context.commit</code> 提交一个 mutation，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 state 和 getters。</p><p>Action 通过<code> store.dispatch</code>方法触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">store.dispatch(<span class="hljs-string">&quot;increment&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/22/ZIOAYERkWKGybx9.png" alt="image-20220222121825636"></p><h4 id="5-4-2-Action-支持异步"><a href="#5-4-2-Action-支持异步" class="headerlink" title="5.4.2 Action 支持异步"></a>5.4.2 Action 支持异步</h4><p>为什么要通过 Action 提交<code> mutation</code>呢？都直接提交不行吗?</p><p>这是因为<b style="color: red">mutation 必须同步执行，而 Action 不受约束</b></p><p><strong>mutation 异步</strong>：在 mutation 中使用异步更新状态，虽然也会使状态正常更新，但是会导致开发者工具有时无法追踪到状态的变化，调试起来就会很困难</p><p><img src="https://s2.loli.net/2022/03/01/9m6Y38f27MPrJhR.png" alt="image-20220222122627684"></p><p><img src="https://s2.loli.net/2022/03/01/bhSdMKfVGTCOY29.gif" alt="vue3"></p><p>视图更新，存储的状态没有实时更新</p><p><strong>action 异步</strong>：</p><p><img src="https://s2.loli.net/2022/03/01/fkwUN9mu8yh3Vp1.png" alt="image-20220222123511145"></p><p><img src="https://s2.loli.net/2022/03/01/3sBjHlm9XbI5DQz.gif" alt="vue3"></p><h3 id="5-5-Module"><a href="#5-5-Module" class="headerlink" title="5.5 Module"></a>5.5 Module</h3><p><strong>Module</strong>：Vuex 允许将 store 分割成**模块(module)**。每个模块拥有自己的<code> state</code>、<code> mutation</code>、<code> getter</code>、<code> action</code>，以及嵌套子模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> moduleA = &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">increment</span>(<span class="hljs-params">state</span>)</span> &#123;<br>      <span class="hljs-comment">// 这里的 `state` 对象是模块的局部状态</span><br>      state.count++<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-comment">// 对于模块内部的 action，局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState：</span><br>    <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">&#123; state, commit, rootState &#125;</span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(state.count)<br>      <span class="hljs-built_in">console</span>.log(rootState.count)<br><br>      commit(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> moduleB = &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123; ... &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-attr">a</span>: moduleA,<br>    <span class="hljs-attr">b</span>: moduleB<br>  &#125;<br>&#125;)<br><br>store.state.a <span class="hljs-comment">// -&gt; moduleA 的状态</span><br>store.state.b <span class="hljs-comment">// -&gt; moduleB 的状态</span><br></code></pre></td></tr></table></figure><h4 id="5-2-1-示例"><a href="#5-2-1-示例" class="headerlink" title="5.2.1 示例"></a>5.2.1 示例</h4><p>store \ module \ user.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> user = &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>  &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">increment</span>(<span class="hljs-params">state</span>)</span> &#123;<br>      state.age++;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">doubleAge</span>(<span class="hljs-params">state</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> state.age * <span class="hljs-number">2</span>;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">&#123; state, commit, rootState &#125;</span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(state.name);<br>      <span class="hljs-built_in">console</span>.log(rootState.number);<br><br>      commit(<span class="hljs-string">&quot;increment&quot;</span>);<br>    &#125;,<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> user;<br></code></pre></td></tr></table></figure><p>store \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br><br><span class="hljs-keyword">import</span> user <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./module/user&quot;</span>;<br><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  <span class="hljs-function"><span class="hljs-title">state</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">number</span>: <span class="hljs-number">10</span>,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-attr">user</span>: user,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名: &#123;&#123; user.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄: &#123;&#123; user.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>年龄+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> store = useStore();</span><br><span class="javascript">  <span class="hljs-keyword">const</span> user = store.state.user;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> add = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    store.dispatch(<span class="hljs-string">&quot;add&quot;</span>);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store/index&quot;</span>;<br><br>createApp(App).use(store).mount(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/9aPoUXI8mztfeSO.png" alt="image-20220222211011517"></p><p><strong>学习参考链接</strong>：<a href="https://juejin.cn/post/7006108454028836895">Vue3.2 setup 语法糖、Composition API 归纳总结</a></p><p><a href="https://vuex.vuejs.org/zh/">Vuex</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue3 </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful接口设计规范</title>
      <link href="/2022/02/28/RESTful/"/>
      <url>/2022/02/28/RESTful/</url>
      
        <content type="html"><![CDATA[<h1 id="RESTful-接口设计规范"><a href="#RESTful-接口设计规范" class="headerlink" title="RESTful 接口设计规范"></a>RESTful 接口设计规范</h1><ul><li><p><strong>协议</strong>：API 与用户的通信协议，尽量使用 HTTPS</p></li><li><p><strong>域名</strong>：尽量将 API 部署在专用域名下，如<code> https://api.example.com</code>。如果 API 很简单，不会有进一步的扩展，则可以放在主域名下，如<code> https://example.com/api/</code></p></li><li><p><strong>版本</strong>：将 API 的版本号放到 URL 中，如<code> https://api.example.com/v1/</code>。或将版本号放在 HTTP 头信息中。</p></li><li><p><strong>路径</strong>：在 RESTful 架构中，每个网址代表一种资源，即网址中不能有动词，只能有名词，而且使用的名词一般和数据库的表格名对应。如<code> https://api.example.com/v1/users</code></p></li><li><p><strong>HTTP 动词</strong>：资源的具体操作类型</p><ul><li>GET(读取)：从服务器读取资源</li><li>POST(创建)：在服务器新建资源</li><li>PUT(完整更新)：在服务器更新资源(客户端提供改变后的完整资源，包括不改变的属性)</li><li>PATCH(部分更新)：在服务器更新资源(客户端提供改变的属性)</li><li>DELETE(删除)：从服务器删除资源</li></ul><p>不常用的两个：</p><ul><li><p>HEAD：获取资源的元数据(和 GET 类似，只是没有响应体)</p></li><li><p>OPTIONS：获取信息(关于资源的哪些属性是客户端可以改变的</p></li></ul><p><img src="https://s2.loli.net/2022/02/28/IJUrwTfCnqXvF89.png" alt="image-20220210134816272"></p></li><li><p><strong>过滤信息</strong>：如果记录数量很多，API 应该提供参数，过滤返回结果。</p><p>常见参数：</p><ul><li>?limit=10：指定返回记录的数量</li><li>?offset=10：指定返回记录的开始位置</li><li>?page=2$per_page=50：指定第几页，以及每页的记录数</li><li>?sortby=name&amp;order=asc：指定返回结果按哪个属性排序，以及排序是升序还是降序</li><li>?id=1：指定筛选条件</li></ul></li><li><p><strong>状态码</strong>：客户端的每一次请求，服务器都应该给出响应。响应包括 HTTP 状态码和数据两部分</p></li><li><p><strong>返回结果</strong>：API 返回的数据格式，不应该是纯文本，而应该是 JSON 对象，这样才可以放回标准的格式化数据。服务器回应的 HTTP 头部的<code> Content-Type</code>属性也应该设为<code> application/json</code></p><p><img src="https://s2.loli.net/2022/02/28/vDzmrRVoL3Wajsf.png" alt="image-20220210135856605"></p></li><li><p><strong>错误处理</strong>：状态码反应发生的错误，具体的错误信息放在数据体中</p><p><img src="https://s2.loli.net/2022/02/28/CFru1mcIayXP8Nl.png" alt="image-20220210140039430"></p></li><li><p><strong>身份认证</strong>：例如基于 JWT 的接口权限认证</p><ul><li>字段名：<code> Authorization</code></li><li>字段值：<code> Bearer token数据</code></li></ul></li><li><p><strong>跨端处理</strong>：在服务端设置 CORS 以允许客户端跨域资源请求</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(一)</title>
      <link href="/2022/02/28/leetcode-1/"/>
      <url>/2022/02/28/leetcode-1/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-刷题-一"><a href="#LeetCode-刷题-一" class="headerlink" title="LeetCode 刷题(一)"></a>LeetCode 刷题(一)</h1><p>LeetCode 刷题，提升算法能力(dddd)</p><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p><a href="https://leetcode-cn.com/problems/two-sum/">两数之和</a></p><p>初级版本( 时间复杂度<code>O(n2)</code> )</p><p>没什么要在意的，就是有种情况：nums=[3, 4, 5]， target=6，所以需要限制两次的下标不能相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> twoSum = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, target</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; nums.length &amp;&amp; i !== j; j++) &#123;<br>      <span class="hljs-keyword">if</span> (nums[i] + nums[j] === target) &#123;<br>        <span class="hljs-keyword">return</span> [i, j];<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>进阶版本</strong>(时间复杂度小于 <code>O(n2)</code> )：</p><p>利用 map，把之前出现过的数字，以及下标存储起来，只需要遍历一次，如果有出现过符合条件的，直接返回结果，没有则继续存，继续遍历。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> twoSum = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, target</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> map = &#123;&#125;; <span class="hljs-comment">// 用来存出现过的数字，其中键是出现过的数字，值是数组下标</span><br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">let</span> result = target - nums[i];<br>    <span class="hljs-keyword">if</span> (map[result] !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 之前有出现过符合条件的</span><br>      <span class="hljs-keyword">return</span> [map[result], i];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      map[nums[i]] = i;<br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h2><p><a href="https://leetcode-cn.com/problems/palindrome-number/">回文数</a></p><p>初级版本：转化成字符串再判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isPalindrome = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> str = x.toString(); <span class="hljs-comment">// 转换成字符串</span><br>  <span class="hljs-keyword">let</span> reverseStr = str.split(<span class="hljs-string">&quot;&quot;</span>).reverse().join(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 先转换成数组，反转后再变回字符串</span><br><br>  <span class="hljs-keyword">if</span> (str === reverseStr) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>进阶版本</strong>：</p><ul><li><p>定义一个除数 div，主要用于获取首位。</p></li><li><p>循环遍历 div 每次乘以 10，直到 x / div &gt;= 10</p><ul><li>例如，x=1234，要获取首位，那么就需要先得到 1000，然后通过 1234 / 1000（整除），就能获取首位</li></ul></li><li><p>通过循环，一直获取首尾，直到符合条件，或 x===0,即是回文数后退出循环</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isPalindrome = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 小于0直接返回</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> div = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (x / div &gt;= <span class="hljs-number">10</span>) &#123;<br>    div *= <span class="hljs-number">10</span>; <span class="hljs-comment">// 用于x / div来获取第一位</span><br>  &#125;<br><br>  <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">let</span> left = <span class="hljs-built_in">Number</span>.parseInt(x / div); <span class="hljs-comment">// 获取第一位</span><br>    <span class="hljs-keyword">let</span> right = x % <span class="hljs-number">10</span>; <span class="hljs-comment">// 获取最后一位</span><br>    <span class="hljs-keyword">if</span> (left !== right) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    x = <span class="hljs-built_in">Number</span>.parseInt((x % div) / <span class="hljs-number">10</span>); <span class="hljs-comment">// 新的x去掉已经符合条件的首尾</span><br>    div = <span class="hljs-built_in">Number</span>.parseInt(div / <span class="hljs-number">100</span>); <span class="hljs-comment">// 新的x变化了，对应的div也要变化，除以100是因为x去掉了首尾</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h2><p><a href="https://leetcode-cn.com/problems/roman-to-integer/">罗马数字转整数</a></p><p>手动建一个 map，键是罗马数字，值是对应的整数，遍历一遍，遇到特殊情况，如 IX，则减，否则加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> romanToInt = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> luoma = &#123;<br>    <span class="hljs-attr">I</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">V</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-attr">X</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-attr">L</span>: <span class="hljs-number">50</span>,<br>    <span class="hljs-attr">C</span>: <span class="hljs-number">100</span>,<br>    <span class="hljs-attr">D</span>: <span class="hljs-number">500</span>,<br>    <span class="hljs-attr">M</span>: <span class="hljs-number">1000</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">let</span> fin = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> len = s.length;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-keyword">let</span> left = luoma[s[i]];<br>    <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &lt; len &amp;&amp; left &lt; luoma[s[i + <span class="hljs-number">1</span>]]) &#123;<br>      fin -= left; <span class="hljs-comment">// 特殊情况是减</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      fin += left;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> fin;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h2><p><a href="https://leetcode-cn.com/problems/longest-common-prefix/">最长公共前缀</a></p><p>解法较弱：通过两个循环，第一层循环获取字符串，第二层循环获取字符，而公共前缀一开始默认是第一个字符串，通过循环遍历，得到最长公共前缀</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> longestCommonPrefix = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">strs</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> common = strs[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; strs.length; i++) &#123;<br>    common = common.slice(<span class="hljs-number">0</span>, strs[i].length); <span class="hljs-comment">// 用于排除第一个字符串较长，后面的字符串较短的情况</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; strs[i].length; j++) &#123;<br>      <span class="hljs-keyword">if</span> (common[j] !== strs[i][j]) &#123;<br>        common = common.slice(<span class="hljs-number">0</span>, j);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> common;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h2><p><a href="https://leetcode-cn.com/problems/valid-parentheses/">有效的括号</a>：先建立一个对象和一个空栈，键是右括号，值是左括号，然后遍历字符串。如果是左括号，则入栈。如果是右括号，则判断与栈顶括号是否是一对，是则出栈，否则直接返回 false，因为没有成功匹配。遍历完之后，如果栈不为空，即没有完全匹配，返回 false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isValid = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> arr = [];<br>  <span class="hljs-keyword">let</span> len = s.length;<br>  <span class="hljs-keyword">let</span> pair = &#123;<br>    <span class="hljs-string">&quot;)&quot;</span>: <span class="hljs-string">&quot;(&quot;</span>,<br>    <span class="hljs-string">&quot;]&quot;</span>: <span class="hljs-string">&quot;[&quot;</span>,<br>    <span class="hljs-string">&quot;&#125;&quot;</span>: <span class="hljs-string">&quot;&#123;&quot;</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">if</span> (len % <span class="hljs-number">2</span> !== <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (s[i] === <span class="hljs-string">&quot;(&quot;</span> || s[i] === <span class="hljs-string">&quot;[&quot;</span> || s[i] === <span class="hljs-string">&quot;&#123;&quot;</span>) &#123;<br>      arr.push(s[i]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (pair[s[i]] === arr[arr.length - <span class="hljs-number">1</span>]) &#123;<br>        arr.pop();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (arr.length === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="实现-strStr"><a href="#实现-strStr" class="headerlink" title="实现 strStr"></a>实现 strStr</h2><p><a href="https://leetcode-cn.com/problems/implement-strstr/">实现 strStr</a></p><p>暴力解法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> strStr = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">haystack, needle</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> hLen = haystack.length;<br>  <span class="hljs-keyword">let</span> nLen = needle.length;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i + nLen &lt;= hLen; i++) &#123;<br>    <span class="hljs-comment">// 不需要考虑后面的长度不够匹配需要的情况</span><br>    <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 每一次从新的地方开始匹配，都需要重置flag为true</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; nLen; j++) &#123;<br>      <span class="hljs-keyword">if</span> (haystack[i + j] !== needle[j]) &#123;<br>        <span class="hljs-comment">// 不匹配，直至跳出循环，并置flag为false</span><br>        flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>      <span class="hljs-keyword">return</span> i;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app开发和常规Vue开发</title>
      <link href="/2022/02/24/uniapp-vue/"/>
      <url>/2022/02/24/uniapp-vue/</url>
      
        <content type="html"><![CDATA[<h1 id="uni-app-开发和常规-Vue-开发"><a href="#uni-app-开发和常规-Vue-开发" class="headerlink" title="uni-app 开发和常规 Vue 开发"></a>uni-app 开发和常规 Vue 开发</h1><p><code>uni-app</code> 是一个使用 <a href="https://vuejs.org/">Vue.js</a> 开发所有前端应用的框架，开发一次，可以发行为 App、小程序、网站，</p><p>常规 Web 开发只能发行为网站。</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul><li><p>Vue 中的 div 标签对应于 uni-app 是 view</p></li><li><p>Vue 中的 span 标签对应于 uni-app 中是 text</p></li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><b style="color: red">uni-app 中有三种类型的生命周期，应用生命周期、页面生命周期、组件生命周期</b></p><h3 id="应用生命周期"><a href="#应用生命周期" class="headerlink" title="应用生命周期"></a>应用生命周期</h3><p><strong>应用生命周期只在<code> App.vue</code>中有效</strong></p><p><code> uni-app</code>支持以下生命周期函数（部分）</p><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>当<code> uni-app</code>初始化完成时触发（全局只触发一次）</td></tr><tr><td>onShow</td><td>当<code> uni-app</code>启动时，或从后台进入前台时显示</td></tr><tr><td>onHide</td><td>当<code> uni-app</code>从前台进入后台</td></tr><tr><td>onError</td><td>当<code> uni-app</code>报错时触发</td></tr></tbody></table><p>app.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  onLaunch: function () &#123;<br>    console.log(&quot;App Launch&quot;);<br>  &#125;,<br>  onShow: function () &#123;<br>    console.log(&quot;App Show&quot;);<br>  &#125;,<br>  onHide: function () &#123;<br>    console.log(&quot;App Hide&quot;);<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>/*每个页面公共css */<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><p><a href="https://uniapp.dcloud.net.cn/collocation/frame/lifecycle?id=page">页面生命周期</a></p><h3 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h3><p><a href="https://clz.vercel.app/2021/10/08/vue-2/#toc-heading-9">Vue 组件生命周期</a></p><p><code>uni-app</code> 组件支持的生命周期，与 vue 标准组件的生命周期相同</p><p><img src="https://s2.loli.net/2022/02/25/HDmvkn6If12ZPcx.png" alt="image-20220224165359762"></p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h3><p><code>uni-app</code>页面路由为框架统一管理，开发者需要在<a href="https://uniapp.dcloud.net.cn/collocation/pages?id=pages">pages.json</a>里配置每个路由页面的路径及页面样式。</p><p>新建页面时，会在<code> pages.json</code>中自动生成路由</p><p>pages.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;pages&quot;</span>: [ <span class="hljs-comment">//pages数组中第一项表示应用启动页，参考：https://uniapp.dcloud.io/collocation/pages</span><br>&#123;<br><span class="hljs-attr">&quot;path&quot;</span>: <span class="hljs-string">&quot;pages/index/index&quot;</span>,<br><span class="hljs-attr">&quot;style&quot;</span>: &#123;<br><span class="hljs-attr">&quot;navigationBarTitleText&quot;</span>: <span class="hljs-string">&quot;uni-app&quot;</span><br>&#125;<br>&#125;<br>        ,&#123;<br>            <span class="hljs-attr">&quot;path&quot;</span> : <span class="hljs-string">&quot;pages/login/login&quot;</span>,<br>            <span class="hljs-attr">&quot;style&quot;</span> :<br>            &#123;<br>                <span class="hljs-attr">&quot;navigationBarTitleText&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>                <span class="hljs-attr">&quot;enablePullDownRefresh&quot;</span>: <span class="hljs-literal">false</span><br>            &#125;<br><br>        &#125;<br>    ]<br></code></pre></td></tr></table></figure><p><strong><code>uni-app</code> 有两种页面路由跳转方式：使用<a href="https://uniapp.dcloud.net.cn/component/navigator">navigator</a>组件跳转、调用<a href="https://uniapp.dcloud.net.cn/api/router">API</a>跳转。</strong></p><ul><li><p>使用<a href="https://uniapp.dcloud.net.cn/component/navigator">navigator</a>组件跳转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">navigator</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>调用<a href="https://uniapp.dcloud.net.cn/api/router">API</a>跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">uni.navigateTo(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/pages/login/login&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><p>pages \ index.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;view class=&quot;index&quot;&gt;<br>    &lt;text class=&quot;text&quot;&gt;首页&lt;/text&gt;<br>    &lt;button class=&quot;btn&quot; @click=&quot;login&quot;&gt;登录&lt;/button&gt;<br>  &lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  methods: &#123;<br>    login() &#123;<br>      uni.navigateTo(&#123;<br>        url: &quot;/pages/login/login&quot;,<br>      &#125;);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.index &#123;<br>  text-align: center;<br><br>  .btn &#123;<br>    width: 100px;<br>    height: 50px;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>pages \ login \ login.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;view class=&quot;login&quot;&gt;<br>    login<br>    &lt;navigator url=&quot;/&quot; class=&quot;link&quot;&gt;首页&lt;/navigator&gt;<br>  &lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;&#125;;<br>  &#125;,<br>  methods: &#123;&#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.login &#123;<br>  text-align: center;<br>&#125;<br>.link &#123;<br>  color: blue;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/25/amgiZdwJkLOhrS4.gif" alt="uniapp"></p><p>插一嘴：HBuilderX 感觉挺人性化的，缺少的插件保存时会自动帮你安装</p><p><img src="https://s2.loli.net/2022/02/25/zWogary5BFfTLnq.png" alt="image-20220224161236235"></p><h3 id="Vue-路由"><a href="#Vue-路由" class="headerlink" title="Vue 路由"></a>Vue 路由</h3><p><a href="https://clz.vercel.app/2021/10/15/vue-3/#toc-heading-9">Vue 路由</a></p><p>相对 uni-app 的路由设置来说，Vue 的路由配置稍稍麻烦一点，先安装 vue-router，再建 router 文件夹，设置路由规则，并导出路由给 Vue 使用。详情点击上面的链接</p><p>Vue3 相对于 Vue2,也有所变化：<a href="https://clz.vercel.app/2022/02/21/vue3-1/#toc-heading-15">Vue3 路由</a></p><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><p>通过安装<code> uni-simple-router</code>插件，实现路由守卫功能</p><p><strong>安装</strong>：<code> npm install uni-simple-router</code></p><p><strong>文档</strong>：<a href="https://hhyang.cn/">uni-simple-router</a></p><p>使用：<a href="https://hhyang.cn/v2/start/quickstart.html">快速上手</a></p><h2 id="页面之间传值"><a href="#页面之间传值" class="headerlink" title="页面之间传值"></a>页面之间传值</h2><h3 id="通过查询参数"><a href="#通过查询参数" class="headerlink" title="通过查询参数"></a>通过查询参数</h3><p><strong>首页</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;view class=&quot;index&quot;&gt;<br>    首页<br>    &lt;navigator :url=&quot;&#x27;/pages/login/login?msg=&#x27; + msg&quot; class=&quot;login&quot;<br>      &gt;登录&lt;/navigator<br>    &gt;<br>  &lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      msg: &quot;Hello, login Pages&quot;,<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.index &#123;<br>  width: 500px;<br>  text-align: center;<br>  margin: 20px auto;<br>&#125;<br>.login &#123;<br>  color: blue;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>登录页</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;view class=&quot;login&quot;&gt;<br>    &lt;h2&gt;登录&lt;/h2&gt;<br>    首页发送的信息: &#123;&#123; msg &#125;&#125;<br>  &lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      msg: &quot;&quot;,<br>    &#125;;<br>  &#125;,<br>  methods: &#123;&#125;,<br>  onLoad(options) &#123;<br>    // 其参数为上个页面传递的数据，参数类型为 Object（用于页面传参）<br>    this.msg = options.msg;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.login &#123;<br>  text-align: center;<br>  width: 300px;<br>  margin: 20px auto;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/25/LMoHn8hr4meK3BC.png" alt="image-20220225104643142"></p><p><b style="color: red">以下部分，uni-app 和常规 Vue 开发一样，属于是复习内容</b></p><h2 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h2><p>和 Vue 一样，顺便复习一下</p><p><a href="https://clz.vercel.app/2021/10/08/vue-2/#toc-heading-21">Vue 组件间的数据共享</a></p><h3 id="父传子-props"><a href="#父传子-props" class="headerlink" title="父传子(props)"></a>父传子(props)</h3><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;view class=&quot;son&quot;&gt; 子组件: 父组件发送的信息:&#123;&#123; msg &#125;&#125; &lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;Son&quot;,<br>  props: &#123;<br>    msg: &#123;<br>      type: String,<br>      default: &quot;&quot;,<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.son &#123;<br>  width: 300px;<br>  height: 150px;<br>  line-height: 150px;<br>  background-color: pink;<br>  margin: 20px auto;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;view class=&quot;index&quot;&gt;<br>    &lt;text class=&quot;text&quot;&gt;父组件: &#123;&#123; msg &#125;&#125;&lt;/text&gt;<br>    &lt;Son :msg=&quot;msg&quot;&gt;&lt;/Son&gt;<br>  &lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Son from &quot;../../components/Son.vue&quot;;<br>export default &#123;<br>  components: &#123;<br>    Son,<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>      msg: &quot;Hello, Son&quot;,<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.index &#123;<br>  width: 500px;<br>  height: 250px;<br>  text-align: center;<br>  background-color: skyblue;<br>  margin: 0 auto;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/25/iwh4M7AxaVQBTPg.png" alt="image-20220224181528797"></p><h3 id="子传父-emit"><a href="#子传父-emit" class="headerlink" title="子传父(emit)"></a>子传父(emit)</h3><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;view class=&quot;son&quot;&gt;<br>    子组件: &#123;&#123; msg &#125;&#125;<br>    &lt;button @click=&quot;sendMsg&quot;&gt;发送信息给父组件&lt;/button&gt;<br>  &lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;Son&quot;,<br>  data() &#123;<br>    return &#123;<br>      msg: &quot;Hello Father&quot;,<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    sendMsg() &#123;<br>      this.$emit(&quot;getMsg&quot;, this.msg);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.son &#123;<br>  width: 300px;<br>  height: 150px;<br>  line-height: 150px;<br>  background-color: pink;<br>  margin: 20px auto;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;view class=&quot;index&quot;&gt;<br>    &lt;text class=&quot;text&quot;&gt;父组件: 子组件发送的信息: &#123;&#123; msg &#125;&#125;&lt;/text&gt;<br>    &lt;Son @getMsg=&quot;getMsg&quot;&gt;&lt;/Son&gt;<br>  &lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Son from &quot;../../components/Son.vue&quot;;<br>export default &#123;<br>  components: &#123;<br>    Son,<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>      msg: &quot;&quot;,<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    getMsg(msg) &#123;<br>      this.msg = msg;<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.index &#123;<br>  width: 500px;<br>  height: 250px;<br>  text-align: center;<br>  background-color: skyblue;<br>  margin: 0 auto;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/25/fwIDAingrLjJKcu.gif" alt="uniapp"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>右键打开VScode</title>
      <link href="/2022/02/21/open-with-vscode/"/>
      <url>/2022/02/21/open-with-vscode/</url>
      
        <content type="html"><![CDATA[<h1 id="右键打开-VScode"><a href="#右键打开-VScode" class="headerlink" title="右键打开 VScode"></a>右键打开 VScode</h1><h2 id="右键打开文件"><a href="#右键打开文件" class="headerlink" title="右键打开文件"></a>右键打开文件</h2><ol><li><p><code> win + R</code>，输入<code> regedit</code>，打开注册表编辑器</p></li><li><p>在<code> HKEY_CLASSES_ROOT \ * \ shell</code>下新建项<code> VSCode</code></p></li><li><p>在<code> VSCode</code>下新建项<code> command</code></p><p><img src="https://s2.loli.net/2022/02/21/YMrKETtlfQXkcRs.png" alt="image-20220221211953677"></p></li><li><p>点击<code> command</code>项，双击右边的<code> (默认)</code>，数值数据变为 VSCode 的安装路径 + “%1”</p><p><img src="https://s2.loli.net/2022/02/21/dvuhkpO2tYjHyJQ.png" alt="image-20220221212426269"></p></li><li><p>点击<code> VSCode</code>项，双击右边的<code> (默认)</code>，数值数据变为你想要的提示信息，如<code> Open with Code</code></p></li><li><p>在<code> VSCode</code>下新建<code> 可扩充字符串值</code>，命名为<code> Icon</code>，更改数值数据为 VSCode 的安装路径</p><p><img src="https://s2.loli.net/2022/02/21/BmC2pDZLawGPRn7.png" alt="image-20220221213111724"></p></li></ol><h2 id="右键打开文件夹"><a href="#右键打开文件夹" class="headerlink" title="右键打开文件夹"></a>右键打开文件夹</h2><p>同理，就是位置不一样而已，在<code> HKEY_CLASSES_ROOT\Directory\shell</code>下</p><p><img src="https://s2.loli.net/2022/02/21/hIrp9VEPWwsuizZ.png" alt="image-20220221213828789"></p><p>另外，<code> command</code>项的数据数值后的参数<code> &quot;%1&quot;</code>变为<code> &quot;%V&quot;</code></p><h2 id="右键文件夹空白处，打开文件夹"><a href="#右键文件夹空白处，打开文件夹" class="headerlink" title="右键文件夹空白处，打开文件夹"></a>右键文件夹空白处，打开文件夹</h2><p>同理，就是位置不一样而已，在<code> HKEY_CLASSES_ROOT\Directory\Background\shell</code>下</p><p><img src="https://s2.loli.net/2022/02/21/uKi2AJ7Z1moXwHv.png" alt="image-20220221214201643"></p><p>另外，<code> command</code>项的数据数值后的参数也是<code> &quot;%V&quot;</code></p><p>其实，有个快捷方法的，我之前就是跟着网上的教程一次操作，三个都配置好了，只不过我忘记了，也没记下来，又没收藏，真是悔不当初啊。知道的人可以说一下。</p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3快速入门(一)</title>
      <link href="/2022/02/21/vue3-1/"/>
      <url>/2022/02/21/vue3-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3-快速入门-一"><a href="#Vue3-快速入门-一" class="headerlink" title="Vue3 快速入门(一)"></a>Vue3 快速入门(一)</h1><p>实习进入公司后，简单安装 vscode、node、git 等必备工具后，导师直接问有没有学过 vue3，说了只学过 vue2 后，就给我分享了两篇文章，以及让我查看文档，快速从 vue2 加速到 vue3。本文将参考到很多文章、文档，部分借用的可能没有备注出来，侵权请联系。(不过就算是参考，例子我很多按自己的理解弄成自己以后看更容易理解的了，虽然也差不了多少)</p><p>顺带附上以前的笔记：<a href="https://clz.vercel.app/tags/Vue/">Vue2</a></p><h2 id="1-构建项目"><a href="#1-构建项目" class="headerlink" title="1. 构建项目"></a>1. 构建项目</h2><p>开始的第一步，当然就是构建项目啦。这里就有一个重大的区别了，vue3 使用 web 开发构建工具<a href="https://clz.vercel.app/">vite</a>，而不是 webpack</p><p>vite 优点：</p><ul><li>无需打包，快速的冷服务器启动</li><li>HMR(热更新)</li><li>按需编译</li></ul><p>另外，vite 开启的服务器端口默认是 3000，而不是 8080</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm init vite@latest<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用yarn</span><br>yarn create vite<br></code></pre></td></tr></table></figure><p>按需选择</p><p><img src="https://s2.loli.net/2022/03/02/ZRuVP9eHDmi4Wqs.png" alt="image-20220219154708582"></p><p><b style="color: red">项目启动的方式不再是<code> npm run serve</code>了，而是<code> npm run dev</code></b></p><p><img src="https://s2.loli.net/2022/02/21/j4pBO5MFQqJnV89.png" alt="image-20220219155029403"></p><h2 id="2-入口文件变化"><a href="#2-入口文件变化" class="headerlink" title="2. 入口文件变化"></a>2. 入口文件变化</h2><p><strong>Vue2</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><br>Vue.config.productionTip = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  router,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">h</span>) =&gt;</span> h(App),<br>&#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>Vue3</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><br>createApp(App).use(router).mount(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><p>Vue3 引入的不再是 Vue 构造函数，而是<code> createApp</code>工厂函数。</p><h2 id="3-组合式-API"><a href="#3-组合式-API" class="headerlink" title="3. 组合式 API"></a>3. 组合式 API</h2><h3 id="3-1-set-up"><a href="#3-1-set-up" class="headerlink" title="3.1 set up"></a>3.1 set up</h3><p>setup 函数是 Composition API(组合 API)的入口</p><p><b style="color: red">在 setup 函数中定义的变量和方法需要 return 出去，才能在模板中使用</b></p><p>实际上和 vue2 类似，只不过在 vue2 中数据在 data 函数中，方法在 methods 节点中，而 vue3 则是”更有人情味了”，和原生 js 更相似，数据和方法就是普通的变量和方法，只需要 return 出去，就能在模板中使用。</p><p><strong>Vue3</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;alertName&quot;</span>&gt;</span>alert name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; nickname &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> nickname = <span class="hljs-string">&quot;赤蓝紫&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">alertName</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        alert(<span class="hljs-string">`我是<span class="hljs-subst">$&#123;nickname&#125;</span>`</span>);</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        nickname,</span><br><span class="javascript">        alertName,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><b style="color: red">template 里不再必须要一个唯一的根标签了</b>，这个改进个人感觉很舒服。查了一下资料，发现是虽然看似没有根节点，但是只是 vue3 的根节点是一个虚拟节点，不会映射到一个具体节点。因为一棵树必须有一个根节点，所以使用虚拟节点作为根节点非常有用。</p><p><strong>Vue2</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;alertName&quot;</span>&gt;</span>alert nickname<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; nickname &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">nickname</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">alertName</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        alert(<span class="hljs-string">`我是<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.nickname&#125;</span>`</span>);</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-ref"><a href="#3-2-ref" class="headerlink" title="3.2 ref"></a>3.2 ref</h3><p>先看一下，下面这个例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span>change name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; nickname &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> nickname = <span class="hljs-string">&quot;赤蓝紫&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeName</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        nickname = <span class="hljs-string">&quot;clz&quot;</span>;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(nickname);</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        nickname,</span><br><span class="javascript">        changeName,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>点击后，发现数据改变了，但是 p 标签中的名字却没变，难道是 vue 的<strong>数据驱动视图</strong>失效了。</p><p>当然，并不是，只是 vue3 中多出了响应式数据和普通数据的区别，只有响应式数据才能驱动视图的改变。而上面的 nickname 只是字符串，不是响应式数据，试图自然也不会发生改变。</p><p>而将字符串变成响应式数据也非常简单，只需要引入并使用<code> ref</code>即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span>change name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; nickname &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> nickname = ref(<span class="hljs-string">&quot;赤蓝紫&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeName</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        nickname = <span class="hljs-string">&quot;clz&quot;</span>;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(nickname);</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        nickname,</span><br><span class="javascript">        changeName,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然而，还是不行，这是为什么呢？原因就是 ref 把 nickname 变成 RefImpl 的实例对象了，修改的时候要<code> .value</code>去修改，底层还是用的 get 和 set 去操作。</p><p>把上面 changeName 方法中的<code> nickname = &quot;clz&quot;</code>注释掉后，再点击按钮，就能知道变成 RefImpl 的实例对象了</p><p><img src="https://s2.loli.net/2022/02/21/NbxsXdIfng37UDA.png" alt="image-20220219171513259"></p><p>最终版本：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span>change name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; nickname &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> nickname = ref(<span class="hljs-string">&quot;赤蓝紫&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeName</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        nickname.value = <span class="hljs-string">&quot;clz&quot;</span>;</span><br><span class="javascript">        <span class="hljs-comment">// console.log(nickname)</span></span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        nickname,</span><br><span class="javascript">        changeName,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改要用<code> .value</code>来修改，为什么显示时不用<code> &#123;&#123; nickname.value &#125;&#125;</code>来显示呢？这是因为 vue3 检测到是 ref 对象后，直接给你 nickname.value 了（还挺人性化）</p><h3 id="3-3-reactive"><a href="#3-3-reactive" class="headerlink" title="3.3 reactive"></a>3.3 reactive</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span>change name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>name: &#123;&#123; people.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>age: &#123;&#123; people.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> people = ref(&#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeName</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        people.value.name = <span class="hljs-string">&quot;clz&quot;</span>;</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        people,</span><br><span class="javascript">        changeName,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>乍一看和上面的 ref 中一样，但是实际上如果是将对象类型转换成响应式数据是应该使用函数<code> reactive</code>的，只是如果 ref 中是对象的话，会自动调用<code> reactive</code>而已。打印<code> people.value</code>可以发现不再是<code> RefImpl</code>对象了，而是<code> Proxy</code>对象。</p><p><img src="https://s2.loli.net/2022/02/21/MRLKGiglNEsDhjf.png" alt="image-20220219173758962"></p><ul><li>基本数据类型：根据<code> Object.defineProperty</code>里的<code> get</code>和<code> set</code>进行数据劫持来实现响应式</li><li>对象类型：通过<code> Proxy</code>来实现响应式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span>change name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>name: &#123;&#123; people.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>age: &#123;&#123; people.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>hobby: &#123;&#123;hobbys[0]&#125;&#125;, &#123;&#123;hobbys[1]&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> people = reactive(&#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">      <span class="hljs-keyword">let</span> hobbys = reactive([<span class="hljs-string">&quot;音乐&quot;</span>, <span class="hljs-string">&quot;动漫&quot;</span>]);</span><br><span class="javascript">      <span class="hljs-comment">// let hobbys = [&quot;音乐&quot;, &quot;动漫&quot;]</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeName</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        people.name = <span class="hljs-string">&quot;clz&quot;</span>;</span><br><span class="javascript">        hobbys[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;学习&quot;</span>;</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        people,</span><br><span class="javascript">        changeName,</span><br><span class="javascript">        hobbys,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面有个问题：<b style="color: red">数组形式的不通过 reactive()转换成响应式也是响应式数据</b>，暂不知道原因</p><p>也可以按 vue2 中 data 的形式来写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span>change name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>name: &#123;&#123; data.people.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>age: &#123;&#123; data.people.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>hobby: &#123;&#123;data.hobbys[0]&#125;&#125;, &#123;&#123;data.hobbys[1]&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> data = reactive(&#123;</span><br><span class="javascript">        <span class="hljs-attr">people</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">hobbys</span>: [<span class="hljs-string">&quot;音乐&quot;</span>, <span class="hljs-string">&quot;动漫&quot;</span>],</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeName</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        data.people.name = <span class="hljs-string">&quot;clz&quot;</span>;</span><br><span class="javascript">        data.hobbys[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;学习&quot;</span>;</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        data,</span><br><span class="javascript">        changeName,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>ref 和 reactive 的区别</strong>：</p><table><thead><tr><th align="center">ref</th><th align="center">reactive</th></tr></thead><tbody><tr><td align="center">定义<strong>基本类型数据</strong></td><td align="center">定义<strong>对象或数组类型数据</strong></td></tr><tr><td align="center">通过<code> Object.defineProperty()</code>的<code> get</code>和<code> set</code>来实现响应式(数据劫持)</td><td align="center">通过<code> Proxy</code>实现响应式(数据劫持)，通过<code> Reflect</code>操作源代码内部数据</td></tr><tr><td align="center">操作数据需要<code> .value</code>，读取不需要</td><td align="center">操作个读取数据都不需要<code> .value</code></td></tr></tbody></table><h3 id="3-3-computed"><a href="#3-3-computed" class="headerlink" title="3.3 computed"></a>3.3 computed</h3><p>计算属性，和 vue2 差不多</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  r: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;color.r&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  g: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;color.g&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  b: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;color.b&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  rgb: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;color.rgb&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;color: color.rgb&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; reactive, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> color = reactive(&#123;</span><br><span class="javascript">        <span class="hljs-attr">r</span>: <span class="hljs-number">255</span>,</span><br><span class="javascript">        <span class="hljs-attr">g</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">        <span class="hljs-attr">b</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      color.rgb = computed(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-string">`rgb(<span class="hljs-subst">$&#123;color.r&#125;</span>, <span class="hljs-subst">$&#123;color.g&#125;</span>, <span class="hljs-subst">$&#123;color.b&#125;</span>)`</span>;</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        color,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果修改计算出来的东西，会报警告，因为计算属性是只读属性</p><p><img src="https://s2.loli.net/2022/02/21/kGNxTC5dpZ19M3A.png" alt="image-20220219200708560"></p><p>实现可修改：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  r: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;color.r&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  g: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;color.g&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  b: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;color.b&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  rgb: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;color.rgb&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;color: color.rgb&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; reactive, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> color = reactive(&#123;</span><br><span class="javascript">        <span class="hljs-attr">r</span>: <span class="hljs-number">255</span>,</span><br><span class="javascript">        <span class="hljs-attr">g</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">        <span class="hljs-attr">b</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      color.rgb = computed(&#123;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(color.r);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-string">`rgb(<span class="hljs-subst">$&#123;color.r&#125;</span>,<span class="hljs-subst">$&#123;color.g&#125;</span>,<span class="hljs-subst">$&#123;color.b&#125;</span>)`</span>;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">let</span> rgbList = value.split(<span class="hljs-string">&quot;,&quot;</span>);</span><br><span class="javascript">          color.r = rgbList[<span class="hljs-number">0</span>].slice(<span class="hljs-number">4</span>);</span><br><span class="javascript">          color.g = rgbList[<span class="hljs-number">1</span>];</span><br><span class="javascript">          color.b = rgbList[<span class="hljs-number">2</span>].slice(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        color,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><b style="color: red">实现计算属性可修改的关键</b>：computed()参数为一个对象，对象中有一个 get 方法用来获取值，set 方法用来修改值</p><h3 id="3-4-watch"><a href="#3-4-watch" class="headerlink" title="3.4 watch"></a>3.4 watch</h3><p>监听器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>当前数字为：&#123;&#123;num&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;num++&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; ref, watch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> num = ref(<span class="hljs-number">0</span>);</span><br><span class="javascript">      watch(</span><br><span class="javascript">        num, <span class="hljs-comment">// 如果想监听多个数据，则第一个参数是要监听的数据数组，其中newValue、oldValue也是数组，第一个元素就是监听的第一个参数</span></span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`数字增加了，现在的值<span class="hljs-subst">$&#123;newValue&#125;</span>, 原值<span class="hljs-subst">$&#123;oldValue&#125;</span>`</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-comment">// &#123;</span></span><br><span class="javascript">        <span class="hljs-comment">//   immediate: true,</span></span><br><span class="javascript">        <span class="hljs-comment">//   deep: true</span></span><br><span class="javascript">        <span class="hljs-comment">// &#125; // 第三个参数就是选项设置，可设置立即监听、深度监听</span></span><br><span class="javascript">      );</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        num,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>age:&#123;&#123;people.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;people.age++&quot;</span>&gt;</span>年龄加1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>salary:&#123;&#123;people.job.salary&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;people.job.salary+=100&quot;</span>&gt;</span>薪水加100<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; reactive, watch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> people = reactive(&#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,</span><br><span class="javascript">        <span class="hljs-attr">job</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">salary</span>: -<span class="hljs-number">10</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">      watch(</span><br><span class="javascript">        people,</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`信息改变了`</span>, newValue, oldValue); <span class="hljs-comment">// 直接监听reactive所定义的一个响应式数据，会出现oldValue也是更新后的值，且默认开启深度监听，还无法关闭</span></span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        &#123;</span><br><span class="javascript">          <span class="hljs-attr">deep</span>: <span class="hljs-literal">false</span>,</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      );</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 监听reactive所定义的一个响应式数据中的某个属性</span></span><br><span class="javascript">      <span class="hljs-comment">// 如果是对象还需要开启深度监听，才能监听到变化。</span></span><br><span class="javascript">      <span class="hljs-comment">// 或者变为监听people.job.salary(直接手动直接指出最终的目标)</span></span><br><span class="javascript">      <span class="hljs-comment">// watch(</span></span><br><span class="javascript">      <span class="hljs-comment">//   () =&gt; people.job,</span></span><br><span class="javascript">      <span class="hljs-comment">//   (newValue, oldValue) =&gt; &#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//     console.log(`工作信息改变了`, newValue, oldValue)</span></span><br><span class="javascript">      <span class="hljs-comment">//   &#125;,</span></span><br><span class="javascript">      <span class="hljs-comment">//   &#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//     deep: true</span></span><br><span class="javascript">      <span class="hljs-comment">//   &#125;</span></span><br><span class="javascript">      <span class="hljs-comment">// )</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        people,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/21/ZBVr5nihTLOuwmp.png" alt="image-20220219220716205"></p><p><b style="color: red">如果监听器用来监听 reactive 定义的响应式数据，那么无法获取到旧数据，而且默认开启深度监听，无法关闭深度监听</b></p><p><strong>watchEffect</strong>：</p><ul><li>默认开启了立即更新(<code>immediate: true</code>)</li><li>用到谁就监听谁</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>age:&#123;&#123;people.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;people.age++&quot;</span>&gt;</span>年龄加1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>salary:&#123;&#123;people.job.salary&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;people.job.salary+=100&quot;</span>&gt;</span>薪水加100<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; reactive, watchEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> people = reactive(&#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,</span><br><span class="javascript">        <span class="hljs-attr">job</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">salary</span>: -<span class="hljs-number">10</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">      watchEffect(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> salary = people.job.salary;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;工资变更&quot;</span>);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        people,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-5-生命周期钩子"><a href="#3-5-生命周期钩子" class="headerlink" title="3.5 生命周期钩子"></a>3.5 生命周期钩子</h3><p><img src="https://s2.loli.net/2022/02/21/ecLryuxfdEZmqhM.png" alt="image-20220219223623431"></p><p>vue3 中，<strong>beforeDestroy</strong>改为<strong>beforeUnmount</strong>，<strong>destroyed</strong>改为<strong>unmounte</strong></p><p><b style="color: red">beforeCreate 和 created 没有 API，因为 setup 实际上就相当于这两个生命周期函数</b></p><p>使用示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;num++&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; onMounted, onUpdated &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      onMounted(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;onMounted&quot;</span>);</span><br><span class="javascript">      &#125;),</span><br><span class="javascript">        onUpdated(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;数据更新啦&quot;</span>);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> num = ref(<span class="hljs-number">0</span>);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        num,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-6-toRef-和-toRefs"><a href="#3-6-toRef-和-toRefs" class="headerlink" title="3.6 toRef 和 toRefs"></a>3.6 toRef 和 toRefs</h3><p>toRef 就是把数据变成 ref 类型的数据，<code> toRefs</code>就是将多个数转换成响应式数据</p><p>先引用一下之前的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>age:&#123;&#123;people.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;people.age++&quot;</span>&gt;</span>年龄加1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>salary:&#123;&#123;people.job.salary&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;people.job.salary+=100&quot;</span>&gt;</span>薪水加100<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; reactive, watchEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> people = reactive(&#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,</span><br><span class="javascript">        <span class="hljs-attr">job</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">salary</span>: -<span class="hljs-number">10</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">      watchEffect(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> salary = people.job.salary;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;工资变更&quot;</span>);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        people,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>仔细观察，可以发现<code> template</code>中，使用了很多次<code> people.</code>，于是想偷一下懒,return 的时候耍点小聪明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> &#123;<br>  <span class="hljs-attr">age</span>: people.age,<br>  <span class="hljs-attr">salary</span>: people.job.salary,<br>&#125;;<br></code></pre></td></tr></table></figure><p>哦豁，点击按钮不再能改变数据了，原因就是因为 return 出去的数据不是响应式，而是 number，自然不能改变。验证也很简单，只要在<code> watchEffect()</code>中顺便打印出<code> people.age</code>就行了。</p><p>通过<code> toRef</code>就可以实现自动修改<code> people</code>里的数据，不要忘记引入<code> toRef</code>了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> &#123;<br>  <span class="hljs-attr">age</span>: toRef(people, <span class="hljs-string">&quot;age&quot;</span>),<br>  <span class="hljs-attr">salary</span>: toRef(people.job, <span class="hljs-string">&quot;salary&quot;</span>),<br>&#125;;<br></code></pre></td></tr></table></figure><p>这种时候，有可能会想到使用 ref 就可以了，即以下形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> &#123;<br>  <span class="hljs-attr">age</span>: ref(people.age), <span class="hljs-comment">// ref()不会改变people里的数据，而toRef可以修改</span><br>  <span class="hljs-attr">salary</span>: ref(people.job.salary),<br>&#125;;<br></code></pre></td></tr></table></figure><p>这样子，乍一看，效果确实一样，但是，实际上的数据并没有发现改变，通过监听器就可以发现</p><p><img src="https://s2.loli.net/2022/02/21/CBnTzxYiJtmjEDs.gif" alt="vue3"></p><p>为什么呢？实际上使用 ref 的话，有类似于 new 出来一个对象，new 出来的对象自然和原来的数据没有什么实质上的联系</p><p>使用<code> toRefs</code>就可以稍微偷一下懒</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> &#123;<br>  ...toRefs(people), <span class="hljs-comment">// 解构，只能解构一层，所以深层的还是要写</span><br>  ...toRefs(people.job),<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="4-其他改变"><a href="#4-其他改变" class="headerlink" title="4. 其他改变"></a>4. 其他改变</h2><ul><li><p>移除<code> keyCode</code>作为<code> v-on</code>的修饰符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-on:keyup.13</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-on:keyup.enter</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- vue2上面两种形式都支持，vue3只支持下面那种，即只能通过按钮别名 --&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>移除<code> native</code>作为<code> v-on</code>的修饰符</p></li><li><p>移除<code> filter</code>过滤器</p></li></ul><p><a href="https://blog.csdn.net/weixin_44869002/category_10771155.html">Vue 3 迁移策略笔记</a></p><h3 id="4-1-refs"><a href="#4-1-refs" class="headerlink" title="4.1 $refs"></a>4.1 $refs</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;getValue&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; getCurrentInstance, nextTick, reactive, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> ci = getCurrentInstance();</span><br><span class="javascript">      <span class="hljs-keyword">const</span> &#123; proxy &#125; = getCurrentInstance();</span><br><span class="javascript">      <span class="hljs-comment">// console.log(getCurrentInstance())    //只有在setup()这一直接块才可以，如果在函数中，则会得到null</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValue</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(ci.refs.btn);</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(proxy.$refs.btn); <span class="hljs-comment">// 也可以通过proxy.$refs来获取</span></span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        getValue,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-nextTick"><a href="#4-2-nextTick" class="headerlink" title="4.2 nextTick"></a>4.2 nextTick</h3><p>nextTick()：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; getCurrentInstance, nextTick, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> &#123; proxy &#125; = getCurrentInstance();</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> msg = ref(<span class="hljs-string">&quot;Hi&quot;</span>);</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> btn = proxy.$refs.btn;</span><br><span class="javascript">        msg.value = <span class="hljs-string">&quot;Hello&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;直接打印:&quot;</span>, btn.innerText);</span><br><span class="javascript"></span><br><span class="javascript">        nextTick(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;nextTick：&quot;</span>, btn.innerText);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        msg,</span><br><span class="javascript">        change,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-3-teleport"><a href="#4-3-teleport" class="headerlink" title="4.3 teleport"></a>4.3 teleport</h3><p>使用<code>&lt;teleport&gt;</code>，可以通过<code>to</code>将 teleport 下的 html 传送到指定位置(如传送到<code>body</code>中)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">teleport</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;three&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;four&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">teleport</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/20/c86uJK35AQOhm2f.png" alt="image-20220220141404043"></p><h3 id="4-4-路由"><a href="#4-4-路由" class="headerlink" title="4.4 路由"></a>4.4 路由</h3><p>app.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript">      <span class="hljs-keyword">const</span> router = useRouter();</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(route.path);</span><br><span class="javascript">      router.push(<span class="hljs-string">&quot;/home&quot;</span>);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><br>createApp(App).use(router).mount(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><p>router \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;home&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/home.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/login&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;login&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/login.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br></code></pre></td></tr></table></figure><p><b style="color: red">注意：</b></p><ul><li><p><b style="color: red">在模板中仍然可以访问 <code>$router</code> 和 <code>$route</code>，所以不需要在 <code>setup</code> 中返回 <code>router</code> 或 <code>route</code></b></p></li><li><p>从<code> vue-router</code>中引入的<code>useRoute</code>,<code>useRouter</code>相当于 vue2 的 <code>this.$route</code>，<code>this.$router</code></p></li><li><p>引入组件时，<strong>必须</strong>加上<code> .vue</code>后缀</p></li></ul><p>编程式导航传参</p><p><strong><code>params</code> 不能与 <code>path</code> 一起使用，而应该使用<code>name</code></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript">      <span class="hljs-keyword">const</span> router = useRouter();</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// query编程式导航传参</span></span><br><span class="javascript">      <span class="hljs-comment">// router.push(&#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//   path: &quot;/home&quot;,</span></span><br><span class="javascript">      <span class="hljs-comment">//   query: &#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//     id: 666</span></span><br><span class="javascript">      <span class="hljs-comment">//   &#125;</span></span><br><span class="javascript">      <span class="hljs-comment">// &#125;)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// params编程式导航传参</span></span><br><span class="javascript">      router.push(&#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-comment">// 需要使用命名路由</span></span><br><span class="javascript">        <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">          <span class="hljs-comment">// 路由规则那里也要配成path: &quot;/login/:id&quot;,</span></span><br><span class="javascript">          <span class="hljs-attr">id</span>: <span class="hljs-number">666</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-5-导航守卫"><a href="#4-5-导航守卫" class="headerlink" title="4.5 导航守卫"></a>4.5 导航守卫</h3><h4 id="4-5-1-局部导航守卫"><a href="#4-5-1-局部导航守卫" class="headerlink" title="4.5.1 局部导航守卫"></a>4.5.1 局部导航守卫</h4><p>home.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span> home <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; onBeforeRouteLeave &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      onBeforeRouteLeave(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-comment">// 默认可前往，可通过return false禁止前往</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;去&quot;</span>, to);</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;来自&quot;</span>, <span class="hljs-keyword">from</span>);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-5-2-全局导航守卫"><a href="#4-5-2-全局导航守卫" class="headerlink" title="4.5.2 全局导航守卫"></a>4.5.2 全局导航守卫</h4><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><br>router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// next是可选参数，可写可不写，return false是取消导航，否则意味着通过验证</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;去&quot;</span>, to);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;来自&quot;</span>, <span class="hljs-keyword">from</span>);<br>  <span class="hljs-comment">// return false</span><br>&#125;);<br><br>createApp(App).use(router).mount(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="5-法宝-setup-语法糖"><a href="#5-法宝-setup-语法糖" class="headerlink" title="5. 法宝(setup 语法糖)"></a>5. 法宝(setup 语法糖)</h2><p><b style="color: red">Vue3.0 通过 setup()函数，需要把数据和方法 return 出去才能使用</b>，但是 Vue3.2 中，只需要在 srcipt 标签上加上<code> setup</code>属性，这样子就无需 return，template 就可以直接使用了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;alertName&quot;</span>&gt;</span>alert name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; nickname &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">let</span> nickname = <span class="hljs-string">&quot;赤蓝紫&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">alertName</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    alert(<span class="hljs-string">`我是<span class="hljs-subst">$&#123;nickname&#125;</span>`</span>);</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>参考：</p><p><a href="https://juejin.cn/post/7030992475271495711">vue3 保姆级教程</a></p><p><a href="https://v3.cn.vuejs.org/">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令——少用但有用</title>
      <link href="/2022/02/19/git-useful/"/>
      <url>/2022/02/19/git-useful/</url>
      
        <content type="html"><![CDATA[<h1 id="git-命令——少用但有用"><a href="#git-命令——少用但有用" class="headerlink" title="git 命令——少用但有用"></a>git 命令——少用但有用</h1><p>实习开始了，新环境、新电脑，git 添加公钥等操作自然也是需要重新设置，为了避免之后还要查找，自己写一下笔记，方便日后使用。</p><p><a href="https://clz.vercel.app/2021/11/20/git-order/">git 常用命令</a></p><p><b style="color: red">以下命令在 Git  Bash 中执行</b></p><h2 id="1-设置用户名和-email"><a href="#1-设置用户名和-email" class="headerlink" title="1. 设置用户名和 email"></a>1. 设置用户名和 email</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name 用户名<br>git config --global user.email 邮箱<br></code></pre></td></tr></table></figure><h2 id="2-查看用户名和-email"><a href="#2-查看用户名和-email" class="headerlink" title="2. 查看用户名和 email"></a>2. 查看用户名和 email</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config user.name<br>git config user.email<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 也可以把所有信息都列出来，再找</span><br>git config --list<br></code></pre></td></tr></table></figure><h2 id="3-配置-ssh-公私钥"><a href="#3-配置-ssh-公私钥" class="headerlink" title="3. 配置 ssh 公私钥"></a>3. 配置 ssh 公私钥</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -o# 要输入的话直接Enter<br>cat ~/.ssh/id_rsa.pub# 查看并复制公钥(复制是手动复制全部)<br></code></pre></td></tr></table></figure><p>github 进入<code>setting -&gt; SSH and GPG keys -&gt; New SSH key</code></p><p><img src="https://s2.loli.net/2022/02/18/lbWKsfAohLqZiDz.png" alt="image-20220218231701335"></p><p>输入标题(自定义)以及复制的公钥</p><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com# 不要改成自己的邮箱，弹出提示的话，输入yes，回车<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/19/r6j1N7wcPkaO8gx.png" alt="image-20220218232334720"></p><h2 id="4-清空暂存区"><a href="#4-清空暂存区" class="headerlink" title="4. 清空暂存区"></a>4. 清空暂存区</h2><h3 id="4-1-git-rm-–cached-文件"><a href="#4-1-git-rm-–cached-文件" class="headerlink" title="4.1 git rm –cached 文件"></a>4.1 git rm –cached 文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status# 查看暂存区文件<br>git rm --cached 文件# 一次删除，知道空。效率极低<br></code></pre></td></tr></table></figure><h3 id="4-2-rm-git-index"><a href="#4-2-rm-git-index" class="headerlink" title="4.2 rm .git/index"></a>4.2 rm .git/index</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm .git/index# 暂存区仅仅是.git目录下的一个index文件,所以只要删除这个文件，就清空暂存区了<br></code></pre></td></tr></table></figure><h3 id="4-2-git-reset"><a href="#4-2-git-reset" class="headerlink" title="4.2 git reset"></a>4.2 git reset</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset# 后面什么都不跟<br></code></pre></td></tr></table></figure><h2 id="5-撤销提交"><a href="#5-撤销提交" class="headerlink" title="5. 撤销提交"></a>5. 撤销提交</h2><p>场景：提交完后，发现漏掉文件没有添加，或者提交信息写错了</p><h3 id="5-1-修改提交信息"><a href="#5-1-修改提交信息" class="headerlink" title="5.1 修改提交信息"></a>5.1 修改提交信息</h3><p>现在提交了一次</p><p><img src="https://s2.loli.net/2022/02/19/l5Jr7X3WLiQ9kwE.png" alt="image-20220218235143317"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit --amend<br></code></pre></td></tr></table></figure><p>进入类似 vim 的页面</p><ul><li>输入<code>i</code>，进入编辑模式</li><li>移动光标，修改信息</li><li>esc 退出编辑模式</li><li><code>:wq</code>保存</li></ul><p><img src="https://s2.loli.net/2022/02/19/GwLEyRIMX25fJ6H.png" alt="image-20220218235618176"></p><h3 id="5-2-添加漏掉的文件"><a href="#5-2-添加漏掉的文件" class="headerlink" title="5.2 添加漏掉的文件"></a>5.2 添加漏掉的文件</h3><ul><li>直接新增文件</li><li><code> git add .</code></li><li><code> git commit --amend</code>(<b style="color: red">不修改，直接保存</b>)</li><li>提交记录只有一条</li></ul>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express(一) ——简单入门</title>
      <link href="/2022/02/16/express-1/"/>
      <url>/2022/02/16/express-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-一-——简单入门"><a href="#Express-一-——简单入门" class="headerlink" title="Express(一) ——简单入门"></a>Express(一) ——简单入门</h1><p>背景：参加的青训营项目，使用 Express 来实现后端，个人被分配到后端去。于是，简单速通了下 Express。项目结束，回头写下笔记，沉淀一下。</p><p>Express 是基于 <a href="https://nodejs.org/en/">Node.js</a> 平台，快速、开放、极简的 Web 开发框架。</p><p>开始前可以先安装<a href="https://www.postman.com/">Postman</a>，很好用的<strong>接口测试工具</strong>。</p><h2 id="1-Hello-World"><a href="#1-Hello-World" class="headerlink" title="1. Hello World"></a>1. Hello World</h2><p>首先，安装 express 到项目中<code> npm i express</code></p><p>然后，开始代码世界。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 加载express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-comment">// 2. 调用express()获取。express()函数是express模块​​导出的顶级函数</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">// 3. 设置请求对应的处理函数。下面的例子中，当客户端以GET方法请求/时就会调用处理函数</span><br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 4. 启动web服务</span><br>app.listen(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:8080/&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>最后，命令行执行<code> nodemon app.js</code>或<code> node app.js</code>。<code>nodemon</code>支持热更新。</p><p><img src="https://s2.loli.net/2022/02/16/boPURrd42Yap6Cv.png" alt="image-20220207151828081"></p><h2 id="2-路由"><a href="#2-路由" class="headerlink" title="2. 路由"></a>2. 路由</h2><p>路由是指服务器端应用程序如何响应特定端点的客户端请求。由一个 URI(路径标识)和一个特定的 HTTP 方法(GET、POST 等)组成的。</p><p>路由的定义结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.METHOD(PATH, HANDLER);<br></code></pre></td></tr></table></figure><ul><li>app：express 实例</li><li>METHOD：是一个 HTTP 请求方法</li><li>PATH：服务端路径</li><li>HANDLER：当路由匹配到时执行的处理函数。参数：<code> request</code>和<code> response</code>对象分别处理请求和响应数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// GET请求</span><br>  res.send(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>&#125;);<br><br>app.post(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// POST请求</span><br>  res.send(<span class="hljs-string">&quot;post /&quot;</span>);<br>&#125;);<br><br>app.put(<span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// PUT请求</span><br>  res.send(<span class="hljs-string">&quot;put user&quot;</span>);<br>&#125;);<br><br>app.delete(<span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// DELETE请求</span><br>  res.send(<span class="hljs-string">&quot;delete user&quot;</span>);<br>&#125;);<br><br>app.listen(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:8080/&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/16/nRrPuxaXsd4gqtb.png" alt="image-20220207161937956"></p><h3 id="2-1-请求对象"><a href="#2-1-请求对象" class="headerlink" title="2.1 请求对象"></a>2.1 请求对象</h3><p>req 对象代表 HTTP 请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求地址: &quot;</span>, req.url);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求方法: &quot;</span>, req.method);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求头: &quot;</span>, req.headers);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求参数: &quot;</span>, req.query);<br><br>  res.end(); <span class="hljs-comment">// 结束响应。没有的话，客户端会一直等待回应</span><br>&#125;);<br><br>app.listen(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:8080/&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>postman 测试用：<a href="http://localhost:8080/?name=clz">http://localhost:8080/?name=clz</a></p><p><img src="https://s2.loli.net/2022/02/16/ESJXsLO63ZnQ4gC.png" alt="image-20220207162928596"></p><h3 id="2-2-响应对象"><a href="#2-2-响应对象" class="headerlink" title="2.2 响应对象"></a>2.2 响应对象</h3><p>res 对象表示收到 HTTP 请求后发送的 HTTP 响应。</p><h4 id="2-2-1-状态码及状态信息"><a href="#2-2-1-状态码及状态信息" class="headerlink" title="2.2.1 状态码及状态信息"></a>2.2.1 状态码及状态信息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.statusCode = <span class="hljs-number">404</span>; <span class="hljs-comment">// 设置响应状态码</span><br>  res.statusMessage = <span class="hljs-string">&quot;test&quot;</span>; <span class="hljs-comment">// 设置响应状态信息。这里是测试，理论上来说404应该对应Not Found，这样子才有意义</span><br><br>  res.end(); <span class="hljs-comment">// 结束响应</span><br>&#125;);<br><br>app.listen(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:8080/&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/16/QzX3ZEjpxmIRPDS.png" alt="image-20220207163814050"></p><h4 id="2-2-2-发送多段文本"><a href="#2-2-2-发送多段文本" class="headerlink" title="2.2.2 发送多段文本"></a>2.2.2 发送多段文本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.write(<span class="hljs-string">&quot;hello &quot;</span>);<br>  res.write(<span class="hljs-string">&quot;world&quot;</span>); <span class="hljs-comment">// res.write()只是发送数据，还是需要res.end()来结束响应</span><br><br>  <span class="hljs-comment">// res.end(&#x27;hello world&#x27;);   // 结束相应的同时发送数据</span><br><br>  res.end(); <span class="hljs-comment">// 结束响应</span><br>&#125;);<br><br>app.listen(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:8080/&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/16/RSh3NW4JLPxUk5F.png" alt="image-20220207165808608"></p><h4 id="2-2-3-cookie"><a href="#2-2-3-cookie" class="headerlink" title="2.2.3 cookie"></a>2.2.3 cookie</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.cookie(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;clz&quot;</span>); <span class="hljs-comment">// 设置cookie</span><br><br>  res.end(); <span class="hljs-comment">// 结束响应</span><br>&#125;);<br><br>app.listen(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:8080/&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/16/67rI4xtqigCc51a.png" alt="image-20220207164941307"></p><h3 id="2-3-路由路径"><a href="#2-3-路由路径" class="headerlink" title="2.3 路由路径"></a>2.3 路由路径</h3><p>可以使用正则表达式语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 匹配根路径</span><br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&quot;root&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 匹配/abc</span><br>app.get(<span class="hljs-string">&quot;/abc&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&quot;abc&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 匹配/test.text</span><br>app.get(<span class="hljs-string">&quot;/test.text&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&quot;test.text&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 匹配/acd、/abcd</span><br>app.get(<span class="hljs-string">&quot;/ab?cd&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&quot;ab?cd&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 匹配/abcd、/abxxxxcd</span><br>app.get(<span class="hljs-string">&quot;/ab*cd&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&quot;ab?cd&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 匹配/abe、/abcde</span><br>app.get(<span class="hljs-string">&quot;/ab(cd)?e&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&quot;ab?cd&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 匹配所有包含a</span><br>app.get(<span class="hljs-regexp">/a/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&quot;/a/&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 匹配以fly结尾的，包括/test.fly，/test/aaa/fly等</span><br>app.get(<span class="hljs-regexp">/.*fly$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&quot;/.*fly$/&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2-4-动态路径"><a href="#2-4-动态路径" class="headerlink" title="2.4 动态路径"></a>2.4 动态路径</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<span class="hljs-string">&quot;/users/:userId/books/:bookId&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.send(req.params);<br>&#125;);<br><br><span class="hljs-comment">// 限制动态参数</span><br>app.get(<span class="hljs-string">&quot;/:a(\\d+)&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.send(req.params);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/16/3qNmKThznV87fob.png" alt="image-20220210123301562"></p><h2 id="3-案例"><a href="#3-案例" class="headerlink" title="3. 案例"></a>3. 案例</h2><p>创建一个简单的 CRUD 接口服务。增加(Create)、读取查询(Retrieve)、更新(Update)和删除(Delete)</p><ul><li>查询任务列表：<code> GET /todos</code></li><li>根据 ID 查询单个任务：<code>GET /todos/:id</code></li><li>添加任务：<code> POST /todos</code></li><li>修改任务：<code> PATCH /todos</code></li><li>删除任务：<code> DELETE /todos/:id</code></li></ul><h3 id="3-1-路由设计"><a href="#3-1-路由设计" class="headerlink" title="3.1 路由设计"></a>3.1 路由设计</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.get(<span class="hljs-string">&quot;/todos&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;查询任务列表&quot;</span>);<br>&#125;);<br><br>app.get(<span class="hljs-string">&quot;/todos/:id&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">`根据ID查询单个任务, id是<span class="hljs-subst">$&#123;req.params.id&#125;</span>`</span>); <span class="hljs-comment">// 通过req.params.id来获取动态的路径参数id</span><br>&#125;);<br><br>app.post(<span class="hljs-string">&quot;/todos&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;添加任务&quot;</span>);<br>&#125;);<br><br>app.patch(<span class="hljs-string">&quot;/todos/:id&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">`修改任务, id是<span class="hljs-subst">$&#123;req.params.id&#125;</span>`</span>);<br>&#125;);<br><br>app.delete(<span class="hljs-string">&quot;/todos/:id&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">`删除任务, id是<span class="hljs-subst">$&#123;req.params.id&#125;</span>`</span>);<br>&#125;);<br><br>app.listen(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:8080/&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/16/ZeclNIh5qajyfBV.png" alt="image-20220207172638141"></p><h3 id="3-2-获取任务列表"><a href="#3-2-获取任务列表" class="headerlink" title="3.2 获取任务列表"></a>3.2 获取任务列表</h3><p>数据文件 db.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;todos&quot;</span>: [<br>    &#123;<br>      <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;express&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;笔记&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;更新博客&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<span class="hljs-string">&quot;/todos&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  fs.readFile(<span class="hljs-string">&quot;./db.json&quot;</span>, <span class="hljs-string">&quot;utf8&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">500</span>).json(&#123;<br>        <span class="hljs-comment">// res.json()专门发送json格式的数据，不是json格式会报错</span><br>        <span class="hljs-attr">error</span>: err.message,<br>      &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> db = <span class="hljs-built_in">JSON</span>.parse(data); <span class="hljs-comment">// 把字符串转成JSON对象</span><br>    res.status(<span class="hljs-number">200</span>).json(db.todos);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/16/eZxBPAKo6lLyUg9.png" alt="image-20220207184102851"></p><h3 id="3-3-根据-ID-查询单个任务"><a href="#3-3-根据-ID-查询单个任务" class="headerlink" title="3.3 根据 ID 查询单个任务"></a>3.3 根据 ID 查询单个任务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<span class="hljs-string">&quot;/todos/:id&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  fs.readFile(<span class="hljs-string">&quot;./db.json&quot;</span>, <span class="hljs-string">&quot;utf8&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">500</span>).json(&#123;<br>        <span class="hljs-attr">error</span>: err.message,<br>      &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> db = <span class="hljs-built_in">JSON</span>.parse(data);<br>    <span class="hljs-keyword">const</span> todo = db.todos.find(<br>      <span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> todo.id === <span class="hljs-built_in">Number</span>.parseInt(req.params.id)<br>    ); <span class="hljs-comment">// url中的动态参数是字符串</span><br><br>    <span class="hljs-keyword">if</span> (!todo) &#123;<br>      <span class="hljs-comment">// 任务id不存在</span><br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">404</span>).end(); <span class="hljs-comment">// 需要return阻止代码继续往下执行，否则会出现既发送404又发送200</span><br>    &#125;<br><br>    res.status(<span class="hljs-number">200</span>).json(todo);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/16/OXaKcMJbZq8D5SI.png" alt="image-20220208231000242"></p><h3 id="3-4-封装-db-模块"><a href="#3-4-封装-db-模块" class="headerlink" title="3.4 封装 db 模块"></a>3.4 封装 db 模块</h3><p>从上面的代码中可以发现，读取数据文件部分逻辑一样，即可以封装成单独的模块 db.js</p><p>db.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; promisify &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;util&quot;</span>); <span class="hljs-comment">// 把callback形式的异步api转化成promise形式的</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-keyword">const</span> readFile = promisify(fs.readFile);<br><br><span class="hljs-keyword">const</span> dbPath = path.join(__dirname, <span class="hljs-string">&quot;./db.json&quot;</span>);<br><br><span class="hljs-built_in">exports</span>.getDb = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> readFile(dbPath, <span class="hljs-string">&quot;utf8&quot;</span>);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.parse(data);<br>&#125;;<br></code></pre></td></tr></table></figure><p>封装后的 app.js(后面的路由没有变化)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-keyword">const</span> &#123; getDb &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./db.js&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.get(<span class="hljs-string">&quot;/todos&quot;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 处理异常的必要性：没有抛出异常的话，可能会一直在等待响应</span><br>    <span class="hljs-keyword">const</span> db = <span class="hljs-keyword">await</span> getDb(); <span class="hljs-comment">// 因为getDb是async的，所以所有形式都会被封装成Promise，所以获取数据都要await</span><br>    res.status(<span class="hljs-number">200</span>).json(db.todos); <span class="hljs-comment">// // res.json()专门发送json格式的数据，不是json格式会报错</span><br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    res.status(<span class="hljs-number">500</span>).json(&#123;<br>      <span class="hljs-attr">error</span>: err.message,<br>    &#125;);<br>  &#125;<br>&#125;);<br><br>app.get(<span class="hljs-string">&quot;/todos/:id&quot;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> db = <span class="hljs-keyword">await</span> getDb();<br>    <span class="hljs-keyword">const</span> todo = db.todos.find(<br>      <span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> todo.id === <span class="hljs-built_in">Number</span>.parseInt(req.params.id)<br>    ); <span class="hljs-comment">// url中的动态参数是字符串</span><br><br>    <span class="hljs-keyword">if</span> (!todo) &#123;<br>      <span class="hljs-comment">// 任务id不存在</span><br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">404</span>).end(); <span class="hljs-comment">// 需要return阻止代码继续往下执行，否则会出现既发送404又发送200</span><br>    &#125;<br><br>    res.status(<span class="hljs-number">200</span>).json(todo);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    res.status(<span class="hljs-number">500</span>).json(&#123;<br>      <span class="hljs-attr">error</span>: err.message,<br>    &#125;);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="3-5-添加任务"><a href="#3-5-添加任务" class="headerlink" title="3.5 添加任务"></a>3.5 添加任务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">app.post(<span class="hljs-string">&quot;/todos&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 1. 获取客户端请求体参数</span><br>  <span class="hljs-built_in">console</span>.log(req.body);<br><br>  res.end();<br>&#125;);<br></code></pre></td></tr></table></figure><p>然后，会发现很恐怖的事情</p><p><img src="https://s2.loli.net/2022/02/16/9kbuOrwlJ4NnVEc.png" alt="image-20220208231856994"></p><p>那么，这个时候就需要配置表单请求体来解决上述问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(express.json()); <span class="hljs-comment">// 配置解析表单请求体：application/json。将json格式转成js对象</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/16/2TIgyXGsfwQka7i.png" alt="image-20220208232402601"></p><p>完美!!!(然而，并不是)</p><p><img src="https://s2.loli.net/2022/02/16/8GC1QZHcbnvDRie.png" alt="image-20220208233059259"></p><p>换种形式，就要换汤了。因为 express.json()只能解析 json 形式的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(express.urlencoded()); <span class="hljs-comment">// 配置解析表单请求体：application/x-www-form-urlencoded</span><br></code></pre></td></tr></table></figure><p>然后，因为需要保存到 db.json 中，所以也应该在 db.js 中封装一个 saveDb()方法（<strong>app.js 自然也要引入 saveDb</strong>，这部分就不行出来了）</p><p>db.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; promisify &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;util&quot;</span>); <span class="hljs-comment">// 把callback形式的异步api转化成promise形式的</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-keyword">const</span> readFile = promisify(fs.readFile);<br><span class="hljs-keyword">const</span> writeFile = promisify(fs.writeFile);<br><br><span class="hljs-keyword">const</span> dbPath = path.join(__dirname, <span class="hljs-string">&quot;./db.json&quot;</span>);<br><br><span class="hljs-built_in">exports</span>.getDb = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> readFile(dbPath, <span class="hljs-string">&quot;utf8&quot;</span>);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.parse(data);<br>&#125;;<br><br><span class="hljs-built_in">exports</span>.saveDb = <span class="hljs-keyword">async</span> (db) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> data = <span class="hljs-built_in">JSON</span>.stringify(db);<br>  <span class="hljs-keyword">await</span> writeFile(dbPath, data);<br>&#125;;<br></code></pre></td></tr></table></figure><p>添加任务的代码部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">app.post(<span class="hljs-string">&quot;/todos&quot;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 1. 获取客户端请求体参数</span><br>    <span class="hljs-keyword">const</span> todo = req.body;<br><br>    <span class="hljs-comment">// 2. 数据验证</span><br>    <span class="hljs-keyword">if</span> (!todo.title) &#123;<br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">422</span>).json(&#123;<br>        <span class="hljs-attr">error</span>: <span class="hljs-string">&quot;The field title is required.&quot;</span>,<br>      &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 数据验证通过后，把数据存储到db.json中</span><br>    <span class="hljs-keyword">const</span> db = <span class="hljs-keyword">await</span> getDb();<br>    <span class="hljs-keyword">const</span> lastTodo = db.todos[db.todos.length - <span class="hljs-number">1</span>]; <span class="hljs-comment">// 获取最后一个todo</span><br><br>    todo.id = lastTodo ? lastTodo.id + <span class="hljs-number">1</span> : <span class="hljs-number">1</span>; <span class="hljs-comment">// 如果一个todo都没有，则添加的todo的id是1</span><br>    db.todos.push(todo);<br><br>    <span class="hljs-keyword">await</span> saveDb(db);<br><br>    <span class="hljs-comment">// 4. 发送响应</span><br>    res.status(<span class="hljs-number">200</span>).json(todo);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    res.status(<span class="hljs-number">500</span>).json(&#123;<br>      <span class="hljs-attr">error</span>: err.message,<br>    &#125;);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/16/aLlj7UR4mMhOczG.png" alt="image-20220208235418267"></p><p><strong>小优化</strong>：上面可以发现，添加任务后，db.json 格式很丑。其实就是把 JavaScript 对象转换为 JSON 字符串时的问题，所以只需要在<code>JSON.stringify()</code>上下点功夫就行。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON.stringify()</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.saveDb = <span class="hljs-keyword">async</span> (db) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> data = <span class="hljs-built_in">JSON</span>.stringify(db, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;  &quot;</span>); <span class="hljs-comment">// 这里第三个参数是两个空格，就是缩进按两个空格来</span><br>  <span class="hljs-keyword">await</span> writeFile(dbPath, data);<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/16/f6CvMnG3bHw2F7t.png" alt="image-20220209000445369"></p><p>眼尖的同学可能发现，添加的任务 id 和之前的位置不太一样。那么，有点小强迫症的我自然还是要在微操一手。</p><p><img src="https://s2.loli.net/2022/02/16/Un1avz8kDLJFisb.png" alt="image-20220209001337659"></p><p>终于。。。</p><p><img src="https://s2.loli.net/2022/02/16/JoHXaw8uz4Fxd61.png" alt="image-20220209001401680"></p><h3 id="3-6-修改任务"><a href="#3-6-修改任务" class="headerlink" title="3.6 修改任务"></a>3.6 修改任务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">app.patch(<span class="hljs-string">&quot;/todos/:id&quot;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 1. 获取客户端请求体参数</span><br>    <span class="hljs-keyword">const</span> todo = req.body;<br><br>    <span class="hljs-comment">// 2. 查找到要修改的todo</span><br>    <span class="hljs-keyword">const</span> db = <span class="hljs-keyword">await</span> getDb();<br>    <span class="hljs-keyword">const</span> ret = db.todos.find(<br>      <span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> todo.id === <span class="hljs-built_in">Number</span>.parseInt(req.params.id)<br>    );<br><br>    <span class="hljs-keyword">if</span> (!ret) &#123;<br>      <span class="hljs-comment">// 要修改的todo不存在</span><br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">404</span>).end();<br>    &#125;<br><br>    <span class="hljs-built_in">Object</span>.assign(ret, todo); <span class="hljs-comment">// 返回一个对象。如果添加的todo中有原本就有的属性，则修改属性值。如果没有，则新增属性</span><br><br>    <span class="hljs-keyword">await</span> saveDb(db);<br>    res.status(<span class="hljs-number">200</span>).json(ret);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    res.status(<span class="hljs-number">500</span>).json(&#123;<br>      <span class="hljs-attr">error</span>: err.message,<br>    &#125;);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>修改原有属性：</p><p><img src="https://s2.loli.net/2022/02/16/nJ8f3jVFRbQSOMl.png" alt="image-20220209003447970"></p><p>新增属性</p><p><img src="https://s2.loli.net/2022/02/16/ldx8WTQUqnHFKiz.png" alt="image-20220209003636418"></p><h3 id="3-7-删除任务"><a href="#3-7-删除任务" class="headerlink" title="3.7 删除任务"></a>3.7 删除任务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">app.delete(<span class="hljs-string">&quot;/todos/:id&quot;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> todoId = <span class="hljs-built_in">Number</span>.parseInt(req.params.id);<br>    <span class="hljs-keyword">const</span> db = <span class="hljs-keyword">await</span> getDb();<br><br>    <span class="hljs-keyword">const</span> index = db.todos.findIndex(<span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> todo.id === todoId); <span class="hljs-comment">// 造出要删除的todo的索引</span><br><br>    <span class="hljs-keyword">if</span> (index === -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// 要删除的todo压根不存在</span><br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">404</span>).end();<br>    &#125;<br><br>    db.todos.splice(index, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">await</span> saveDb(db);<br>    res.status(<span class="hljs-number">200</span>).end();<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    res.status(<span class="hljs-number">500</span>).json(&#123;<br>      <span class="hljs-attr">error</span>: err.message,<br>    &#125;);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/16/Ldr7TchUJQ45DHm.png" alt="image-20220209004455315"></p><h2 id="4-res-end-和-res-send-区别"><a href="#4-res-end-和-res-send-区别" class="headerlink" title="4. res.end()和 res.send()区别"></a>4. res.end()和 res.send()区别</h2><p>官方说明：</p><ul><li><p>res.end() 终结响应处理流程。(不过，也可以在结束的同时发送响应)</p></li><li><p>res.send() 发送各种类型的响应。</p></li></ul><h3 id="4-1-res-end"><a href="#4-1-res-end" class="headerlink" title="4.1 res.end()"></a>4.1 res.end()</h3><p>结束响应流程。用于在没有任何数据的情况下快速结束响应。</p><ul><li><b style="color: red">参数可以是 buffer 对象、字符串</b></li><li><b style="color: red">只接受服务器响应数据，如果是中文会乱码</b></li></ul><h3 id="4-2-res-send"><a href="#4-2-res-send" class="headerlink" title="4.2 res.send()"></a>4.2 res.send()</h3><p>发送 HTTP 响应。</p><ul><li><b style="color: red">参数可以是 buffer 对象、字符串、对象、数组</b></li><li><b style="color: red">发送给服务端时，会自动发送更多的响应报文头，包括 Content-Type: text/html;charset=utf-8，所以中文不会乱码</b></li></ul><p><strong>res.send()发送对象响应</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>  &#125;);<br>&#125;);<br><br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:3000/&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/16/1IPGzkad7fSLpRb.png" alt="image-20220209213846401"></p><p><strong>改为用 res.end()发送</strong></p><p><img src="https://s2.loli.net/2022/02/09/GHvOkV5D68yld1i.png" alt="image-20220209214613515"></p><p><strong>res.send()发送中文</strong>(使用浏览器查看，postman 可能自动设置了响应头)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">res.send(<span class="hljs-string">&quot;测试&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/09/oeydE6RNjT58pX2.png" alt="image-20220209215019228"></p><p>**改为 res.edn()**：</p><p><img src="https://s2.loli.net/2022/02/09/tqXpfQwc3yFCPj2.png" alt="image-20220209215053732"></p><p>学习参考视频：</p><p><a href="https://www.bilibili.com/video/BV1mQ4y1C7Cn">Node.js 系列教程之 Express</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 按条件添加类</title>
      <link href="/2022/02/13/vue-addClass/"/>
      <url>/2022/02/13/vue-addClass/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-按条件添加类"><a href="#Vue-按条件添加类" class="headerlink" title="Vue 按条件添加类"></a>Vue 按条件添加类</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-card class=&quot;box-card&quot;&gt;<br>      &lt;div class=&quot;question&quot; ref=&quot;question&quot; v-for=&quot;(question, index) in questionList&quot; :key=&quot;question.id&quot;&gt;<br>        &lt;h4&gt;&#123;&#123;(index+1) +10*(currentPage-1)&#125;&#125;. &#123;&#123;question.ques&#125;&#125;&lt;/h4&gt;<br>        &lt;div v-for=&quot;option in question.options&quot; :key=&quot;option.id&quot; :class=&quot;[<br>                                                                    &#123;&#x27;choose&#x27;: true&#125;,<br>                                                                    &#123;&#x27;wrong&#x27;: option.value[0] === question.useranswer&#125;, <br>                                                                    &#123;&#x27;right&#x27;: option.value[0] === question.answer&#125;<br>                                                                  ]&quot;&gt;<br>          &lt;label&gt;<br>            &lt;span&gt;&#123;&#123;option.value&#125;&#125;&lt;/span&gt;<br>          &lt;/label&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;el-pagination background layout=&quot;prev, pager, next, jumper&quot; :total=&quot;total&quot; :page-size=&quot;pageLimit&quot; :hide-on-single-page=&quot;noPagination&quot; @current-change=&quot;currentChange&quot;&gt;<br>      &lt;/el-pagination&gt;<br>    &lt;/el-card&gt;<br></code></pre></td></tr></table></figure><p>项目中直接抽出来的(人菜勿喷)</p><p><strong>关键</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div :class=&quot;[&#123; red: true &#125;, &#123; blue: false &#125;]&quot;&gt;红色&lt;/div&gt;<br><br>&lt;div :class=&quot;[&#123; red: false &#125;, &#123; blue: true &#125;]&quot;&gt;蓝色&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><strong>css</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.red</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-selector-class">.blue</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/13/G1XUM8Z2fgPj3uV.png" alt="image-20220213191710083"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript笔记</title>
      <link href="/2022/02/09/yc-typescript/"/>
      <url>/2022/02/09/yc-typescript/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-笔记"><a href="#TypeScript-笔记" class="headerlink" title="TypeScript 笔记"></a>TypeScript 笔记</h1><p>参加字节跳动的青训营时写的笔记。这部分是林皇老师讲的课。(过年偷懒，项目爆肝后，重新整理笔记)</p><p><strong>个人博客</strong>(欢迎光临)：<a href="">TypeScript 笔记</a></p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><ul><li><strong>静态类型</strong><ul><li>可读性增强：基于语法解析 TS Doc，IDE 增强</li><li>可维护性增强：在编译阶段暴露大部分的错误(类型匹配错误、拼写错误等)</li></ul></li><li><strong>JS 的超集</strong><ul><li>包含兼容所有 JS 特性</li><li>支持渐进式引入和升级，支持与 JS 共存</li></ul></li></ul><p><img src="https://s2.loli.net/2022/01/24/Oq5kaANnRpWg4Pu.png" alt="image-20220124100758987"></p><p>动态类型：数据类型不是在编译阶段决定的，而是在运行阶段决定的</p><p>静态类型：数据类型是在编译期间或运行之前确定的，即编写代码时需要定义变量的类型。</p><p>强类型：变量指定了数据类型之后，如果不经过强制类型转换，那么该变量永远是这个数据类型</p><p>弱类型：数据类型可以被忽略，一个变量可以赋予不同数据类型的值。即如果给整型变量 a 赋值字符串，则 a 变成字符串类型。</p><p><a href="https://www.cnblogs.com/zy1987/p/3784753.html">更多</a></p><h2 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2. 基本语法"></a>2. 基本语法</h2><h3 id="2-1-基础数据类型"><a href="#2-1-基础数据类型" class="headerlink" title="2.1 基础数据类型"></a>2.1 基础数据类型</h3><p><strong>JS</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 字符串 */</span><br><span class="hljs-keyword">const</span> s = <span class="hljs-string">&quot;Hello&quot;</span>;<br><br><span class="hljs-comment">/* 数字 */</span><br><span class="hljs-keyword">const</span> num = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">/* 布尔值 */</span><br><span class="hljs-keyword">const</span> b = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">/* null */</span><br><span class="hljs-keyword">const</span> n = <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">/* undefined */</span><br><span class="hljs-keyword">const</span> u = <span class="hljs-literal">undefined</span>;<br></code></pre></td></tr></table></figure><p><strong>TS</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 字符串 */</span><br><span class="hljs-keyword">const</span> s: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;Hello&quot;</span>;<br><br><span class="hljs-comment">/* 数字 */</span><br><span class="hljs-keyword">const</span> num: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">/* 布尔值 */</span><br><span class="hljs-keyword">const</span> b: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">/* null */</span><br><span class="hljs-keyword">const</span> n: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">/* undefined */</span><br><span class="hljs-keyword">const</span> u: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span>;<br></code></pre></td></tr></table></figure><h3 id="2-2-对象类型"><a href="#2-2-对象类型" class="headerlink" title="2.2 对象类型"></a>2.2 对象类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> IPeople &#123;<br>  <span class="hljs-keyword">readonly</span> id: <span class="hljs-built_in">number</span>; <span class="hljs-comment">// 只读属性</span><br>  name: <span class="hljs-built_in">string</span>;<br>  sex: <span class="hljs-string">&quot;male&quot;</span> | <span class="hljs-string">&quot;female&quot;</span>;<br>  age: <span class="hljs-built_in">number</span>;<br>  hobby?: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 可选属性</span><br>  [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>; <span class="hljs-comment">// 对象可以有任意属性，键是字符串类型的，值是任意类型的</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/26/KXsNIl9v12ROkw5.png" alt="image-20220126130542691"></p><p><img src="https://s2.loli.net/2022/01/26/ABfOmuJXQi4IpCZ.png" alt="image-20220126130327610"></p><p><img src="https://s2.loli.net/2022/01/26/mqoEcT5Q3uKSWNv.png" alt="image-20220126130918252"></p><h3 id="2-3-函数类型"><a href="#2-3-函数类型" class="headerlink" title="2.3 函数类型"></a>2.3 函数类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 1 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-comment">/* 2 */</span><br><span class="hljs-keyword">const</span> add: <span class="hljs-function">(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x + y;<br><br><span class="hljs-comment">/* 3 */</span><br><span class="hljs-keyword">interface</span> IAdd &#123;<br>  (x: <span class="hljs-built_in">number</span>, <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">const</span> add: IAdd = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x + y;<br></code></pre></td></tr></table></figure><h4 id="2-3-1-函数重载"><a href="#2-3-1-函数重载" class="headerlink" title="2.3.1 函数重载"></a>2.3.1 函数重载</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDate</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>: <span class="hljs-string">&quot;string&quot;</span>, timestamp?: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">string</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDate</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>: <span class="hljs-string">&quot;date&quot;</span>, timestamp?: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">Date</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDate</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>: <span class="hljs-string">&quot;string&quot;</span> | <span class="hljs-string">&quot;date&quot;</span>, timestamp?: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">Date</span> | <span class="hljs-title">string</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(timestamp);<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">type</span> === <span class="hljs-string">&quot;string&quot;</span> ? date.toLocaleDateString() : date;<br>&#125;<br><br><span class="hljs-keyword">const</span> x = getDate(<span class="hljs-string">&quot;date&quot;</span>); <span class="hljs-comment">// x: Date</span><br><span class="hljs-keyword">const</span> y = getDate(<span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-string">&quot;2022-02-01&quot;</span>); <span class="hljs-comment">// y: string</span><br></code></pre></td></tr></table></figure><p>上面的函数的目的就是第一个参数是<code> date</code>时，返回 Date 对象；是<code> string</code>的话，则返回时间戳字符串。</p><p>没有上面两个定义函数的情况：</p><p><img src="https://s2.loli.net/2022/02/05/qxJn1BGjMik3lAL.png" alt="image-20220205182147044"></p><p><img src="https://s2.loli.net/2022/01/24/B8jeEh7nMd2alok.png" alt="image-20220124103048922"></p><h3 id="2-4-数组类型"><a href="#2-4-数组类型" class="headerlink" title="2.4 数组类型"></a>2.4 数组类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 1. 类型 + []表示</span><br><span class="hljs-keyword">type</span> IArr1 = <span class="hljs-built_in">number</span>[]; <span class="hljs-comment">// type关键字定义了IArr1的别名类型</span><br><br><span class="hljs-comment">// 2. 泛型表示</span><br><span class="hljs-keyword">type</span> IArr2 = <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> | Record&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>&gt;&gt;; <span class="hljs-comment">// Record：对象类型的简化写法</span><br><br><span class="hljs-comment">// 3. 元组表示</span><br><span class="hljs-keyword">type</span> IArr3 = [<span class="hljs-built_in">number</span>, <span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br><br><span class="hljs-comment">// 4. 接口表示</span><br><span class="hljs-keyword">interface</span> IArr4 &#123;<br>  [key: <span class="hljs-built_in">number</span>]: <span class="hljs-built_in">any</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> arr1: IArr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">const</span> arr2: IArr2 = [<span class="hljs-number">1</span>, <span class="hljs-string">&quot;hello&quot;</span>, &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;];<br><span class="hljs-keyword">const</span> arr3: IArr3 = [<span class="hljs-number">1</span>, <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">1</span>];<br><span class="hljs-keyword">const</span> arr4: IArr4 = [<span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-literal">null</span>, []];<br></code></pre></td></tr></table></figure><h3 id="2-5-泛型"><a href="#2-5-泛型" class="headerlink" title="2.5 泛型"></a>2.5 泛型</h3><p>泛型：不提前指定具体类型，而是在使用时才指定类型</p><h4 id="2-5-1-泛型函数"><a href="#2-5-1-泛型函数" class="headerlink" title="2.5.1 泛型函数"></a>2.5.1 泛型函数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> IGetArr = &lt;T&gt;<span class="hljs-function">(<span class="hljs-params">target: T</span>) =&gt;</span> T[];<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRepeatArr</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">10</span>).fill(target);<br>&#125;<br><br><span class="hljs-keyword">type</span> IGetArr = &lt;T&gt;<span class="hljs-function">(<span class="hljs-params">target: T</span>) =&gt;</span> T[];<br><br><span class="hljs-keyword">const</span> GetArr: IGetArr = getRepeatArr;<br><br><span class="hljs-keyword">const</span> stringArr = GetArr(<span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-keyword">const</span> numArr = GetArr(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/05/BcdV7AfF6yPEuk4.png" alt="image-20220205215955096"></p><h4 id="2-5-2-泛型接口"><a href="#2-5-2-泛型接口" class="headerlink" title="2.5.2 泛型接口"></a>2.5.2 泛型接口</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> IX&lt;T, U&gt; &#123;<br>  <span class="hljs-attr">key</span>: T;<br>  val: U;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-5-3-泛型类"><a href="#2-5-3-泛型类" class="headerlink" title="2.5.3 泛型类"></a>2.5.3 泛型类</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IX</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>  <span class="hljs-attr">key</span>: T;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-5-4-泛型别名"><a href="#2-5-4-泛型别名" class="headerlink" title="2.5.4 泛型别名"></a>2.5.4 泛型别名</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> ITypeArr&lt;T&gt; = <span class="hljs-built_in">Array</span>&lt;T&gt;;<br></code></pre></td></tr></table></figure><h4 id="2-5-5-泛型约束"><a href="#2-5-5-泛型约束" class="headerlink" title="2.5.5 泛型约束"></a>2.5.5 泛型约束</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> IGetRepeatStringArr = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">T</span> <span class="hljs-attr">extends</span> <span class="hljs-attr">string</span>&gt;</span>(target: T) =&gt; T[]; // 限制泛型必须符合字符串(demo，实际上使用应该不会只限制成字符串这种)</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/05/Q5FSaX9o2qbGyON.png" alt="image-20220205220434379"></p><h4 id="2-5-6-泛型参数默认"><a href="#2-5-6-泛型参数默认" class="headerlink" title="2.5.6 泛型参数默认"></a>2.5.6 泛型参数默认</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> IGetRepeatArr&lt;T = <span class="hljs-built_in">number</span>&gt; = <span class="hljs-function">(<span class="hljs-params">target: T</span>) =&gt;</span> T[];<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/05/7vglhHGkBdNxfyV.png" alt="image-20220205220835362"></p><h3 id="2-6-其他类型"><a href="#2-6-其他类型" class="headerlink" title="2.6 其他类型"></a>2.6 其他类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 空类型，表示勿赋值</span><br><span class="hljs-keyword">type</span> IEmptyFunction = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;<br><br><span class="hljs-comment">// 任意类型，是所有类型的子类型</span><br><span class="hljs-keyword">type</span> IAnyArr = <span class="hljs-built_in">any</span>;<br><br><span class="hljs-comment">// 枚举类型：支持枚举值到枚举名的正反映射</span><br><span class="hljs-built_in">enum</span> EnumExample &#123;<br>  add = <span class="hljs-string">&quot;+&quot;</span>,<br>  mul = <span class="hljs-string">&quot;*&quot;</span>,<br>&#125;<br><br>EnumExample[<span class="hljs-string">&quot;add&quot;</span>] === <span class="hljs-string">&quot;+&quot;</span>;<br>EnumExample[<span class="hljs-string">&quot;+&quot;</span>] === <span class="hljs-string">&quot;add&quot;</span>;<br><br><span class="hljs-comment">// 指定固定值</span><br><span class="hljs-keyword">type</span> IOddNum = <span class="hljs-number">1</span> | <span class="hljs-number">3</span> | <span class="hljs-number">5</span> | <span class="hljs-number">7</span> | <span class="hljs-number">9</span>; <span class="hljs-comment">// IOddNum必须是1、3、5、7、9中的数</span><br></code></pre></td></tr></table></figure><h2 id="3-高级类型"><a href="#3-高级类型" class="headerlink" title="3. 高级类型"></a>3. 高级类型</h2><h3 id="3-1-联合-交叉类型"><a href="#3-1-联合-交叉类型" class="headerlink" title="3.1 联合/交叉类型"></a>3.1 联合/交叉类型</h3><p>首先，假设一个情景，你有收藏书籍的兴趣，但是只收藏历史书和故事书，而且历史书需要记录历史范围，而故事书则是需要记录主题。</p><p><img src="https://s2.loli.net/2022/02/06/Sq3fNnFa1KeyHE9.png" alt="image-20220206164054320"></p><p>为书籍列表编写类型(如下图所示)：可以发现类型声明繁琐，存在较多变量</p><p><img src="https://s2.loli.net/2022/02/06/2cCJBaNAyW4Kbfq.png" alt="image-20220206164140324"></p><p><b style="color: red">通过联合/交叉类型可以实现优化</b></p><ul><li><strong>联合类型</strong>：IA | IB，表示一个值可以是 IA 类型或 IB 类型</li><li><strong>交叉类型</strong>：IA &amp; IB，多种类型叠加成一种类型，包含了所需的所有类型的特性</li></ul><p>优化后：</p><p><img src="https://s2.loli.net/2022/02/06/7PMQzpVkjwORFhn.png" alt="image-20220206164516232"></p><h3 id="3-2-类型保护和类型守卫"><a href="#3-2-类型保护和类型守卫" class="headerlink" title="3.2 类型保护和类型守卫"></a>3.2 类型保护和类型守卫</h3><h4 id="3-2-1-类型保护"><a href="#3-2-1-类型保护" class="headerlink" title="3.2.1 类型保护"></a>3.2.1 类型保护</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reverse</span>(<span class="hljs-params">target: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">any</span>&gt;</span>) </span>&#123;<br>  <span class="hljs-comment">// 作用：把字符串或数组反转</span><br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    <span class="hljs-comment">// typeof类型保护</span><br>    <span class="hljs-keyword">return</span> target.split(<span class="hljs-string">&quot;&quot;</span>).reverse().join(<span class="hljs-string">&quot;&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (target <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) &#123;<br>    <span class="hljs-comment">// instance类型保护(只考虑字符串和数组两种情况)</span><br>    <span class="hljs-keyword">return</span> terget.reverse();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>联合/交叉类型中的书籍只有历史和故事两种类型，所以可以实现自动类型推断</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logBook</span>(<span class="hljs-params">book: IBookList</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (book.type === <span class="hljs-string">&quot;history&quot;</span>) &#123;<br>    <span class="hljs-comment">// 联合类型 + 类型保护 = 自动类型推断</span><br>    <span class="hljs-built_in">console</span>.log(book.range);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(book.theme);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-2-类型守卫"><a href="#3-2-2-类型守卫" class="headerlink" title="3.2.2 类型守卫"></a>3.2.2 类型守卫</h4><p><b style="color: red">访问联合类型时，仅能访问联合类型中的交集部分。</b>所以下面的例子会报错</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> IA &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>;<br>  a1: <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> IB &#123;<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>;<br>  b1: <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params">arg: IA | IB</span>) </span>&#123;<br>  <span class="hljs-comment">// 报错，因为类型IA | IB上不存在属性a、a1、b、b1。访问联合类型时，仅能访问联合类型中的交集部分。</span><br>  <span class="hljs-keyword">if</span> (arg.a) &#123;<br>    <span class="hljs-built_in">console</span>.log(arg.a1);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(arg.b1);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过类型守卫则可以解决问题。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> IA &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>;<br>  a1: <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> IB &#123;<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>;<br>  b1: <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">// 类型守卫：定义一个函数，返回值是一个类型谓词</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getIsIA</span>(<span class="hljs-params">arg: IA | IB</span>): <span class="hljs-title">arg</span> <span class="hljs-title">is</span> <span class="hljs-title">IA</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> !!(arg <span class="hljs-keyword">as</span> IA).a; <span class="hljs-comment">// as是类型断言的语法。(arg as IA).a表示存在a，则一定是IA。</span><br>  <span class="hljs-comment">// !!是用于转换成为boolen类型</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params">arg: IA | IB</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (getIsIA(arg)) &#123;<br>    <span class="hljs-built_in">console</span>.log(arg.a1);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(arg.b1);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web多媒体笔记</title>
      <link href="/2022/02/09/yc-multi-media/"/>
      <url>/2022/02/09/yc-multi-media/</url>
      
        <content type="html"><![CDATA[<h1 id="Web-多媒体笔记"><a href="#Web-多媒体笔记" class="headerlink" title="Web 多媒体笔记"></a>Web 多媒体笔记</h1><p>参加字节跳动的青训营时写的笔记。这部分是刘立国老师讲的课。</p><h2 id="1-前置知识"><a href="#1-前置知识" class="headerlink" title="1. 前置知识"></a>1. 前置知识</h2><h3 id="1-1-图像基本概念"><a href="#1-1-图像基本概念" class="headerlink" title="1.1 图像基本概念"></a>1.1 图像基本概念</h3><p><strong>图像分辨率</strong>：图像的像素数据，指在水平和垂直方向上图像所具有的像素个数</p><p><strong>图像深度</strong>：指存储每个像素所需要的比特数。图像深度决定了图像的每个像素可能的颜色数，或可能的灰度数(单色图像)。例如彩色图像每个像素用 R, G, B 三个分量来表示，每个分量用 8 为所以像素深度是 24 位，可以表示的颜色数目是 2^24。单色图像每个像素需要 8 位，则图像的像素深度是 8 位，灰度数目为 2^8。</p><p><strong>图像的大小不仅要看图像的分辨率，还要看图像深度</strong></p><h3 id="1-2-视频基本概念"><a href="#1-2-视频基本概念" class="headerlink" title="1.2 视频基本概念"></a>1.2 视频基本概念</h3><p><strong>分辨率</strong>：每一帧的图像分辨率</p><p><strong>帧率</strong>：视频单位时间内包含的视频帧的数量</p><p><strong>码率</strong>：视频单位时间内传输的数据量，一般用 kbps(千位每秒)表示。</p><p><strong>视频的大小不仅要看图像的分辨率，还要看码率</strong></p><h2 id="2-编码"><a href="#2-编码" class="headerlink" title="2. 编码"></a>2. 编码</h2><h3 id="2-1-为什么需要编码"><a href="#2-1-为什么需要编码" class="headerlink" title="2.1 为什么需要编码"></a>2.1 为什么需要编码</h3><p><strong>如果不编码</strong>：</p><p>假设一部电影的每一帧的分辨率都是 1920 × 1080。</p><p>那么每一帧的大小为 1920 _ 1080 _ 24 / 8 = 6220800 byte = 5.9M (24 就是上面的图像像素深度)</p><p>假设帧率为 30FPS，时长为 90 分钟，那么这部电影大小就是 5.9 _ 30 _ 60 * 90 = 933G(我的电脑竟一部电影都下不了)</p><h3 id="2-2-DTS-和-PTS"><a href="#2-2-DTS-和-PTS" class="headerlink" title="2.2 DTS 和 PTS"></a>2.2 DTS 和 PTS</h3><p><strong>DTS</strong>：解码时间戳，用来告诉播放器该在什么时候解码这一帧的数据</p><p><strong>PTS</strong>：显示时间戳，用来告诉播放器该在什么时候显示这一帧的数据。</p><p><strong>I 帧</strong>：帧内编码帧、关键帧，不需要参考其他帧。</p><p><strong>P 帧</strong>：前向预测编码帧。P 帧由它的<strong>前一 P 帧或 I 帧</strong>预测而来。</p><p><strong>B 帧</strong>：双向预测内插编码帧。B 帧由它的**前一帧以及后一帧预测而来。</p><p>实例：</p><p><img src="https://s2.loli.net/2022/01/26/OyhRCjGIPgB5Xz8.png" alt="image-20220126205313369"></p><p>首先，<b style="color: red">PTS 是 1、2、3、4、5、6</b></p><p>因为 P 帧需要由前一 P 帧或 I 帧预测而来，I 帧不需要参考其他帧。所以先解码第 1 帧，解码完第 1 帧后，第 2 帧的 P 帧才可以解码，依次类推。所以，<b style="color: red">DTS 是 1、2、3、4、5、6</b></p><p><img src="https://s2.loli.net/2022/02/09/2Xchkan9CtLxoAs.png" alt="image-20220126205857425"></p><p>首先，<b style="color: red">PTS 是 1、2、3、4、5、6</b></p><p>由上一个例子，依次解码第 1 帧、第 2 帧，想继续解码第 3 帧，发现第 3 帧是 B 帧，所以就去解码第 3 帧的后一帧(第 4 帧)，所以 DTS 的前面部份是 1、2、4、3。同理，解码第 5 帧又会先去解码第 6 帧。所以，<b style="color: red">DTS 是 1、2、4、3、6、5</b></p><h3 id="2-3-GOP"><a href="#2-3-GOP" class="headerlink" title="2.3 GOP"></a>2.3 GOP</h3><p>GOP(group of picture)：两个 I 帧之间的间隔</p><p><img src="https://s2.loli.net/2022/02/09/cJTMGYsK6gHxQRw.png" alt="image-20220126210639852"></p><p><strong>每个 group 的第一帧是 I 帧(关键帧)，每个 GOP 内的帧的解码不依赖于其他 GOP 的帧。</strong></p><p>GOP 一般 2 到 4s。首先，I 帧是帧内压缩，占用存储空间大。所以 I 帧不适宜过多。如果 I 帧太少，也不行。比如一共有 1000 帧，我需要解码第 500 帧，如果只有一个 I 帧，则要解码第 1 帧、第 2 帧…第 499 帧。(这个场景可能是用户点击进度条时)</p><h3 id="2-4-各种冗余"><a href="#2-4-各种冗余" class="headerlink" title="2.4 各种冗余"></a>2.4 各种冗余</h3><h4 id="2-4-1-空间冗余"><a href="#2-4-1-空间冗余" class="headerlink" title="2.4.1 空间冗余"></a>2.4.1 空间冗余</h4><p><img src="https://s2.loli.net/2022/01/26/yXjMlaoPzBJ4Q95.png" alt="image-20220126212737399"></p><p><b style="color: red">重复的只存储一次</b></p><h4 id="2-4-2-时间冗余"><a href="#2-4-2-时间冗余" class="headerlink" title="2.4.2 时间冗余"></a>2.4.2 时间冗余</h4><p><img src="https://s2.loli.net/2022/02/09/o1bQ2UROdHTaijE.png" alt="image-20220126212937820"></p><p><b style="color: red">只多存储有变化的</b></p><h4 id="2-4-3-编码冗余"><a href="#2-4-3-编码冗余" class="headerlink" title="2.4.3 编码冗余"></a>2.4.3 编码冗余</h4><p><img src="https://s2.loli.net/2022/01/26/VZ4dhGtQ6nrz9FD.png" alt="image-20220126213139572"></p><p><b style="color: red">不同像素值出现的概率不同，概率高的用的字节少，概率低的用的字节多</b>(霍夫曼编码)</p><p>上面的 demo：每一个像素值需要 24 位。上面例子，蓝色用 1 表示，白色用 0 表示。则只需要 2 位。</p><h4 id="2-4-4-视觉冗余"><a href="#2-4-4-视觉冗余" class="headerlink" title="2.4.4 视觉冗余"></a>2.4.4 视觉冗余</h4><p><img src="https://s2.loli.net/2022/02/09/2ki7t8WZadsrzq6.png" alt="image-20220126213341161"></p><p><b style="color: red">人的视觉系统对某些细节不敏感，所以可以把人眼看不到的部分去除掉。</b></p><h3 id="2-5-编码流程"><a href="#2-5-编码流程" class="headerlink" title="2.5 编码流程"></a>2.5 编码流程</h3><p><img src="https://s2.loli.net/2022/01/26/WDFAz7kehPiut34.png" alt="image-20220126213622028"></p><h3 id="2-6-编码格式"><a href="#2-6-编码格式" class="headerlink" title="2.6 编码格式"></a>2.6 编码格式</h3><p><img src="https://s2.loli.net/2022/01/26/1xE6IotejvUFGrp.png" alt="image-20220126213747091"></p><h2 id="3-封装"><a href="#3-封装" class="headerlink" title="3. 封装"></a>3. 封装</h2><p>封装格式的主要作用是把视频码流和音频码流按照一定的格式存储在一个文件中。(可能还有字幕信息)</p><p><img src="https://s2.loli.net/2022/01/26/ZoDWdyXTUgjA4LN.png" alt="image-20220126214123491"></p><h2 id="4-多媒体元素和扩展-API"><a href="#4-多媒体元素和扩展-API" class="headerlink" title="4. 多媒体元素和扩展 API"></a>4. 多媒体元素和扩展 API</h2><h3 id="4-1-video-和-audio"><a href="#4-1-video-和-audio" class="headerlink" title="4.1 video 和 audio"></a>4.1 video 和 audio</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getLength()&quot;</span>&gt;</span>获取视频长度<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">video</span></span><br><span class="hljs-tag">    <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/byted-player-videos/1.0.0/xgplayer-demo.mp4&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;540px&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">controls</span></span><br><span class="hljs-tag">    <span class="hljs-attr">muted</span></span><br><span class="hljs-tag">    <span class="hljs-attr">autoplay</span></span><br><span class="hljs-tag">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> v = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;video&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    v.playbackRate = <span class="hljs-string">&quot;1.5&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLength</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> length = <span class="hljs-built_in">Math</span>.floor(v.duration);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> minute = <span class="hljs-built_in">Math</span>.floor(length / <span class="hljs-number">60</span>);</span><br><span class="javascript">      <span class="hljs-keyword">let</span> second = length % <span class="hljs-number">60</span>;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">document</span>.getElementsByTagName(</span><br><span class="javascript">        <span class="hljs-string">&quot;p&quot;</span></span><br><span class="javascript">      )[<span class="hljs-number">0</span>].innerHTML = <span class="hljs-string">`视频长度为<span class="hljs-subst">$&#123;minute&#125;</span>分<span class="hljs-subst">$&#123;second&#125;</span>秒`</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/26/lwsW9KXdOIhrbLD.gif" alt="video"></p><p>除了上面的形式还可以用下面的 source 的形式，这样就可以添加多个不同格式的视频。当浏览器不支持时，可以换一个。</p><p><img src="https://s2.loli.net/2022/01/26/HqOh8E7wL6mzPlB.png" alt="image-20220126222501539"></p><p>audio 和 video 类似就不多说了。</p><p>属性、事件不多说了，链接奉上。<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video">MDN video</a>、<a href="https://www.runoob.com/tags/ref-av-dom.html">表格版</a></p><p><strong>缺陷</strong>：</p><ul><li>不支持直接播放 hls、flv 等视频格式</li><li>视频资源的请求和加载无法通过代码控制<ul><li>分段加载(节省流量)</li><li>清晰度无缝切换</li><li>精确预加载</li></ul></li></ul><h3 id="4-2-MSE"><a href="#4-2-MSE" class="headerlink" title="4.2 MSE"></a>4.2 MSE</h3><p>媒体源扩展 API(Media Source Extensions)</p><ul><li>无插件在 web 端播放流媒体</li><li>支持 hls、flv、mp4 等格式视频</li><li>可实现视频分段加载、清晰度无缝切换、自适应码率、精确加载</li></ul><h4 id="4-2-1-使用"><a href="#4-2-1-使用" class="headerlink" title="4.2.1 使用"></a>4.2.1 使用</h4><p><img src="https://s2.loli.net/2022/01/26/BA2k8ULI6xqh3DF.png" alt="image-20220126220350669"></p><h4 id="4-2-2-MSE-播放流程"><a href="#4-2-2-MSE-播放流程" class="headerlink" title="4.2.2 MSE 播放流程"></a>4.2.2 MSE 播放流程</h4><p><img src="https://s2.loli.net/2022/01/26/ayB9zSTvZtGdCm2.png" alt="image-20220126220416302"></p><h3 id="4-3-播放器播放流程"><a href="#4-3-播放器播放流程" class="headerlink" title="4.3 播放器播放流程"></a>4.3 播放器播放流程</h3><p><img src="https://s2.loli.net/2022/01/26/42flrz8tH3s1oZq.png" alt="image-20220126220523143"></p><h2 id="5-流媒体协议"><a href="#5-流媒体协议" class="headerlink" title="5. 流媒体协议"></a>5. 流媒体协议</h2><p><strong>流媒体</strong>是指将一连串数据压缩后，经过网络分段发送，即时传输以供观看音视频的一种技术。</p><p><strong>流媒体协议</strong>是一种标准化的传递方法，用于将视频分解为多个块，将其发送给视频播放器，播放器重新组合播放。</p><p>例子：HLS(HTTP Live Streaming)，是 Apple 公司提出的基于 HTTP 的媒体流传输协议，用于实时音视频流的传输。目前被广泛用于视频点播和直播领域。</p><p><img src="https://s2.loli.net/2022/01/26/q2ZkJcIUAhGHXBY.png" alt="image-20220126221619029"></p><h2 id="6-应用场景"><a href="#6-应用场景" class="headerlink" title="6. 应用场景"></a>6. 应用场景</h2><p><img src="https://s2.loli.net/2022/01/26/pwvlXYhBHb4zQxi.png" alt="image-20220126221925477"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营 </tag>
            
            <tag> Web多媒体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js笔记</title>
      <link href="/2022/02/09/yc-nodejs/"/>
      <url>/2022/02/09/yc-nodejs/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js-笔记"><a href="#Node-js-笔记" class="headerlink" title="Node.js 笔记"></a>Node.js 笔记</h1><p>参加字节跳动的青训营时写的笔记。这部分是欧阳亚东老师讲的课。</p><h2 id="1-应用场景"><a href="#1-应用场景" class="headerlink" title="1. 应用场景"></a>1. 应用场景</h2><ul><li>前端工程化</li><li>Web 服务端应用<ul><li>运行效率接近常见的编译语言</li><li>社区生态丰富、工具链成熟(npm，V8 inspector)</li><li>与前端结合的场景有优势(服务端渲染 SSR)</li></ul></li><li>Electron 跨端桌面应用<ul><li>商业应用：vscode, slack, discord</li><li>大型公司内的效率工具</li></ul></li></ul><h2 id="2-运行时结构"><a href="#2-运行时结构" class="headerlink" title="2. 运行时结构"></a>2. 运行时结构</h2><ul><li>V8：JavaScript Runtime，诊断调试工具(inspector)</li><li>libuv：eventloop(事件循环)，syscall(系统调用)</li></ul><h3 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h3><ul><li><p>异步 I/O：当 Node.js 执行 I/O 操作时，会在响应返回后恢复操作，而不需要阻塞线程(占用额外线程)。</p></li><li><p>单线程：</p><ul><li><p>JS 单线程</p><ul><li>实际：JS 线程+uv 线程池+V8 任务线程池+V8 inspector 线程</li></ul></li><li><p>worker_thread 可以单独起独立线程，每一个线程的模型没有太大变化</p></li><li><p>优点：不需要考虑多线程状态同步问题(不需要锁)，能够高效地利用系统资源</p></li><li><p>缺点：阻塞会产生更多的负面影响， 解决方法：多进程或多线程</p></li></ul></li><li><p>跨平台(大部分功能， api)：开发成本低(大部分情景不需要考虑跨平台问题)，学习成本低</p><ul><li>Node.js 跨平台 + JavaScript 无需编译环境 + Web 跨平台 + 诊断工具跨平台</li></ul></li></ul><h2 id="3-编写-Http-Server"><a href="#3-编写-Http-Server" class="headerlink" title="3. 编写 Http Server"></a>3. 编写 Http Server</h2><p><a href="https://13535944743.github.io/2021/11/18/node/">之前的笔记</a></p><h3 id="3-1-Hello"><a href="#3-1-Hello" class="headerlink" title="3.1 Hello"></a>3.1 Hello</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">8081</span>;<br><br><span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.end(<span class="hljs-string">&quot;Hello&quot;</span>);<br>&#125;);<br><br>server.listen(port, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Listen at <span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/09/NePcG1S2Io8QT5b.png" alt="image-20220120145018966"></p><h3 id="3-2-JSON-数据"><a href="#3-2-JSON-数据" class="headerlink" title="3.2 JSON 数据"></a>3.2 JSON 数据</h3><p>用户把 JSON 数据 POST 给服务器，服务器再把数据中的 msg 取出来，返回给用户</p><p><strong>服务器端</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><br><span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> bufs = [];<br>  req.on(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-function">(<span class="hljs-params">buf</span>) =&gt;</span> &#123;<br>    bufs.push(buf); <span class="hljs-comment">// 把数据收集起来</span><br>  &#125;);<br><br>  req.on(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> buf = Buffer.concat(bufs).toString(<span class="hljs-string">&quot;utf8&quot;</span>);<br>    <span class="hljs-keyword">let</span> msg = <span class="hljs-string">&quot;Hello&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> ret = <span class="hljs-built_in">JSON</span>.parse(buf); <span class="hljs-comment">// 转换成JSON对象</span><br>      msg = ret.msg;<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      <span class="hljs-comment">// 如果抛出异常的话，则msg是初始值Hello，无需处理异常</span><br>    &#125;<br><br>    <span class="hljs-keyword">const</span> responseJson = &#123;<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">`receive: <span class="hljs-subst">$&#123;msg&#125;</span>`</span>,<br>    &#125;;<br>    res.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br>    res.end(<span class="hljs-built_in">JSON</span>.stringify(responseJson)); <span class="hljs-comment">// JSON对象转换为字符串</span><br>  &#125;);<br>&#125;);<br><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">8081</span>;<br><br>server.listen(port, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Listen at <span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>客户端</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><br><span class="hljs-keyword">const</span> body = <span class="hljs-built_in">JSON</span>.stringify(&#123;<br>  <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Hello from client&quot;</span>,<br>&#125;);<br><br><span class="hljs-keyword">const</span> req = http.request(<br>  <span class="hljs-string">&quot;http:/127.0.0.1:8081&quot;</span>,<br>  &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> bufs = [];<br>    res.on(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-function">(<span class="hljs-params">buf</span>) =&gt;</span> &#123;<br>      bufs.push(buf);<br>    &#125;);<br><br>    res.on(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> buf = Buffer.concat(bufs);<br>      <span class="hljs-keyword">const</span> json = <span class="hljs-built_in">JSON</span>.parse(buf);<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;json msg is: &quot;</span>, json.msg);<br>    &#125;);<br>  &#125;<br>);<br><br>req.end(body);<br></code></pre></td></tr></table></figure><p>先打开服务器端，再打开客户端。(第一个文件为 json.js，第二个为 client.js。则先执行<code> node json.js</code>，再执行<code> node client.js</code>)</p><p>收到返回信息：</p><p><img src="https://s2.loli.net/2022/02/09/vVEG134JCUOFs5e.png" alt="image-20220120190645660"></p><h3 id="3-3-用-Promise-async-await-重写-3-2"><a href="#3-3-用-Promise-async-await-重写-3-2" class="headerlink" title="3.3 用 Promise + async await 重写 3.2"></a>3.3 用 Promise + async await 重写 3.2</h3><p>技巧：将 callback 转换成 promise</p><p>不是所有的回调函数都适合转换成 promise，而是只调用一次的回调函数才适合转换为 promise。即 createServer()不适合转换为 promise。</p><p>json.js 修改后(输出结果一样)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><br><span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>  <span class="hljs-comment">// 从客户端接收数据</span><br>  <span class="hljs-keyword">const</span> msg = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> bufs = [];<br><br>    req.on(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      reject(err);<br>    &#125;);<br><br>    req.on(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-function">(<span class="hljs-params">buf</span>) =&gt;</span> &#123;<br>      bufs.push(buf); <span class="hljs-comment">// 把数据收集起来</span><br>    &#125;);<br><br>    req.on(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> buf = Buffer.concat(bufs).toString(<span class="hljs-string">&quot;utf8&quot;</span>);<br>      <span class="hljs-keyword">let</span> msg = <span class="hljs-string">&quot;Hello&quot;</span>;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> ret = <span class="hljs-built_in">JSON</span>.parse(buf); <span class="hljs-comment">// 转换成JSON对象</span><br>        msg = ret.msg;<br>      &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-comment">// console.log(err);</span><br>      &#125;<br><br>      resolve(msg); <span class="hljs-comment">// 返回msg</span><br>    &#125;);<br>  &#125;);<br><br>  <span class="hljs-comment">// 响应</span><br>  <span class="hljs-keyword">const</span> responseJson = &#123;<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">`receive: <span class="hljs-subst">$&#123;msg&#125;</span>`</span>,<br>  &#125;;<br>  res.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br>  res.end(<span class="hljs-built_in">JSON</span>.stringify(responseJson));<br>&#125;);<br><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">8081</span>;<br><br>server.listen(port, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Listen at <span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="3-4-静态文件服务"><a href="#3-4-静态文件服务" class="headerlink" title="3.4 静态文件服务"></a>3.4 静态文件服务</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      alert(<span class="hljs-string">&quot;Hello&quot;</span>);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>static_server.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;url&quot;</span>);<br><br><span class="hljs-keyword">const</span> folderPath = path.join(__dirname, <span class="hljs-string">&quot;static&quot;</span>);<br><br><span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> info = url.parse(req.url);<br>  <span class="hljs-keyword">const</span> filePath = path.join(folderPath, info.path);<br><br>  <span class="hljs-keyword">const</span> filestream = fs.createReadStream(filePath);<br>  <span class="hljs-comment">// createReadStream好处: 减少占用内存空间</span><br><br>  filestream.pipe(res);<br>&#125;);<br><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">8081</span>;<br><br>server.listen(port, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Listen at <span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/26/1pfIKGNvWD38HjU.png" alt="image-20220120201216995"></p><p>执行<code> node static_server.js</code> 后，打开 <a href="http://localhost:8081/index.html">http://localhost:8081/index.html</a></p><p><img src="https://s2.loli.net/2022/02/09/OQagcVCHJFqjykA.png" alt="image-20220120201343572"></p><p>之后会报点小错，因为没有 ico 图标(忽视就好)</p><h3 id="3-5-React-SSR"><a href="#3-5-React-SSR" class="headerlink" title="3.5 React SSR"></a>3.5 React SSR</h3><p>SSR(server side rendering)：服务端渲染</p><ul><li>相对于传统 HTML 模板引擎：可以避免重复编写代码</li><li>相比于 SPA：首屏渲染更快，SEO 友好(SPA 应用需要加载完所有的 js 代码后，才可以给用户返回数据)</li></ul><p><b style="color: red">首先要先安装 react 相关的包</b>，<code> npm i react react-dom</code></p><p>下面就是通过 React SSR 实现显示 Hello 的代码(有一点不太明白，还是得等会用 ReactDOM、ReactDOMServer 模块)</p><p>ssr.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;react&quot;</span>);<br><span class="hljs-keyword">const</span> ReactDOMServer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;react-dom/server&quot;</span>);<br><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">&quot;div&quot;</span>, &#123;&#125;, props.children || <span class="hljs-string">&quot;Hello&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">8081</span>;<br><br><span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.end(<span class="hljs-string">`</span><br><span class="hljs-string">    &lt;!DOCTYPE html&gt;</span><br><span class="hljs-string">    &lt;html lang=&quot;en&quot;&gt;</span><br><span class="hljs-string">      &lt;head&gt;</span><br><span class="hljs-string">        &lt;title&gt;App&lt;/title&gt;</span><br><span class="hljs-string">      &lt;/head&gt;</span><br><span class="hljs-string">      &lt;body&gt;</span><br><span class="hljs-string">        <span class="hljs-subst">$&#123;ReactDOMServer.renderToString(React.createElement(App, &#123;&#125;, <span class="hljs-string">&quot;Hello&quot;</span>))&#125;</span></span><br><span class="hljs-string">      &lt;/body&gt;</span><br><span class="hljs-string">    &lt;/html&gt;</span><br><span class="hljs-string">  `</span>);<br>&#125;);<br><br>server.listen(port, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Listen at <span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="3-6-Debug"><a href="#3-6-Debug" class="headerlink" title="3.6 Debug"></a>3.6 Debug</h3><p>V8 Inspector：开箱即用、与前端开发已知、跨平台</p><p>场景：</p><ul><li>查看 console.log 内容</li><li>breakpoint</li><li>性能分析</li></ul><p>使用：</p><ol><li><p><code>node --inspect ssr.js</code></p></li><li><p>打开<a href="http://127.0.0.1:9229/json">http://127.0.0.1:9229/json</a></p></li><li><p>复制打开下图红框内容</p><p><img src="https://s2.loli.net/2022/01/26/iyUwYbxmZqzfe2L.png" alt="image-20220120204024901"></p></li><li><p>进入下图界面</p><p><img src="https://s2.loli.net/2022/01/26/LqloF6ZD1JUEBbm.png" alt="image-20220120204058030"></p><p>控制台显示连接上</p><p><img src="https://s2.loli.net/2022/01/26/THy9sv7ERPwlO3i.png" alt="image-20220120204152109"></p></li><li><p>对于阻塞的情况，可以使用 log point，相当于 console.log</p><p><img src="https://s2.loli.net/2022/02/09/oCiFzcSsamvT9u2.gif" alt="动画"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> 青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP笔记</title>
      <link href="/2022/02/09/yc-http/"/>
      <url>/2022/02/09/yc-http/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-笔记"><a href="#HTTP-笔记" class="headerlink" title="HTTP 笔记"></a>HTTP 笔记</h1><p>参加字节跳动的青训营时写的笔记。这部分是杨超男老师讲的课。</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><ul><li>超文本协议(Hyper Text Transfer Protocol)</li></ul><p><strong>特点</strong>：</p><ul><li>应用层协议，基于 TCP 协议</li><li>请求响应：遵循客户端-服务端模型，客户端打开一个连接发出请求，然后等待服务器响应</li><li>简单可扩展</li><li>无状态</li></ul><h2 id="2-发展"><a href="#2-发展" class="headerlink" title="2. 发展"></a>2. 发展</h2><p><img src="https://s2.loli.net/2022/01/26/KQnWyJSZYCeNHj6.png" alt="image-20220120171110994"></p><h2 id="3-请求方法"><a href="#3-请求方法" class="headerlink" title="3. 请求方法"></a>3. 请求方法</h2><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>GET</td><td>请求一个指定资源的表示形式，用于获取数据</td></tr><tr><td>POST</td><td>用于将实体提交到指定的资源。会导致在服务器上的状态变化或副作用</td></tr><tr><td>PUT</td><td>对服务器的数据进行修改。与 POST 方法的区别是 POST 方法侧重于数据的增加，而 PUT 方法侧重于数据的修改</td></tr><tr><td>DELETE</td><td>删除指定的资源</td></tr><tr><td>HEAD</td><td>类似 GET，不过没有响应体</td></tr><tr><td>CONNECT</td><td>建立一个由目标资源标识地服务器的隧道</td></tr><tr><td>OPTIONS</td><td>用于描述目标资源的通信选项(比如预请求允不允许跨域请求跨域请求)</td></tr><tr><td>TRACE</td><td>沿着到目标资源的路径执行一个消息环回测试，主要用于测试</td></tr><tr><td>PATCH</td><td>对资源应用部分修改</td></tr></tbody></table><ul><li><strong>安全</strong>：不会修改服务器的数据的方法<ul><li>GET</li><li>HEAD</li><li>OPTIONS</li></ul></li><li><strong>幂等</strong>：同样的请求被执行一次与连续执行多次的效果一样，服务器的状态也一样。所有安全的请求方法都是幂等的。<ul><li>GET</li><li>HEAD</li><li>OPTIONS</li><li>PUT</li><li>DELETE</li></ul></li></ul><h2 id="4-状态码"><a href="#4-状态码" class="headerlink" title="4. 状态码"></a>4. 状态码</h2><table><thead><tr><th>状态码</th><th>解释</th></tr></thead><tbody><tr><td>1xx</td><td>指示信息。表示请求已接收，继续处理</td></tr><tr><td>2xx</td><td>成功。表示请求已被成功接收、理解、接受</td></tr><tr><td>3xx</td><td>重定向。表示要完成请求必须进行更进一步的操作</td></tr><tr><td>4xx</td><td>客户端错误。表示请求有语法错误或请求无法实现</td></tr><tr><td>5xx</td><td>服务器错误。表示服务器处理请求时发生内部错误</td></tr></tbody></table><h2 id="5-报文"><a href="#5-报文" class="headerlink" title="5. 报文"></a>5. 报文</h2><p>示例：</p><p><img src="https://s2.loli.net/2022/01/26/8l2PKBJhsu1WFHw.png" alt="image-20220120171634175"></p><h3 id="5-1-请求报文"><a href="#5-1-请求报文" class="headerlink" title="5.1 请求报文"></a>5.1 请求报文</h3><ul><li><p>请求行：说明请求类型、要访问的资源以及 HTTP 版本</p></li><li><p>请求头：说明服务器要使用的信息，如 HOST 表示请求的主机名，User-Agent 表示</p><p>请求的浏览器类型等</p></li><li><p>空行：必须，即使请求数据为空，也必须要有空行。空行的作用是用来通知服务器</p><p>请求头已经结束，接下来是请求数据部分</p></li><li><p>请求数据：请求数据是在 POST 方法中使用，而不是在 GET 方法中使用，因为 GET 方法的请求数据在 URL 中。</p></li></ul><h3 id="5-2-响应报文"><a href="#5-2-响应报文" class="headerlink" title="5.2 响应报文"></a>5.2 响应报文</h3><ul><li>状态行：由 HTTP 协议版本号、状态码、状态消息三部分组成</li><li>响应头：说明客户端要使用的信息，如 Date 表示生成响应报文的日期和时间，Content-Type 表示返回的内容的内容类型以及编码类型</li><li>空行：必须，即使响应报文主体为空，也必须要有空行。空行的作用是用来通知客户端响应头已经结束，接下来是响应正文部分</li><li>响应正文：服务器返回给客户端的文本信息</li></ul><h3 id="5-3-常用请求头"><a href="#5-3-常用请求头" class="headerlink" title="5.3 常用请求头"></a>5.3 常用请求头</h3><p><img src="https://s2.loli.net/2022/01/26/x3WI6ziu9sjEfDL.png" alt="image-20220120180206746"></p><h3 id="5-4-常用响应头"><a href="#5-4-常用响应头" class="headerlink" title="5.4 常用响应头"></a>5.4 常用响应头</h3><p><img src="https://s2.loli.net/2022/01/26/uhtAFRbTDS7NfPj.png" alt="image-20220120180305049"></p><h3 id="5-5-缓存"><a href="#5-5-缓存" class="headerlink" title="5.5 缓存"></a>5.5 缓存</h3><ul><li>强缓存<ul><li>Expires</li><li>Cache-Control：可缓存性<ul><li>no-cache：协商缓存验证</li><li>no-store：不使用任何缓存</li></ul></li><li>max-age：到期。单位是秒，存储的最大周期</li><li>must-revalidate：重新验证、重新加载。一旦资源过期，在成功向原始服务器验证之前，不能使用</li></ul></li><li>协商缓存<ul><li>ETag/If-None-Match：资源特定版本的标识符</li><li>Last-Modified/If-Modified-Since：最后修改时间</li></ul></li></ul><p><img src="https://s2.loli.net/2022/01/26/O6QhbtIAUyZGSgF.png" alt="image-20220120210942019"></p><h3 id="5-6-Cookie"><a href="#5-6-Cookie" class="headerlink" title="5.6 Cookie"></a>5.6 Cookie</h3><p><img src="https://s2.loli.net/2022/02/09/P2iRQtWpNIvKHnm.png" alt="image-20220120210132326"></p><h2 id="6-发展"><a href="#6-发展" class="headerlink" title="6. 发展"></a>6. 发展</h2><h3 id="6-1-HTTP-2"><a href="#6-1-HTTP-2" class="headerlink" title="6.1 HTTP/2"></a>6.1 HTTP/2</h3><p>更快、更稳定、更简单</p><ul><li>HTTP/2 连接都是永久的，每个来源只需一个连接</li><li>流控制：阻止发送方向接收方发送大量数据的机制</li><li>服务器推送(可选)：收到 html 后，里面用到的 css、js 可以在客户端发送请求前主动推送给客户端(预判)</li></ul><h3 id="6-2-HTTPS"><a href="#6-2-HTTPS" class="headerlink" title="6.2 HTTPS"></a>6.2 HTTPS</h3><p>经过 TSL/SSL 加密</p><ul><li><p>HTTPS：默认端口 443</p></li><li><p>HTTP：默认端口 80</p></li></ul><h2 id="7-RESTful-API"><a href="#7-RESTful-API" class="headerlink" title="7. RESTful API"></a>7. RESTful API</h2><p><img src="https://s2.loli.net/2022/01/26/dmDTlY6ekp2zSb8.png" alt="image-20220120175816312"></p><h2 id="8-场景"><a href="#8-场景" class="headerlink" title="8. 场景"></a>8. 场景</h2><h3 id="8-1-跨域"><a href="#8-1-跨域" class="headerlink" title="8.1 跨域"></a>8.1 跨域</h3><ul><li><p>CORS：先发送预请求，查看服务器是否允许该跨域请求</p><p><img src="https://s2.loli.net/2022/02/09/Y8CP5pbhEsjAHVe.png" alt="image-20220120212928435"></p><p>相关协议头</p><p><img src="https://s2.loli.net/2022/02/09/sAx3WQuLvdfZYmF.png" alt="image-20220120213000877"></p></li><li><p>代理服务器：原理：同源策略是浏览器的安全策略，不是 HTTP 的</p><p><img src="https://s2.loli.net/2022/02/09/kBScIN2VF9dEYw1.png" alt="image-20220118155230783"></p></li></ul><h3 id="8-2-登录"><a href="#8-2-登录" class="headerlink" title="8.2 登录"></a>8.2 登录</h3><p><img src="https://s2.loli.net/2022/02/09/gJfaoPdqyle1zFN.png" alt="image-20220120212010182"></p><h2 id="9-优化"><a href="#9-优化" class="headerlink" title="9. 优化"></a>9. 优化</h2><p><img src="https://s2.loli.net/2022/02/09/Bg6Y7UZpezH3RV8.png" alt="image-20220120212241150"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营 </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack笔记</title>
      <link href="/2022/02/06/yc-webpack/"/>
      <url>/2022/02/06/yc-webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="Webpack-笔记"><a href="#Webpack-笔记" class="headerlink" title="Webpack 笔记"></a>Webpack 笔记</h1><p>参加字节跳动的青训营时写的笔记。这部分是范文杰老师讲的课。</p><p>插一嘴：范文杰老师的公众号<strong>Tecvan</strong>有很多干活，可以关注一下。(下面的部分有好多都有很有用的扩展链接，偷懒，就直接把老师的公众号贴出来)</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p><img src="https://s2.loli.net/2022/02/06/IkXns8yYKHgZrzp.png" alt="image-20220123215526028"></p><p>Webpack 本质上是一种前端资源编译、打包工具。</p><p>功能：</p><ul><li>多份资源文件打包成一个 Bundle</li><li>支持 Less、Babel、Eslint、TypeScript</li><li>支持模块化处理 css、图片等资源文件</li><li>支持 HMR(热更新)</li><li>支持 Tree-shaking</li><li>支持 SourceMap</li><li>,,,</li></ul><h2 id="2-使用-Webpack"><a href="#2-使用-Webpack" class="headerlink" title="2. 使用 Webpack"></a>2. 使用 Webpack</h2><h3 id="2-1-使用步骤"><a href="#2-1-使用步骤" class="headerlink" title="2.1 使用步骤"></a>2.1 使用步骤</h3><ol><li><p>安装，<code> npm install webpack webpack-cli -D</code></p></li><li><p>编辑配置文件(webpack.config.js)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;index.js&quot;</span>),<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>    <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>执行编译命令，<code> npx webpack</code></p></li></ol><h3 id="2-2-核心流程"><a href="#2-2-核心流程" class="headerlink" title="2.2 核心流程"></a>2.2 核心流程</h3><ol><li><strong>入口处理</strong>：从入口文件开始启动编译流程</li><li><strong>依赖解析</strong>：根据<code> require</code>或<code> import</code>等语句找到依赖资源</li><li><strong>资源解析</strong>：根据<code> module</code>配置，调用资源加载器，把 css、less、png 等非标准 JS 资源转译成 JS 内容(Webpack 只认识 JS)</li><li><strong>资源合并打包</strong>：将转译后的资源合并打包为可以直接在浏览器运行的 JS 文件，包括代码混淆、代码压缩等操作。</li></ol><p><b style="color: red">递归调用 2、3，直到所有资源处理完毕。因为依赖资源可能也会依赖其他资源。</b></p><h3 id="2-3-分类"><a href="#2-3-分类" class="headerlink" title="2.3 分类"></a>2.3 分类</h3><p>Webpack 的使用基本都围绕<strong>配置</strong>展开，而配置大致可分为两类：</p><ul><li><strong>流程类</strong>：作用于流程中，直接影响打包效果的配置项</li><li><strong>工具类</strong>：主流程之外，提供更多工程化能力的配置项</li></ul><p><img src="https://s2.loli.net/2022/02/06/bpg3fRc2SeoEBXz.png" alt="image-20220124174806526"></p><h3 id="2-4-练习"><a href="#2-4-练习" class="headerlink" title="2.4 练习"></a>2.4 练习</h3><h4 id="2-4-1-简单使用"><a href="#2-4-1-简单使用" class="headerlink" title="2.4.1 简单使用"></a>2.4.1 简单使用</h4><p><b style="color: red">模块在上一层。(为了不影响观感)</b></p><ol><li>编写代码</li></ol><p><img src="https://s2.loli.net/2022/02/06/6tYolBpqW85Niab.png" alt="image-20220124174656480"></p><ol start="2"><li><p>编辑 webpack 配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;index.js&quot;</span>),<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>    <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>执行<code> npx webpack</code></p><p><img src="https://s2.loli.net/2022/02/06/Vf2e5YPjGB6QHNc.png" alt="image-20220124175243382"></p></li></ol><h4 id="2-4-2-处理-CSS"><a href="#2-4-2-处理-CSS" class="headerlink" title="2.4.2 处理 CSS"></a>2.4.2 处理 CSS</h4><p><img src="https://s2.loli.net/2022/02/06/hdKWLnOr4SicsN7.png" alt="image-20220124180035396"></p><p>按 2.4.1 的步骤直接执行，会发现出错</p><p><img src="https://s2.loli.net/2022/02/06/qfrm5LzBx7YMtCD.png" alt="image-20220124180151225"></p><p><b style="color: red">原因：Webpack 只认识 JS，所以需要使用 Loader 将对应非 JS 资源转译成 JS</b></p><ol><li><p>安装 Loader</p><p><code> npm install css-loader style-loader -D</code></p></li><li><p>添加<code> module</code>，使用 Loader 处理 CSS 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;index.js&quot;</span>),<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>    <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>执行<code> npx webpack</code>，成功</p><p><img src="https://s2.loli.net/2022/02/06/k2VSJy5rPZ8jpYA.png" alt="image-20220124180951673"></p></li></ol><h4 id="2-4-3-使用-Babel"><a href="#2-4-3-使用-Babel" class="headerlink" title="2.4.3 使用 Babel"></a>2.4.3 使用 Babel</h4><p>Babel 用于将使用 ES6 语法编写的 JS 代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。</p><ol><li><p>安装依赖。</p><p><code> npm install @babel/core @babel/preset-env babel-loader</code></p></li><li><p>配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;index.js&quot;</span>),<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>    <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        use: [<br>          &#123;<br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>            <span class="hljs-attr">options</span>: &#123;<br>              <span class="hljs-attr">presets</span>: [[<span class="hljs-string">&quot;@babel/preset-env&quot;</span>]],<br>            &#125;,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><code> npx webpack</code></p><p><strong>源代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> add = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b;<br></code></pre></td></tr></table></figure><p><strong>转换后的</strong>：</p><p><img src="https://s2.loli.net/2022/02/06/H3SOZeTbsQWc1af.png" alt="image-20220124191225084"></p></li></ol><h4 id="2-4-4-生成-HTML"><a href="#2-4-4-生成-HTML" class="headerlink" title="2.4.4 生成 HTML"></a>2.4.4 生成 HTML</h4><ol><li><p>安装依赖</p><p><code> npm install html-webpack-plugin -D</code></p></li><li><p>配置。因为这个不是 loader，而是 plugin(插件)，所以配置需要引入插件，然后在<code> plugins</code>中实例化插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;index.js&quot;</span>),<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>    <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> HtmlWebpackPlugin()],<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><code>npx webpack</code></p><p><img src="https://s2.loli.net/2022/02/06/dI1ilLcGVvgxU2k.png" alt="image-20220124192212302"></p></li></ol><h4 id="2-4-5-HMR-热更新"><a href="#2-4-5-HMR-热更新" class="headerlink" title="2.4.5 HMR(热更新)"></a>2.4.5 HMR(热更新)</h4><p>热更新简单来说就是可以在应用运行的时候,不需要刷新页面,就可以实时查看到修改的效果</p><ol><li><p>安装依赖</p><p><code> npm install webpack-dev-server -D</code></p></li><li><p>开启 HMR</p></li></ol><p><img src="https://s2.loli.net/2022/02/06/YUXrOxTcFPyupEk.png" alt="image-20220124193400240"></p><ol start="3"><li>启动 Webpack</li></ol><p><code> npx webpack serve</code></p><p><img src="https://s2.loli.net/2022/02/06/uIROe6HBP1vUSVa.gif" alt="动画"></p><p><img src="https://s2.loli.net/2022/02/06/lsMdryi2bhXZnI6.png" alt="image-20220124194101445"></p><h4 id="2-4-6-Tree-Shaking"><a href="#2-4-6-Tree-Shaking" class="headerlink" title="2.4.6 Tree-Shaking"></a>2.4.6 Tree-Shaking</h4><p><strong>Tree-shaking</strong>：树摇，用于删除 Dead Code</p><p>Dead Code：</p><ul><li>代码没有被用到</li><li>代码只读不写</li></ul><p>Dead Code 例子：</p><p><img src="https://s2.loli.net/2022/02/06/ngbMeHsGUJpLSBQ.png" alt="image-20220124232306850"></p><p>没有使用 Tree-Shaking 时：</p><p><img src="https://s2.loli.net/2022/02/06/YHcrp6QUniOGWo3.png" alt="image-20220124232435821"></p><p>修改配置文件，开启 Tree-Shaking：</p><p><img src="https://s2.loli.net/2022/02/06/cCYBrLUlqyxI7fk.png" alt="image-20220124233227128"></p><p>结果：</p><p><img src="https://s2.loli.net/2022/02/06/XBPMrJuknAVjYFD.png" alt="image-20220124233301693"></p><h3 id="2-5-更多功能"><a href="#2-5-更多功能" class="headerlink" title="2.5 更多功能"></a>2.5 更多功能</h3><ul><li>缓存</li><li>Sourcemap</li><li>性能监控</li><li>日志</li><li>代码压缩</li><li>分包</li></ul><h2 id="3-Loader"><a href="#3-Loader" class="headerlink" title="3. Loader"></a>3. Loader</h2><p>作用：<strong>将资源转译成标准 JS</strong>。(因为 Webpack 只认识 JS)</p><h3 id="3-1-Loader-使用示例"><a href="#3-1-Loader-使用示例" class="headerlink" title="3.1 Loader 使用示例"></a>3.1 Loader 使用示例</h3><p>使用 Loader(处理 less)：</p><ol><li><p>安装 Loader</p><p><code> npm install style-loader css-loader less-loader -D</code></p></li><li><p>添加<code> module</code>处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;index.js&quot;</span>),<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>    <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>        use: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;less-loader&quot;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol><p>分析：</p><ul><li>less-loader：实现 less -&gt; css 的转换</li><li>css-loader：将 css 转换成 module.eports = “${css}”的形式，符合 JS 的语法(直截了当来说的话，就是把 css 用 js 表示)</li><li>style-loader：将 css 模块包进 require 语句，并在运行时调用 injectStyle 等函数<b style="color: red">将内容注入到页面的 style 标签</b></li></ul><h3 id="3-2-Loader-其他特性"><a href="#3-2-Loader-其他特性" class="headerlink" title="3.2 Loader 其他特性"></a>3.2 Loader 其他特性</h3><p><img src="https://s2.loli.net/2022/02/06/Vh7MUkZBvEDjNwT.png" alt="image-20220124235232348"></p><ul><li><strong>链式执行</strong>(过程的输出刚好是下一个过程的输入)</li><li><strong>支持异步执行</strong></li><li>分 normal、pitch 两种模式(<b style="color: red">这部分没有什么概念</b>)</li></ul><h3 id="3-3-编写简单-Loader"><a href="#3-3-编写简单-Loader" class="headerlink" title="3.3 编写简单 Loader"></a>3.3 编写简单 Loader</h3><h4 id="3-3-1-Loader-形式"><a href="#3-3-1-Loader-形式" class="headerlink" title="3.3.1 Loader 形式"></a>3.3.1 Loader 形式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">source, sourceMap?, data?</span>) </span>&#123;<br>  <span class="hljs-comment">// ?代表参数可有可无</span><br>  <span class="hljs-comment">// source是loader的输入。可能是文件内容或上一个loader处理的结果</span><br><br>  <span class="hljs-comment">// ......</span><br><br>  <span class="hljs-keyword">return</span> source; <span class="hljs-comment">// 此时的source是指经loader处理后的source(不处理则是原来的source，如eslint-loader)</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="3-3-2-开始动手"><a href="#3-3-2-开始动手" class="headerlink" title="3.3.2 开始动手"></a>3.3.2 开始动手</h4><p><strong>目录结构</strong></p><p><img src="https://s2.loli.net/2022/02/06/ekhqvYgz78Topy1.png" alt="image-20220125154719915"></p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> t1 = <span class="hljs-string">&quot;Hello&quot;</span>;<br></code></pre></td></tr></table></figure><p><strong>自编简单 loader</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">source</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(source);<br>  source += <span class="hljs-string">` let t2 = &#x27; World&#x27;;</span><br><span class="hljs-string">              console.log(t1 + t2);`</span>;<br>  <span class="hljs-keyword">return</span> source;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>配置文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;index.js&quot;</span>),<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;production&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>    <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        use: path.join(__dirname, <span class="hljs-string">&quot;loader&quot;</span>, <span class="hljs-string">&quot;myloader.js&quot;</span>),<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/06/rzc7MKgAXqlEebV.png" alt="image-20220125154908116"></p><p><img src="https://s2.loli.net/2022/02/06/HLW1AXUMh3u9QNI.png" alt="image-20220125154931895"></p><h3 id="3-4-常见-Loader"><a href="#3-4-常见-Loader" class="headerlink" title="3.4 常见 Loader"></a>3.4 常见 Loader</h3><p><img src="https://s2.loli.net/2022/01/25/s2kMWbN3cOEwtrf.png" alt="image-20220125155015086"></p><h2 id="4-Plugin-插件"><a href="#4-Plugin-插件" class="headerlink" title="4. Plugin(插件)"></a>4. Plugin(插件)</h2><p>使用如 2.4.4 所示</p><p>写插件，暂时无能为力，先把课件上的干货放出来(方便以后查看)</p><p><img src="https://s2.loli.net/2022/01/25/v9gXo8siF7eDmct.png" alt="image-20220125155439723"></p><p><img src="https://s2.loli.net/2022/01/25/xMPJvrSybXOgkBz.png" alt="image-20220125155456498"></p><h2 id="5-更多"><a href="#5-更多" class="headerlink" title="5. 更多"></a>5. 更多</h2><p>在老师的公众号可能没有的(老师分享的)</p><p><a href="https://github.com/Tecvan-fe/awesome-webpack-4plus">Awesome Webpack4+ 优秀学习资源</a></p><p><a href="https://webpack.wuhaolin.cn/">深入浅出 Webpack</a></p><p><a href="https://gitmind.cn/app/doc/fac1c196e29b8f9052239f16cff7d4c7">Webpack 5 知识体系</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
            <tag> 青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web开发安全</title>
      <link href="/2022/02/06/yc-web-security/"/>
      <url>/2022/02/06/yc-web-security/</url>
      
        <content type="html"><![CDATA[<h1 id="Web-开发安全"><a href="#Web-开发安全" class="headerlink" title="Web 开发安全"></a>Web 开发安全</h1><p>参加字节跳动的青训营时写的笔记。这部分是刘宇晨老师讲的课。</p><h2 id="1-攻击"><a href="#1-攻击" class="headerlink" title="1. 攻击"></a>1. 攻击</h2><h3 id="1-1-跨站脚本攻击-XSS"><a href="#1-1-跨站脚本攻击-XSS" class="headerlink" title="1.1 跨站脚本攻击(XSS)"></a>1.1 跨站脚本攻击(XSS)</h3><p>XSS 攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。</p><p>如填写表单信息时，如果盲目相信用户的提交内容，那么假如用户填写了类似<code> &lt;script&gt;alert(&quot;注入恶意代码&quot;)&lt;/script&gt;</code>的信息，然后直接通过 element.innerHTML 把用户提交的代码存起来的话，那么工具者就可以实现攻击了。</p><p>比较巧妙的攻击方式：</p><p><img src="https://s2.loli.net/2022/02/06/pB7uNcWPvFAMtG9.png" alt="image-20220127180108501"></p><p><strong>XSS 特点</strong>：</p><ul><li>通常难以从 UI 上发现，因为是在暗地里执行脚本</li><li>可以窃取用户信息(cookie、token)</li><li>还可以绘制 UI(如弹窗)，诱骗用户点击</li></ul><p>demo：</p><p><img src="https://s2.loli.net/2022/02/06/KBule7Yj8ypvJXN.png" alt="image-20220127173357726"></p><h4 id="1-1-1-Stored-XSS"><a href="#1-1-1-Stored-XSS" class="headerlink" title="1.1.1 Stored XSS"></a>1.1.1 Stored XSS</h4><p>把恶意脚本存储在被攻击网站的数据库中。当其他人访问页面时，回去读数据，然后就会执行到数据库中的恶意脚本，从而被攻击。<b style="color: red">危害最大，对全部用户可见</b></p><h4 id="1-1-2-Reflected-XSS"><a href="#1-1-2-Reflected-XSS" class="headerlink" title="1.1.2 Reflected XSS"></a>1.1.2 Reflected XSS</h4><ul><li>不涉及数据库</li><li>从 URL 上进行攻击</li></ul><p><img src="https://s2.loli.net/2022/02/06/P9ufYFds2biRKwS.png" alt="image-20220127174047613"></p><h4 id="1-1-3-DOM-based-XSS"><a href="#1-1-3-DOM-based-XSS" class="headerlink" title="1.1.3 DOM-based XSS"></a>1.1.3 DOM-based XSS</h4><ul><li>不需要服务器的参与</li><li>恶意攻击的发起、执行，都在浏览器完成</li></ul><p><img src="https://s2.loli.net/2022/02/06/5agcRdhjMuPqxD1.png" alt="image-20220127174625118"></p><p><b style="color: red">和 Reflected XSS 很像，不过，Reflected XSS 的恶意脚本是注入到服务器中，而 DOM-based XSS 的恶意脚本是注入到浏览器中，而且攻击不需要服务器的参与</b></p><h4 id="1-1-4-Mutation-based-XSS"><a href="#1-1-4-Mutation-based-XSS" class="headerlink" title="1.1.4 Mutation-based XSS"></a>1.1.4 Mutation-based XSS</h4><ul><li>利用浏览器渲染 DOM 的特性(独特优化)</li><li>按浏览器进行攻击</li></ul><h3 id="2-跨站伪造请求-CSRF"><a href="#2-跨站伪造请求-CSRF" class="headerlink" title="2. 跨站伪造请求 CSRF"></a>2. 跨站伪造请求 CSRF</h3><p><strong>CSRF 攻击</strong>：在用户不知情的前提下，利用用户权限(cookie)，构造 HTTP 请求，窃取或修改用户敏感信息。</p><p><img src="https://s2.loli.net/2022/02/06/L35BGtUMJaleTpj.png" alt="image-20220127180459599"></p><p>经典例子：银行转账</p><p>首先，a 为了转账给 b10000 元，于是 a 登录银行页面进行转账操作, <b style="color: red">还没有推出登录</b>，又收到中奖通知链接(假的或者是只有小额鱼饵)，a 点击链接，并点击领奖按钮。然后发现钱被转走了 100000 元了。</p><p>CSRF 攻击原理：利用<b style="Color: red">cookie 的自动携带特性</b>，在其他网站向你的网站发送请求时，如果网站中的用户没有退出登录，而发送的请求又是一些敏感的操作请求(如转账)，则会给用户带来巨大的损失。</p><h3 id="3-注入攻击-injection"><a href="#3-注入攻击-injection" class="headerlink" title="3. 注入攻击 injection"></a>3. 注入攻击 injection</h3><h4 id="3-1-SQL-注入"><a href="#3-1-SQL-注入" class="headerlink" title="3.1 SQL 注入"></a>3.1 SQL 注入</h4><p><img src="https://s2.loli.net/2022/02/06/b3rvj1keGdLSUs7.png" alt="image-20220127202310672"></p><p>demo</p><p><img src="https://s2.loli.net/2022/02/06/MZgyfvjwKi4d3C7.png" alt="image-20220127202606829"></p><h3 id="4-Dos"><a href="#4-Dos" class="headerlink" title="4. Dos"></a>4. Dos</h3><p>通过某种方式(构造特定请求)，导致服务器资源被显著消耗，来不及响应更多请求，导致请求挤压，进而引起雪崩效应。</p><h3 id="4-1-ReDoS"><a href="#4-1-ReDoS" class="headerlink" title="4.1 ReDoS"></a>4.1 ReDoS</h3><p>例子：上网找到了讲的非常好的文章</p><p><a href="https://blog.csdn.net/systemino/article/details/89913551">正则表达式所引发的 DoS 攻击(ReDoS)</a></p><h3 id="4-2-Distributed-DOS-DDoS"><a href="#4-2-Distributed-DOS-DDoS" class="headerlink" title="4.2 Distributed DOS(DDoS)"></a>4.2 Distributed DOS(DDoS)</h3><p>短时间内，来自大量僵尸设备的请求，服务器不能及时响应全部请求，导致请求堆积，进而引发雪崩效应，无法响应新请求。</p><p>攻击特点：</p><ul><li>直接访问 IP</li><li>任意 API</li><li>消耗大量带宽(耗尽)</li></ul><p>DDoS 攻击 demo：SYN Flood</p><p>原理：TCP 的三次握手</p><p><img src="https://s2.loli.net/2022/02/06/a4FQpvyedsrHW3g.png" alt="image-20220127205207771"></p><p>如果客户端给服务器发送的 ACK 丢失的话，服务器不知道丢失，会等客户端的 ACK，超时后重新发送 SYN-ACK 消息给客户端，直到重试超过一定次数才会放弃。</p><p>而 SYN Flood 就是通过发送大量的 SYN，但是不给服务器发送 ACK，从而耗尽服务器的资源。</p><p><img src="https://s2.loli.net/2022/01/27/wmpI8bKUcugOQnJ.png" alt="image-20220127205705566"></p><h3 id="5-中间人攻击"><a href="#5-中间人攻击" class="headerlink" title="5. 中间人攻击"></a>5. 中间人攻击</h3><p><img src="https://s2.loli.net/2022/01/27/o6qOfQANlgRWmJY.png" alt="image-20220127205738271"></p><h2 id="2-防御"><a href="#2-防御" class="headerlink" title="2. 防御"></a>2. 防御</h2><h3 id="2-1-XSS"><a href="#2-1-XSS" class="headerlink" title="2.1 XSS"></a>2.1 XSS</h3><p>方案：</p><ul><li>永远不信任用户的提交内容</li><li>不把用户提交内容直接转换成 DOM</li></ul><p>现成工具：</p><ul><li>前端：<ul><li>主流框架默认防御 XSS</li><li>google-closure-library</li></ul></li><li>服务端(Node)：<ul><li>DOMPurify</li></ul></li></ul><h3 id="2-2-CSRF"><a href="#2-2-CSRF" class="headerlink" title="2.2 CSRF"></a>2.2 CSRF</h3><h4 id="2-2-1-同源政策"><a href="#2-2-1-同源政策" class="headerlink" title="2.2.1 同源政策"></a>2.2.1 同源政策</h4><p><strong>浏览器的同源政策</strong>：A 网页设置的 Cookie，B 网页不能打开，除非这两个网页”同源”。所谓”同源”指的是”三个相同”。(出自阮一峰的网络日志)</p><ul><li>协议相同</li><li>域名相同</li><li>端口相同</li></ul><p>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</p><p><img src="https://s2.loli.net/2022/01/27/mJVtw9pxQGkoCz2.png" alt="image-20220127230913468"></p><h4 id="2-2-2-CSP"><a href="#2-2-2-CSP" class="headerlink" title="2.2.2 CSP"></a>2.2.2 CSP</h4><p>CSP(Content Security Policy)：内容安全策略</p><ul><li>决定好哪些源(域名)是安全的</li><li>来自安全源的脚本可以执行，否则直接报错</li><li>对于 eval / inline script 直接禁止</li></ul><p>两种形式：</p><ul><li><p>服务器的响应头部：</p><p><img src="https://s2.loli.net/2022/01/27/o7XIRZhdkUWPGx9.png" alt="image-20220127232201451"></p></li><li><p>浏览器 meta</p><p><img src="https://s2.loli.net/2022/01/27/cLzb9X4HDhJx1yQ.png" alt="image-20220127232216808"></p></li></ul><h4 id="2-2-3-CSRF-防御-token"><a href="#2-2-3-CSRF-防御-token" class="headerlink" title="2.2.3 CSRF 防御(token)"></a>2.2.3 CSRF 防御(token)</h4><p><img src="https://s2.loli.net/2022/01/27/1OJQuRLCISD6qig.png" alt="image-20220127232639659"></p><h4 id="2-2-4-SameSite-Cookie"><a href="#2-2-4-SameSite-Cookie" class="headerlink" title="2.2.4 SameSite Cookie"></a>2.2.4 SameSite Cookie</h4><p>避免用户信息被携带</p><p>下面的部分参考自<a href="https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html">Cookie 的 SameSite 属性</a></p><p>Cookie 的 SameSite 属性用来限制第三方 Cookie，从而减少安全风险。</p><p>可以设置成三个值：</p><ul><li><p><strong>Strict</strong>：最严格。完全禁止第三方 Cookie，跨站点时，任何情况都不会发送 Cookie</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Set-Cookie: CookieName=CookieValue; SameSite=Strict;<br></code></pre></td></tr></table></figure><p>用户体验不会很好。比如访问别人的项目网站时，有个 fork me 链接到 github，然后点击跳转不会带有 github 的 token，所以跳转过后，都会是未登录状态</p></li><li><p><strong>Lax</strong>：大多数情况不发送第三方 Cookie，但是<b style="color: red">导航到目标地址的 GET 请求</b>会发送。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Set-Cookie: CookieName=CookieValue; SameSite=Lax;<br></code></pre></td></tr></table></figure><p>导航到目标地址的 GET 请求：<b style="color: red">链接、预加载、GET 表单</b></p><p><img src="https://s2.loli.net/2022/01/27/Hl86by42ZdqEUYm.png" alt="image-20220127234433512"></p><p><b style="color: red">设置了 Strict 或 Lax 之后，基本杜绝了 CSRF 攻击。</b></p></li><li><p><strong>None</strong>：显示关闭 SameSite 属性。前提是需要同时设置 Secure 属性(Cookie 只能通过 HTTPS 协议发送)，否则无效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Set-Cookie: widget_session=abc123; SameSite=None; Secure<br></code></pre></td></tr></table></figure><p>应用场景是依赖 Cookie 的第三方服务：如网站内嵌其他网站的播放器，开启 SameSite 属性后，就识别不了用户的登录态，也就发不了弹幕了</p></li></ul><h4 id="2-2-5-SameSite-和-CORS-的区别"><a href="#2-2-5-SameSite-和-CORS-的区别" class="headerlink" title="2.2.5 SameSite 和 CORS 的区别"></a>2.2.5 SameSite 和 CORS 的区别</h4><p><img src="https://s2.loli.net/2022/01/27/MBQCtgd3Z4wA187.png" alt="image-20220127235222723"></p><h3 id="2-3-Injection"><a href="#2-3-Injection" class="headerlink" title="2.3 Injection"></a>2.3 Injection</h3><p><img src="https://s2.loli.net/2022/01/27/SaQpwdnDfh2PzOG.png" alt="image-20220127235528020"></p><p>貌似是 Java 中的，我没用过，也不好说。不过查了下资料，prepareStatement 对象防止 sql 注入的方式是<strong>把用户非法输入的单引号用\反斜杠做了转义</strong>，从而达到了防止 sql 注入的目的。</p><p><strong>在 SQL 语句外做的防御</strong>：</p><p><img src="https://s2.loli.net/2022/01/27/8JgET6bfKeABWuy.png" alt="image-20220127235830052"></p><h3 id="2-4-Dos"><a href="#2-4-Dos" class="headerlink" title="2.4 Dos"></a>2.4 Dos</h3><h4 id="2-4-1-ReDoS"><a href="#2-4-1-ReDoS" class="headerlink" title="2.4.1 ReDoS"></a>2.4.1 ReDoS</h4><ul><li>Review 代码</li><li>代码扫描 + 正则性能测试</li><li>拒绝使用用户提供的正则</li></ul><h4 id="2-4-2-DDoS"><a href="#2-4-2-DDoS" class="headerlink" title="2.4.2 DDoS"></a>2.4.2 DDoS</h4><p><img src="https://s2.loli.net/2022/01/28/aPq9HzvyMGAENFb.png" alt="image-20220128000235944"></p><h3 id="2-5-防御中间人攻击"><a href="#2-5-防御中间人攻击" class="headerlink" title="2.5 防御中间人攻击"></a>2.5 防御中间人攻击</h3><p><b style="color: red">HTTPS 防止中间人攻击</b></p><p>HTTPS 其实是<code>SSL+HTTP</code>的简称,当然现在<code>SSL</code>基本已经被<code>TLS</code>取代了</p><p><img src="https://s2.loli.net/2022/01/28/BdbPkZ7gx3uJiLV.png" alt="image-20220128000730701"></p><p><strong>HTTPS 的一些特性</strong>：</p><ul><li>可靠性：加密(非明文)</li><li>完整性：MAC 验证(防篡改)，通过 hash 算法来实现，所以就算只有很小的改变，hash 输出结果也会变化很大</li><li>不可抵赖性：数字签名(确定身份)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营 </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端动画实现笔记</title>
      <link href="/2022/01/25/yc-animation/"/>
      <url>/2022/01/25/yc-animation/</url>
      
        <content type="html"><![CDATA[<h1 id="前端动画实现笔记"><a href="#前端动画实现笔记" class="headerlink" title="前端动画实现笔记"></a>前端动画实现笔记</h1><p>参加字节跳动的青训营时个人写的笔记。这部分是蒋翔老师讲的课。</p><p>动画：动画是通过快速连续排列彼此差异极小的连续图像来制造运动错觉和变化错觉的过程。</p><ul><li>快速</li><li>连续排列</li><li>彼此差异极小</li><li>制造错觉</li></ul><p><img src="https://clz.vercel.app/medias/my_comment_bg.jpg" alt="duck"></p><p><strong>动画都需要定义两个基本状态，即起始状态和结束状态，然后填补两者之间的空白，让动画连贯。</strong></p><p>空白的补全方法有两种：</p><ul><li><strong>补间动画</strong>：传统动画。主画师绘制关键帧，补间动画师补充关键帧。(而在前端中，补间动画师就由浏览器来当，如 keyframe 和 transition)</li><li><strong>逐帧动画</strong>：每一帧都由主画师绘制。(如由 steps 实现的精灵动画)</li></ul><p>常见的前端动画技术：Sprite 动画、CSS 动画、JS 动画、SVG 动画、WebGL 动画</p><h2 id="1-CSS-动画"><a href="#1-CSS-动画" class="headerlink" title="1. CSS 动画"></a>1. CSS 动画</h2><p>CSS animation 是常见的 CSS 动画实现方式</p><ul><li>animation-name：应用的一系列动画。每个名称代表一个由<code> @keyframes</code>定义的动画序列</li><li>animation-duration：一个动画周期的时长(默认是 0s，表示无动画)</li><li>animation-timing-function：CSS 动画在每一动画周期中执行的节奏</li><li>animation-delay：动画延时播放</li><li>animation-iteration-count：动画在结束前运行的次数，可以是 1 次，也可以是无限循环</li><li>animation-direction：动画是否反向播放</li><li>animation-play-state：定义一个动画是否运行或暂停</li></ul><h3 id="1-1-translate-移动"><a href="#1-1-translate-移动" class="headerlink" title="1.1 translate(移动)"></a>1.1 translate(移动)</h3><p>定义元素的平移变换。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background-color</span>: red;<br>  <span class="hljs-attribute">animation</span>: Translate infinite <span class="hljs-number">4s</span> linear;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> Translate &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-number">25%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, <span class="hljs-number">200px</span>);<br>  &#125;<br>  <span class="hljs-number">50%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">200px</span>, <span class="hljs-number">200px</span>);<br>  &#125;<br>  <span class="hljs-number">75%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">200px</span>, <span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/25/uHF3YfOLzotbG1l.gif" alt="动画"></p><h3 id="1-2-scale-缩放"><a href="#1-2-scale-缩放" class="headerlink" title="1.2 scale(缩放)"></a>1.2 scale(缩放)</h3><p>定义元素的缩小放大</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background-color</span>: red;<br>  <span class="hljs-attribute">animation</span>: Scale infinite <span class="hljs-number">2s</span> linear;<br>  <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>; <span class="hljs-comment">/*缩放基准点*/</span><br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> Scale &#123;<br>  <span class="hljs-selector-tag">from</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-selector-tag">to</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>); <span class="hljs-comment">/*第一个、第二个参数分别是x轴、y轴缩放的倍数*/</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/25/NmUHI8zh4fOw1xF.gif" alt="动画1"></p><h3 id="1-3-rotate-旋转"><a href="#1-3-rotate-旋转" class="headerlink" title="1.3 rotate(旋转)"></a>1.3 rotate(旋转)</h3><p>定义元素的旋转</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background-color</span>: red;<br>  <span class="hljs-attribute">animation</span>: Scale infinite <span class="hljs-number">4s</span> linear;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> Scale &#123;<br>  <span class="hljs-selector-tag">from</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/25/mHpSAQilKRXtwuc.gif" alt="动画"></p><h3 id="1-4-skew-倾斜"><a href="#1-4-skew-倾斜" class="headerlink" title="1.4 skew(倾斜)"></a>1.4 skew(倾斜)</h3><p>定义元素的倾斜</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background-color</span>: red;<br>  <span class="hljs-attribute">animation</span>: Translate <span class="hljs-number">1s</span> linear forwards;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> Translate &#123;<br>  <span class="hljs-selector-tag">from</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-selector-tag">to</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(<br>      <span class="hljs-number">0</span>,<br>      <span class="hljs-number">45deg</span><br>    ); <span class="hljs-comment">/* 第一个参数是水平方向的倾斜角度，第二个参数是垂直方向的倾斜角度 */</span><br>    <span class="hljs-comment">/* transform: skew(45deg, 0); */</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/25/8OZCty5rSQKXsNx.gif" alt="动画"></p><h3 id="1-5-CSS-精灵动画"><a href="#1-5-CSS-精灵动画" class="headerlink" title="1.5 CSS 精灵动画"></a>1.5 CSS 精灵动画</h3><p><a href="https://codepen.io/jiangxiang/pen/GRmarxE">CSS steps 实现逐帧动画</a></p><p>效果(直接打开可能会看不了，可能要科学上网，蒋翔老师的这张图片好像是放到 github 上的)</p><p><img src="https://s2.loli.net/2022/01/25/9gUBVTw8yD5Outs.gif" alt="动画"></p><h3 id="1-6-CSS-动画优缺点"><a href="#1-6-CSS-动画优缺点" class="headerlink" title="1.6 CSS 动画优缺点"></a>1.6 CSS 动画优缺点</h3><p>优点：简单、高效。不依赖于主线程，采用硬件加速(GPU)。</p><p>缺点：不能动态修改或定义动画的内容，不同的动画无法实现同步，多个动画无法堆叠</p><p>使用场景：简单的 H5 活动/宣传页</p><p>相关库：animation.css、shake.css</p><h3 id="1-7-CSS-属性"><a href="#1-7-CSS-属性" class="headerlink" title="1.7 CSS 属性"></a>1.7 CSS 属性</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter">filter CSS 属性</a></p><p>这部分不知道为什么放在了 SVG 部分，不过个人又放到了 CSS 这边。(感觉以后可能能用上)</p><h2 id="2-SVG-动画"><a href="#2-SVG-动画" class="headerlink" title="2. SVG 动画"></a>2. SVG 动画</h2><p>SVG 是基于 XML 的矢量图形描述语言，可以和 CSS、JS 很好的配合。</p><p>实现 SVG 动画有三种方式：</p><ul><li>SMIL</li><li>JS</li><li>CSS</li></ul><h3 id="2-1-line"><a href="#2-1-line" class="headerlink" title="2.1 line"></a>2.1 line</h3><p>JS 笔画的原理：stroke-dashoffset、stroke-dasharray 配合使用实现笔画效果。</p><ul><li>属性 stroke-dasharray 可控制用来描边的点画线的图案。它是一个数列，指定短划线和空白的长度。如果提供奇数个值，则这个值的数列重复一次。如 1,2,3 等同于 1,2,3,1,2,3</li><li>属性 stroke-dashoffset 属性指定 dash 模式到路径开始的距离</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;line stroke-dasharray=&quot;10, 5&quot;<br>      x1=&quot;10&quot; y1=&quot;10&quot; x2=&quot;100&quot; y2=&quot;10&quot; /&gt;<br>&lt;!--  10像素短划线，5像素空白。起点是(10, 10), 终点是(100, 10)  --&gt;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/25/MmXsOeSiEj1u9C6.png" alt="image-20220122184357682"></p><p><a href="https://codepen.io/jiangxiang/pen/LYzvvxd">更多例子</a></p><h3 id="2-2-path"><a href="#2-2-path" class="headerlink" title="2.2 path"></a>2.2 path</h3><p><strong>这部分待后续填坑</strong></p><p><img src="https://s2.loli.net/2022/01/25/ceImrnOgFi9S6XH.png" alt="image-20220122184551802"></p><p><a href="https://codepen.io/jiangxiang/pen/eYWagxq">例子</a></p><h3 id="2-3-演示"><a href="#2-3-演示" class="headerlink" title="2.3 演示"></a>2.3 演示</h3><p><b style="color: red">不是本人写的。属于是分享链接</b></p><p><a href="https://codepen.io/jiangxiang/pen/MWmdjeY">文字变形</a></p><p><a href="https://codepen.io/jiangxiang/pen/rNmgjqX">写字效果</a></p><h3 id="2-4-SVG-优点与缺点"><a href="#2-4-SVG-优点与缺点" class="headerlink" title="2.4 SVG 优点与缺点"></a>2.4 SVG 优点与缺点</h3><ul><li><strong>优点</strong>：通过矢量元素实现动画，不同的屏幕下都有较好的清晰度。可以实现描字、形变等特殊效果</li><li><strong>缺点</strong>：使用复杂(个人现阶段属于是一头雾水)</li></ul><h2 id="3-JS-动画"><a href="#3-JS-动画" class="headerlink" title="3. JS 动画"></a>3. JS 动画</h2><p>JS 可以实现很多复杂的动画，还可以操作 canvas 进行绘制。</p><p><strong>JS 动画函数封装</strong>(蒋翔老师讲课用上的)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animate</span>(<span class="hljs-params">&#123; easing, draw, duration &#125;</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> start = performance.now(); <span class="hljs-comment">// 不使用Date.now()的原因是performance.now()以恒定速度自增，精确到微秒级别，不易被篡改</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    requestAnimationFrame(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animate</span>(<span class="hljs-params">time</span>) </span>&#123;<br>      <span class="hljs-comment">// timeFraction goes from 0 to 1</span><br>      <span class="hljs-keyword">let</span> timeFraction = (time - start) / duration;<br>      <span class="hljs-keyword">if</span> (timeFraction &gt; <span class="hljs-number">1</span>) timeFraction = <span class="hljs-number">1</span>;<br><br>      <span class="hljs-comment">// calculate the current animation state</span><br>      <span class="hljs-keyword">let</span> progress = easing(timeFraction);<br><br>      draw(progress); <span class="hljs-comment">// draw it</span><br><br>      <span class="hljs-keyword">if</span> (timeFraction &lt; <span class="hljs-number">1</span>) &#123;<br>        requestAnimationFrame(animate);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 使用RequestAnimationFrame而不是使用setTimeout或setInterval的原因：</span><br><span class="hljs-comment">         * 该方法允许回调函数在浏览器准备重绘时运行，而且很快</span><br><span class="hljs-comment">         * 当页面在后台时，也就不会有重绘，所以回调函数也不会运行，所以动画会暂停，不会消耗资源</span><br><span class="hljs-comment">         */</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        resolve();<br>      &#125;<br>    &#125;);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li><p><strong>easing</strong>：缓动函数。决定执行进度在时间增加的过程中的变化，可以是线性的，也可以是非线性的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">easing</span>(<span class="hljs-params">timeFraction</span>)</span> &#123;<br>  <span class="hljs-keyword">return</span> timeFraction * <span class="hljs-number">100</span>;<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p><strong>draw</strong>：绘制函数。相当于画笔，会一直反复被调用。入参是当前执行的进度 progress，是一个介于 0 到 1 之间的数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> draw = <span class="hljs-function">(<span class="hljs-params">progress</span>) =&gt;</span> &#123;<br>  ball.style.transform = <span class="hljs-string">`translate(<span class="hljs-subst">$&#123;progress&#125;</span>px, 0)`</span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><strong>duration</strong>：持续时间</p></li></ul><h3 id="3-1-匀速运动"><a href="#3-1-匀速运动" class="headerlink" title="3.1 匀速运动"></a>3.1 匀速运动</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> draw = <span class="hljs-function">(<span class="hljs-params">progress</span>) =&gt;</span> &#123;<br>  ball.style.transform = <span class="hljs-string">`translate(<span class="hljs-subst">$&#123;progress * <span class="hljs-number">100</span>&#125;</span>px, 0)`</span>; <span class="hljs-comment">// 一秒走100像素</span><br>&#125;;<br><br>animate(&#123;<br>  <span class="hljs-function"><span class="hljs-title">easing</span>(<span class="hljs-params">timeFraction</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> timeFraction;<br>  &#125;,<br>  draw,<br>  <span class="hljs-attr">duration</span>: <span class="hljs-number">1000</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p><a href="https://codepen.io/jiangxiang/pen/rNmgVKK">更多</a></p><p>这部分还不是很明白，和数学挂上钩了(累)。</p><h2 id="4-优化"><a href="#4-优化" class="headerlink" title="4. 优化"></a>4. 优化</h2><p>性能角度：页面渲染的一般过程：JS -&gt; CSS -&gt; 计算样式 -&gt; 布局 -&gt; 绘制-&gt;渲染层合并。其中，布局(重排)和绘制(重绘)是最耗时的两部分，所以应尽可能减少这两部分。</p><p><img src="https://s2.loli.net/2022/01/25/TZVLP8nfoyhHmb2.png" alt="image-20220122215918667"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营 </tag>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebGL基础笔记</title>
      <link href="/2022/01/24/yc-WebGL/"/>
      <url>/2022/01/24/yc-WebGL/</url>
      
        <content type="html"><![CDATA[<h1 id="WebGL-基础笔记"><a href="#WebGL-基础笔记" class="headerlink" title="WebGL 基础笔记"></a>WebGL 基础笔记</h1><p>个人参加字节跳动的青训营时写的笔记。这部分是月影老师讲的 WebGL 基础。</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>WebGL 代码有两部分：</p><ul><li>运行在 CPU 上的 JavaScript</li><li>运行在 GPU 上的 GLSL</li></ul><p><strong>CPU 和 GPU</strong>：</p><ul><li>CPU 适合比较复杂的任务，不适合量大但每个单元比较简单的任务</li><li>GPU 有大量的小运算单元构成，每个运算单元只负责处理<strong>简单</strong>的计算，每个运算单元彼此独立。所有计算可以并行处理。适合量大但每个单元比较简单的任务。</li></ul><p>图像的处理适合交给 GPU，因为图像会有很多的像素点需要处理。</p><h2 id="2-流程"><a href="#2-流程" class="headerlink" title="2. 流程"></a>2. 流程</h2><p>这部分只能说似懂非懂(任重而道远啊)，先贴一下课上的示例代码，方便之后看。</p><p><img src="https://s2.loli.net/2022/01/24/c4mPWogj9vIVfR6.png" alt="image-20220121161752150"></p><ol><li><p>创建 WebGL 上下文</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;canvas&quot;</span>);<br><span class="hljs-keyword">const</span> gl = canvas.getContext(<span class="hljs-string">&quot;webgl&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>创建 WebGL 程序(GLSL，顶点着色器、片元着色器)</p><p><strong>顶点着色器</strong>(Vertex Shader)：</p><p><img src="https://s2.loli.net/2022/01/24/tapPx5QJwurCEX4.png" alt="image-20220121163200070"></p><p><strong>片元着色器</strong>(Fragment Shader)：顶点之间的轮廓中的所有像素都会经过片元着色器处理。(并行处理)</p><p><img src="https://s2.loli.net/2022/01/24/r19PV7sUClEGcDY.png" alt="image-20220121163223930"></p><p><img src="https://s2.loli.net/2022/01/24/jnvh4zaoqIReFJ5.png" alt="image-20220121163501575"></p></li><li><p>将数据存入缓冲区</p><p><img src="https://s2.loli.net/2022/01/24/3lp5OzrWq9ZIJCA.png" alt="image-20220121163750505"></p></li><li><p>将缓冲区数据读取到 GPU</p><p><img src="https://s2.loli.net/2022/01/24/lDbBEtJQh6Paio7.png" alt="image-20220121164109751"></p></li><li><p>GPU 执行 WebGL 程序，输出结果</p><p><img src="https://s2.loli.net/2022/01/24/3p1A2IRkV9BZJPX.png" alt="image-20220121164208556"></p></li></ol><p>完整代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 创建WebGL上下文</span><br><span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;canvas&quot;</span>);<br><span class="hljs-keyword">const</span> gl = canvas.getContext(<span class="hljs-string">&quot;webgl&quot;</span>);<br><br><span class="hljs-comment">// 2. 创建WebGL程序</span><br><br><span class="hljs-comment">// 2.1 顶点着色器</span><br><span class="hljs-keyword">const</span> vertex = <span class="hljs-string">`</span><br><span class="hljs-string">  attribute vec2 position;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  void main() &#123;</span><br><span class="hljs-string">    gl_PointSize = 1.0;</span><br><span class="hljs-string">    gl_Position = vec4(position, 1.0, 1.0);</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-comment">// 2.2 片元着色器</span><br><span class="hljs-keyword">const</span> fragment = <span class="hljs-string">`</span><br><span class="hljs-string">  precision mediump float;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  void main()</span><br><span class="hljs-string">  &#123;</span><br><span class="hljs-string">    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);// 类似rgba</span><br><span class="hljs-string">  &#125;    </span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-comment">// 2.3 加载、编译、使用着色器</span><br><span class="hljs-keyword">const</span> vertexShader = gl.createShader(gl.VERTEX_SHADER);<br>gl.shaderSource(vertexShader, vertex);<br>gl.compileShader(vertexShader);<br><br><span class="hljs-keyword">const</span> fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);<br>gl.shaderSource(fragmentShader, fragment);<br>gl.compileShader(fragmentShader);<br><br><span class="hljs-keyword">const</span> program = gl.createProgram();<br>gl.attachShader(program, vertexShader);<br>gl.attachShader(program, fragmentShader);<br>gl.linkProgram(program);<br>gl.useProgram(program);<br><br><span class="hljs-keyword">const</span> points = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Float32Array</span>([-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>]);<br><br><span class="hljs-comment">// 3. 将数据存入缓存区</span><br><span class="hljs-keyword">const</span> bufferId = gl.createBuffer();<br>gl.bindBuffer(gl.ARRAY_BUFFER, bufferId);<br>gl.bufferData(gl.ARRAY_BUFFER, points, gl.STATIC_DRAW);<br><br><span class="hljs-comment">// 4. 将缓冲区数据读取到GPU</span><br><span class="hljs-keyword">const</span> vPosition = gl.getAttribLocation(program, <span class="hljs-string">&quot;position&quot;</span>);<br>gl.vertexAttribPointer(vPosition, <span class="hljs-number">2</span>, gl.FLOAT, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>gl.enableVertexAttribArray(vPosition);<br><br><span class="hljs-comment">// 5. GPU执行WebGL程序</span><br>gl.clear(gl.COLOR_BUFFER_BIT);<br>gl.drawArrays(gl.TRIANGLES, <span class="hljs-number">0</span>, points.length / <span class="hljs-number">2</span>); <span class="hljs-comment">// points中有六个点，实际上只有三个点，所以需要除以2</span><br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2022/01/24/hj6JoKRS4AQau2t.png" alt="image-20220121165503382"></p><p>canvas 2D 版本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;canvas&quot;</span>);<br><span class="hljs-keyword">const</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>ctx.beginPath();<br>ctx.moveTo(<span class="hljs-number">250</span>, <span class="hljs-number">0</span>);<br>ctx.lineTo(<span class="hljs-number">500</span>, <span class="hljs-number">500</span>);<br>ctx.lineTo(<span class="hljs-number">0</span>, <span class="hljs-number">500</span>);<br>ctx.fillStyle = <span class="hljs-string">&quot;red&quot;</span>;<br>ctx.fill();<br></code></pre></td></tr></table></figure><p>效果和上图所示一样。(比原生 WebGL 简单好多)</p><h2 id="3-多边形"><a href="#3-多边形" class="headerlink" title="3. 多边形"></a>3. 多边形</h2><p>多边形需要进行三角划分</p><p><img src="https://s2.loli.net/2022/01/24/bl275FqhsRkruVN.png" alt="image-20220121175100166"></p><p><a href="https://github.com/mapbox/earcut">Earcut</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 创建WebGL上下文</span><br><span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;canvas&quot;</span>);<br><span class="hljs-keyword">const</span> gl = canvas.getContext(<span class="hljs-string">&quot;webgl&quot;</span>);<br><br><span class="hljs-comment">// 2. 创建WebGL程序</span><br><br><span class="hljs-comment">// 2.1 顶点着色器</span><br><span class="hljs-keyword">const</span> vertex = <span class="hljs-string">`</span><br><span class="hljs-string">  attribute vec2 position;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  void main() &#123;</span><br><span class="hljs-string">    gl_PointSize = 1.0;</span><br><span class="hljs-string">    gl_Position = vec4(position, 1.0, 1.0);</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-comment">// 2.2 片元着色器</span><br><span class="hljs-keyword">const</span> fragment = <span class="hljs-string">`</span><br><span class="hljs-string">  precision mediump float;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  void main()</span><br><span class="hljs-string">  &#123;</span><br><span class="hljs-string">    gl_FragColor = vec4(0.0, 1.0, 1.0, 1.0);</span><br><span class="hljs-string">  &#125;    </span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-comment">// 2.3 加载、编译、使用着色器</span><br><span class="hljs-keyword">const</span> vertexShader = gl.createShader(gl.VERTEX_SHADER);<br>gl.shaderSource(vertexShader, vertex);<br>gl.compileShader(vertexShader);<br><br><span class="hljs-keyword">const</span> fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);<br>gl.shaderSource(fragmentShader, fragment);<br>gl.compileShader(fragmentShader);<br><br><span class="hljs-keyword">const</span> program = gl.createProgram();<br>gl.attachShader(program, vertexShader);<br>gl.attachShader(program, fragmentShader);<br>gl.linkProgram(program);<br>gl.useProgram(program);<br><br><span class="hljs-comment">// 顶点集</span><br><span class="hljs-keyword">const</span> vertices = [<br>  [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>],<br>  [-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>  [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>  [<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>],<br>];<br><br><span class="hljs-keyword">const</span> points = vertices.flat(); <span class="hljs-comment">// 点集</span><br><span class="hljs-keyword">const</span> triangles = earcut(points); <span class="hljs-comment">// 三角形集(三角划分后的三角性)</span><br><br><span class="hljs-keyword">const</span> position = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Float32Array</span>(points);<br><span class="hljs-keyword">const</span> cells = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint16Array</span>(triangles);<br><br><span class="hljs-comment">// 3. 将数据存入缓存区，这时候需要分点和三角形来分别存</span><br><span class="hljs-keyword">const</span> pointBuffer = gl.createBuffer();<br>gl.bindBuffer(gl.ARRAY_BUFFER, pointBuffer);<br>gl.bufferData(gl.ARRAY_BUFFER, position, gl.STATIC_DRAW);<br><br><span class="hljs-keyword">const</span> cellsBuffer = gl.createBuffer();<br>gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cellsBuffer);<br>gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, cells, gl.STATIC_DRAW);<br><br><span class="hljs-comment">// 4. 将缓冲区数据读取到GPU</span><br><span class="hljs-keyword">const</span> vPosition = gl.getAttribLocation(program, <span class="hljs-string">&quot;position&quot;</span>);<br>gl.vertexAttribPointer(vPosition, <span class="hljs-number">2</span>, gl.FLOAT, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>gl.enableVertexAttribArray(vPosition);<br><br><span class="hljs-comment">// 5. GPU执行WebGL程序</span><br>gl.clear(gl.COLOR_BUFFER_BIT);<br>gl.drawElements(gl.TRIANGLES, cells.length, gl.UNSIGNED_SHORT, <span class="hljs-number">0</span>); <span class="hljs-comment">// 这部分还不是很明白</span><br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2022/01/24/Chzl9qIcwPTYSHU.png" alt="image-20220121184608412"></p><h2 id="4-变换"><a href="#4-变换" class="headerlink" title="4. 变换"></a>4. 变换</h2><ul><li>平移</li><li>旋转</li><li>缩放</li></ul><p><img src="https://s2.loli.net/2022/01/24/dxmy2MaYjuCgec7.png" alt="image-20220121203813648"></p><h2 id="5-3D-标准模型的四个齐次矩阵"><a href="#5-3D-标准模型的四个齐次矩阵" class="headerlink" title="5. 3D 标准模型的四个齐次矩阵"></a>5. 3D 标准模型的四个齐次矩阵</h2><ul><li>投影矩阵</li><li>模型矩阵</li><li>视图矩阵</li><li>法向量矩阵</li></ul><p><strong>挖了个大坑</strong></p><h2 id="6-相关链接"><a href="#6-相关链接" class="headerlink" title="6. 相关链接"></a>6. 相关链接</h2><ul><li><a href="https://thebookofshaders.com/">The Book of Shaders</a></li><li><a href="https://www.shadertoy.com/">着色器分享</a></li><li><a href="https://github.com/mesh-js/mesh.js">Mesh.js</a></li><li><a href="https://doodle.webgl.group/">glsl-doodle</a></li><li><a href="http://spritejs.com/">SpriteJS</a></li><li><a href="https://threejs.org/">three.js</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营 </tag>
            
            <tag> WebGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python(五)</title>
      <link href="/2022/01/23/python-5/"/>
      <url>/2022/01/23/python-5/</url>
      
        <content type="html"><![CDATA[<h1 id="python-五"><a href="#python-五" class="headerlink" title="python(五)"></a>python(五)</h1><h2 id="1-GUI-编程"><a href="#1-GUI-编程" class="headerlink" title="1. GUI 编程"></a>1. GUI 编程</h2><h3 id="tkinter-标准库"><a href="#tkinter-标准库" class="headerlink" title="tkinter 标准库"></a>tkinter 标准库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tkinter<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br><br>root = tkinter.Tk()     <span class="hljs-comment"># 创建tkinter应用程序主窗口</span><br>button = tkinter.Button(root, text=<span class="hljs-string">&quot;点击&quot;</span>, command=show)<br>button.place(x=<span class="hljs-number">10</span>, y=<span class="hljs-number">20</span>, width=<span class="hljs-number">100</span>, height=<span class="hljs-number">100</span>)<br><br>root.mainloop()         <span class="hljs-comment"># 启动主循环，启动应用程序</span><br><br><br></code></pre></td></tr></table></figure><h2 id="2-多线程与多线程编程"><a href="#2-多线程与多线程编程" class="headerlink" title="2. 多线程与多线程编程"></a>2. 多线程与多线程编程</h2><h4 id="2-1Thread-对象"><a href="#2-1Thread-对象" class="headerlink" title="2.1Thread 对象"></a>2.1Thread 对象</h4><p><strong>threading 模块</strong>是 Python 支持多线程编程的重要模块</p><p>Thread 类支持使用两种方法来创建线程</p><ul><li>使用一个可调用对象做参数创建对象</li><li>继承 Thread 类，并在派生类中重写<code>__init__()</code>和<code>run()</code>方法</li></ul><p>创建线程对象以后，可以调用它的 start()方法来启动，该方法自动调用该类对象的 run()方法。</p><p><strong>创建多线程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun1</span>(<span class="hljs-params">x, y</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x, y):<br>        <span class="hljs-built_in">print</span>(i)<br>        time.sleep(<span class="hljs-number">1</span>)<br><br><br>t1 = threading.Thread(target=fun1, args=(<span class="hljs-number">15</span>, <span class="hljs-number">20</span>))<br>t1.start()<br><br>t2 = threading.Thread(target=fun1, args=(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>))<br>t2.start()<br></code></pre></td></tr></table></figure><p>结果不一，因为多线程不是同步执行，而是异步执行</p><h3 id="2-2-线程同步技术"><a href="#2-2-线程同步技术" class="headerlink" title="2.2 线程同步技术"></a>2.2 线程同步技术</h3><h4 id="2-2-1-Lock-RLock-对象"><a href="#2-2-1-Lock-RLock-对象" class="headerlink" title="2.2.1 Lock/RLock 对象"></a>2.2.1 Lock/RLock 对象</h4><p>一个锁有两个状态：locked 和 unlocked。</p><p>如果锁处于 unlocked 状态，<strong>acquire()方法</strong>将其修改为 locked 并立即返回，如果锁已经处于 locked 状态，则阻塞当前线程并等待其他线程锁解锁，然后将其修改为 locked 并立即返回。</p><p><strong>release()方法</strong>用来将锁的状态由 locked 修改为 unclocked 并立即返回，如果锁的状态已经是 unclocked，调用该方法会抛出异常</p><p>RLock 对象可被同一个线程**acquire()**多次，RLock 对象的 acquire()/release()调用对可以嵌套，仅当最后一个或最外层的 release()执行结束后，锁才会被设置为 unclocked 状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myThread</span>(<span class="hljs-params">threading.Thread</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        threading.Thread.__init__(self)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">global</span> x<br>        lock.acquire()      <span class="hljs-comment"># 上锁， 没开锁之前，会阻塞其他线程，直到开锁</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>            x += i<br>        time.sleep(<span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">print</span>(x)<br>        lock.release()      <span class="hljs-comment"># 开锁</span><br><br>lock = threading.RLock()<br>t1 = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    t = myThread()<br>    t1.append(t)<br>x = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> t1:<br>    i.start()<br></code></pre></td></tr></table></figure><h4 id="2-2-2-Condition-对象"><a href="#2-2-2-Condition-对象" class="headerlink" title="2.2.2 Condition 对象"></a>2.2.2 Condition 对象</h4><p>使用 Condition 对象可以在某些事件触发后才处理数据，可以用于不同线程之间的通信或通知，以实现更高级别的同步。</p><p>生产者消费者问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span>(<span class="hljs-params">threading.Thread</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, threadName</span>):</span><br>        threading.Thread.__init__(self, name=threadName)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">global</span> x<br>        con.acquire()           <span class="hljs-comment"># 类似上锁</span><br>        <span class="hljs-keyword">if</span> x == <span class="hljs-number">20</span>:<br>            con.wait()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Producer: &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>            <span class="hljs-built_in">print</span>(x, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>            x = x + <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(x)<br>        con.notify()    <span class="hljs-comment"># 唤醒在等待的单个线程</span><br>        con.release()           <span class="hljs-comment"># 类似开锁</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span>(<span class="hljs-params">threading.Thread</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, threadName</span>):</span><br>        threading.Thread.__init__(self, name=threadName)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">global</span> x<br>        con.acquire()<br>        <span class="hljs-keyword">if</span> x == <span class="hljs-number">0</span>:<br>            con.wait()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Consumer: &#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>            <span class="hljs-built_in">print</span>(x, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>            x = x - <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(x)<br>        con.notify()<br>        con.release()<br><br>con = threading.Condition()<br>x = <span class="hljs-number">0</span><br>p = Producer(<span class="hljs-string">&#x27;Producer&#x27;</span>)<br>c = Consumer(<span class="hljs-string">&#x27;Consumer&#x27;</span>)<br>p.start()<br>c.start()<br>p.join()<br>c.join()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;After Producer and Consumer all done: &#x27;</span>, x)<br></code></pre></td></tr></table></figure><h4 id="2-2-3-queue-对象"><a href="#2-2-3-queue-对象" class="headerlink" title="2.2.3 queue 对象"></a>2.2.3 queue 对象</h4><p>queue 模块实现了多生产者-多消费者队列，非常适合需要在多个线程之间进行信息交换的场所。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> queue<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span>(<span class="hljs-params">threading.Thread</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, threadName</span>):</span><br>        threading.Thread.__init__(self, name=threadName)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">global</span> myqueue<br>        myqueue.put(self.name)     <span class="hljs-comment"># 在队列尾部追加元素</span><br>        <span class="hljs-built_in">print</span>(self.name, <span class="hljs-string">&#x27;put &#x27;</span>, self.name, <span class="hljs-string">&#x27; to queue.&#x27;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span>(<span class="hljs-params">threading.Thread</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, threadName</span>):</span><br>        threading.Thread.__init__(self, name=threadName)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">global</span> myqueue<br>        <span class="hljs-built_in">print</span>(self.name, <span class="hljs-string">&#x27;get &#x27;</span>, myqueue.get(), <span class="hljs-string">&#x27; from queue.&#x27;</span>) <span class="hljs-comment"># get()获取队列头部的元素</span><br><br>myqueue = queue.Queue()<br>plist = []<br>clist = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    p = Producer(<span class="hljs-string">&#x27;Producer&#x27;</span> + <span class="hljs-built_in">str</span>(i))<br>    plist.append(p)<br>    c = Consumer(<span class="hljs-string">&#x27;Consumer&#x27;</span>+<span class="hljs-built_in">str</span>(i))<br>    clist.append(c)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> plist:<br>    i.start()<br>    i.join()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> clist:<br>    i.start()<br>    i.join()<br></code></pre></td></tr></table></figure><h3 id="2-3-多进程编程"><a href="#2-3-多进程编程" class="headerlink" title="2.3 多进程编程"></a>2.3 多进程编程</h3><h4 id="2-3-1-创建与启动进程"><a href="#2-3-1-创建与启动进程" class="headerlink" title="2.3.1 创建与启动进程"></a>2.3.1 创建与启动进程</h4><ul><li><strong>通过创建 Process 对象来创建一个进程</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">name</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;module name: &#x27;</span>, __name__)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;parent process: &#x27;</span>, os.getppid())  <span class="hljs-comment"># 查看父进程ID</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;process id: &#x27;</span>, os.getpid())  <span class="hljs-comment"># 查看当前进程ID</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello &#x27;</span>, name)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = Process(target=f, args=(<span class="hljs-string">&#x27;bob&#x27;</span>,))<br>    p.start()<br>    p.join()<br><br></code></pre></td></tr></table></figure><ul><li><strong>创建自定义类并继承 Process 类，并实现 run()方法</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyProcess</span>(<span class="hljs-params">Process</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        Process.__init__(self)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ok&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = MyProcess()<br>    p.start()<br></code></pre></td></tr></table></figure><h2 id="3-网络编程"><a href="#3-网络编程" class="headerlink" title="3. 网络编程"></a>3. 网络编程</h2><h3 id="3-1-UDP-编程"><a href="#3-1-UDP-编程" class="headerlink" title="3.1 UDP 编程"></a>3.1 UDP 编程</h3><p>接收端代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br>s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br><br>s.bind((<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">5000</span>))<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    data, addr = s.recvfrom(<span class="hljs-number">1024</span>)<br>    data = data.decode()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;received message:&#123;0&#125; from &#123;1[1]&#125; on &#123;1[0]&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data, addr))<br>    <span class="hljs-keyword">if</span> data.lower() == <span class="hljs-string">&#x27;bye&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br>s.close()<br></code></pre></td></tr></table></figure><p>发送端代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> sys<br><br>s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入要发送的信息: &#x27;</span>)<br>    s.sendto(message.encode(), (<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">5000</span>))<br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&#x27;bye&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br><br>s.close()<br></code></pre></td></tr></table></figure><p>输入 bye 会结束收发信息</p><h3 id="3-2-TCP-编程"><a href="#3-2-TCP-编程" class="headerlink" title="3.2 TCP 编程"></a>3.2 TCP 编程</h3><p>服务端:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>words = &#123;<span class="hljs-string">&#x27;how are you&#x27;</span> : <span class="hljs-string">&#x27;Fine, thank you.&#x27;</span>, <span class="hljs-string">&#x27;how old are you?&#x27;</span> : <span class="hljs-string">&#x27;21&#x27;</span>,<br>         <span class="hljs-string">&#x27;what is your name?&#x27;</span> : <span class="hljs-string">&#x27;czh&#x27;</span>, <span class="hljs-string">&quot;what&#x27;s your name?&quot;</span> : <span class="hljs-string">&#x27;CZH&#x27;</span>,<br>         <span class="hljs-string">&#x27;where do you work?&#x27;</span> : <span class="hljs-string">&#x27;Shenzhen&#x27;</span>, <span class="hljs-string">&#x27;bye&#x27;</span>: <span class="hljs-string">&#x27;bye&#x27;</span>&#125;<br><br>HOST = <span class="hljs-string">&#x27;&#x27;</span><br>PORT = <span class="hljs-number">50007</span><br>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><br>s.bind((HOST, PORT))<br><br>s.listen(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Listening at port: &#x27;</span>, PORT)<br>conn, addr = s.accept()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Connected by &#x27;</span>, addr)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    data = conn.recv(<span class="hljs-number">1024</span>).decode()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Received message: &#x27;</span>, data)<br>    conn.sendall(words.get(data, <span class="hljs-string">&#x27;Nothing&#x27;</span>).encode())<br><br>conn.close()<br>s.close()<br><br></code></pre></td></tr></table></figure><p>客户端:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import sys<br>import socket<br><br>HOST = &#x27;127.0.0.1&#x27;<br>PORT = 50007<br><br>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>try:<br>    s.connect((HOST, PORT))<br>except Exception as e:<br>    print(&#x27;Server not found or not open&#x27;)<br>    sys.exit()<br>while True:<br>    c = input(&#x27;输入要发送的信息: &#x27;)<br>    s.sendall(c.encode())<br>    data = s.recv(1024).decode()<br>    print(&#x27;Received: &#x27;, data)<br>    if c.lower() == &#x27;bye&#x27;:<br>        break<br>s.close()<br></code></pre></td></tr></table></figure><p><b style="color: red">先运行服务端程序，开始监听后，再运行客户端程序</b>，可以实现超简单的自动回复功能。</p><p><img src="https://s2.loli.net/2022/01/23/c9oCDwEPHIK6nL4.png" alt="image-20220123210445377"></p><h3 id="3-3-简单网页内容爬取"><a href="#3-3-简单网页内容爬取" class="headerlink" title="3.3 简单网页内容爬取"></a>3.3 简单网页内容爬取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br><br>fp = urllib.request.urlopen(<span class="hljs-string">r&#x27;https://13535944743.github.io/&#x27;</span>)<br><span class="hljs-comment"># print(fp.read(100))</span><br><span class="hljs-built_in">print</span>(fp.read().decode())<br>fp.close()<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络(六)    应用层</title>
      <link href="/2022/01/23/computer-network-6/"/>
      <url>/2022/01/23/computer-network-6/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络-六-应用层"><a href="#计算机网络-六-应用层" class="headerlink" title="计算机网络(六) 应用层"></a>计算机网络(六) 应用层</h1><h2 id="1-域名系统-DNS"><a href="#1-域名系统-DNS" class="headerlink" title="1. 域名系统 DNS"></a>1. 域名系统 DNS</h2><p><strong>域名服务器</strong>：运行域名服务器程序，实现域名到 IP 地址的解析。</p><p>DNS 服务器的管辖范围<strong>不是以域为单位</strong>，<strong>而是以区为单位</strong>。</p><p><strong>区</strong>：一个服务器所负责管辖的范围。</p><p><strong>域名结构</strong>：… . 三级域名 . 二级域名 . 顶级域名</p><p><strong>域名只是逻辑概念，不代表计算机所在的物理地点。</strong></p><p><img src="https://s2.loli.net/2022/01/23/TaoNZhcPv4IfSkJ.png" alt="image-20211216140641230"></p><p><img src="https://s2.loli.net/2022/01/23/HQBmlcKZa2rI37v.png" alt="image-20211216140654254"></p><h3 id="1-1-域名服务器有四种类型"><a href="#1-1-域名服务器有四种类型" class="headerlink" title="1.1 域名服务器有四种类型"></a>1.1 域名服务器有四种类型</h3><p><img src="https://s2.loli.net/2022/01/23/jACXJUP6BTW7tqs.png" alt="image-20211216141309620"></p><h4 id="1-1-1-根域名服务器"><a href="#1-1-1-根域名服务器" class="headerlink" title="1.1.1 根域名服务器"></a>1.1.1 根域名服务器</h4><ul><li><p>根域名服务器是<b style="color: red">最高层次</b>的域名服务器，也是<b style="color: red">最重要</b>的域名服务器。所有的根域名服务器都知道所有的顶级域名服务器的域名和 IP 地址。</p></li><li><p>当本地域名服务器无法解析互联网上的域名时，首先就会求助于根域名服务器</p></li><li><p>互联网上共有 13 个不同 IP 地址的根域名服务器，它们的名字分别从 a 到 m(前 13 个字母)</p></li><li><p>根域名服务器共有<b style="color: red">13 套装置</b></p></li><li><p>在使用迭代查询时，根域名服务器不把域名直接转换成 IP 地址，而是把下一步应当找的顶级域名服务器的 IP 地址告诉本地域名服务器</p></li></ul><h4 id="1-1-2-顶级域名服务器"><a href="#1-1-2-顶级域名服务器" class="headerlink" title="1.1.2 顶级域名服务器"></a>1.1.2 顶级域名服务器</h4><ul><li>负责管理在该顶级域名服务器注册的<b style="color: red">所有二级域名</b>。也叫 TLD 服务器</li><li>当收到 DNS 查询请求时，就给出对应的回答(可能是最后的结果，也可能是下一步应查找的域名服务器的 IP 地址)</li></ul><h4 id="1-1-3-权限域名服务器"><a href="#1-1-3-权限域名服务器" class="headerlink" title="1.1.3 权限域名服务器"></a>1.1.3 权限域名服务器</h4><ul><li>负责一个区的域名服务器</li><li>当收到 DNS 查询请求时，就给出对应的回答(可能是最后的结果，也可能是下一步应查找的权限域名服务器的 IP 地址)</li></ul><h4 id="1-1-4-本地域名服务器"><a href="#1-1-4-本地域名服务器" class="headerlink" title="1.1.4 本地域名服务器"></a>1.1.4 本地域名服务器</h4><ul><li><p>本地域名服务器也被称为默认域名服务器</p></li><li><p>当一个主机发起 DNS 查询请求时，这个查询请求报文就发送给本地域名服务器</p></li><li><p>每一个互联网提供商 ISP，或一个大学都可以拥有一个本地域名服务器</p></li></ul><h3 id="1-2-提高域名服务器的可靠性"><a href="#1-2-提高域名服务器的可靠性" class="headerlink" title="1.2 提高域名服务器的可靠性"></a>1.2 提高域名服务器的可靠性</h3><p>DNS 域名服务器把数据复制到几个域名服务器来保存，其中的一个是<strong>主域名服务器</strong>，其他的是<strong>辅助域名服务器</strong></p><ul><li>当主域名服务器出故障时，辅助域名服务器可以保证 DNS 的查询工作不会中断</li><li>主域名服务器会定期把数据复制到辅助域名服务器中，而更改数据只能在主域名服务器中进行。这样保证了数据的一致性。</li></ul><h3 id="1-3-域名的解析过程"><a href="#1-3-域名的解析过程" class="headerlink" title="1.3 域名的解析过程"></a>1.3 域名的解析过程</h3><ul><li><p>**主机向本地域名服务器的查询一般都是采用<b style="color: red">递归查询</b>**。如果主机所询问的本地域名服务器不知道被查询域名的 IP 地址，本地域名服务器就以 DNS 客户的身份，对其他根域名服务器继续发出查询请求报文</p></li><li><p>**本地域名服务器向根域名服务器的查询一般都是采用<b style="color: red">迭代查询</b>**。当根域名服务器收到本地域名服务器的迭代请求报文时，可以给出要查询的 IP 地址，或者告诉本地域名服务器下一步应该向哪一个域名服务器进行查询。</p></li></ul><p><img src="https://s2.loli.net/2022/01/23/a6qKAJ9cYPu3VdB.png" alt="image-20211216144655379"></p><p><img src="https://s2.loli.net/2022/01/23/hZD9sy7gqN4YfiO.png" alt="image-20211216144705211"></p><h2 id="2-文件传送协议-P28"><a href="#2-文件传送协议-P28" class="headerlink" title="2. 文件传送协议 P28"></a>2. 文件传送协议 P28</h2><h2 id="3-万维网"><a href="#3-万维网" class="headerlink" title="3. 万维网"></a>3. 万维网</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>万维网 WWW(World Wide Web)不是某种特殊的计算机，而是一个大规模的、联机式的<strong>信息储藏所</strong>。</p><p><img src="https://s2.loli.net/2022/01/23/rLqiolzOPKUTNYM.png" alt="image-20211219123433570"></p><ul><li>万维网是<strong>分布式超媒体</strong>系统， 是<strong>超文本</strong>系统的扩充。<b style="color: red">一个超文本由多个信息源链接成</b>。<b style="color: red">超媒体与超文本的区别是文档内容不同</b>。超文本文档只包括文本信息，而超媒体文档还包括图形、声音等信息。</li><li>万维网以<b style="color: red">客户-服务器方式</b>工作。</li><li>万维网使用<b style="color: red">统一资源定位符 URL</b>来标志万维网上的各种文档，每一个文档在整个互联网的范围内具有唯一的标识符 URL。</li><li>使用<b style="color: red">超文本传送协议 HTTP</b>在万维网客户程序与万维网服务器程序之间进行交互。HTTP 是一个应用层协议，它使用 TCP 连接进行可靠的传送。</li></ul><h3 id="3-2-统一资源定位符-URL"><a href="#3-2-统一资源定位符-URL" class="headerlink" title="3.2 统一资源定位符 URL"></a>3.2 统一资源定位符 URL</h3><p>资源定位符 URL 是对可以从互联网上得到的资源的位置和访问方法的一种简洁表示。</p><p>URL 相当于一个文件名在网络范围的扩展，<b style="color: red">URL 是与互联网相连的机器上的任何可访问对象的一个指针</b></p><p><img src="https://s2.loli.net/2022/01/23/dMJ5K2W8zY1OGhL.png" alt="image-20211219131508022"></p><p>在 URL 中的字符对大小写没有要求。<strong>主机</strong>是存放资源的主机在互联网中的域名</p><h3 id="3-3-超文本传送协议-HTTP"><a href="#3-3-超文本传送协议-HTTP" class="headerlink" title="3.3 超文本传送协议 HTTP"></a>3.3 超文本传送协议 HTTP</h3><h4 id="3-3-1-HTTP-的操作过程"><a href="#3-3-1-HTTP-的操作过程" class="headerlink" title="3.3.1 HTTP 的操作过程"></a>3.3.1 HTTP 的操作过程</h4><p>作用：通过使用 HTTP 协议来传送必须的信息，使超文本的链接能够高效率地完成</p><p>从层次的角度看，HTTP 是<b style="color: red">面向事务</b>的应用层协议。</p><p><img src="https://s2.loli.net/2022/01/23/SYsDJWVnMiFmCpH.png" alt="image-20211219132414263"></p><ul><li>每个万维网网点都有一个服务器进程，不断监听 TCP 的端口，以便发现是否有浏览器对它发出连接建立请求。</li><li>一旦监听到连接建立请求并建立了 TCP 连接之后，浏览器就向万维网服务器发出浏览某个页面的请求，服务器接着返回所请求的页面作为响应。最后，TCP 连接被释放。</li><li>在浏览器和服务器之间的<strong>请求</strong>和<strong>响应</strong>的交互，必须按规定的格式和规则。这些格式和规则就是<strong>超文本传输协议 HTTP</strong></li><li><b style="color: red">HTTP 报文通常使用 TCP 连接传送</b></li></ul><h4 id="3-3-2-HTTP-的主要特点"><a href="#3-3-2-HTTP-的主要特点" class="headerlink" title="3.3.2 HTTP 的主要特点"></a>3.3.2 HTTP 的主要特点</h4><ul><li><p>HTTP 使用了<strong>面向连接的 TCP</strong>作为运输层协议，保证了数据的可靠传输</p></li><li><p>HTTP 协议本身是<strong>无连接的</strong></p></li><li><p>HTTP 是<strong>面向事务</strong>的客户服务器协议</p></li><li><p>HTTP1.0 协议是<strong>无状态的</strong></p></li><li><p><strong>HTTP/1.1 协议使用持续连接</strong>。即万维网服务器在发送响应后仍然在一段时间内保持这条连接，使同一个客户(如浏览器)和该服务器可以继续在这条连接上传送后续的 HTTP 请求报文和响应报文。</p><p><img src="https://s2.loli.net/2022/01/23/tNFRTUKjJyuoZQW.png" alt="image-20211219134152408"></p></li></ul><h4 id="3-3-3-代理服务器"><a href="#3-3-3-代理服务器" class="headerlink" title="3.3.3 代理服务器"></a>3.3.3 代理服务器</h4><ul><li><strong>代理服务器</strong>又称为<strong>万维网高速缓存</strong>，它代表浏览器发出 HTTP 请求</li><li>代理服务器把最近的一些请求和响应暂存在本地磁盘中。当与暂存的请求相同的新请求到达时，代理服务器就把暂存的响应发送出去，而不需要按 URL 的地址再去互联网访问</li></ul><h4 id="3-3-4-HTTP-的报文结构"><a href="#3-3-4-HTTP-的报文结构" class="headerlink" title="3.3.4 HTTP 的报文结构"></a>3.3.4 HTTP 的报文结构</h4><p>HTTP 有两类报文</p><ul><li><strong>请求报文</strong>：从客户向服务器发送请求报文</li><li><strong>响应报文</strong>：从服务器到用户的回答</li></ul><p><img src="https://s2.loli.net/2022/01/23/inj2uKSzDHtbc7J.png" alt="image-20211219135847646"></p><p><img src="https://s2.loli.net/2022/01/23/KsF6C5Nc8Ot92Ry.png" alt="image-20211219140139518"></p><p><img src="https://s2.loli.net/2022/01/23/VRog6CLId3tYarA.png" alt="image-20211219140151543"></p><p><b style="color: red">状态码：</b></p><ul><li>1xx：表示通知信息，如请求收到了或正在进行处理</li><li>2xx：表示成功，如接受或知道了</li><li>3xx：表示重定向，表示要完成请求还需要采取进一步的行动</li><li>4xx：表示客户端出错，如请求中有错误的语法或不能完成</li><li>5xx：表示服务器出错，如服务器失效</li></ul><h4 id="3-3-5-Cookie"><a href="#3-3-5-Cookie" class="headerlink" title="3.3.5 Cookie"></a>3.3.5 Cookie</h4><ul><li><p>万维网站点可以使用 Cookie 来跟踪用户</p></li><li><p><strong>Cookie</strong>表示在 HTTP 服务器和客户端之间传递的状态信息。</p></li><li><p>使用 Cookie 的网站服务器为客户产生一个<strong>唯一的识别码</strong>。利用这个识别码，网站就能够跟踪该用户在该网站的活动。</p></li></ul><h2 id="4-电子邮件"><a href="#4-电子邮件" class="headerlink" title="4. 电子邮件"></a>4. 电子邮件</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p><strong>电子邮件的重要标准</strong>：</p><ul><li>简单邮件发送协议：SMTP</li><li>互联网文本报文格式</li><li>通用互联网邮件扩充 MIME</li><li>邮件读取协议：POP3 和 IMAP</li></ul><p><strong>电子邮件的组成</strong>：</p><ul><li>用户代理(UA)：用户与电子邮件系统的接口，基本功能：撰写、显示、处理和通信</li><li>邮件服务器：按照<strong>客户 - 服务器</strong>方式工作，在发送和读取邮件时使用两个不同的协议 SMTP，POP3，功能：发送和接收邮件，同时向发件人报告邮件发送的情况</li><li>邮件发送和读取协议：<strong>简单邮件发送协议 SMTP</strong>：用于在用户代理向邮件服务器或邮件服务器之间发送邮件，<strong>邮局协议 POP3</strong>：用于用户代理从邮件服务器读取邮件。SMTP 和 POP3(或 IMAP)都是使用 TCP 连接来传送邮件的，目的是可靠地传送邮件</li></ul><p><img src="https://s2.loli.net/2021/12/19/RFAsBJoM7dN2b6c.png" alt="image-20211219150929902"></p><p><strong>发送和接受电子邮件的几个重要步骤</strong>：</p><ol><li>发件人调用 PC 中的用户代理撰写和编辑要发送的邮件</li><li>发件人的用户代理把邮件用 SMTP 协议发给发送方邮件服务器</li><li>SMTP 服务器把邮件临时存放在邮件缓存队列中，等待发送</li><li>发送方邮件服务器的 SMTP 客户与接收方邮件服务器的 SMTP 服务器建立 TCP 连接，然后把邮件缓存队列中的邮件依次发送出去</li><li>运行在接收方邮件服务器中的 SMTP 服务器进程收到邮件后，把邮件放入收件人的用户邮箱中，等待收件人进行读取</li><li>收件人在打算收信时，就运行 PC 中的用户代理，使用 POP3(或 IMAP)协议读取发送给自己的邮件</li></ol><h3 id="4-2-简单邮件传送协议-SMTP"><a href="#4-2-简单邮件传送协议-SMTP" class="headerlink" title="4.2 简单邮件传送协议 SMTP"></a>4.2 简单邮件传送协议 SMTP</h3><ul><li><p>SMTP 规定了在两个相互通信的 SMTP 进程交换信息的方法</p></li><li><p>SMTP 使用客户 - 服务器方式</p></li><li><p>SMTP 基于 TCP 实现客户与服务器的通信</p></li><li><p>SMTP 客户与服务器之间采用命令 - 响应方式进行交互</p></li><li><p>SMTP 是一个基于文本的协议</p></li><li><p>SMTP 基于 TCP 实现客户与服务器之间的通信</p><p><img src="https://s2.loli.net/2022/01/23/TM48dbKY5HDx13y.png" alt="image-20211219153232942"></p></li></ul><h4 id="4-2-1-SMTP-通信的三个阶段"><a href="#4-2-1-SMTP-通信的三个阶段" class="headerlink" title="4.2.1 SMTP 通信的三个阶段"></a>4.2.1 SMTP 通信的三个阶段</h4><ul><li><strong>连接建立</strong>：连接是在发送主机的 SMTP 客户和接受主机的 SMTP 服务器之间建立的。SMTP 不使用中间的邮件服务器</li><li><strong>邮件传送</strong></li><li><strong>连接释放</strong>：邮件发送完毕后，SMTP 要释放 TCP 连接</li></ul><h3 id="4-3-电子邮件的信息格式"><a href="#4-3-电子邮件的信息格式" class="headerlink" title="4.3 电子邮件的信息格式"></a>4.3 电子邮件的信息格式</h3><ul><li><p>一个电子邮件分为<strong>信封</strong>和<strong>内容</strong>两部分</p><p><img src="https://s2.loli.net/2022/01/23/ZjgiYBvDWpmwlTk.png" alt="image-20211219153803040"></p><p><img src="https://s2.loli.net/2022/01/23/WDlvXmCgY2rqo4E.png" alt="image-20211219153838817"></p></li></ul><h3 id="4-4-邮件读取协议-POP3-和-IMAP"><a href="#4-4-邮件读取协议-POP3-和-IMAP" class="headerlink" title="4.4 邮件读取协议 POP3 和 IMAP"></a>4.4 邮件读取协议 POP3 和 IMAP</h3><p><strong>POP3</strong>：邮局协议第三个版本</p><ul><li>POP3 使用<strong>客户 - 服务器</strong>方式</li><li>POP3 基于 TCP 实现客户与服务器的通信</li><li>POP3 支持用户鉴别</li></ul><p><strong>IMAP</strong>：网际报文存取协议</p><ul><li>IMAP 使用<strong>客户 - 服务器</strong>方式</li><li>IMAP 基于 TCP 实现客户与服务器的通信</li><li>IMAP 是一个联机协议</li></ul><p><img src="https://s2.loli.net/2022/01/23/FmX8Cxgl4MWup7s.png" alt="image-20211219154405992"></p><p><img src="https://s2.loli.net/2022/01/23/Ye7GHbFScqZomx1.png" alt="image-20211219154634888"></p><h3 id="4-5-基于万维网的电子邮件"><a href="#4-5-基于万维网的电子邮件" class="headerlink" title="4.5 基于万维网的电子邮件"></a>4.5 基于万维网的电子邮件</h3><p><img src="https://s2.loli.net/2022/01/23/aRuLKWOCGlbQDkh.png" alt="image-20211219163836916"></p><h3 id="4-6-通用互联网邮件扩充-MIME"><a href="#4-6-通用互联网邮件扩充-MIME" class="headerlink" title="4.6 通用互联网邮件扩充 MIME"></a>4.6 通用互联网邮件扩充 MIME</h3><p>增加邮件主体的结构，并定义传送非 ASCII 码的编码规则。</p><p><img src="https://s2.loli.net/2022/01/23/PBZlRUHyg8hYm16.png" alt="image-20211219164224634"></p><p><img src="https://s2.loli.net/2022/01/23/OpbhyrJ8aI7NDjQ.png" alt="image-20211219164238204"></p><p><img src="https://s2.loli.net/2021/12/19/6ZlPBSKQCcT37rL.png" alt="image-20211219165219313"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发调试知识</title>
      <link href="/2022/01/18/yc-debug/"/>
      <url>/2022/01/18/yc-debug/</url>
      
        <content type="html"><![CDATA[<h1 id="前端开发调试知识"><a href="#前端开发调试知识" class="headerlink" title="前端开发调试知识"></a>前端开发调试知识</h1><p>参加字节跳动的青训营时写的笔记。这部分是秃头披风侠老师讲的课。</p><h2 id="1-前端-Debug-特点"><a href="#1-前端-Debug-特点" class="headerlink" title="1. 前端 Debug 特点"></a>1. 前端 Debug 特点</h2><ul><li><strong>多平台</strong>：浏览器、NodeJs、小程序</li><li><strong>多环境</strong>：本地开发环境、线上环境</li><li><strong>多工具</strong>：Chrome devTools、Whistle</li><li><strong>多技巧</strong>：Console、BreakPoint、sourceMap、代理</li></ul><h2 id="2-Chrome-DevTools"><a href="#2-Chrome-DevTools" class="headerlink" title="2. Chrome DevTools"></a>2. Chrome DevTools</h2><h3 id="2-1-动态修改元素和样式"><a href="#2-1-动态修改元素和样式" class="headerlink" title="2.1 动态修改元素和样式"></a>2.1 动态修改元素和样式</h3><ul><li><p>点击.cls 开始动态修改元素的 class</p></li><li><p>输入类名即可给元素动态添加类名</p><p><img src="https://s2.loli.net/2022/01/18/dMCIWHT1Q9ytfKr.png" alt="image-20220118144027415"></p></li><li><p>勾选/取消类名查看类名生效效果</p></li><li><p>点击 Styles 下具体的样式值，可以进行编辑，且可以在浏览器中实时预览</p></li><li><p>Computed 下点击样式的箭头可以跳转到 Styles 下的 css 规则去</p><p><img src="https://s2.loli.net/2022/01/18/5agmRKDvMzp3qYf.png" alt="image-20220118144618256"></p></li><li><p>强制激活伪类</p><ol><li><p>选中具有伪类的元素，点击<code>:hov</code></p><p><img src="https://s2.loli.net/2022/01/18/98zMuRA3SJqk5Gf.png" alt="image-20220118144806343"></p></li><li><p>DOM 树右键菜单，选择 Force State</p><p><img src="https://s2.loli.net/2022/01/18/EzeyCUwJPk2dcs8.png" alt="image-20220118144945504"></p></li></ol></li></ul><h3 id="2-2-Console"><a href="#2-2-Console" class="headerlink" title="2.2 Console"></a>2.2 Console</h3><ul><li>console.log</li><li>console.warn</li><li>console.error</li><li>console.debug</li><li>console.info</li><li>console.table：具象化地展示 JSON 和数组数据</li><li>占位符：用于给日志添加样式，可以突出重要的信息<ul><li>%s：字符串占位符</li><li>%o：对象占位符</li><li>%c：样式占位符</li><li>%d：数字占位符</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;log&quot;</span>);<br><span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&quot;warn&quot;</span>);<br><span class="hljs-built_in">console</span>.error(<span class="hljs-string">&quot;error&quot;</span>);<br><span class="hljs-built_in">console</span>.debug(<span class="hljs-string">&quot;debug&quot;</span>);<br><span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;info&quot;</span>);<br><br><span class="hljs-keyword">const</span> peoples = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;czh&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>,<br>  &#125;,<br>];<br><span class="hljs-built_in">console</span>.table(peoples);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;%s %c%s&quot;</span>, <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;font-size: 24px;color: red;&quot;</span>, <span class="hljs-string">&quot;World&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/18/OhTrEu2CmDBGIRb.png" alt="image-20220118150413480"></p><h3 id="2-3-Sorce-Tab"><a href="#2-3-Sorce-Tab" class="headerlink" title="2.3 Sorce Tab"></a>2.3 Sorce Tab</h3><p><img src="https://s2.loli.net/2022/01/18/r1DxKLAFanMEhcu.png" alt="image-20220118150447113"></p><ul><li><p>源码中使用关键字 debugger 或代码预览区域点击行号设置断点</p></li><li><p>代码执行到断点处，代码暂停执行</p></li><li><p>展开 Breakpoints 列表可以查看断点列表，勾选可以激活对应断点</p><p><img src="https://s2.loli.net/2022/01/18/fma5wDF6ZKcY3tW.png" alt="image-20220118150828969"></p></li><li><p>鼠标放在变量上可以查看变量的值</p></li><li><p>在调试器 Watch 可以添加监听变量</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures"><strong>Scope</strong></a>：展开 Scope 可以查看作用域列表(包含闭包)</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack"><strong>Call Stack</strong></a>：展开 Call Stack 可以查看当前 JavaScript 代码的调用栈</p><p><strong>压缩后的代码调试</strong>：通过 Source Map 映射源码实现调试，Source Map 文件不跟着部署上线，从而实现安全调试。</p><h3 id="2-4-Performance"><a href="#2-4-Performance" class="headerlink" title="2.4 Performance"></a>2.4 Performance</h3><p>暂时没有用到过，先收藏一波图，方便以后重复查看。</p><p><img src="https://s2.loli.net/2022/01/18/3z81cJrnHvgZFed.png" alt="image-20220118151939298"></p><h3 id="2-5-NetWork"><a href="#2-5-NetWork" class="headerlink" title="2.5 NetWork"></a>2.5 NetWork</h3><p><img src="https://s2.loli.net/2022/01/18/9GTYrm2ZcJsHO8W.png" alt="image-20220118152125528"></p><h3 id="2-6-Application"><a href="#2-6-Application" class="headerlink" title="2.6 Application"></a>2.6 Application</h3><p>展示与本地存储相关的信息</p><ul><li>Local Storage</li><li>Session Storage</li><li>IndexedDB</li><li>Web SQL</li><li>Cookie</li></ul><p><img src="https://s2.loli.net/2022/01/18/Ot1AJq8SEgfnXQb.png" alt="image-20220118152311271"></p><p>点击 Stroage 面板下的 Clear Site Data 可以清除网页的本地存储数据</p><p><img src="https://s2.loli.net/2022/01/18/widKTPfumOpWMNq.png" alt="image-20220118152702648"></p><h3 id="2-7-线上即时修改"><a href="#2-7-线上即时修改" class="headerlink" title="2.7 线上即时修改"></a>2.7 线上即时修改</h3><p>可以实现在浏览器中修改样式，并且刷新页面是，修改不会消失</p><ol><li><p>打开 Sources 面板下的 Overrides</p><p><img src="https://s2.loli.net/2022/01/18/XkT39KcFSbs45f2.png" alt="image-20220118154133335"></p></li><li><p>点击 Select folders…选择一个本地的空文件夹(可以新建)</p></li><li><p>允许授权</p></li><li><p>修改代码</p></li><li><p>点击 DevTools 的三点-&gt;More tools-&gt;Changes，就能看到所有修改</p><p><img src="https://s2.loli.net/2022/01/18/XczjCkP9QKmFYO6.png" alt="image-20220118154836504"></p></li></ol><h2 id="3-利用代理解决跨域问题"><a href="#3-利用代理解决跨域问题" class="headerlink" title="3. 利用代理解决跨域问题"></a>3. 利用代理解决跨域问题</h2><p>原理：浏览器有同源策略策略的限制，会出现跨域问题。但是服务器之间不需要同源，所以，通过代理服务器接收浏览器的请求(代理服务器和浏览器同源)，代理服务器再转发请求给真实的服务器。</p><p><img src="https://s2.loli.net/2022/01/18/lg9KPrT1JYVhIFO.png" alt="image-20220118155230783"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营 </tag>
            
            <tag> 调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript温故而知新</title>
      <link href="/2022/01/17/yc-javascript/"/>
      <url>/2022/01/17/yc-javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-温故而知新"><a href="#JavaScript-温故而知新" class="headerlink" title="JavaScript 温故而知新"></a>JavaScript 温故而知新</h1><p>参加字节跳动的青训营时写的笔记。这部分是月影老师讲的课。</p><h2 id="1-各司其责"><a href="#1-各司其责" class="headerlink" title="1. 各司其责"></a>1. 各司其责</h2><ul><li><p>HTML/CSS/JS 各司其责</p></li><li><p><strong>避免不必要的直接使用 JS 操作样式</strong>(element.style.color=”red”)</p></li><li><p>使用 class 来表示状态</p></li><li><p>纯展示类交互寻求零 JS 方案(checkbox 的 checked 和 label，其中 checkbox 可以隐藏)</p></li></ul><h2 id="2-组件封装"><a href="#2-组件封装" class="headerlink" title="2. 组件封装"></a>2. 组件封装</h2><p>组件是指 Web 页面上抽出来一个个包含模板(HTML)、样式(CSS)、功能(JS)的单元</p><p>好的组件：封装性、正确性、扩展性、复用性</p><h3 id="2-1-基本方法"><a href="#2-1-基本方法" class="headerlink" title="2.1 基本方法"></a>2.1 基本方法</h3><ul><li>结构设计</li><li>展现效果</li><li>行为设计<ul><li>API(功能)</li><li>Event(控制流)</li></ul></li></ul><h3 id="2-2-重构"><a href="#2-2-重构" class="headerlink" title="2.2 重构"></a>2.2 重构</h3><ul><li><p><strong>插件化</strong></p><ul><li><p>将控制元素抽象成插件</p></li><li><p>插件与组件之间通过<b style="color: red">依赖注入</b>的方式建立联系</p></li></ul></li><li><p><strong>模板化</strong></p><ul><li>将 HTML 模板化，更易于扩展(即视图根据数据来更新，这样子需要变更图片之类的时候，就只需要在图片数组中操作，而不需要变更 HTML)</li></ul></li><li><p><strong>抽象化</strong>(组件框架)</p></li></ul><p>例子：轮播图把上一页、下一页和分页按钮抽象成插件，就可以根据需要添加了</p><h2 id="3-过程抽象"><a href="#3-过程抽象" class="headerlink" title="3. 过程抽象"></a>3. 过程抽象</h2><ul><li>用来处理局部细节控制的一些方法</li><li>函数式编程思想的基础应用</li></ul><p>为了能够让<strong>只执行一次</strong>的需求覆盖不同的事件处理，我们可以将这个需求剥离出来，这个过程就叫做<strong>过程抽象</strong></p><h3 id="3-1-高阶函数"><a href="#3-1-高阶函数" class="headerlink" title="3.1 高阶函数"></a>3.1 高阶函数</h3><ul><li>以函数作为参数</li><li>以函数作为返回值</li><li>常用于作为函数装饰器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">fn</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-built_in">this</span>, args);<br>  &#125;;<br>&#125; <span class="hljs-comment">// 等价范式</span><br></code></pre></td></tr></table></figure><p>常用高阶函数：</p><ul><li><p>Once</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">once</span>(<span class="hljs-params">fn</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (fn) &#123;<br>      <span class="hljs-keyword">const</span> ret = fn.apply(<span class="hljs-built_in">this</span>, args);<br>      fn = <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><a href="https://code.h5jun.com/gale/1/edit?js,output">Throttle</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, time = <span class="hljs-number">500</span></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> timer;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (timer == <span class="hljs-literal">null</span>) &#123;<br>      fn.apply(<span class="hljs-built_in">this</span>, args);<br>      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        timer = <span class="hljs-literal">null</span>; <span class="hljs-comment">/* 到期的话，清除之前的计时器 */</span><br>      &#125;, time);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><a href="https://code.h5jun.com/wik/edit?js,output">Debounce</a></p></li><li><p><a href="https://code.h5jun.com/roka/7/edit?js,output">Consumer / 2</a></p></li><li><p><a href="https://code.h5jun.com/kapef/edit?js,output">Iterative</a></p></li></ul><h4 id="3-1-1-为什么使用高阶函数？"><a href="#3-1-1-为什么使用高阶函数？" class="headerlink" title="3.1.1 为什么使用高阶函数？"></a>3.1.1 为什么使用高阶函数？</h4><p>两种函数：纯函数和非纯函数</p><ul><li>纯函数：输入的值一定时，输出的值一定，比较适合用于单元测试</li><li>非纯函数：会依赖于外部环境</li></ul><p>通过高阶函数可以减少非纯函数的数量，增加系统的可靠性、稳定性。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML、CSS温故而知新</title>
      <link href="/2022/01/17/yc-html-css/"/>
      <url>/2022/01/17/yc-html-css/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML、CSS-温故而知新"><a href="#HTML、CSS-温故而知新" class="headerlink" title="HTML、CSS 温故而知新"></a>HTML、CSS 温故而知新</h1><p>参加字节跳动的青训营时写的笔记。这部分是韩广军老师讲的课。</p><p><strong>前端</strong>：</p><p><img src="https://s2.loli.net/2022/01/17/QxptcwgIJ9RW4bh.png" alt="image-20220117162624413"></p><p>前端需要关注的东西：</p><ul><li><strong>功能</strong></li><li>美观</li><li>安全</li><li>兼容</li><li>体验</li><li>性能</li><li>无障碍</li></ul><h2 id="1-HTML"><a href="#1-HTML" class="headerlink" title="1. HTML"></a>1. HTML</h2><p>用于创建网页的标准标记语言</p><h3 id="1-1-HTML-语法"><a href="#1-1-HTML-语法" class="headerlink" title="1.1 HTML 语法"></a>1.1 HTML 语法</h3><ul><li>标签和属性不区分大小写，但是推荐小写</li><li>部分空标签可以不闭合，如 input、meta</li><li>属性值推荐使用<strong>双引号包裹</strong></li><li>属性值为 true 时，可以省略属性值，如 required、readonly</li></ul><h3 id="1-2-HTML-标签"><a href="#1-2-HTML-标签" class="headerlink" title="1.2 HTML 标签"></a>1.2 HTML 标签</h3><p><strong>h1-h6</strong>：h1 一级标题，h6 六级标题</p><p><strong>ol</strong>(有序列表)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>ul</strong>(无序列表)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>dl</strong>(定义列表)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>西游记<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>作者<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>吴承恩<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>创作年代<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>明代<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>借用人<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>clz<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>czh<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p>dt：标题， dd：具体描述， dt 和 dd 是多对多的关系</p><p><strong>a</strong>(链接)：</p><ul><li><p>href：链接的地址</p></li><li><p>target=”_blank”：以新标签的形式打开</p></li></ul><p><strong>img</strong>：</p><ul><li>alt：当加载失败或不加载图片时的替代文字</li></ul><p><strong>input</strong>：</p><ul><li><p>type=”range”：输入范围</p></li><li><p>type=”number”：输入数字，可以添加 min，max 设置范围</p></li><li><p>type=”date”：输入日期</p></li><li><p>type=”checkbox”：多选按钮</p></li><li><p>type=”radio”：单选按钮，通过 name 的属性值实现互斥</p></li></ul><p><strong>textarea</strong>：多行文本框</p><p><strong>引用</strong>：</p><ul><li><p>blockquote：块级引用(长引用， 如引用一段话)</p></li><li><p>cite：短引用(如书名)</p></li><li><p>q：短引用(具体内容)</p></li></ul><p><strong>强调</strong>：</p><p>strong：粗体强调标签，强调，表示内容的重要性</p><p>em：斜体强调标签，更强烈的强调，表示内容的强调点</p><h3 id="1-3-语义化"><a href="#1-3-语义化" class="headerlink" title="1.3 语义化"></a>1.3 语义化</h3><p>​ HTML 中的元素、属性及属性值都拥有某种含义，如有序列表用 ol，无序列表用 ul.</p><p><img src="https://s2.loli.net/2022/01/17/fkz5BJ8tZxCVcXv.png" alt="image-20220117162740803"></p><p>语义化好处：</p><ol><li>了解每个标签和属性的含义</li><li>思考什么标签最适合描述这个内容</li><li>不使用可视化工具生成</li></ol><h3 id="1-4-src-和-href-的区别"><a href="#1-4-src-和-href-的区别" class="headerlink" title="1.4 src 和 href 的区别"></a>1.4 src 和 href 的区别</h3><p>​ src 指向的内容会嵌入到文档当前标签所在的位置，而 href 是用于建立这个这个标签与外部资源之间的关系</p><h2 id="2-CSS"><a href="#2-CSS" class="headerlink" title="2. CSS:"></a>2. CSS:</h2><p>用来定义页面元素的样式(如文字的大小、颜色)</p><h3 id="2-1-使用-css-的三种形式"><a href="#2-1-使用-css-的三种形式" class="headerlink" title="2.1 使用 css 的三种形式"></a>2.1 使用 css 的三种形式</h3><ul><li><p>外链</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./index.css&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>嵌入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">color</span>: red;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>内联</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><img src="https://s2.loli.net/2022/01/17/aAnj92c6o7g1r3t.png" alt="image-20220117162822660"></p><h3 id="2-2-选择器"><a href="#2-2-选择器" class="headerlink" title="2.2 选择器"></a>2.2 选择器</h3><p><a href="https://13535944743.github.io/2021/10/15/css-selector/">css 选择器</a></p><p><img src="https://s2.loli.net/2022/01/17/vSikdbXoV6TZ89t.png" alt="image-20220117162857197"></p><p><strong>选择器的特异度</strong>：选择器的特异度高的会覆盖特异度低的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">nav</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: pink;<br>&#125;<br><span class="hljs-comment">/*结果会是红色*/</span><br></code></pre></td></tr></table></figure><p><code> #nav .list li a:link</code>：</p><table><thead><tr><th>id</th><th>(伪)类</th><th>标签</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2</td></tr></tbody></table><p><code> .box ul.links a</code>：</p><table><thead><tr><th>id</th><th>(伪)类</th><th>标签</th></tr></thead><tbody><tr><td>0</td><td>2</td><td>2</td></tr></tbody></table><h3 id="2-3-字体"><a href="#2-3-字体" class="headerlink" title="2.3 字体"></a>2.3 字体</h3><h4 id="2-3-1-字体族-font-family"><a href="#2-3-1-字体族-font-family" class="headerlink" title="2.3.1 字体族 font-family"></a>2.3.1 字体族 font-family</h4><p><img src="https://s2.loli.net/2022/01/17/6BJQEheD2MIuNUs.png" alt="image-20220117162938942"></p><p>font-family 使用建议:</p><ul><li>字体列表最后加上通用字体族</li><li>英文字体放在中文字体前面</li></ul><h4 id="2-3-2-字体大小-font-size"><a href="#2-3-2-字体大小-font-size" class="headerlink" title="2.3.2 字体大小 font-size"></a>2.3.2 字体大小 font-size</h4><ul><li>关键字：small、medium、large</li><li>长度：px、em</li><li>百分比：相对于父元素字体大小</li></ul><h4 id="2-3-3-字体粗细-font-weight"><a href="#2-3-3-字体粗细-font-weight" class="headerlink" title="2.3.3 字体粗细 font-weight"></a>2.3.3 字体粗细 font-weight</h4><p>font-weight: 100-900</p><p>normal(400), bold(700)</p><h4 id="2-3-4-行高-line-height"><a href="#2-3-4-行高-line-height" class="headerlink" title="2.3.4 行高 line-height"></a>2.3.4 行高 line-height</h4><p>用于设置多行元素的空间量</p><p><img src="https://s2.loli.net/2022/01/17/D5zL6wIMqthrbAT.png" alt="image-20220117163300668"></p><p>如果 line-height 的值没有单位，则是 font-size*line-height 的值</p><h4 id="2-3-5-简写"><a href="#2-3-5-简写" class="headerlink" title="2.3.5 简写"></a>2.3.5 简写</h4><p><code> font: style weight size/height family</code></p><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">font</span>: bold <span class="hljs-number">16px</span>/<span class="hljs-number">2</span> Arial, Helvetica;<br>&#125;<br><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">font</span>: <span class="hljs-number">16px</span> serif;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-继承"><a href="#2-4-继承" class="headerlink" title="2.4 继承"></a>2.4 继承</h3><p><a href="https://cdpn.io/webzhao/debug/xxXyzRd">CSS 属性取值过程</a></p><p>某些属性会自动继承父元素的计算值，除非显式指定一个值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>456<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue&quot;</span>&gt;</span>789<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 CSS 中以 text-、font-、line- 开头的属性都是可以继承的</p><p>显示继承：inherit</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-attribute">color</span>: inherit;<br>&#125;<br><br><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-selector-class">.special</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-盒模型"><a href="#2-5-盒模型" class="headerlink" title="2.5 盒模型"></a>2.5 盒模型</h3><ul><li>标准盒模型：width 指 content 的宽度(即内容的宽度)，<code>box-sizing</code>为 content-box</li><li>怪异盒模型(IE 盒模型)：width 指 content 的宽度 + 左右 padding 值 + 左右 border 值，<code>box-sizing</code>为 border-box</li></ul><p><img src="https://s2.loli.net/2022/01/17/cJDzEYHrXCdViva.png" alt="img"></p><p><img src="https://s2.loli.net/2022/01/17/MPuIEOHewyDAd3N.png" alt="image-20220117123750994"></p><p>上两张图片来源：<a href="https://www.jianshu.com/p/7dadcc458410">https://www.jianshu.com/p/7dadcc458410</a></p><h3 id="2-6-块级元素与行级元素的区别"><a href="#2-6-块级元素与行级元素的区别" class="headerlink" title="2.6 块级元素与行级元素的区别"></a>2.6 块级元素与行级元素的区别</h3><table><thead><tr><th>块级</th><th>行级</th></tr></thead><tbody><tr><td>不和其他盒子并列摆放</td><td>可以和其他行级盒子一起放到一行</td></tr><tr><td>适应所有的盒模型属性</td><td>盒模型中的 width、height 不适用</td></tr></tbody></table><h3 id="2-7-行级排版上下文-IFC-和块级排版上下文-BFC"><a href="#2-7-行级排版上下文-IFC-和块级排版上下文-BFC" class="headerlink" title="2.7 行级排版上下文(IFC)和块级排版上下文(BFC)"></a>2.7 行级排版上下文(IFC)和块级排版上下文(BFC)</h3><h4 id="2-7-1-行级排版上下文-IFC"><a href="#2-7-1-行级排版上下文-IFC" class="headerlink" title="2.7.1 行级排版上下文(IFC)"></a>2.7.1 行级排版上下文(IFC)</h4><ul><li>Inline Formatting Context</li><li><strong>只包含行级盒子</strong>的容器会创建一个 IFC</li><li>IFC 内的排版规则<ul><li>盒子在一行内平行摆放</li><li>一行放不下时，换行显示</li><li>text-align 决定一行内盒子的水平对齐</li><li>vertical-align 决定一个盒子在行内的垂直对齐</li><li>避开浮动(float)元素</li></ul></li></ul><h4 id="2-7-2-块级排版上下文-BFC"><a href="#2-7-2-块级排版上下文-BFC" class="headerlink" title="2.7.2 块级排版上下文(BFC)"></a>2.7.2 块级排版上下文(BFC)</h4><ul><li>BlockFormatting Context</li><li>某些容器会创建一个 BFC<ul><li>根元素</li><li>浮动、绝对定位、inline-block</li><li>Flex 子项和 Grid 子项</li><li>overflow 值不为 visible 的块盒</li><li>display: flow-root;</li></ul></li></ul><h3 id="2-8-Flex-布局"><a href="#2-8-Flex-布局" class="headerlink" title="2.8 Flex 布局"></a>2.8 Flex 布局</h3><p><a href="https://13535944743.github.io/2021/07/29/Flex-Layout/">Flex 布局 | 赤蓝紫 (13535944743.github.io)</a></p><p>之前学习时写的笔记。</p><h3 id="2-9-Grid-布局"><a href="#2-9-Grid-布局" class="headerlink" title="2.9 Grid 布局"></a>2.9 Grid 布局</h3><ul><li>display: grid 使元素生成一个块级的 Grid 容器</li><li>使用 grid-template 相关属性将容器划分为网格</li><li>设置每一个子项占哪些行/列</li></ul><p>暂时只是初略了解，之后还是得正式学</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> 青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目部署到服务器(ubuntu)</title>
      <link href="/2022/01/02/vue-online/"/>
      <url>/2022/01/02/vue-online/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-项目部署到服务器-ubuntu"><a href="#Vue-项目部署到服务器-ubuntu" class="headerlink" title="Vue 项目部署到服务器(ubuntu)"></a>Vue 项目部署到服务器(ubuntu)</h1><p>工具：WinSCP、PuTTy(可能不是专业的工具，是本人上操作系统的课用到的软件，直接用来部署了)</p><ol><li><p>打包项目，<code> npm run build</code></p><p>执行<code> npm run build</code>命令后，会生成一个 dist 文件夹。</p><p>这一步如果得不到预期的结果，可以把<code> vue.config.js</code>文件中的 publicPath 节点变为’./‘，如果不存在，则新建文件</p><p><img src="https://s2.loli.net/2022/01/02/RVmwxvoJdtfMY7T.png" alt="image-20220102142328110"></p></li><li><p>把项目文件放到服务器上</p><p>用 WinSCP 登录服务器后，理论上直接把本地的文件直接拖过去，就能复制过去了。但是 ubuntu 没有 root 用户，所以部分文件夹会没有权限。这个时候，就可以采用战略：先复制到不需要权限的地方，然后再通过命令行给命令 mv 添加 sudo 增加权限，把文件夹复制到需要文件的地方。</p><p><img src="https://s2.loli.net/2022/01/02/i8jMTw3z2NAalI9.png" alt="image-20220102143258862"></p><p><img src="https://s2.loli.net/2022/01/02/lH2tL7NMoyzmhuO.png" alt="image-20220102143404631"></p><p><img src="https://s2.loli.net/2022/01/02/WcBbZD2XFH6iRVm.png" alt="image-20220102143522128"></p><p><img src="https://s2.loli.net/2022/01/02/CJs3WhY2H7KmraS.png" alt="image-20220102143626669"></p></li><li><p>安装 nginx, <code> sudo apt-get install nginx</code></p><p><img src="https://s2.loli.net/2022/01/02/pozBZEP7flqDM9L.png" alt="image-20220102143748982"></p></li><li><p>使用 PuTTy 配置 nginx， 到下图路径中，执行命令<code> sudo vim default</code></p><p><img src="https://s2.loli.net/2022/01/02/zmxv8BnIXSQ2uNo.png" alt="image-20220102144203777"></p><p><img src="https://s2.loli.net/2022/01/02/nAPbz2SkHlxyRj5.png"></p><p><b style="color: red">这里直接在 WinSCP 中执行会出错，可能是因为 WinSCP 原本就只是用来管理传输文件的</b></p><p><img src="https://s2.loli.net/2022/01/02/MLpGQEFuraJUvfn.png" alt="image-20220102145110015"></p></li><li><p>重启 nginx，<code> sudo nginx -s reload</code>, 打开服务器网址，就能看到效果</p></li><li><p>还有个小问题，如果路由模式为 history 的话，可能会有加载不成功的资源(如图片)，本人因为在考试复习周，所以没有去搞这个配置，而是直接把路由模式改为了哈希模式(虽然有#，丑了点)</p></li></ol><p><strong>最终效果</strong>：</p><p><img src="https://s2.loli.net/2022/01/02/VguLKHvkPifR7oG.png" alt="image-20220102145654643"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络(五)    运输层</title>
      <link href="/2021/12/26/computer-network-5/"/>
      <url>/2021/12/26/computer-network-5/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络-五-运输层"><a href="#计算机网络-五-运输层" class="headerlink" title="计算机网络(五) 运输层"></a>计算机网络(五) 运输层</h1><h2 id="1-运输层协议概述"><a href="#1-运输层协议概述" class="headerlink" title="1. 运输层协议概述"></a>1. 运输层协议概述</h2><p>运输层向它上面的应用层提供通信服务，它属于面向通信部份的最高层，也是用户功能中的最低层</p><p><strong>端到端的通信</strong>：进程之间的通信。主机 A 的某个进程和主机 B 上的另一个进程进行通信</p><p><strong>网络层和运输层的区别</strong>：<strong>网络层是为主机之间提供逻辑通信，运输层是为应用进程之间提供端到端的逻辑通信</strong>。</p><h2 id="2-运输层的两个主要协议"><a href="#2-运输层的两个主要协议" class="headerlink" title="2. 运输层的两个主要协议"></a>2. 运输层的两个主要协议</h2><ul><li>用户数据报协议 UDP：传送的数据单位协议是<strong>UDP 报文</strong>或<strong>用户数据报</strong></li><li>传输控制协议 TCP：传送的数据单位协议是<strong>TCP 报文段</strong></li></ul><h3 id="2-1-用户数据报协议-UDP"><a href="#2-1-用户数据报协议-UDP" class="headerlink" title="2.1 用户数据报协议 UDP"></a>2.1 用户数据报协议 UDP</h3><p>UDP 在 IP 的数据报服务之上增加的功能·</p><ul><li>复用和分用的功能</li><li>差错检测的功能</li></ul><h4 id="2-1-1-UDP-的主要特点"><a href="#2-1-1-UDP-的主要特点" class="headerlink" title="2.1.1 UDP 的主要特点"></a>2.1.1 UDP 的主要特点</h4><ul><li><strong>UDP 是无连接的</strong>：减少了开销和发送数据之前的时延</li><li><strong>UDP 尽最大努力交付</strong>：不保证可靠交付</li><li><strong>UDP 是面向报文的</strong>：UDP 一次交付一个完整的报文</li><li><strong>UDP 没有拥塞控制</strong></li><li><strong>UDP 支持一对一、一对多、多对一、多对多的交互通信</strong></li><li><strong>UDP 的首部开销小</strong>，只有 8 个字节(由 4 个字段组成，每个字段都是 2 个字节)，比 TCP 的 20 个字节的首部要短</li></ul><h3 id="2-2-传输控制协议-TCP"><a href="#2-2-传输控制协议-TCP" class="headerlink" title="2.2 传输控制协议 TCP"></a>2.2 传输控制协议 TCP</h3><h4 id="2-2-1-TCP-最主要的特点"><a href="#2-2-1-TCP-最主要的特点" class="headerlink" title="2.2.1 TCP 最主要的特点"></a>2.2.1 TCP 最主要的特点</h4><ul><li><p>TCP 是<b style="color: red">面向连接</b>的运输层协议</p></li><li><p>每一条 TCP 连接<strong>只能由两个端点</strong>，每一条 TCP 连接都<strong>只能是一对一</strong>的</p></li><li><p>TCP 提供<b style="color: red">可靠交付</b>的服务</p></li><li><p>TCP 提供<strong>全双工</strong>通信</p></li><li><p><strong>面向字节流</strong>：流指的是流入或流出进程的字节序列</p><p>应用程序和 TCP 的交互是一次一个数据块，但 TCP 把应用程序交下来的数据当成一连串无结构的字节流。(接收方应用程序收到的数据块和发送方应用程序发出的<strong>数据块不一定具有对应大小的关系</strong>，但是收到的<strong>字节流完全一样</strong>)</p></li></ul><h4 id="2-2-2-TCP-的连接"><a href="#2-2-2-TCP-的连接" class="headerlink" title="2.2..2 TCP 的连接"></a>2.2..2 TCP 的连接</h4><ul><li><p>每一条 TCP 连接有<strong>两个端点</strong></p></li><li><p><b style="color: red">TCP 连接的断点叫做套接字(socket)或插口</b></p></li><li><p><strong>端口号拼接到 IP 地址就构成了套接字</strong>，即套接字 socket=(IP 地址:端口号)</p><p>例如，套接字 socket=(127.0.0.1:8080)</p><p>每一条 TCP 连接<strong>唯一</strong>地被通信两端的<strong>两个端点</strong>(即两个套接字)所确定。</p><p>例如：TCP 连接::= {socket1, socket2} = {(IP1:port1), (IP2, port2)}</p></li></ul><p><strong>TCP 连接、IP 地址、套接字</strong></p><ul><li>TCP 连接是由协议软件提供的一种抽象</li><li>TCP 连接的端点是个抽象的套接字，即(IP 地址:端口号)</li><li>同一个 IP 地址可以有多个不同的 TCP 连接</li><li>同一个端口号可以出现在多个不同的 TCP 连接中</li></ul><h3 id="2-3-可靠传输的工作原理"><a href="#2-3-可靠传输的工作原理" class="headerlink" title="2.3 可靠传输的工作原理"></a>2.3 可靠传输的工作原理</h3><h4 id="2-3-1-停止等待协议"><a href="#2-3-1-停止等待协议" class="headerlink" title="2.3.1 停止等待协议"></a>2.3.1 停止等待协议</h4><p>停止等待就是每发送完一个分组就停止发送，等待对方的确认，在收到确认后再发送下一个分组</p><p><img src="https://s2.loli.net/2021/12/26/qZSudAFnCPUQyMN.jpg"></p><p>出现差错：</p><ul><li>接收方 B 接收 M1 时检测出了差错，就丢弃 M1，不通知发送方 A 收到有差错的分组</li><li>M1 在传输过程中丢失了</li></ul><p>在上面两种情况下，B 都不会发送任何信息，但是 A 必须重发分组，直到 B 正确接收为止，这样才可以实现可靠通信</p><p>问题：A 如何知道 B 是否 1 正确收到了 M1?</p><p>解决方法：超时重传</p><ol><li>A 为每一个已发送的分组都设置了一个<strong>超时计时器</strong></li><li>A 只要在计时器到期之前收到了相应的确认，就撤销该超时计时器，继续发送下一个分组 M2</li><li>如果 A 在超时计时器规定时间内没有收到 B 的确认，就认为分组错误或丢失，所以需要重发该分组</li></ol><p>问题：如果分组正确到达 B 但是 B 回送的确认丢失或延迟了，A 会超时重传，B 可能会受到重发的 M1，B 如何知道收到了重复的分组，需要丢弃。</p><p>解决方法：编号</p><ol><li>A 为每一个发送的分组都进行编号。如果 B 收到了编号相同的分组，则认为收到了重复分组，丢弃重复的分组，并回传确认</li><li>B 也为发送的确认进行编号，指示是对哪一个分组的确认</li><li>A 根据确认以及它的编号，可以确定它是对哪一个分组的确认，避免重发。如果是重复的确认，则将其丢弃</li></ol><p><b style="color: red">停止等待协议的要点：</b></p><ul><li><strong>停止等待</strong>：发送方每次只发送一个分组，在收到确认后 1 再发送下一个分组</li><li><strong>编号</strong>：对发送的每个分组和确认都进行编号</li><li><strong>自动重传请求</strong>：发送方为每个发送的分组设置一个超时计时器。如果发送方没有在超时计时器到期之前收到确认，则会自动重传分组</li><li>简单，但<strong>信道利用率低</strong></li></ul><h4 id="2-3-2-连续-ARQ-协议"><a href="#2-3-2-连续-ARQ-协议" class="headerlink" title="2.3.2 连续 ARQ 协议"></a>2.3.2 连续 ARQ 协议</h4><ul><li>发送方一次可以发送<strong>多个分组</strong></li><li>使用<strong>滑动窗口协议</strong>控制发送方和接收方所能发送和接收的分组的数量和编号</li><li>每收到一个确认，发送方就把发送窗口<strong>向前滑动</strong></li><li>采用<strong>回退 N</strong>方法进行重传</li></ul><p><img src="https://s2.loli.net/2021/12/26/QPXtuv5FWGSEcV4.jpg"></p><p>接收方一般采用<strong>累计确认</strong>的方式。即不必对收到的分组逐个发送确认，而是<strong>对按序到达的最后一个分组发送确认</strong>，即<strong>到这个分组为止的所有分组都已经正确收到了</strong></p><p>优点：容易实现，即使确认丢失也不必重传</p><p>缺点：不能向发送方反映出接收方已经正确收到的所有分组的信息(如发送 1, 2, 3, 4, 5, 接收方收到 1, 2, 4, 5，只能向发送方反映接收到了 1, 2 分组，不能像发送方确认正确收到 4, 5 分组)</p><p>如果发送方发送 1, 2, 3, 4, 5 分组，而中间的第三个分组丢失了，接收方只能对前两个分组发出确认，而发送方无法知道后面三个分组是否发送成功，所以只能把后面的三个分组都在重传一次，这就叫做<strong>回退 N</strong>，表示需要回退， 去重传已经发送过的 N 个分组</p><p><strong>滑动窗口协议</strong>：ppt(p88)</p><p><img src="https://s2.loli.net/2021/12/26/QEcHXNwW3q6y5jg.jpg"></p><h3 id="2-4-TCP-报文段的首部格式"><a href="#2-4-TCP-报文段的首部格式" class="headerlink" title="2.4 TCP 报文段的首部格式"></a>2.4 TCP 报文段的首部格式</h3><p>TCP 是面向字节流的，但是 TCP 传送的数据单元却是报文段。</p><p>一个 TCP 报文段分为首部和数据两部分。<strong>TCP 首部的最小长度是 20 字节</strong></p><h3 id="2-5-TCP-可靠传输的实现"><a href="#2-5-TCP-可靠传输的实现" class="headerlink" title="2.5 TCP 可靠传输的实现"></a>2.5 TCP 可靠传输的实现</h3><h4 id="2-5-1-以字节为单位的滑动窗口"><a href="#2-5-1-以字节为单位的滑动窗口" class="headerlink" title="2.5.1 以字节为单位的滑动窗口"></a>2.5.1 以字节为单位的滑动窗口</h4><p>TCP 使用流水线传输和滑动窗口协议实现高效、可靠的传输</p><p>TCP 的滑动窗口<strong>以字节为单位</strong>，发送方 A 和发送方 B 分别维持一个发送窗口和一个接收窗口。</p><p><strong>发送窗口</strong>在没有收到确认时，可以连续把窗口内的数据全部发送出去；<strong>接收窗口</strong>只允许接收落入窗口内的数据。</p><p>例子：</p><p><img src="https://pic.imgdb.cn/item/61a866552ab3f51d91795cae.jpg"></p><p><strong>如果 A 的发送窗口内的序号都已用完，但没有收到确认，则必须停止发送。</strong></p><p><img src="https://pic.imgdb.cn/item/61a866e02ab3f51d9179ba23.jpg"></p><p>发送方的应用进程把字节流写入 TCP 的发送缓存，接收方的应用进程从 TCP 的接收缓存中读取字节流。</p><p><strong>发送缓存暂时存放</strong>：</p><ul><li>准备发送的数据</li><li>已发送出但并未收到确认的数据</li></ul><p><strong>接收缓存暂时存放</strong>：</p><ul><li>按序到达的但还没被读取的数据</li><li>不按序到达的数据</li></ul><p>A 的发送窗口并不总是和 B 的接收窗口一样大。</p><p>TCP 针对不按序到达的数据的处理：</p><ul><li>先临时存放在接收窗口中</li><li>缺少的数据到达后，再按序交付给上层的应用进程</li></ul><h4 id="2-5-2-超时重传时间的选择"><a href="#2-5-2-超时重传时间的选择" class="headerlink" title="2.5.2 超时重传时间的选择"></a>2.5.2 超时重传时间的选择</h4><p>TCP 每发送一个报文段，就对这个报文段设置一次计时器。</p><p>如果计时器设置的重传时间到了，但是还没有收到确认，就要重传这一报文段。</p><p>加权平均往返时间、超时重传时间 RTO、Karn 算法</p><h4 id="2-5-3-选择确认-SACK"><a href="#2-5-3-选择确认-SACK" class="headerlink" title="2.5.3 选择确认 SACK"></a>2.5.3 选择确认 SACK</h4><p>场景：收到的报文段没有差错，只是没按序号，中间还缺少某些序号的数据。选择确认 SACK 可以只传送缺少的数据而不重传已经正确到达接收方的数据。</p><h3 id="2-6-TCP-的拥塞控制-PPT-P158"><a href="#2-6-TCP-的拥塞控制-PPT-P158" class="headerlink" title="2.6 TCP 的拥塞控制(PPT P158)"></a>2.6 TCP 的拥塞控制(PPT P158)</h3><p><strong>慢开始</strong>、<strong>拥塞避免算法</strong>、<strong>快重传</strong></p><h3 id="2-7-TCP-的连接"><a href="#2-7-TCP-的连接" class="headerlink" title="2.7 TCP 的连接"></a>2.7 TCP 的连接</h3><p>TCP 是面向连接的协议</p><p>TCP 连接有三个阶段：</p><ol><li><strong>连接建立</strong></li><li><strong>数据传送</strong></li><li><strong>连接释放</strong></li></ol><p>TCP 连接的建立<strong>采用客户服务器方式</strong>。主动发起连接建立的应用进程叫做<strong>客户端</strong>(client)，被动等待连接建立的应用进程叫做<strong>服务器</strong>(server)</p><h4 id="2-7-1-TCP-的连接建立"><a href="#2-7-1-TCP-的连接建立" class="headerlink" title="2.7.1 TCP 的连接建立"></a>2.7.1 TCP 的连接建立</h4><p>TCP 建立连接的过程叫做<strong>握手</strong>。握手需要在客户端和服务器之间交换三个 TCP 报文段，称为<strong>三报文握手</strong></p><p>采用三报文握手的目的：防止已失效的连接请求报文段突然又传送到了。</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112091438033.png" alt="image-20211209143835954"></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112091440908.png" alt="image-20211209144023848"></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112091440266.png" alt="image-20211209144035208"></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112091440555.png" alt="image-20211209144049512"></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112091441796.png" alt="image-20211209144100735"></p><h4 id="2-7-2-TCP-的连接释放"><a href="#2-7-2-TCP-的连接释放" class="headerlink" title="2.7.2 TCP 的连接释放"></a>2.7.2 TCP 的连接释放</h4><p>TCP 连接释放过程是<strong>四报文握手</strong></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112091443586.png" alt="image-20211209144315512"></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112091445966.png" alt="image-20211209144553920"></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112091446967.png" alt="image-20211209144600913"></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112091446336.png" alt="image-20211209144616280"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络(四)    网络层</title>
      <link href="/2021/12/26/computer-network-4/"/>
      <url>/2021/12/26/computer-network-4/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络-四-网络层"><a href="#计算机网络-四-网络层" class="headerlink" title="计算机网络(四) 网络层"></a>计算机网络(四) 网络层</h1><h2 id="1-网络层提供的两种服务"><a href="#1-网络层提供的两种服务" class="headerlink" title="1. 网络层提供的两种服务"></a>1. 网络层提供的两种服务</h2><h3 id="1-1-让网络负责可靠交付"><a href="#1-1-让网络负责可靠交付" class="headerlink" title="1.1 让网络负责可靠交付"></a>1.1 让网络负责可靠交付</h3><ul><li><p>模拟电信网络，使用<strong>面向连接</strong>的通信方式</p></li><li><p>通信之前先建立<strong>虚电路</strong>，保证双方通信所需的一切网络资源</p><p><img src="https://s2.loli.net/2021/12/26/yHbS9MDL8glfnwe.jpg"></p></li></ul><p><strong>虚电路是逻辑连接</strong>：虚电路只是<strong>逻辑上的连接</strong>，分组都沿着这条逻辑连接<strong>按照存储转发方式传送</strong>，不是真正建立了一条物理连接</p><h3 id="1-2-网络提供数据报服务"><a href="#1-2-网络提供数据报服务" class="headerlink" title="1.2 网络提供数据报服务"></a>1.2 网络提供数据报服务</h3><ul><li><p>网络层向上只提供简单灵活的、<strong>无连接的</strong>、<strong>尽最大努力交付</strong>的<strong>数据报服务</strong></p></li><li><p>网络在发送分组时不需要先建立连接。每一个分组(即 IP 数据报)独立发送，与其前后的分组无关</p></li><li><p><b style="color: red">网络层不提供端到端的可靠传输服务，由主机中的运输层负责可靠交付(包括差错处理、流量控制等)</b></p><p><img src="https://s2.loli.net/2021/12/26/7qcHNbFrCkymVWT.jpg"></p></li></ul><p><img src="https://s2.loli.net/2021/12/26/Sku6HETj5ORxvoV.jpg"></p><h2 id="2-网际协议-IP"><a href="#2-网际协议-IP" class="headerlink" title="2. 网际协议 IP"></a>2. 网际协议 IP</h2><ul><li>网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一</li><li>与 IP 协议配套使用的三个协议：<b style="color: red">地址解析协议 ARP</b>、<b style="color: red">网际控制报文协议 ICMP</b>、<b style="color: red">网际组管理协议 IGMP</b></li></ul><h3 id="2-1-虚拟互连网络"><a href="#2-1-虚拟互连网络" class="headerlink" title="2.1 虚拟互连网络"></a>2.1 虚拟互连网络</h3><p>虚拟互连网络：逻辑互连网络。即互连起来的各种物理网络的异构性本来是客观存在的，但是利用 IP 协议可以使这些性能各异的网络从用户看起来好像是一个统一的网络</p><p><strong>好处</strong>：当互联网上的主机进行通信时，就好像在一个网络上通信一样，而看不见具体的网络异构细节</p><h3 id="2-2-分类的-IP-地址"><a href="#2-2-分类的-IP-地址" class="headerlink" title="2.2 分类的 IP 地址"></a>2.2 分类的 IP 地址</h3><h4 id="2-2-1-IP-地址及其表示方法"><a href="#2-2-1-IP-地址及其表示方法" class="headerlink" title="2.2.1 IP 地址及其表示方法"></a>2.2.1 IP 地址及其表示方法</h4><ul><li><strong>IP 地址</strong>就是给每个连接在互联网上的主机(或路由器)分配一个在全世界范围是<strong>唯一的 32 位的标识符</strong></li></ul><h4 id="2-2-2-IP-地址的编址方法"><a href="#2-2-2-IP-地址的编址方法" class="headerlink" title="2.2.2 IP 地址的编址方法"></a>2.2.2 IP 地址的编址方法</h4><p><b style="color: red">分类 IP 地址：最基本的编址方法</b></p><ul><li><p>将 IP 地址划分为若干个固定类(如 A 类、B 类、C 类地址)</p></li><li><p>每一类地址都由两个固定长度的字段组成，第一个字段是<strong>网络号</strong>，标志主机(或路由器)所连接到的网络，第二个字段是<strong>主机号</strong>，标志该主机(或路由器)</p><p><img src="https://s2.loli.net/2021/12/26/r5ozRkJpUgHySqW.png"></p></li><li><p><b style="color: red">一个 IP 地址在整个互联网范围内是唯一的</b></p></li></ul><p><img src="https://s2.loli.net/2021/12/26/SxtKypvMl6aX5R3.jpg"></p><p>由上图可知，</p><ul><li>IP 地址第一位是 0 时属于 A 类地址，IP 地址前 2 位是 10 时属于 B 类地址，IP 地址前 3 位是 110 时属于 C 类地址</li><li>A 类地址的网络号字段为 1 字节，主机号字段为 3 字节；B 类地址的网络号字段为 2 字节，主机号字段为 2 字节; C 类地址的网络号字段为 3 字节，主机号字段为 1 字节</li></ul><p>点分十进制记法：</p><ol><li>机器中存放的 IP 地址是 32 位二进制代码</li><li>把二进制代码按每 8 位为一组分为 4 组</li><li>把每一组的二进制数转换为十进制数</li></ol><p><img src="https://s2.loli.net/2021/12/26/6vjAT1skC7WURob.jpg"></p><p><b style="color: red">IP 地址的一些重要特点：</b></p><ul><li><p><strong>IP 地址是一种分等级的地址结构</strong></p><p>好处：</p><ol><li>IP 地址管理机构在分配 IP 地址时只分配网络号，主机号由得到该网络号的单位自行分配，方便了 IP 地址的管理</li><li>路由器仅根据目的主机所连接的网络号来转发分组，使路由表中的项目数大幅度减少，从而减少路由表所占的存储空间</li></ol></li><li><p><strong>IP 地址是标志一个主机(或路由器)和一条链路的接口</strong></p><ul><li>当一个主机同时连接到两个网络上时，这个时候这台主机就必须要有两个 IP 地址，而且网络号必须是不同的。这种主机被称为<strong>多归属主机</strong></li><li>由上一条可以知道，<strong>一个路由器至少要有两个不同的 IP 地址</strong>，因为路由器需要将 IP 数据报从一个网络转发到另一个网络</li></ul></li><li><p><strong>用转发器或网桥连接起来的若干个局域网是同一个网络，所以这些局域网都具有同样的网络号</strong></p></li><li><p><strong>所有分配到网络号的网络都是平等的</strong></p></li></ul><p><img src="https://s2.loli.net/2021/12/26/x13vZzRBYAfbdqG.jpg"></p><p>分析：</p><ul><li>222 的二进制是 11011110，所以上图中的 IP 地址都属于 C 类地址</li><li>C 类地址的网络号字段 net-id 为 3 字节，而同一个局域网上的主机(或路由器)的 IP 地址上的网络号是一样的，所以上图每一块粉色区域分别是一个局域网</li></ul><h3 id="2-3-IP-地址与硬件地址"><a href="#2-3-IP-地址与硬件地址" class="headerlink" title="2.3 IP 地址与硬件地址"></a>2.3 IP 地址与硬件地址</h3><ul><li><strong>IP 地址</strong>是网络层和以上各层使用的地址，是一种逻辑地址</li><li>**硬件地址(或物理地址)**是数据链路层和物理层使用的地址</li></ul><p><img src="https://s2.loli.net/2021/12/26/kryRIU2zwX8VdZ4.jpg"></p><h3 id="2-4-地址解析协议-ARP"><a href="#2-4-地址解析协议-ARP" class="headerlink" title="2.4 地址解析协议 ARP"></a>2.4 地址解析协议 ARP</h3><p>通信的时候使用了两个地址，<strong>IP 地址(网络层地址)<strong>和</strong>MAC 地址(数据链路层地址)</strong></p><p><strong>地址解析协议</strong>作用：通过网络层使用的 IP 地址，解析出在数据链路层使用的硬件地址</p><p><b style="color: red">不论网络层使用的是什么协议，实际网络的链路上传送数据帧时，最终都必须使用硬件地址</b></p><p>每一个主机都设有一个<strong>ARP 高速缓存</strong>，里面有它在的局域网上的所有主机和路由器的 IP 地址到硬件地址的映射表。</p><p><code> &lt;IP address; MAC address; TTL&gt;</code></p><p>**TTL(Time To Live): **地址映射有效时间</p><p><strong>地址解析协议 ARP</strong>：</p><ul><li>当主机 A 要向局域网中的主机 B 发送 IP 数据包时，会先在它的 ARP 高速缓存中查看有无主机 B 的 IP 地址。如果有，就将对应的硬件地址写入 MAC 帧，然后把 MAC 帧发送这个硬件地址，如果没有，则 ARP 进程在局域网中<strong>广播发送</strong>一个<strong>ARP 请求分组</strong>。收到<strong>ARP 响应分组</strong>后，将得到的 IP 地址到硬件地址的映射写入 ARP 高速缓存中。</li></ul><p><img src="https://s2.loli.net/2021/12/26/8lyokHMvmg5zeL4.jpg"></p><p><b style="color: red">ARP 高速缓存的作用：存放最近获得的 IP 地址到 MAC 地址的绑定，以减少 ARP 广播的数量</b></p><p><strong>要注意的问题</strong>：</p><p>ARP 是用于解决<b style="color: red">同一个局域网</b>的主机或路由器的 IP 地址和硬件地址的映射问题的</p><p>如果要找的主机和源主机不在同一个局域网中，就要<strong>通过 ARP 找到本局域网中的某个路由器的硬件地址</strong>，把分组发送给这个路由器，让路由器把分组转发给下一个网络，剩下的都交给下一个网络。</p><p><strong>使用 ARP 的四种典型情况</strong>：</p><ul><li>发送方是主机，要把 IP 数据报发送到本网络上的另一个主机。可以用 ARP 找到目的主机的硬件地址。</li><li>发送方是主机，要把 IP 数据报发送到另一个网络上的一个主机。用 ARP 找到本网络上的一个路由器的硬件地址，剩下的交给这个路由器。</li><li>发送方是路由器，要把 IP 数据报发送到本网络上的一个主机。可以用 ARP 找到目的主机的硬件地址。</li><li>发送方是路由器，要把 IP 数据报发送到另一个网络上的一个主机。用 ARP 找到本网络上的另一个路由器的硬件地址，剩下的交给这个路由器。</li></ul><h3 id="2-5-IP-数据报的形式"><a href="#2-5-IP-数据报的形式" class="headerlink" title="2.5 IP 数据报的形式"></a>2.5 IP 数据报的形式</h3><ul><li>一个数据报由<strong>首部</strong>和<strong>数据</strong>两部分组成</li><li><strong>首部的前一部分是固定长度，一共 20 字节，是所有 IP 数据报必须具有的</strong></li><li>首部的固定部分的后面是一些可选字段，长度可变</li></ul><p><img src="https://s2.loli.net/2021/12/26/nigWU7DG9QxAe1a.png" alt="image-20211102224544607"></p><p>首部检验和的计算采用 16 位二进制反码求和算法。这个字段<strong>只检验数据包的首部，不包括数据部分</strong></p><p><img src="https://s2.loli.net/2021/12/26/m1C4ajFBPyuTAUR.png" alt="image-20211102225044386"></p><h3 id="2-6-IP-层转发分组的流程"><a href="#2-6-IP-层转发分组的流程" class="headerlink" title="2.6 IP 层转发分组的流程"></a>2.6 IP 层转发分组的流程</h3><p>主要原理：<strong>查找路由表，根据目的网络地址能确定下一跳路由器</strong></p><h2 id="3-划分子网和构造超网"><a href="#3-划分子网和构造超网" class="headerlink" title="3. 划分子网和构造超网"></a>3. 划分子网和构造超网</h2><h3 id="3-1-划分子网"><a href="#3-1-划分子网" class="headerlink" title="3.1 划分子网"></a>3.1 划分子网</h3><p>从 1985 年起，IP 地址增加一个<strong>子网号字段</strong>，使两级的 IP 地址变成三级的 IP 地址</p><p><img src="https://s2.loli.net/2021/12/26/UEpISmNWol69icZ.png" alt="image-20211102230559834"></p><p>优点：</p><ul><li>减少了 IP 地址的浪费</li><li>使网络的组织更加灵活</li><li>便于维护和管理</li></ul><h4 id="3-1-1-子网掩码"><a href="#3-1-1-子网掩码" class="headerlink" title="3.1.1 子网掩码"></a>3.1.1 子网掩码</h4><p>背景：从一个 IP 数据报的首部无法判断源主机或目的主机所连接的网络是否进行了子网划分</p><p>使用<strong>子网掩码</strong>可以找出 IP 地址中的子网部分</p><p>规则：</p><ul><li>子网掩码长度：32 位</li><li>子网掩码对应网络号和子网号的左边部分是一连串 1</li><li>子网掩码对应于主机号的右边部分是一连串 0</li></ul><p><strong>IP 地址 AND 子网掩码 = 网络地址</strong></p><p><img src="https://s2.loli.net/2021/12/26/8TYpRJomcFClSE4.png" alt="image-20211102231736594"></p><p><strong>默认子网地址</strong></p><p><img src="C:\Users\CZH0318\AppData\Roaming\Typora\typora-user-images\image-20211102231818881.png" alt="image-20211102231818881"></p><h2 id="4-ICMP"><a href="#4-ICMP" class="headerlink" title="4. ICMP"></a>4. ICMP</h2><h3 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1 简介"></a>4.1 简介</h3><p><strong>ICMP</strong>：网际控制报文协议，是互联网的标准协议，是 IP 层的协议</p><p>作用：为了更有效地转发 IP 数据报和提高交付成功的机会</p><p><img src="https://s2.loli.net/2021/12/26/p3XiEmaWMNC2k4V.png"></p><h3 id="4-2-ICMP-报文的种类"><a href="#4-2-ICMP-报文的种类" class="headerlink" title="4.2 ICMP 报文的种类"></a>4.2 ICMP 报文的种类</h3><ul><li><p>ICMP 差错报告报文(四种):</p><ul><li>终点不可达</li><li>时间超过</li><li>参数问题</li><li>改变路由(重定向)</li></ul></li><li><p>ICMP 询问报文</p></li></ul><p>ICMP 的一种重要应用就是分组网间探测<strong>ping</strong>,用来测试两台主机之间的联通性</p><h2 id="5-IPv6"><a href="#5-IPv6" class="headerlink" title="5. IPv6"></a>5. IPv6</h2><h3 id="5-1-IPv6-的基本首部"><a href="#5-1-IPv6-的基本首部" class="headerlink" title="5.1 IPv6 的基本首部"></a>5.1 IPv6 的基本首部</h3><p>IPv6 仍支持<strong>无连接的传送</strong>，但将协议数据单元 PDU 称为<strong>分组</strong></p><p>主要变化：</p><ul><li><strong>更大的地址空间</strong></li><li><strong>扩展的地址层次结构</strong></li><li><strong>灵活的首部格式</strong></li><li><strong>改进的选项</strong></li><li><strong>允许协议继续扩充</strong></li><li>**支持即插即用(即自动配置)**。IPv6 不需要使用 DHCP</li><li><strong>支持资源的预分配</strong></li><li><strong>IPv6 首部改为 8 字节对齐</strong>。IPv4 首部是 4 字节对齐</li></ul><h4 id="5-1-1-IPv6-数据报的一般形式"><a href="#5-1-1-IPv6-数据报的一般形式" class="headerlink" title="5.1.1 IPv6 数据报的一般形式"></a>5.1.1 IPv6 数据报的一般形式</h4><p>IPv6 数据报由两大部分组成。</p><ul><li><strong>基本首部(固定的 40 字节)</strong></li><li>有效载荷(净负荷)。允许有 0 个或多个扩展首部，之后才是数据部分</li></ul><p><img src="https://pic.imgdb.cn/item/6195ec492ab3f51d910b33d8.jpg"></p><h2 id="6-虚拟专用网-VPN"><a href="#6-虚拟专用网-VPN" class="headerlink" title="6. 虚拟专用网 VPN"></a>6. 虚拟专用网 VPN</h2><ul><li><strong>IP 地址的紧缺</strong>：一个机构能够申请到的 IP 地址数往往小于本机构所拥有的主机数</li><li><strong>互联网不是很安全</strong>：一个机构内并不需要把所有的主机接入到外部的互联网</li></ul><h3 id="6-1-本地地址和全球地址"><a href="#6-1-本地地址和全球地址" class="headerlink" title="6.1 本地地址和全球地址"></a>6.1 本地地址和全球地址</h3><p><strong>本地地址</strong>：仅在机构内部使用的 IP 地址，可以由本机构自行分配，而不需要向互联网的管理机构申请</p><p><strong>全球地址</strong>：全球唯一的 IP 地址，需要向互联网的管理机构申请</p><p>RFC1918 指明了一些<strong>专用地址</strong>，<strong>专用地址只能用作本地地址</strong>，不能用于全球地址。<strong>在互联网中的所有路由器，对目的地址是专用地址的数据报一律不进行转发</strong></p><p><img src="https://s2.loli.net/2021/12/26/OU2Z1cNqHgrDQp5.jpg"></p><p>采用上图的专用 IP 地址的互联网称为<strong>专用互联网</strong>(<strong>本地互联网、专用网</strong>)</p><p>专用地址仅在本机构内部使用。专用 IP 地址也叫做<strong>可重用地址</strong></p><h3 id="6-2-虚拟专用网-VPN"><a href="#6-2-虚拟专用网-VPN" class="headerlink" title="6.2 虚拟专用网 VPN"></a>6.2 虚拟专用网 VPN</h3><p>利用公网的互联网作为本机构各专用网之间的通信载体，这样的专用网又称为<strong>虚拟专用网 VPN</strong></p><p><img src="https://s2.loli.net/2021/12/26/8QEO6ZbKVWvStjY.jpg"></p><h2 id="7-网络地址转换-NAT"><a href="#7-网络地址转换-NAT" class="headerlink" title="7. 网络地址转换 NAT"></a>7. 网络地址转换 NAT</h2><ul><li>需要在专用网连接到互联网的路由器上安装 NAT 软件。装有 NAT 软件的路由器叫做<strong>NAT 路由器，它至少由一个有效的外部全球 IP 地址</strong></li><li>所有使用本地地址的主机在和外界通信时，都要在 NAT 路由器上<strong>将本地地址转换成全球 IP 地址</strong>，才能和互联网连接</li></ul><p><img src="https://s2.loli.net/2021/12/26/XBPjsEWZM6bUYJF.jpg"></p><p>在内部主机于外部主机通信时，在 NAT 路由器上发生了<strong>两次地址转换</strong></p><ul><li>离开专用网时：替换源地址，把内部地址替换成全球地址</li><li>进入专用网时：替换目的地址，将全球地址替换成内部地址</li></ul><p><strong>网络与端口号转换 NAPT</strong></p><p>NAT 转换表把<strong>运输层的端口号也用上</strong>，可以使多个拥有本地地址的主机，<strong>共用一个 NAT 路由器上的全球 IP 地址</strong>，所以可以同时和互联网上的不同主机进行通信</p><p>使用端口号的 NAT 叫做<strong>网络与端口号转换 NAPT</strong>，而不使用端口号的 NAT 叫做<strong>传统的 NAT</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过JS实现剪贴板操作</title>
      <link href="/2021/12/16/JS-developing-2/"/>
      <url>/2021/12/16/JS-developing-2/</url>
      
        <content type="html"><![CDATA[<h1 id="通过-JS-实现剪贴板操作"><a href="#通过-JS-实现剪贴板操作" class="headerlink" title="通过 JS 实现剪贴板操作"></a>通过 JS 实现剪贴板操作</h1><p>在网上找到很多种方法，ZeroClipboard.js、clipboard.js 插件等，但是都没有办法解决本人项目中的问题，最后发现可以通过 navigator 对象得到 clipboard，进行剪切板操作</p><p>先来一下 clipboard.js 版本的热热身。</p><h2 id="1-clipboard-js"><a href="#1-clipboard-js" class="headerlink" title="1. clipboard.js"></a>1. clipboard.js</h2><h3 id="1-1-通过-text-的-function-来复制内容"><a href="#1-1-通过-text-的-function-来复制内容" class="headerlink" title="1.1 通过 text 的 function()来复制内容"></a>1.1 通过 text 的 function()来复制内容</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>Copy<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/clipboard.js/2.0.8/clipboard.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> clipboard = <span class="hljs-keyword">new</span> ClipboardJS(<span class="hljs-string">&quot;#btn&quot;</span>, &#123;</span><br><span class="javascript">        <span class="hljs-comment">// 第一个参数是可以是类似jQuery的选择器，也可以是DOM对象</span></span><br><span class="javascript">        <span class="hljs-attr">text</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>; <span class="hljs-comment">// 返回要放到剪切板的内容</span></span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/15/nC6YdGofaLlhIwg.png" alt="image-20211208003450259"></p><h3 id="1-2-通过-target-的-function-来复制内容"><a href="#1-2-通过-target-的-function-来复制内容" class="headerlink" title="1.2 通过 target 的 function()来复制内容"></a>1.2 通过 target 的 function()来复制内容</h3><p>类似上面的，不过创建 clipboard 对象时第二个参数的对象的属性从 text 变为了 target。简单理解的话，就是 text 就相当于是直接把要复制的内容给出来，而 target 则是把要去复制的地点给出来，在下面就相当于根据 DOM 对象，顺藤摸瓜去复制。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>Copy<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;</span>World<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/clipboard.js/2.0.8/clipboard.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;btn&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">      <span class="hljs-keyword">const</span> clipboard = <span class="hljs-keyword">new</span> ClipboardJS(btn, &#123;</span><br><span class="javascript">        <span class="hljs-attr">target</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;foo&quot;</span>)[<span class="hljs-number">1</span>];</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-3-通过给复制按钮添加自定义属性来复制内容"><a href="#1-3-通过给复制按钮添加自定义属性来复制内容" class="headerlink" title="1.3 通过给复制按钮添加自定义属性来复制内容"></a>1.3 通过给复制按钮添加自定义属性来复制内容</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;</span>1 + 1 = 2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">data-clipboard-action</span>=<span class="hljs-string">&quot;copy&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">data-clipboard-target</span>=<span class="hljs-string">&quot;#foo&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br>      Copy<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/clipboard.js/2.0.8/clipboard.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;btn&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">      <span class="hljs-keyword">const</span> clipboard = <span class="hljs-keyword">new</span> ClipboardJS(btn);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li>data-clipboard-action：剪切板行为，如复制 copy，剪切 cut</li><li>data-clipboard-target：剪切板行为的目标</li></ul><p>不过，这个样子的复制相当于自动帮你选择，并且帮你按 CTRL+C, 复制之后，复制的内容会变蓝</p><h2 id="2-通过-document-execCommand-方法"><a href="#2-通过-document-execCommand-方法" class="headerlink" title="2. 通过 document.execCommand()方法"></a>2. 通过 document.execCommand()方法</h2><p>只能说是换汤不换药。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;copy-input&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Hello World!&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;copy-btn&quot;</span>&gt;</span>复制<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> copyInput = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;copy-input&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> copyBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;copy-btn&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      copyBtn.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        copyInput.select();</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.execCommand(<span class="hljs-string">&quot;copy&quot;</span>);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>无法执行 document.execCommand(‘paste’)方法。</p><p><img src="https://s2.loli.net/2022/01/15/ieOdwycotlq49aJ.png" alt="image-20211208210003809"></p><p>新版本 Chrome 执行<code>document.execCommand(&#39;paste&#39;)</code>会返回 false，因为读取剪切板涉及用户隐私安全，所以一定要在用户允许的情况下才可以进行操作。</p><h2 id="3-异步-Clipboard-API"><a href="#3-异步-Clipboard-API" class="headerlink" title="3. 异步 Clipboard API"></a>3. 异步 Clipboard API</h2><p>它的所有操作都是异步的，返回 Promise 对象，而且，它可以将任意内容(比如图片)放入剪切板。</p><p>首先，通过<code>navigator.clipboard</code> 返回 Clipboard 对象，所有操作都是通过这个对象进行的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> clipboardObj = navigator.clipboard;<br></code></pre></td></tr></table></figure><p><b style="color:red">Chrome 浏览器规定，只有 HTTPS 协议的页面才能使用这个 API</b>。不过，localhost 允许使用非加密协议。</p><h3 id="3-1-Clipboard-readText-、Clipboard-writeText"><a href="#3-1-Clipboard-readText-、Clipboard-writeText" class="headerlink" title="3.1 Clipboard.readText()、Clipboard.writeText()"></a>3.1 Clipboard.readText()、Clipboard.writeText()</h3><p>Clipboard.writeText()用于复制文本数据，Clipboard.readText()用于读取剪切板中的文本数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入要复制的内容&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;copy-ipt&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;copy-btn&quot;</span>&gt;</span>复制<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;会输出复制的内容的内容&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;paste-ipt&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;paste-btn&quot;</span>&gt;</span>粘贴<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> copyIpt = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;copy-ipt&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> copyBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;copy-btn&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> pasteIpt = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;paste-ipt&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> pasteBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;paste-btn&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      copyBtn.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">async</span> (e) =&gt; &#123;</span><br><span class="javascript">        <span class="hljs-keyword">await</span> navigator.clipboard.writeText(copyIpt.value);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      pasteBtn.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">async</span> (e) =&gt; &#123;</span><br><span class="javascript">        pasteIpt.value = <span class="hljs-keyword">await</span> navigator.clipboard.readText();</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>复制不需要用户给权限， 不过，点击粘贴按钮时，更准确来说是，使用 clipboard.readText()方法时，浏览器会弹出一个对话框，询问是否允许读取剪切板。如果禁止，那么就会报错，可以通过 try…catch 结构处理报错。</p><p><img src="https://s2.loli.net/2022/01/15/hl3U7s8oIjdD9Xf.png" alt="image-20211208212459449"></p><h3 id="3-2-Clipboard-read-、Clipboard-write"><a href="#3-2-Clipboard-read-、Clipboard-write" class="headerlink" title="3.2 Clipboard.read()、Clipboard.write()"></a>3.2 Clipboard.read()、Clipboard.write()</h3><p>有点像上面两个的加强版，可以复制和粘贴任意数据，如图片</p><ul><li>**Clipboard.read()**：从剪切板读取数据(如图片)</li><li>**Clipboard.write()**：写入任意数据到剪切板</li></ul><p>**Clipboard.write()**：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">button</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">70px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112082214161.png&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;copyImg-btn&quot;</span>&gt;</span>复制图片<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> mycopy = <span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> imgURL =</span><br><span class="javascript">          <span class="hljs-string">&quot;https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112082214161.png&quot;</span>;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> fetch(imgURL); <span class="hljs-comment">//  fetch() 方法，该方法提供了一种简单，合理的方式来跨网络异步获取资源</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">        <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">await</span> data.blob(); <span class="hljs-comment">// Blob 对象表示一个不可变、原始数据的类文件对象。</span></span><br><span class="javascript">        <span class="hljs-comment">// 它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(blob);</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">await</span> navigator.clipboard.write([</span><br><span class="javascript">          <span class="hljs-keyword">new</span> ClipboardItem(&#123;</span><br><span class="javascript">            [blob.type]: blob,</span><br><span class="javascript">          &#125;),</span><br><span class="javascript">        ]);</span><br><span class="javascript">        alert(<span class="hljs-string">&quot;图片已复制&quot;</span>);</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">      <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;copyImg-btn&quot;</span>).addEventListener(<span class="hljs-string">&quot;click&quot;</span>, mycopy);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>复制成功后，去到能粘贴图片的地方，如 Word、WPS 等粘贴，即可看到复制的图片。</p><p>**Clipboard.read()**：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mypaste = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> clipboardItems = <span class="hljs-keyword">await</span> navigator.clipboard.read();<br>  <span class="hljs-comment">/* 该方法返回一个Promise对象，一旦对象的状态变为resolved，</span><br><span class="hljs-comment">   * 就可以得到一个数组，每个对象都是ClipboardItem对象的实例</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> clipboardItem <span class="hljs-keyword">of</span> clipboardItems) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> type <span class="hljs-keyword">of</span> clipboardItem.types) &#123;<br>      <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">await</span> clipboardItem.getType(type); <span class="hljs-comment">// 得到blob对象</span><br>      <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;img&quot;</span>).src = URL.createObjectURL(blob); <span class="hljs-comment">// URL.createObjectURL()方法通过blob对象生成一个对应的url</span><br>    &#125;<br>  &#125;<br>&#125;;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;pasteImg-btn&quot;</span>).addEventListener(<span class="hljs-string">&quot;click&quot;</span>, mypaste);<br></code></pre></td></tr></table></figure><p>复制粘贴的完整代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">button</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">70px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112082214161.png&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;copyImg-btn&quot;</span>&gt;</span>复制图片<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pasteImg-btn&quot;</span>&gt;</span>粘贴图片<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;img&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> mycopy = <span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> imgURL =</span><br><span class="javascript">          <span class="hljs-string">&quot;https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112082214161.png&quot;</span>;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> fetch(imgURL); <span class="hljs-comment">//  fetch() 方法，该方法提供了一种简单，合理的方式来跨网络异步获取资源</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">        <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">await</span> data.blob(); <span class="hljs-comment">// Blob 对象表示一个不可变、原始数据的类文件对象。</span></span><br><span class="javascript">        <span class="hljs-comment">// 它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(blob);</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">await</span> navigator.clipboard.write([</span><br><span class="javascript">          <span class="hljs-keyword">new</span> ClipboardItem(&#123;</span><br><span class="javascript">            [blob.type]: blob,</span><br><span class="javascript">          &#125;),</span><br><span class="javascript">        ]);</span><br><span class="javascript">        alert(<span class="hljs-string">&quot;图片已复制&quot;</span>);</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">      <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;copyImg-btn&quot;</span>).addEventListener(<span class="hljs-string">&quot;click&quot;</span>, mycopy);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> mypaste = <span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> clipboardItems = <span class="hljs-keyword">await</span> navigator.clipboard.read();</span><br><span class="javascript">        <span class="hljs-comment">/* 该方法返回一个Promise对象，一旦对象的状态变为resolved，</span></span><br><span class="hljs-comment"><span class="javascript">         * 就可以得到一个数组，每个对象都是ClipboardItem对象的实例</span></span><br><span class="hljs-comment"><span class="javascript">         */</span></span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> clipboardItem <span class="hljs-keyword">of</span> clipboardItems) &#123;</span><br><span class="javascript">          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> type <span class="hljs-keyword">of</span> clipboardItem.types) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">await</span> clipboardItem.getType(type); <span class="hljs-comment">// 得到blob对象</span></span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;img&quot;</span>).src = URL.createObjectURL(blob); <span class="hljs-comment">// URL.createObjectURL()方法通过blob对象生成一个对应的url</span></span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">      <span class="hljs-built_in">document</span></span><br><span class="javascript">        .getElementById(<span class="hljs-string">&quot;pasteImg-btn&quot;</span>)</span><br><span class="javascript">        .addEventListener(<span class="hljs-string">&quot;click&quot;</span>, mypaste);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112090040916.png" alt="image-20211209004028815"></p><p>学习链接：<a href="https://www.ruanyifeng.com/blog/2021/01/clipboard-api.html">剪贴板操作 Clipboard API 教程 - 阮一峰的网络日志 (ruanyifeng.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript生成验证码和32位随机码</title>
      <link href="/2021/12/11/JS-developing-1/"/>
      <url>/2021/12/11/JS-developing-1/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-生成验证码和-32-位随机码"><a href="#JavaScript-生成验证码和-32-位随机码" class="headerlink" title="JavaScript 生成验证码和 32 位随机码"></a>JavaScript 生成验证码和 32 位随机码</h1><h2 id="1-使用-canvas-实现生成验证码功能"><a href="#1-使用-canvas-实现生成验证码功能" class="headerlink" title="1.使用 canvas 实现生成验证码功能"></a>1.使用 canvas 实现生成验证码功能</h2><p>本文的 html 文件如下图所示，实现验证码的 js 文件为 verify.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>验证码<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vetifyCanvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;40&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./verify.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-1-设置背景为随机颜色"><a href="#1-1-设置背景为随机颜色" class="headerlink" title="1.1 设置背景为随机颜色"></a>1.1 设置背景为随机颜色</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;vetifyCanvas&quot;</span>);<br><span class="hljs-keyword">const</span> w = canvas.width;<br><span class="hljs-keyword">const</span> h = canvas.height;<br><span class="hljs-keyword">const</span> context = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>context.fillStyle = randomColor(<span class="hljs-number">0</span>, <span class="hljs-number">155</span>); <span class="hljs-comment">// 设置背景为一个随机颜色</span><br>context.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, w, h); <span class="hljs-comment">// 绘制矩形</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomNum</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min) + min); <span class="hljs-comment">// 生成一个随机数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomColor</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> r = randomNum(min, max);<br>  <span class="hljs-keyword">const</span> g = randomNum(min, max);<br>  <span class="hljs-keyword">const</span> b = randomNum(min, max);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rgb(&quot;</span> + r + <span class="hljs-string">&quot;, &quot;</span> + g + <span class="hljs-string">&quot;, &quot;</span> + b + <span class="hljs-string">&quot;)&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-生成-4-位随机验证码"><a href="#1-2-生成-4-位随机验证码" class="headerlink" title="1.2 生成 4 位随机验证码"></a>1.2 生成 4 位随机验证码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;vetifyCanvas&quot;</span>);<br><span class="hljs-keyword">const</span> w = canvas.width;<br><span class="hljs-keyword">const</span> h = canvas.height;<br><span class="hljs-keyword">const</span> context = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br><span class="hljs-keyword">let</span> text = []; <span class="hljs-comment">//用来存放用于随机的字符</span><br><span class="hljs-keyword">let</span> verifyCode = []; <span class="hljs-comment">// 用来存放验证码</span><br><br>context.fillStyle = randomColor(<span class="hljs-number">0</span>, <span class="hljs-number">155</span>); <span class="hljs-comment">// 设置背景为一个随机颜色</span><br>context.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, w, h); <span class="hljs-comment">// 绘制矩形</span><br><br>addText(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>);<br>addText(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>);<br>addText(<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>);<br><br>generateCode(<span class="hljs-number">4</span>);<br><span class="hljs-built_in">console</span>.log(verifyCode);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomNum</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min) + min); <span class="hljs-comment">// 生成一个随机数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomColor</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> r = randomNum(min, max);<br>  <span class="hljs-keyword">const</span> g = randomNum(min, max);<br>  <span class="hljs-keyword">const</span> b = randomNum(min, max);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rgb(&quot;</span> + r + <span class="hljs-string">&quot;, &quot;</span> + g + <span class="hljs-string">&quot;, &quot;</span> + b + <span class="hljs-string">&quot;)&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addText</span>(<span class="hljs-params">start, end</span>) </span>&#123;<br>  <span class="hljs-comment">// 添加用于随机的字符</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = start.charCodeAt(); i &lt;= end.charCodeAt(); i += <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 根据ASCII字符得到ASCII值</span><br>    text.push(<span class="hljs-built_in">String</span>.fromCharCode(i)); <span class="hljs-comment">// 根据ASCII值获得ASCII字符</span><br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateCode</span>(<span class="hljs-params">num</span>) </span>&#123;<br>  <span class="hljs-comment">// 生成验证码</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>    <span class="hljs-keyword">let</span> index = randomNum(<span class="hljs-number">0</span>, text.length - <span class="hljs-number">1</span>);<br>    verifyCode.push(text[index]);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112111344310.jpeg"></p><h3 id="1-3-把生成的验证码画出来"><a href="#1-3-把生成的验证码画出来" class="headerlink" title="1.3 把生成的验证码画出来"></a>1.3 把生成的验证码画出来</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;vetifyCanvas&quot;</span>);<br><span class="hljs-keyword">const</span> w = canvas.width;<br><span class="hljs-keyword">const</span> h = canvas.height;<br><span class="hljs-keyword">const</span> context = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br><span class="hljs-keyword">let</span> text = []; <span class="hljs-comment">//用来存放用于随机的字符</span><br><span class="hljs-keyword">let</span> verifyCode = []; <span class="hljs-comment">// 用来存放验证码</span><br><br>context.fillStyle = randomColor(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>); <span class="hljs-comment">// 设置背景为一个随机颜色</span><br>context.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, w, h); <span class="hljs-comment">// 绘制矩形</span><br>context.textBaseline = <span class="hljs-string">&quot;middle&quot;</span>;<br><br>addText(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>);<br>addText(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>);<br>addText(<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>);<br><br>generateCode(<span class="hljs-number">4</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomNum</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min) + min); <span class="hljs-comment">// 生成一个随机数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomColor</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> r = randomNum(min, max);<br>  <span class="hljs-keyword">const</span> g = randomNum(min, max);<br>  <span class="hljs-keyword">const</span> b = randomNum(min, max);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rgb(&quot;</span> + r + <span class="hljs-string">&quot;, &quot;</span> + g + <span class="hljs-string">&quot;, &quot;</span> + b + <span class="hljs-string">&quot;)&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addText</span>(<span class="hljs-params">start, end</span>) </span>&#123;<br>  <span class="hljs-comment">// 添加用于随机的字符</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = start.charCodeAt(); i &lt;= end.charCodeAt(); i += <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 根据ASCII字符得到ASCII值</span><br>    text.push(<span class="hljs-built_in">String</span>.fromCharCode(i)); <span class="hljs-comment">// 根据ASCII值获得ASCII字符</span><br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateCode</span>(<span class="hljs-params">num</span>) </span>&#123;<br>  <span class="hljs-comment">// 生成验证码</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>    <span class="hljs-keyword">let</span> index = randomNum(<span class="hljs-number">0</span>, text.length - <span class="hljs-number">1</span>);<br>    verifyCode.push(text[index]);<br>    <span class="hljs-keyword">let</span> x = (w / <span class="hljs-number">5</span>) * i; <span class="hljs-comment">// 用来控制开始写字的坐标</span><br>    <span class="hljs-keyword">let</span> y = h / <span class="hljs-number">2</span>;<br><br>    context.font = randomNum(h / <span class="hljs-number">2</span>, h) + <span class="hljs-string">&quot;px SimHei&quot;</span>; <span class="hljs-comment">// 随机生成字体大小</span><br>    context.fillStyle = randomColor(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>); <span class="hljs-comment">// 随机生成字体颜色</span><br><br>    context.translate(x, y); <span class="hljs-comment">// 设置坐标原点</span><br>    context.fillText(text[index], <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// 写字</span><br>    context.translate(-x, -y); <span class="hljs-comment">// 恢复坐标原点</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112111344362.jpeg"></p><p><b style="color: red">写完字后，为什么要恢复坐标原点？</b>这里写完一个字后，它的坐标也会跟着去到右下角，所以不回到起点的话，会写出斜着的一行字，单独把画布的宽高变大即可看到结果。分析可能有错，麻烦见谅。</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112111344270.jpeg"></p><h3 id="1-4-添加特效-文字阴影和旋转"><a href="#1-4-添加特效-文字阴影和旋转" class="headerlink" title="1.4 添加特效(文字阴影和旋转)"></a>1.4 添加特效(文字阴影和旋转)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;vetifyCanvas&quot;</span>);<br><span class="hljs-keyword">const</span> w = canvas.width;<br><span class="hljs-keyword">const</span> h = canvas.height;<br><span class="hljs-keyword">const</span> context = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br><span class="hljs-keyword">let</span> text = []; <span class="hljs-comment">//用来存放用于随机的字符</span><br><span class="hljs-keyword">let</span> verifyCode = []; <span class="hljs-comment">// 用来存放验证码</span><br><br>context.fillStyle = randomColor(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>); <span class="hljs-comment">// 设置背景为一个随机颜色</span><br>context.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, w, h); <span class="hljs-comment">// 绘制矩形</span><br>context.textBaseline = <span class="hljs-string">&quot;middle&quot;</span>;<br><br>addText(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>);<br>addText(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>);<br>addText(<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>);<br><br>generateCode(<span class="hljs-number">4</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomNum</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min) + min); <span class="hljs-comment">// 生成一个随机数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomColor</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> r = randomNum(min, max);<br>  <span class="hljs-keyword">const</span> g = randomNum(min, max);<br>  <span class="hljs-keyword">const</span> b = randomNum(min, max);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rgb(&quot;</span> + r + <span class="hljs-string">&quot;, &quot;</span> + g + <span class="hljs-string">&quot;, &quot;</span> + b + <span class="hljs-string">&quot;)&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addText</span>(<span class="hljs-params">start, end</span>) </span>&#123;<br>  <span class="hljs-comment">// 添加用于随机的字符</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = start.charCodeAt(); i &lt;= end.charCodeAt(); i += <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 根据ASCII字符得到ASCII值</span><br>    text.push(<span class="hljs-built_in">String</span>.fromCharCode(i)); <span class="hljs-comment">// 根据ASCII值获得ASCII字符</span><br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateCode</span>(<span class="hljs-params">num</span>) </span>&#123;<br>  <span class="hljs-comment">// 生成验证码</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>    <span class="hljs-keyword">let</span> index = randomNum(<span class="hljs-number">0</span>, text.length - <span class="hljs-number">1</span>);<br>    verifyCode.push(text[index]);<br><br>    <span class="hljs-keyword">let</span> x = (w / <span class="hljs-number">5</span>) * i; <span class="hljs-comment">// 用来控制开始写字的坐标</span><br>    <span class="hljs-keyword">let</span> y = h / <span class="hljs-number">2</span>;<br><br>    context.shadowOffsetX = randomNum(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>    context.shadowOffsetY = randomNum(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>    context.shadowBlur = randomNum(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>    context.shadowColor = <span class="hljs-string">&quot;rgba(0, 0, 0, 0.3)&quot;</span>;<br><br>    context.font = randomNum(h / <span class="hljs-number">2</span>, h) + <span class="hljs-string">&quot;px SimHei&quot;</span>; <span class="hljs-comment">// 随机生成字体大小</span><br>    context.fillStyle = randomColor(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>); <span class="hljs-comment">// 随机生成字体颜色</span><br><br>    <span class="hljs-keyword">const</span> deg = randomNum(-<span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br><br>    context.translate(x, y); <span class="hljs-comment">// 设置坐标原点和旋转角度</span><br>    context.rotate((deg * <span class="hljs-built_in">Math</span>.PI) / <span class="hljs-number">180</span>);<br>    context.fillText(text[index], <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// 写字</span><br>    context.translate(-x, -y); <span class="hljs-comment">// 恢复坐标原点和旋转角度</span><br>    context.rotate((-deg * <span class="hljs-built_in">Math</span>.PI) / <span class="hljs-number">180</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112111407878.jpeg"></p><h3 id="1-5-添加干扰线和干扰点"><a href="#1-5-添加干扰线和干扰点" class="headerlink" title="1.5 添加干扰线和干扰点"></a>1.5 添加干扰线和干扰点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;vetifyCanvas&quot;</span>);<br><span class="hljs-keyword">const</span> w = canvas.width;<br><span class="hljs-keyword">const</span> h = canvas.height;<br><span class="hljs-keyword">const</span> context = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br><span class="hljs-keyword">let</span> text = []; <span class="hljs-comment">//用来存放用于随机的字符</span><br><span class="hljs-keyword">let</span> verifyCode = []; <span class="hljs-comment">// 用来存放验证码</span><br><br>context.fillStyle = randomColor(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>); <span class="hljs-comment">// 设置背景为一个随机颜色</span><br>context.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, w, h); <span class="hljs-comment">// 绘制矩形</span><br>context.textBaseline = <span class="hljs-string">&quot;middle&quot;</span>;<br><br>addText(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>);<br>addText(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>);<br>addText(<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>);<br><br>generateCode(<span class="hljs-number">4</span>);<br><br>ganrao();<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomNum</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min) + min); <span class="hljs-comment">// 生成一个随机数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomColor</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> r = randomNum(min, max);<br>  <span class="hljs-keyword">const</span> g = randomNum(min, max);<br>  <span class="hljs-keyword">const</span> b = randomNum(min, max);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rgb(&quot;</span> + r + <span class="hljs-string">&quot;, &quot;</span> + g + <span class="hljs-string">&quot;, &quot;</span> + b + <span class="hljs-string">&quot;)&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addText</span>(<span class="hljs-params">start, end</span>) </span>&#123;<br>  <span class="hljs-comment">// 添加用于随机的字符</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = start.charCodeAt(); i &lt;= end.charCodeAt(); i += <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 根据ASCII字符得到ASCII值</span><br>    text.push(<span class="hljs-built_in">String</span>.fromCharCode(i)); <span class="hljs-comment">// 根据ASCII值获得ASCII字符</span><br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateCode</span>(<span class="hljs-params">num</span>) </span>&#123;<br>  <span class="hljs-comment">// 生成验证码</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>    <span class="hljs-keyword">let</span> index = randomNum(<span class="hljs-number">0</span>, text.length - <span class="hljs-number">1</span>);<br>    verifyCode.push(text[index]);<br><br>    <span class="hljs-keyword">let</span> x = (w / <span class="hljs-number">5</span>) * i; <span class="hljs-comment">// 用来控制开始写字的坐标</span><br>    <span class="hljs-keyword">let</span> y = h / <span class="hljs-number">2</span>;<br><br>    context.shadowOffsetX = randomNum(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>    context.shadowOffsetY = randomNum(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>    context.shadowBlur = randomNum(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>    context.shadowColor = <span class="hljs-string">&quot;rgba(0, 0, 0, 0.3)&quot;</span>;<br><br>    context.font = randomNum(h / <span class="hljs-number">2</span>, h) + <span class="hljs-string">&quot;px SimHei&quot;</span>; <span class="hljs-comment">// 随机生成字体大小</span><br>    context.fillStyle = randomColor(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>); <span class="hljs-comment">// 随机生成字体颜色</span><br><br>    <span class="hljs-keyword">const</span> deg = randomNum(-<span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br><br>    context.translate(x, y); <span class="hljs-comment">// 设置坐标原点和旋转角度</span><br>    context.rotate((deg * <span class="hljs-built_in">Math</span>.PI) / <span class="hljs-number">180</span>);<br>    context.fillText(text[index], <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// 写字</span><br>    context.translate(-x, -y); <span class="hljs-comment">// 恢复坐标原点和旋转角度</span><br>    context.rotate((-deg * <span class="hljs-built_in">Math</span>.PI) / <span class="hljs-number">180</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ganrao</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 绘制干扰线</span><br>  <span class="hljs-comment">// for (var i = 0; i &lt; 4; i++) &#123;</span><br>  <span class="hljs-comment">//   context.strokeStyle = randomColor(40, 180);</span><br>  <span class="hljs-comment">//   context.beginPath();</span><br>  <span class="hljs-comment">//   context.moveTo(randomNum(0, w), randomNum(0, h));</span><br>  <span class="hljs-comment">//   context.lineTo(randomNum(0, w), randomNum(0, h));</span><br>  <span class="hljs-comment">//   context.stroke();</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-comment">// 绘制干扰点</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; w / <span class="hljs-number">4</span>; i++) &#123;<br>    context.fillStyle = randomColor(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>);<br>    context.beginPath();<br>    context.arc(randomNum(<span class="hljs-number">0</span>, w), randomNum(<span class="hljs-number">0</span>, h), <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-built_in">Math</span>.PI);<br>    context.fill();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/imsges/202112111344263.jpeg"></p><h3 id="1-6-增加点击可以实现刷新的功能"><a href="#1-6-增加点击可以实现刷新的功能" class="headerlink" title="1.6 增加点击可以实现刷新的功能"></a>1.6 增加点击可以实现刷新的功能</h3><p>用了<code>context.save(); </code>和<code>context.restore();</code>来实现清空画布，重画的效果</p><p><img src="https://s2.loli.net/2021/12/11/mF5d9ua7TxtKRUE.png" alt="image-20211211235444063"></p><p>完整代码：<a href="https://codepen.io/13535944743/pen/Yzxbvod">验证码 (codepen.io)</a></p><h2 id="2-生成-32-位随机码"><a href="#2-生成-32-位随机码" class="headerlink" title="2. 生成 32 位随机码"></a>2. 生成 32 位随机码</h2><p>在开展项目会议时，听到了数据表那边的 id 应该使用通用的生成 32 位随机码的方法，而不是使用 int 型+自增后，就想试一下自己实现生成 32 位随机码。</p><p>首先，需要获取一个用于生成随机码的字符的数组，这里可以使用手敲法，但太累了。还是可以用生成验证码时的方法。因为<b style="color: red">js 的字符无法自增，所以可以使用 charCodeAt()函数把字符转换成 ASCII 值之后，再进行自增操作，当然，每一次遍历拿到的值都是 ASCII 值了，所以再通过 String.fromCharCharCode()函数把 ASCII 值又转换成 ASCII 字符。</b></p><p>具体实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getContent</span>(<span class="hljs-params">start, end</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> arr = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = start.charCodeAt(); i &lt;= end.charCodeAt(); i++) &#123;<br>    arr.push(<span class="hljs-built_in">String</span>.fromCharCode(i));<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到用于生成随机码的字符后，就可以直接通过随机函数 random()来实现生成 32 位随机码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandom</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> arr = [];<br>  arr = arr.concat(getContent(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>));<br>  arr = arr.concat(getContent(<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>));<br><br>  <span class="hljs-keyword">let</span> id = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>    id += arr[<span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">36</span>)];<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(id);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getContent</span>(<span class="hljs-params">start, end</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> arr = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = start.charCodeAt(); i &lt;= end.charCodeAt(); i++) &#123;<br>    arr.push(<span class="hljs-built_in">String</span>.fromCharCode(i));<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br>getRandom();<br></code></pre></td></tr></table></figure><p>完整实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandom</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> arr = [];<br>  arr = arr.concat(getContent(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>));<br>  arr = arr.concat(getContent(<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>));<br><br>  <span class="hljs-keyword">let</span> id = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>    id += arr[<span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">36</span>)];<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(id);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getContent</span>(<span class="hljs-params">start, end</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> arr = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = start.charCodeAt(); i &lt;= end.charCodeAt(); i++) &#123;<br>    arr.push(<span class="hljs-built_in">String</span>.fromCharCode(i));<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br>getRandom();<br></code></pre></td></tr></table></figure><p><b style="color: red">可能常用到的方法：记录一下</b>。有可能有更好的方法，发现后再更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getContent</span>(<span class="hljs-params">start, end</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> arr = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = start.charCodeAt(); i &lt;= end.charCodeAt(); i++) &#123;<br>    arr.push(<span class="hljs-built_in">String</span>.fromCharCode(i));<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考链接：<a href="https://www.cnblogs.com/vickylinj/p/12103308.html">JS 实现图片验证码功能——用户输入验证码 - vickylinj - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Less笔记</title>
      <link href="/2021/12/05/less/"/>
      <url>/2021/12/05/less/</url>
      
        <content type="html"><![CDATA[<h1 id="Less-笔记"><a href="#Less-笔记" class="headerlink" title="Less 笔记"></a>Less 笔记</h1><p><em>Less</em> 是一门 CSS 预处理语言,它扩展了 CSS 语言,增加了变量、Mixin、函数等特性。<em>Less</em> 可以运行在 Node 或浏览器端。</p><p>开始之前，先介绍一个 vscode 插件，可以实现根据 less 编译生成对应的 css</p><p><img src="https://pic.imgdb.cn/item/61a7850c2ab3f51d91ea0502.jpg"></p><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h2><p>通过@变量名定义，也是通过@变量名使用，不是用”=”赋值，而是和 css 的样式一样用”:”赋值</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@width:</span> <span class="hljs-number">100px</span>;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-variable">@width</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-混合"><a href="#2-混合" class="headerlink" title="2. 混合"></a>2. 混合</h2><p>混合是一种将一组属性从一个规则集混入另一个规则集的方法。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.position</span> &#123;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-selector-class">.position</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.position</span> &#123;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-selector-class">.position</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-嵌套"><a href="#3-嵌套" class="headerlink" title="3. 嵌套"></a>3. 嵌套</h2><p><b style="color: red">个人最常用的 Less 语法。</b>非常方便，模仿 HTML 的组织结构，调试的时候会感觉清晰明了。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>    <span class="hljs-selector-tag">span</span> &#123;<br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以搭配”&amp;”运算符使用，”&amp;“表示当前选择器的父级</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>@规则嵌套</strong></p><p>@ 规则（例如 <code>@media</code> 或 <code>@supports</code>）可以与选择器以相同的方式进行嵌套。@ 规则会被放在前面，同一规则集中的其它元素的相对顺序保持不变。这叫做冒泡</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br><br>  <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1280px</span>) &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) &#123;<br>  <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1280px</span>) &#123;<br>  <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-运算"><a href="#4-运算" class="headerlink" title="4. 运算"></a>4. 运算</h2><p><strong>结果会以最左侧的有单位的操作数的单位为准</strong></p><p>+、-部分</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@width:</span> <span class="hljs-number">10px</span> - <span class="hljs-number">5em</span>;<br><span class="hljs-variable">@height:</span> <span class="hljs-number">10em</span> - <span class="hljs-number">5px</span>;<br><span class="hljs-variable">@lineHeight:</span> <span class="hljs-number">10</span> - <span class="hljs-number">5px</span> + <span class="hljs-number">1em</span>;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-variable">@width</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-variable">@height</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-variable">@lineHeight</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">5em</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">6px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>*、/部分：<b style="color: red">除法需要使用()包住，否则无法正常进行运算</b></p><p>原因：进入 4.0 版本后， 除法运算符如果在括号外面，不执行除法运算，在小括号内可以看做是除法运算</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@width:</span> <span class="hljs-number">10px</span> * <span class="hljs-number">2em</span>;<br><span class="hljs-variable">@height:</span> <span class="hljs-number">10em</span> * <span class="hljs-number">2px</span>;<br><span class="hljs-variable">@lineHeight:</span> (<span class="hljs-number">10</span> * <span class="hljs-number">5px</span> / <span class="hljs-number">2em</span>);<br><span class="hljs-variable">@color:</span> (<span class="hljs-number">#224488</span> / <span class="hljs-number">2</span>);<br><br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-variable">@width</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-variable">@height</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-variable">@lineHeight</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">@color</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">20em</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">25px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#112244</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-转义"><a href="#5-转义" class="headerlink" title="5. 转义"></a>5. 转义</h2><p>转义允许使用任何字符串作为属性或变量值。任何<code>~&quot;anything&quot;</code>形式的内容都会按原样输出</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@min728:</span> <span class="hljs-string">~&quot;(min-width: 768px)&quot;</span>;<br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-keyword">@media</span> <span class="hljs-variable">@min728</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) &#123;<br>  <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6. 函数"></a>6. 函数</h2><p>例子：percentage()把小数转换为百分比, length()得到数组长度</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@width:</span> <span class="hljs-number">0.5</span>;<br><span class="hljs-variable">@list:</span> <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;tomato&quot;</span>, <span class="hljs-string">&quot;potato&quot;</span>, <span class="hljs-string">&quot;peach&quot;</span>;<br><span class="hljs-variable">@n:</span> length(<span class="hljs-variable">@list</span>);<br><br><span class="hljs-selector-class">.class</span> &#123;<br>  <span class="hljs-attribute">width</span>: percentage(<span class="hljs-variable">@width</span>);<br>  <span class="hljs-attribute">height</span>: <span class="hljs-variable">@n</span> * <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.class</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-映射"><a href="#7-映射" class="headerlink" title="7. 映射"></a>7. 映射</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#colors</span>() &#123;<br>  primary: blue;<br>  secondary: green;<br>&#125;<br><br><span class="hljs-selector-class">.button</span> &#123;<br>  <span class="hljs-attribute">color</span>: #colors[primary];<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid #colors[secondary];<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.button</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-作用域"><a href="#8-作用域" class="headerlink" title="8. 作用域"></a>8. 作用域</h2><p>会先在本地查找有无变量，如果找不到，则会去到父级作用域中查找</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@color:</span> red;<br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-variable">@color:</span> blue;<br>  <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-variable">@color:</span> purple;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">@color</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">color</span>: purple;<br>&#125;<br></code></pre></td></tr></table></figure><p>找不到:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@color:</span> red;<br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">@color</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-注释"><a href="#9-注释" class="headerlink" title="9. 注释"></a>9. 注释</h2><p>和 js 一样，有两种形式的注释方式，<code>//</code>和<code>/**/</code></p><p>其中，<code>/**/</code>形式的注释编译后，也会出现在生成的 css 中，而<code>//</code>形式的则不会出现在生成的 css 中</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/* 测试1 */</span><br><span class="hljs-comment">// 测试2</span><br><span class="hljs-variable">@color:</span> red;<br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">@color</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 测试1 */</span><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-导入"><a href="#10-导入" class="headerlink" title="10. 导入"></a>10. 导入</h2><p>如果导入的文件是<code>.less</code>扩展名，则可以把扩展名去掉</p><p>要导入的 test.less 文件</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>index.less 文件</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;./test&quot;</span>;<br></code></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>学习链接：<a href="https://less.bootcss.com/">Less 快速入门 | Less.js 中文文档 - Less 中文网 (bootcss.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python(四)</title>
      <link href="/2021/11/27/python-4/"/>
      <url>/2021/11/27/python-4/</url>
      
        <content type="html"><![CDATA[<h1 id="python-四"><a href="#python-四" class="headerlink" title="python(四)"></a>python(四)</h1><h2 id="1-函数"><a href="#1-函数" class="headerlink" title="1. 函数"></a>1. 函数</h2><h3 id="1-1-关键参数"><a href="#1-1-关键参数" class="headerlink" title="1.1 关键参数"></a>1.1 关键参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">demo</span>(<span class="hljs-params">a, b, c=<span class="hljs-number">5</span></span>):</span><br>    <span class="hljs-built_in">print</span>(a, b, c)<br><br>demo(<span class="hljs-number">3</span>, <span class="hljs-number">7</span>)<br><br>demo(c=<span class="hljs-number">8</span>, a=<span class="hljs-number">9</span>, b=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="1-2-可变长度参数"><a href="#1-2-可变长度参数" class="headerlink" title="1.2 可变长度参数"></a>1.2 可变长度参数</h3><p><strong>*p</strong>: 用来接收任意多个实参，并将其放在一个元组中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">demo</span>(<span class="hljs-params">*p</span>):</span><br>    <span class="hljs-built_in">print</span>(p)<br><br><br>demo(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>demo(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p><b>**p: </b>接收多个关键参数，并将其放入字典中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">demo</span>(<span class="hljs-params">**p</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(p))<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> p.items():<br>        <span class="hljs-built_in">print</span>(item)<br><br><br>demo(x=<span class="hljs-number">1</span>, y=<span class="hljs-number">2</span>, z=<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h3 id="1-3-参数传递时的序列解包"><a href="#1-3-参数传递时的序列解包" class="headerlink" title="1.3 参数传递时的序列解包"></a>1.3 参数传递时的序列解包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">demo</span>(<span class="hljs-params">a, b, c</span>):</span><br>    <span class="hljs-built_in">print</span>(a + b + c)<br><br><br>seq = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>demo(*seq)<br><br>tup = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>demo(*tup)<br><br>dic = &#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;c&#x27;</span>&#125;<br>demo(*dic)<br><span class="hljs-comment"># 使用字典对象作为实参时，默认使用字典的&quot;键&quot;,需要&quot;键值对&quot;作为参数，需要使用items()方法，需要&quot;值&quot;作为参数,需要使用values()方法</span><br><br>demo(*dic.values())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">demo</span>(<span class="hljs-params">a, b, c</span>):</span><br>    <span class="hljs-built_in">print</span>(a + b + c)<br>    <span class="hljs-built_in">print</span>(b)<br><br><br>demo(**&#123;<span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>&#125;)<br><span class="hljs-comment"># 使用字典作为函数实参时，并且在前面使用两个星号**进行解包时，会把字典的键作为参数名，值作为参数的值</span><br></code></pre></td></tr></table></figure><h3 id="1-4-全局变量"><a href="#1-4-全局变量" class="headerlink" title="1.4 全局变量"></a>1.4 全局变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">demo</span>():</span><br>    <span class="hljs-keyword">global</span> x    <span class="hljs-comment"># global用来声明全局变量</span><br>    x = <span class="hljs-number">3</span><br>    y = <span class="hljs-number">4</span><br>    <span class="hljs-built_in">print</span>(x, y)<br><br><br>demo()<br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)    <span class="hljs-comment"># 会报错，因为y是局部变量，所以函数执行完之后，y就不再存在了</span><br></code></pre></td></tr></table></figure><h3 id="1-5-暂时性死区"><a href="#1-5-暂时性死区" class="headerlink" title="1.5 暂时性死区"></a>1.5 暂时性死区</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">3</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>():</span><br>    <span class="hljs-built_in">print</span>(x)    <span class="hljs-comment"># 这里会报错，因为暂时性死区，虽然外面有全局变量x，但是函数内部也有局部变量x，所以函数不会去访问全局变量x</span><br>    x = <span class="hljs-number">5</span><br>    <span class="hljs-built_in">print</span>(x)<br><br>f()<br></code></pre></td></tr></table></figure><h3 id="1-6-lambda-表达式"><a href="#1-6-lambda-表达式" class="headerlink" title="1.6 lambda 表达式"></a>1.6 lambda 表达式</h3><p>用于声明匿名函数</p><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> 变量: 返回值(操作)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-keyword">lambda</span> x, y, z: x + y +z<br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><br>g = <span class="hljs-keyword">lambda</span> x, y=<span class="hljs-number">2</span>, z=<span class="hljs-number">3</span>: x + y + z<br><span class="hljs-built_in">print</span>(g(<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(g(<span class="hljs-number">2</span>, z=<span class="hljs-number">3</span>, y=<span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure><h3 id="1-7-map"><a href="#1-7-map" class="headerlink" title="1.7 map()"></a>1.7 map()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># map(方法, 迭代器对象)   把迭代器对象中的元素都用参数一中的方法包装，返回一个map对象，不会改变迭代器对象</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add7</span>(<span class="hljs-params">v</span>):</span><br>    <span class="hljs-keyword">return</span> v + <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(add7, <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>))))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>):</span><br>    <span class="hljs-keyword">return</span> x + y<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(add, <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>), <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>))))<br></code></pre></td></tr></table></figure><h3 id="1-8-reduce"><a href="#1-8-reduce" class="headerlink" title="1.8 reduce()"></a>1.8 reduce()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">factors, x</span>):</span><br>    result = reduce(<span class="hljs-keyword">lambda</span> a, b: a * x + b, factors)<br>    <span class="hljs-keyword">return</span> result<br><br>factors = (<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">3 * 1 + 8 = 11</span><br><span class="hljs-string">11 * 1 + 5 = 16</span><br><span class="hljs-string">...</span><br><span class="hljs-string">32 * 1 + 1 = 33</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(func(factors, <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h3 id="1-9-filter"><a href="#1-9-filter" class="headerlink" title="1.9 filter()"></a>1.9 filter()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">seq = [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;x41&#x27;</span>, <span class="hljs-string">&#x27;?!&#x27;</span>, <span class="hljs-string">&#x27;***&#x27;</span>]<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> x.isalnum()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(func, seq)))  <span class="hljs-comment"># filter(方法， 可迭代对象), 返回可迭代对象中可以使方法的返回值为True的元素组成的filter对象</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> seq <span class="hljs-keyword">if</span> x.isalnum()))<br></code></pre></td></tr></table></figure><h3 id="1-10-生成器函数"><a href="#1-10-生成器函数" class="headerlink" title="1.10 生成器函数"></a>1.10 生成器函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>():</span><br>    a, b = <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">yield</span> a<br>        a, b = b, a + b     <span class="hljs-comment"># 给出一个值，并暂停代码的执行</span><br><br>a = f()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(a), end=<span class="hljs-string">&#x27; &#x27;</span>)     <span class="hljs-comment"># next()向生成器索要一个值，恢复代码的运行</span><br><br></code></pre></td></tr></table></figure><h2 id="2-面向对象程序设计"><a href="#2-面向对象程序设计" class="headerlink" title="2. 面向对象程序设计"></a>2. 面向对象程序设计</h2><h3 id="2-1-类的定义与使用"><a href="#2-1-类的定义与使用" class="headerlink" title="2.1 类的定义与使用"></a>2.1 类的定义与使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>:</span><br>    price = <span class="hljs-number">100000</span>          <span class="hljs-comment"># 定义类属性，类属性属于类，可以通过类名或对象名访问</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, c</span>):</span><br>        self.color = c      <span class="hljs-comment"># 定义实例属性，实例属性属于对象，只能通过对象名访问</span><br><br>car1 = Car(<span class="hljs-string">&#x27;Red&#x27;</span>)<br>car2 = Car(<span class="hljs-string">&#x27;Blue&#x27;</span>)<br><span class="hljs-built_in">print</span>(car1.color, car2.color)<br><br>Car.price = <span class="hljs-number">110000</span>          <span class="hljs-comment"># 修改类属性</span><br>Car.name = <span class="hljs-string">&#x27;TT&#x27;</span>             <span class="hljs-comment"># 增加类属性</span><br><br>car1.color = <span class="hljs-string">&#x27;Pink&#x27;</span>         <span class="hljs-comment"># 修改实例属性</span><br><br><span class="hljs-built_in">print</span>(Car.price, Car.name)<br><span class="hljs-built_in">print</span>(car1.color, car2.color)<br></code></pre></td></tr></table></figure><h3 id="2-2-私有成员"><a href="#2-2-私有成员" class="headerlink" title="2.2 私有成员"></a>2.2 私有成员</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, value1=<span class="hljs-number">0</span>, value2=<span class="hljs-number">0</span></span>):</span><br>        self.value1 = value1<br>        self.__value2 = value2      <span class="hljs-comment"># 私有成员，以两个下划线开头，但不以两个下划线结束</span><br><br>a = A()<br><span class="hljs-built_in">print</span>(a.value1)<br><span class="hljs-comment"># print(a.__value2)                  # 私有成员不允许从外部访问</span><br><span class="hljs-built_in">print</span>(a._A__value2)                  <span class="hljs-comment"># 通过特殊的方式从外部访问私有成员</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, value</span>):</span><br>        self.__value = value        <span class="hljs-comment"># value是私有成员，所以需要增加访问、修改、删除属性的方法，并通过修饰器定义属性</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__get</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.__value<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__set</span>(<span class="hljs-params">self, v</span>):</span><br>        self.__value = v<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__del</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">del</span> self.__value<br><br>    value = <span class="hljs-built_in">property</span>(__get, __<span class="hljs-built_in">set</span>, __<span class="hljs-keyword">del</span>)       <span class="hljs-comment"># 修饰器，定义属性</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(self.__value)<br><br>t = Test(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(t.value)<br><br>t.value = <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(t.value)<br><br><span class="hljs-keyword">del</span> t.value<br></code></pre></td></tr></table></figure><h2 id="3-文件操作"><a href="#3-文件操作" class="headerlink" title="3. 文件操作"></a>3. 文件操作</h2><p>写文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;test\nhello\nworld&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.txt&#x27;</span>, <span class="hljs-string">&#x27;a+&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(s)<br></code></pre></td></tr></table></figure><p>读文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.txt&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    <span class="hljs-built_in">print</span>(fp.read(<span class="hljs-number">5</span>))    <span class="hljs-comment"># 读取并显示文本文件的前5个字符</span><br>    <span class="hljs-built_in">print</span>(fp.read(<span class="hljs-number">5</span>))    <span class="hljs-comment"># 读取并显示文本文件的第二轮的5个字符，因为是通过文件指针形式进行读取文件的</span><br>    fp.seek(<span class="hljs-number">0</span>)           <span class="hljs-comment"># 移动文件指针回到开头</span><br><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fp:      <span class="hljs-comment"># 读取并显示文本文件的所有行</span><br>        <span class="hljs-built_in">print</span>(line)<br></code></pre></td></tr></table></figure><h3 id="3-1-二进制文件操作"><a href="#3-1-二进制文件操作" class="headerlink" title="3.1 二进制文件操作"></a>3.1 二进制文件操作</h3><h4 id="3-1-1-使用-pickle-模块"><a href="#3-1-1-使用-pickle-模块" class="headerlink" title="3.1.1 使用 pickle 模块"></a>3.1.1 使用 pickle 模块</h4><p>写入二进制文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br>i = <span class="hljs-number">13000000</span><br>a = <span class="hljs-number">99.056</span><br>s = <span class="hljs-string">&#x27;中国人名123abc&#x27;</span><br>lst = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]<br>tu = (-<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>)<br>coll = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br>dic = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>: <span class="hljs-string">&#x27;grape&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>: <span class="hljs-string">&#x27;orange&#x27;</span>&#125;<br>data = [i, a, s, lst, tu, coll, dic]<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sample_pickle.dat&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">try</span>:<br>        pickle.dump(<span class="hljs-built_in">len</span>(data), f)   <span class="hljs-comment"># 第一次把要写的数据长度写进去</span><br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br>            pickle.dump(item, f)    <span class="hljs-comment"># 依次把数据写进去</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;写文件异常&#x27;</span>)<br></code></pre></td></tr></table></figure><p>读取二进制文件的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sample_pickle.dat&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    n = pickle.load(f)      <span class="hljs-comment"># 先读长度</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        x = pickle.load(f)  <span class="hljs-comment"># 再读数据</span><br>        <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h3 id="3-2-文件级操作"><a href="#3-2-文件级操作" class="headerlink" title="3.2 文件级操作"></a>3.2 文件级操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 文件级操作</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-built_in">print</span>([fname <span class="hljs-keyword">for</span> fname <span class="hljs-keyword">in</span> os.listdir(os.getcwd())   <span class="hljs-comment"># os.getcwd()返回当前工作目录</span><br>       <span class="hljs-keyword">if</span> os.path.isfile(fname) <span class="hljs-keyword">and</span> fname.endswith(<span class="hljs-string">&#x27;.py&#x27;</span>)])     <span class="hljs-comment"># 返回扩展名为py的文件</span><br><br>file_list  = [filename <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> os.listdir()<br>              <span class="hljs-keyword">if</span> filename.endswith(<span class="hljs-string">&#x27;.html&#x27;</span>)]<br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> file_list:<br>    newname = filename[:-<span class="hljs-number">4</span>] + <span class="hljs-string">&#x27;htm&#x27;</span><br>    os.rename(filename, newname)                <span class="hljs-comment"># 把所有扩展名为html的文件都改为htm</span><br>    <span class="hljs-built_in">print</span>(filename+<span class="hljs-string">&quot;更名为&quot;</span>+newname)<br><br><span class="hljs-comment"># 使用shutil模块</span><br><span class="hljs-keyword">import</span> shutil<br>shutil.copyfile(<span class="hljs-string">&#x27;.\data.txt&#x27;</span>, <span class="hljs-string">&#x27;.\data2.txt&#x27;</span>)<br><br>shutil.make_archive(<span class="hljs-string">&#x27;.\\a&#x27;</span>, <span class="hljs-string">&#x27;zip&#x27;</span>, <span class="hljs-string">&#x27;C:\\Users\\CZH0318\\Desktop\\wallhaven&#x27;</span>)    <span class="hljs-comment"># 压缩</span><br>shutil.unpack_archive(<span class="hljs-string">&#x27;.\\a.zip&#x27;</span>, <span class="hljs-string">&#x27;.\\a_unpack&#x27;</span>)                                <span class="hljs-comment"># 解压缩</span><br><br>shutil.rmtree(<span class="hljs-string">&#x27;.\\a_unpack&#x27;</span>)        <span class="hljs-comment"># 删除刚刚解压的文件夹</span><br></code></pre></td></tr></table></figure><h3 id="3-3-目录操作"><a href="#3-3-目录操作" class="headerlink" title="3.3 目录操作"></a>3.3 目录操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 目录操作</span><br><span class="hljs-keyword">import</span> os<br>os.mkdir(os.getcwd()+<span class="hljs-string">&#x27;\\temp&#x27;</span>)      <span class="hljs-comment"># 创建目录</span><br><span class="hljs-built_in">print</span>(os.listdir(<span class="hljs-string">&#x27;.&#x27;</span>))              <span class="hljs-comment"># 返回指定目录下的文件和目录信息</span><br>os.rmdir(<span class="hljs-string">&#x27;temp&#x27;</span>)                    <span class="hljs-comment"># 删除目录</span><br></code></pre></td></tr></table></figure><h2 id="4-异常处理"><a href="#4-异常处理" class="headerlink" title="4. 异常处理"></a>4. 异常处理</h2><h3 id="4-1-Python-中的异常处理结构"><a href="#4-1-Python-中的异常处理结构" class="headerlink" title="4.1 Python 中的异常处理结构"></a>4.1 Python 中的异常处理结构</h3><h4 id="4-1-1-try…except…结构"><a href="#4-1-1-try…except…结构" class="headerlink" title="4.1.1 try…except…结构"></a>4.1.1 try…except…结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个整数: &quot;</span>))<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入不符合条件&quot;</span>)<br></code></pre></td></tr></table></figure><p>try 块是被监控的语句，有可能会引发异常</p><p>except 块用于处理异常的代码</p><h4 id="4-1-2-try…except…else…结构"><a href="#4-1-2-try…except…else…结构" class="headerlink" title="4.1.2 try…except…else…结构"></a>4.1.2 try…except…else…结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a_list = [<span class="hljs-string">&#x27;China&#x27;</span>, <span class="hljs-string">&#x27;America&#x27;</span>, <span class="hljs-string">&#x27;England&#x27;</span>, <span class="hljs-string">&#x27;France&#x27;</span>]<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    n = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入字符串的序号: &quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        n = <span class="hljs-built_in">int</span>(n)<br>        <span class="hljs-built_in">print</span>(a_list[n])<br>    <span class="hljs-keyword">except</span> IndexError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;列表的下标越界或格式不正确&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;只有try块语句没有抛出异常，才会执行&quot;</span>)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>else 块语句只有当 try 块语句没有抛出任何异常，才会执行</p><h4 id="4-1-3-带有多个-except-的-try-结构"><a href="#4-1-3-带有多个-except-的-try-结构" class="headerlink" title="4.1.3 带有多个 except 的 try 结构"></a>4.1.3 带有多个 except 的 try 结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    x = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入被除数: &quot;</span>)<br>    y = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入除数: &quot;</span>)<br>    z = <span class="hljs-built_in">float</span>(x) / <span class="hljs-built_in">float</span>(y)<br><span class="hljs-keyword">except</span> TypeError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;被除数和除数应该是数值类型&quot;</span>)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;除数不能为0&quot;</span>)<br><span class="hljs-keyword">except</span> NameError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量不存在&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(x, <span class="hljs-string">&quot; / &quot;</span>, y, <span class="hljs-string">&quot; = &quot;</span>, z)<br></code></pre></td></tr></table></figure><p>一旦某个 except 捕获了异常，则后面的 except 都不会再执行，所以比较精准的异常应该尽量在前面，而 BaseException 应该放在最后一个 except 中。</p><h4 id="4-1-4-try…except…finally…结构"><a href="#4-1-4-try…except…finally…结构" class="headerlink" title="4.1.4 try…except…finally…结构"></a>4.1.4 try…except…finally…结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a_list = [<span class="hljs-string">&#x27;China&#x27;</span>, <span class="hljs-string">&#x27;America&#x27;</span>, <span class="hljs-string">&#x27;England&#x27;</span>, <span class="hljs-string">&#x27;France&#x27;</span>]<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    n = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入字符串的序号: &quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        n = <span class="hljs-built_in">int</span>(n)<br>        <span class="hljs-built_in">print</span>(a_list[n])<br>    <span class="hljs-keyword">except</span> IndexError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;列表的下标越界或格式不正确&quot;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;一定会执行的语句，无论try块语句有没有抛出异常&quot;</span>)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">divide</span>(<span class="hljs-params">x, y</span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        result = x / y<br>    <span class="hljs-keyword">except</span> ZeroDivisionError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;division by zero!&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;result is&quot;</span>, result)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;executing finally clause&quot;</span>)<br><br><br>divide(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>divide(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>)<br>divide(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="4-2-断言"><a href="#4-2-断言" class="headerlink" title="4.2 断言"></a>4.2 断言</h3><p>断言语句语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">assert</span> expression[, reason]<span class="hljs-comment"># 当判断表达式expression为真时，什么都不做；为假时，则会抛出异常</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> == <span class="hljs-number">2</span>, <span class="hljs-string">&quot;1 is not equal 2!&quot;</span><br><span class="hljs-keyword">except</span> AssertionError <span class="hljs-keyword">as</span> reason:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s:%s&quot;</span> %(reason.__class__.__name__, reason))<br></code></pre></td></tr></table></figure><h3 id="4-3-上下文管理"><a href="#4-3-上下文管理" class="headerlink" title="4.3 上下文管理"></a>4.3 上下文管理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>) <span class="hljs-keyword">as</span> f:   <span class="hljs-comment"># 读取当前目录下的test.txt文件</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>        <span class="hljs-built_in">print</span>(line)         <span class="hljs-comment"># 使用with语句，文件处理完之后，会自动关闭，不需要手动关闭文件with open(&#x27;test.txt&#x27;) as f:   # 读取当前目录下的test.txt文件</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>        <span class="hljs-built_in">print</span>(line)         <span class="hljs-comment"># 使用with语句，文件处理完之后，会自动关闭，不需要手动关闭文件</span><br></code></pre></td></tr></table></figure><p>上下文管理语句 with 可以自动管理资源，在代码执行完之后自动还原进入代码块之前的现场</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP笔记(二)</title>
      <link href="/2021/11/27/php-2/"/>
      <url>/2021/11/27/php-2/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-笔记-二"><a href="#PHP-笔记-二" class="headerlink" title="PHP 笔记(二)"></a>PHP 笔记(二)</h1><h2 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1. 面向对象"></a>1. 面向对象</h2><p><b style="color: red">已经学过 C++面向对象、Java 面向对象，这一部分属于是复习，以及熟悉 PHP 面向对象的不同之处，所以不会详讲</b></p><h3 id="1-1-基本使用"><a href="#1-1-基本使用" class="headerlink" title="1.1 基本使用"></a>1.1 基本使用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$color</span></span>) </span>&#123; <span class="hljs-comment">// 构造函数: 用来在创建对象时初始化对象，在创建对象的语句中与 new 运算符一起使用。</span><br>      <span class="hljs-keyword">$this</span>-&gt;color = <span class="hljs-variable">$color</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-comment">// 析构函数: 当对象结束它的生命周期时，系统会自动执行析构函数</span><br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;系统自动执行析构函数&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setColor</span>(<span class="hljs-params"><span class="hljs-variable">$color</span></span>) </span>&#123;<br>      <span class="hljs-keyword">$this</span>-&gt;color = <span class="hljs-variable">$color</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColor</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;color;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-variable">$car</span> = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&quot;White&quot;</span>);<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$car</span>-&gt;getColor();<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>  <span class="hljs-variable">$car</span>-&gt;setColor(<span class="hljs-string">&quot;Red&quot;</span>);<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$car</span>-&gt;getColor();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-继承"><a href="#1-2-继承" class="headerlink" title="1.2 继承"></a>1.2 继承</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColor</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;白色&quot;</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FCar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Car</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColor</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// 重写getColor()方法</span><br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;红色&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fly</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;I can Fly&quot;</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-variable">$fcar</span> = <span class="hljs-keyword">new</span> FCar(<span class="hljs-string">&quot;White&quot;</span>);<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$fcar</span>-&gt;getColor();<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>  <span class="hljs-variable">$fcar</span>-&gt;fly();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-3-访问控制"><a href="#1-3-访问控制" class="headerlink" title="1.3 访问控制"></a>1.3 访问控制</h3><p>只有属性的访问控制，方法的类似</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass1</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$public</span> = <span class="hljs-string">&quot;Public&quot;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$protected</span> = <span class="hljs-string">&quot;Protected&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$private</span> = <span class="hljs-string">&quot;Private&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printM</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;public . <span class="hljs-string">&quot;\n&quot;</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;protected . <span class="hljs-string">&quot;\n&quot;</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;private . <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MyClass1</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$protected</span> = <span class="hljs-string">&#x27;Protected2&#x27;</span>;  <span class="hljs-comment">// 可以对public和protected重定义，但private不能，因为无法继承private属性</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printM</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;public . <span class="hljs-string">&quot;\n&quot;</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;protected . <span class="hljs-string">&quot;\n&quot;</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;private . <span class="hljs-string">&quot;\n&quot;</span>;   <span class="hljs-comment">// 会出现未定义private的警告</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-variable">$obj1</span> = <span class="hljs-keyword">new</span> MyClass1();<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj1</span>-&gt;public . <span class="hljs-string">&quot;\n&quot;</span>;<br>  <span class="hljs-comment">// echo $obj1-&gt;protected;</span><br>  <span class="hljs-comment">// echo $obj1-&gt;private;   // 类外部无法访问protected属性和private属性</span><br>  <span class="hljs-variable">$obj1</span>-&gt;printM();      <span class="hljs-comment">// 对象方法可以访问所有属性</span><br><br>  <span class="hljs-variable">$obj2</span> = <span class="hljs-keyword">new</span> MyClass2();<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj2</span>-&gt;public . <span class="hljs-string">&quot;\n&quot;</span>;<br>  <span class="hljs-variable">$obj2</span>-&gt;printM();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-4-接口"><a href="#1-4-接口" class="headerlink" title="1.4 接口"></a>1.4 接口</h3><p>使用接口，可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容</p><p>接口通过<strong>interface</strong>关键字来定义，定义所有的方法都是空的</p><p><b style="color: red">接口中定义的所有方法都必须是公有(public)</b>, 这是接口的特性</p><p>实现接口，使用<strong>implements</strong>操作符。类中必须实现接口中定义的所有方法，否则会报错。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<br>  <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">myName</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setName</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span>;<br>  &#125;<br><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">myName</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setName</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>      <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;name;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-variable">$n</span> = <span class="hljs-keyword">new</span> Name;<br>  <span class="hljs-variable">$n</span>-&gt;setName(<span class="hljs-string">&quot;CLZ&quot;</span>);<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$n</span>-&gt;getName();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-5-抽象类"><a href="#1-5-抽象类" class="headerlink" title="1.5 抽象类"></a>1.5 抽象类</h3><p>任何一个类，如果至少有一个方法被声明为抽象的，则这个类就必须声明为抽象的</p><p>被定义为抽象的方法只是声明了它的调用方式，不能定义具体的功能实现。</p><p>继承一个抽象类的时候，子类必须定义父类中的抽象方法，这些方法的访问控制必须和父类一样或比父类宽松。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<br>  <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractClass</span> </span>&#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValue</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prefixValue</span>(<span class="hljs-params"><span class="hljs-variable">$prefix</span></span>)</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printOut</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">print</span> <span class="hljs-keyword">$this</span>-&gt;getValue() . PHP_EOL;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreateClass1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractClass</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValue</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ConcreateClass1&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prefixValue</span>(<span class="hljs-params"><span class="hljs-variable">$prefix</span></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$prefix&#125;</span>ConcreateClass1&quot;</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreateClass2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractClass</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValue</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ConcreateClass2&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prefixValue</span>(<span class="hljs-params"><span class="hljs-variable">$prefix</span></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$prefix&#125;</span>ConcreateClass2&quot;</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-variable">$class1</span> = <span class="hljs-keyword">new</span> ConcreateClass1();<br>  <span class="hljs-variable">$class1</span>-&gt;printOut();<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$class1</span>-&gt;prefixValue(<span class="hljs-string">&quot;FOO_&quot;</span>) . PHP_EOL;<br><br>  <span class="hljs-variable">$class2</span> = <span class="hljs-keyword">new</span> ConcreateClass2();<br>  <span class="hljs-variable">$class2</span>-&gt;printOut();<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$class2</span>-&gt;prefixValue(<span class="hljs-string">&quot;FOO_&quot;</span>) . PHP_EOL;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-6-静态方法"><a href="#1-6-静态方法" class="headerlink" title="1.6 静态方法"></a>1.6 静态方法</h3><p>通过<strong>static 关键字</strong>声明类属性或方法，可以不是实例化类直接访问</p><p><strong>静态属性不能由对象通过-&gt;操作符访问，而应该使用::操作符访问</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$my_static</span> = <span class="hljs-string">&quot;静态变量&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">staticValue</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$my_static</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello!&quot;</span> . PHP_EOL;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">print</span> Test::<span class="hljs-variable">$my_static</span> . PHP_EOL;<br>  Test::sayHello();       <span class="hljs-comment">// 可以直接通过类名::访问静态变量和静态方法</span><br><br>  <span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> Test();<br>  <span class="hljs-keyword">print</span> <span class="hljs-variable">$test</span>::<span class="hljs-variable">$my_static</span> . PHP_EOL;    <span class="hljs-comment">// 也可以通过对象::访问静态变量和静态方法</span><br>  <span class="hljs-keyword">print</span> <span class="hljs-variable">$test</span>-&gt;staticValue() . PHP_EOL;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-7-调用父类的构造方法"><a href="#1-7-调用父类的构造方法" class="headerlink" title="1.7 调用父类的构造方法"></a>1.7 调用父类的构造方法</h3><p>在子类的构造方法中调用<strong>parent::__construct()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$color</span>, <span class="hljs-variable">$cost</span></span>) </span>&#123;<br>      <span class="hljs-keyword">$this</span>-&gt;color = <span class="hljs-variable">$color</span>;<br>      <span class="hljs-keyword">$this</span>-&gt;cost = <span class="hljs-variable">$cost</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WCar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Car</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$color</span>, <span class="hljs-variable">$cost</span>, <span class="hljs-variable">$weight</span></span>) </span>&#123;<br>      <span class="hljs-built_in">parent</span>::__construct(<span class="hljs-variable">$color</span>, <span class="hljs-variable">$cost</span>);<br>      <span class="hljs-keyword">$this</span>-&gt;weight = <span class="hljs-variable">$weight</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-variable">$wcar</span> = <span class="hljs-keyword">new</span> WCar(<span class="hljs-string">&quot;White&quot;</span>, <span class="hljs-number">99999</span>, <span class="hljs-string">&quot;999kg&quot;</span>);<br>  var_dump(<span class="hljs-variable">$wcar</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-表单"><a href="#2-表单" class="headerlink" title="2. 表单"></a>2. 表单</h2><p><strong>简单使用</strong></p><p>form.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;welcome.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>      名字: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fname&quot;</span> /&gt;</span> 年龄:<br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>welcome.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;欢迎&quot;</span> . <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;fname&quot;</span>] . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你的年龄是 &quot;</span> . <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;age&quot;</span>] . <span class="hljs-string">&quot;岁&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-PHP-AJAX"><a href="#3-PHP-AJAX" class="headerlink" title="3. PHP AJAX"></a>3. PHP AJAX</h2><h3 id="3-1-AJAX"><a href="#3-1-AJAX" class="headerlink" title="3.1 AJAX"></a>3.1 AJAX</h3><p>AJAX 是一种<strong>无需重新加载整个页面的情况下，能够更新部分网页的技术</strong>。</p><p>AJAX 通过在后台与服务器进行少量数据交换，使网页实现异步更新。使用 AJAX 可以实现在不重载整个页面的情况下，对页面的某些部分进行更新。</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/08/ajax.gif"></p><h3 id="3-2-使用-PHP、AJAX-实现简单的前后端交互"><a href="#3-2-使用-PHP、AJAX-实现简单的前后端交互" class="headerlink" title="3.2 使用 PHP、AJAX 实现简单的前后端交互"></a>3.2 使用 PHP、AJAX 实现简单的前后端交互</h3><p>websites 表如下:</p><p><img src="https://pic.imgdb.cn/item/619b1c562ab3f51d916a0508.jpg"></p><p>前端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;users&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;showSite(this.value)&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>选择一个网站:<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>Google<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>淘宝<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>Facebook<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txtHint&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> txtHint = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;txtHint&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showSite</span>(<span class="hljs-params">str</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (str == <span class="hljs-string">&quot;&quot;</span>) &#123;</span><br><span class="javascript">          txtHint.innerHTML = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">          <span class="hljs-keyword">return</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">let</span> xmlhttp = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="javascript">        xmlhttp.open(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;getsite.php?v=&quot;</span> + str, <span class="hljs-literal">true</span>); <span class="hljs-comment">// true表示异步执行请求</span></span><br><span class="javascript">        xmlhttp.send(<span class="hljs-literal">null</span>);</span><br><span class="javascript"></span><br><span class="javascript">        xmlhttp.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (xmlhttp.readyState === <span class="hljs-number">4</span> &amp;&amp; xmlhttp.status === <span class="hljs-number">200</span>) &#123;</span><br><span class="javascript">            txtHint.innerHTML = xmlhttp.responseText;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后端</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-comment">// $v = isset($_GET[&#x27;v&#x27;]) ? intval($_GET[&#x27;v&#x27;]) : &#x27;&#x27;;</span><br>  <span class="hljs-variable">$v</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v&#x27;</span>];<br><br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$v</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;请选择一个网站&#x27;</span>;<br>    <span class="hljs-keyword">exit</span>;<br>  &#125;<br><br>  <span class="hljs-variable">$con</span> = mysqli_connect(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;root1234&#x27;</span>);<br>  <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$con</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;连接数据库失败: &#x27;</span> . mysqli_error(<span class="hljs-variable">$con</span>));<br>  &#125;<br><br>  mysqli_select_db(<span class="hljs-variable">$con</span>, <span class="hljs-string">&#x27;php_ajax_mysql&#x27;</span>); <span class="hljs-comment">// 选择数据库</span><br>  mysqli_set_charset(<span class="hljs-variable">$con</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br><br>  <span class="hljs-variable">$sql</span> = <span class="hljs-string">&#x27;select * from websites where id = &#x27;</span> . <span class="hljs-variable">$v</span>;<br><br>  <span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>);<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;20&quot; style=&quot;margin-top: 20px&quot;&gt;</span><br><span class="hljs-string">        &lt;tr style=&quot;background-color: #555; color: #fff&quot;&gt;</span><br><span class="hljs-string">          &lt;th&gt;ID&lt;/th&gt;</span><br><span class="hljs-string">          &lt;th&gt;网站名&lt;/th&gt;</span><br><span class="hljs-string">          &lt;th&gt;网站url&lt;/th&gt;</span><br><span class="hljs-string">          &lt;th&gt;Alexa排名&lt;/th&gt;</span><br><span class="hljs-string">          &lt;th&gt;国家&lt;/th&gt;</span><br><span class="hljs-string">        &lt;/tr&gt;&#x27;</span>;<br>  <span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = mysqli_fetch_assoc(<span class="hljs-variable">$result</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;id&#x27;</span>] . <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;name&#x27;</span>] . <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;url&#x27;</span>] . <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;alexa&#x27;</span>] . <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;country&#x27;</span>] . <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/table&gt;&#x27;</span>;<br><br>  mysqli_close(<span class="hljs-variable">$con</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://pic.imgdb.cn/item/619b1d232ab3f51d916a66d1.jpg"></p><h2 id="4-二维数组"><a href="#4-二维数组" class="headerlink" title="4. 二维数组"></a>4. 二维数组</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<br>  <span class="hljs-variable">$sites</span> = <span class="hljs-keyword">array</span><br>  (<br>    <span class="hljs-string">&quot;google&quot;</span> =&gt; <span class="hljs-keyword">array</span><br>    (<br>      <span class="hljs-string">&quot;Google搜索&quot;</span>,<br>      <span class="hljs-string">&quot;http://www.google.com&quot;</span><br>    ),<br>    <span class="hljs-string">&quot;baidu&quot;</span> =&gt; <span class="hljs-keyword">array</span><br>    (<br>      <span class="hljs-string">&quot;Baidu搜索&quot;</span>,<br>      <span class="hljs-string">&quot;http://www.baidu.com&quot;</span><br>    )<br>    );<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sites</span>[<span class="hljs-string">&#x27;google&#x27;</span>][<span class="hljs-number">0</span>] . <span class="hljs-string">&#x27;地址为: &#x27;</span> . <span class="hljs-variable">$sites</span>[<span class="hljs-string">&#x27;google&#x27;</span>][<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-日期"><a href="#5-日期" class="headerlink" title="5. 日期"></a>5. 日期</h2><p>date()用于格式化时间/日期</p><p>语法：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">string date ( string $format [, int $timestamp ] )<br></code></pre></td></tr></table></figure></blockquote><ul><li>format：<strong>必需</strong>。规定如何格式化当前的日期和时间</li><li>timestamp：可选。规定时间戳，默认是当前的时间和日期。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<br>  <span class="hljs-keyword">echo</span> date(<span class="hljs-string">&quot;Y/m/d&quot;</span>) . PHP_EOL;<br>  <span class="hljs-keyword">echo</span> date(<span class="hljs-string">&quot;Y-m-d&quot;</span>) . PHP_EOL;<br>  <span class="hljs-keyword">echo</span> date(<span class="hljs-string">&quot;Y-m-d&quot;</span>, mktime(<span class="hljs-number">23</span>, <span class="hljs-number">59</span>, <span class="hljs-number">59</span>, <span class="hljs-number">12</span>, <span class="hljs-number">31</span>, <span class="hljs-number">2020</span>));<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>mktime()返回一个日期的 UNIX 时间戳</p><p>语法：</p><blockquote><p>mktime(hour, minute, second, month, day, year);</p></blockquote><h2 id="6-插入文件"><a href="#6-插入文件" class="headerlink" title="6. 插入文件"></a>6. 插入文件</h2><p>require 和 include 除了处理错误的方式不同外，在其他方面都相同</p><ul><li>require 生成一个致命错误，在错误发生后脚本会停止执行</li><li>include 生成一个警告，在错误发生后脚本会继续执行</li></ul><ul><li>require 一般放在 PHP 文件的最前面，程序在执行前就会先导入要引用的文件；</li><li>include 一般放在程序的流程控制中，当程序执行时碰到才会引用，简化程序的执行流程</li></ul><p><strong>上一段文字引自</strong><a href="https://www.runoob.com/php/php-includes.html">PHP include 和 require | 菜鸟教程 (runoob.com)</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;测试开始&lt;h1&gt;&quot;</span>;<br>  <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;./form.html&quot;</span>;<br>  <span class="hljs-comment">// include &quot;./form.html&quot;;</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;测试结束&lt;/h1&gt;&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6199b1ab2ab3f51d91e38ce8.jpg"></p><p>另一种用法：</p><p>test.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$tt</span> = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>practise.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./test.php&#x27;</span>;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$tt</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6199b4dd2ab3f51d91e4bc20.jpg"></p><h2 id="7-文件上传"><a href="#7-文件上传" class="headerlink" title="7. 文件上传"></a>7. 文件上传</h2><p>form.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;upload_file.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>upload_file.php`</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>] &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;错误: &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;上传文件名: &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;文件类型: &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;文件大小: &#x27;</span> . (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>] / <span class="hljs-number">1024</span>) . <span class="hljs-string">&#x27; kB&lt;br&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;文件临时存储的位置: &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>  &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6199c8d62ab3f51d91ecb868.jpg"></p><p><strong>上传限制和保存上传的文件</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$allowedExts</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;gif&#x27;</span>, <span class="hljs-string">&#x27;jpeg&#x27;</span>, <span class="hljs-string">&#x27;jpg&#x27;</span>, <span class="hljs-string">&#x27;png&#x27;</span>);<br>  <span class="hljs-variable">$temp</span> = explode(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);    <span class="hljs-comment">// 文件名按 . 分为字符串数组</span><br>  <span class="hljs-variable">$extension</span> = end(<span class="hljs-variable">$temp</span>);                  <span class="hljs-comment">// 得到数组中最后一个元素的值，即文件后缀名</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>] &lt; <span class="hljs-number">204800</span>       <span class="hljs-comment">// 上传文件大小要求小于200kb</span><br>  &amp;&amp; in_array(<span class="hljs-variable">$extension</span>, <span class="hljs-variable">$allowedExts</span>)) &#123;  <span class="hljs-comment">// 上传文件类型必须符合要求</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>] &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;错误: &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;上传文件名: &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;文件类型: &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;文件大小: &#x27;</span> . (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>] / <span class="hljs-number">1024</span>) . <span class="hljs-string">&#x27; kB&lt;br&gt;&#x27;</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;文件临时存储的位置: &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><br>      <span class="hljs-keyword">if</span>(file_exists(<span class="hljs-string">&#x27;upload/&#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;   <span class="hljs-comment">// 判断文件已经存在</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>] . <span class="hljs-string">&#x27;文件已经存在&#x27;</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        move_uploaded_file(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-string">&#x27;upload/&#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);   <span class="hljs-comment">// 必须有upload文件夹，否则会出错</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;文件存储在: &#x27;</span> . <span class="hljs-string">&#x27;upload/&#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>      &#125;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;非法的文件格式&quot;</span>;<br>  &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-Cookie"><a href="#8-Cookie" class="headerlink" title="8. Cookie"></a>8. Cookie</h2><p>当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息</p><p>Cookie 的作用就是用于解决<strong>如何记录客户端的用户信息</strong></p><ul><li>当用户访问 web 页面时，他的名字可以记录在 Cookie 中</li><li>在用户下一次访问该页面时，可以在 Cookie 中读取用户访问记录</li></ul><p>Cookie 以键值对的形式存储。</p><h3 id="8-1-创建-Cookie"><a href="#8-1-创建-Cookie" class="headerlink" title="8.1 创建 Cookie"></a>8.1 创建 Cookie</h3><p>语法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">setcookie(name, value, expire, path, domain);<br></code></pre></td></tr></table></figure><ul><li>name: 必需。规定 cookie 的名称</li><li>value: 必需。规定 cookie 的值</li><li>expire: 可选。规定 cookie 的有效值</li><li>path: 可选。规定 cookie 的服务器路径</li><li>domain: 可选。规定 cookie 的域名</li><li>secure: 可选。规定是否通过安全的 HTTPS 连接来传输 cookie</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$expire</span> = time() + <span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">30</span>; <span class="hljs-comment">// 设置过期时间为1个月, 60秒*60分*24小时*30天</span><br>  setcookie(<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;clz&#x27;</span>, <span class="hljs-variable">$expire</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-2-取回-Cookie-的值"><a href="#8-2-取回-Cookie-的值" class="headerlink" title="8.2 取回 Cookie 的值"></a>8.2 取回 Cookie 的值</h3><p>通过$_COOKIE 变量取回 Cookie 的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>] . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br> print_r(<span class="hljs-variable">$_COOKIE</span>);   <span class="hljs-comment">// 查看所有的cookie</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>简单判断是不是登录的用户</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>])) &#123;  <span class="hljs-comment">//判断cookie是否存在</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;欢迎 &quot;</span> . <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br> &#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;普通访客&lt;br&gt;&#x27;</span>;<br> &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-3-删除-Cookie"><a href="#8-3-删除-Cookie" class="headerlink" title="8.3 删除 Cookie"></a>8.3 删除 Cookie</h3><p>有点巧妙，重新设置 cookie，不过把过期时间设置为过去的时间</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  setcookie(<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, time() - <span class="hljs-number">60</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="9-PHP-JSON"><a href="#9-PHP-JSON" class="headerlink" title="9. PHP JSON"></a>9. PHP JSON</h2><p><strong>json_encode()函数</strong>用于对变量进行 JSON 编码，执行成功则返回 JSON 数据，否则返回 false</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;a&#x27;</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span> =&gt; <span class="hljs-number">3</span>);<br>  <span class="hljs-keyword">echo</span> json_encode(<span class="hljs-variable">$arr</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>结果：{“a”:1,”b”:2,”c”:3}</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;test&#x27;</span> =&gt; <span class="hljs-string">&#x27;测试&#x27;</span>, <span class="hljs-string">&#x27;baidu&#x27;</span> =&gt; <span class="hljs-string">&#x27;百度&#x27;</span>);<br>   <span class="hljs-keyword">echo</span> json_encode(<span class="hljs-variable">$arr</span>);  <span class="hljs-comment">// 编码中文</span><br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>   <span class="hljs-keyword">echo</span> json_encode(<span class="hljs-variable">$arr</span>, JSON_UNESCAPED_UNICODE); <span class="hljs-comment">// 不编码中文</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><blockquote><p>{“test”:”\u6d4b\u8bd5”,”baidu”:”\u767e\u5ea6”}<br>{“test”:”测试”,”baidu”:”百度”}</p></blockquote><p><strong>json_decode() 函数</strong>用于对 JSON 格式的字符串进行解码，并转换为 PHP 变量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$json</span> = <span class="hljs-string">&#x27;&#123;&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: 3&#125;&#x27;</span>;<br><br>  print_r(json_decode(<span class="hljs-variable">$json</span>));<br>  <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>  print_r(json_decode(<span class="hljs-variable">$json</span>, <span class="hljs-literal">true</span>));  <span class="hljs-comment">// 第二个参数为true时，将返回数组，为false时，返回对象，默认为false</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>参考：<a href="https://www.runoob.com/php/php-tutorial.html">PHP 教程 | 菜鸟教程 (runoob.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP笔记(一)</title>
      <link href="/2021/11/27/php-1/"/>
      <url>/2021/11/27/php-1/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-笔记-一"><a href="#PHP-笔记-一" class="headerlink" title="PHP 笔记(一)"></a>PHP 笔记(一)</h1><p>数据库项目作业要团队开发 web，选择了尝试后端，又向做出自己的网站这个目标踏出了一步。</p><h2 id="1-简单使用"><a href="#1-简单使用" class="headerlink" title="1. 简单使用"></a>1. 简单使用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;body&gt;<br><br>&lt;h1&gt;h1&lt;/h1&gt;<br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello World!&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br><br>&lt;h1&gt;h1&lt;/h1&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>在服务器下运行才有效果</p><p><img src="https://pic.imgdb.cn/item/619683ef2ab3f51d9165ef8f.jpg"></p><h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$x</span> = <span class="hljs-number">1</span>;<br>  <span class="hljs-variable">$y</span> = <span class="hljs-number">1</span>;<br>  <span class="hljs-variable">$z</span> = <span class="hljs-variable">$x</span> + <span class="hljs-variable">$y</span>;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$z</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-1-变量作用域"><a href="#2-1-变量作用域" class="headerlink" title="2.1 变量作用域"></a>2.1 变量作用域</h3><p>PHP 有四种作用域</p><ul><li>local</li><li>global</li><li>static</li><li>parameter</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$x</span> = <span class="hljs-number">5</span>; <span class="hljs-comment">// 全局变量</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-variable">$y</span> = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 局部变量</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;函数内: &lt;/p&gt;&quot;</span>;<br>  <span class="hljs-comment">// echo &quot;变量x: $x&quot;; // 在函数中访问一个全局变量，需要使用global关键字</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;变量y: <span class="hljs-subst">$y</span>&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"></span>)</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;函数外: &lt;/p&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;变量x: <span class="hljs-subst">$x</span>&quot;</span>;<br><span class="hljs-comment">// echo &quot;变量y: $y&quot;; // 无法访问$y, $y变量在函数中定义，属于局部变量</span><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>global 关键字</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$x</span> = <span class="hljs-number">1</span>;<br><span class="hljs-variable">$y</span> = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$x</span>, <span class="hljs-variable">$y</span>;<br>    <span class="hljs-variable">$y</span> = <span class="hljs-variable">$x</span> + <span class="hljs-variable">$y</span>;<span class="hljs-comment">// 使用global关键字后，会改变全局变量的值</span><br>&#125;<br><br>test();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;变量y: <span class="hljs-subst">$y</span>&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">// 或者下面的形式：PHP将所有全局变量存储到一个名为$GLOBALS[index]的数组中，index保存变量的名称，这个数组可以在函数内访问，也可以用来更新全局变量</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$x</span> = <span class="hljs-number">1</span>;<br><span class="hljs-variable">$y</span> = <span class="hljs-number">2</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;y&#x27;</span>] = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;x&#x27;</span>] + <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;y&#x27;</span>];<br>&#125;<br><br>test();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;变量y: <span class="hljs-subst">$y</span>&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>static 关键字</strong>：</p><p>当一个函数完成时，它的所有变量通常都会被删除，在第一次声明变量时使用<strong>static 关键字</strong>可以实现让特定变量不被删除。然后，每次调用该函数时，该变量都会保留函数前一次被调用时的值。<strong>该变量还是函数的局部变量</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">static</span> <span class="hljs-variable">$x</span> = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$x</span>;<br>  <span class="hljs-variable">$x</span>++;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br>test();<br>test();<br>test();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-定界符-EOF"><a href="#3-定界符-EOF" class="headerlink" title="3. 定界符 EOF"></a>3. 定界符 EOF</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;clz&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&lt;&lt;&lt;EOF</span><br><span class="hljs-string">        &lt;h1&gt;测试&lt;/h1&gt;  // html格式会被解析</span><br><span class="hljs-string">        &quot;abg\n&quot;<span class="hljs-subst">$name</span>  // 双引号也会被解析，双引号内会保留转义符的转义效果</span><br><span class="hljs-string">        &quot;123&quot;</span><br><span class="hljs-string">EOF</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello World!&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4. 数据类型"></a>4. 数据类型</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$x</span> = <span class="hljs-number">123</span>;<br>var_dump(<span class="hljs-variable">$x</span>); <span class="hljs-comment">// 返回变量的数据类型和值</span><br><span class="hljs-variable">$x</span> = -<span class="hljs-number">234</span>;<br>var_dump(<span class="hljs-variable">$x</span>);<br><br><span class="hljs-variable">$x</span> = <span class="hljs-number">017</span>;     <span class="hljs-comment">// 八进制</span><br>var_dump(<span class="hljs-variable">$x</span>);<br><br><span class="hljs-variable">$x</span> = <span class="hljs-number">0xaa</span>;    <span class="hljs-comment">// 十六进制</span><br>var_dump(<span class="hljs-variable">$x</span>);<br><br><span class="hljs-variable">$x</span> = <span class="hljs-string">&quot;test&quot;</span>;<br>var_dump(<span class="hljs-variable">$x</span>);<br><br><span class="hljs-variable">$x</span> = <span class="hljs-number">1.234</span>;   <span class="hljs-comment">// 浮点型</span><br>var_dump(<span class="hljs-variable">$x</span>);<br><span class="hljs-variable">$x</span> = <span class="hljs-number">2.4e3</span>;<br>var_dump(<span class="hljs-variable">$x</span>);<br><br><span class="hljs-variable">$x</span> = <span class="hljs-literal">true</span>;    <span class="hljs-comment">// 布尔型</span><br>var_dump(<span class="hljs-variable">$x</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-literal">true</span>);   <span class="hljs-comment">// 数组</span><br>var_dump(<span class="hljs-variable">$arr</span>);<br>var_dump(<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>]);<br><br><span class="hljs-comment">// 类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span></span><br><span class="hljs-class"></span>&#123;<br>  <span class="hljs-keyword">var</span> <span class="hljs-variable">$color</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$color</span>=<span class="hljs-string">&quot;green&quot;</span></span>) </span>&#123;  <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-keyword">$this</span>-&gt;color = <span class="hljs-variable">$color</span>;<span class="hljs-comment">// $this指向对象, 所以可以通过$this-&gt;color = $color设置颜色值</span><br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">what_color</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;color;<br>  &#125;<br>&#125;<br><br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&quot;white&quot;</span>);<br>var_dump(<span class="hljs-variable">$c</span>);<br><br><span class="hljs-variable">$d</span> = <span class="hljs-literal">null</span>;<br>var_dump(<span class="hljs-variable">$d</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-类型比较"><a href="#5-类型比较" class="headerlink" title="5. 类型比较"></a>5. 类型比较</h2><p>和 JavaScript 一样，有松散比较和严格比较两种形式</p><ul><li>松散比较(等于)：”==”, 只比较值，不比较类型</li><li>严格比较(绝对等于)：”===”, 既比较值，也比较类型</li></ul><h2 id="6-常量"><a href="#6-常量" class="headerlink" title="6. 常量"></a>6. 常量</h2><p>设置常量需要使用 define()函数</p><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">bool</span> define ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span> , <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$value</span> [, <span class="hljs-keyword">bool</span> <span class="hljs-variable">$case_insensitive</span> = <span class="hljs-literal">false</span> ] )<br></code></pre></td></tr></table></figure></blockquote><ul><li>name: 必选参数，常量名称</li><li>value: 必选参数，常量的值</li><li>case_insensitive: 可选参数，如果是 true，则常量对大小写不敏感。默认是大小写敏感。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  define(<span class="hljs-string">&quot;HW&quot;</span>, <span class="hljs-string">&quot;Hello World!&quot;</span>);<br>  <span class="hljs-keyword">echo</span> HW;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">echo</span> HW;  <span class="hljs-comment">// 常量默认是全局变量</span><br>  &#125;<br><br>  test();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7-字符串"><a href="#7-字符串" class="headerlink" title="7. 字符串"></a>7. 字符串</h2><h3 id="7-1-并置运算符"><a href="#7-1-并置运算符" class="headerlink" title="7.1 并置运算符(.)"></a>7.1 并置运算符(.)</h3><p>用于把两个字符串连接起来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$h</span> = <span class="hljs-string">&quot;Hello &quot;</span>;<br>  <span class="hljs-variable">$w</span> = <span class="hljs-string">&quot;World&quot;</span>;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$h</span> . <span class="hljs-variable">$w</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-2-strlen-函数"><a href="#7-2-strlen-函数" class="headerlink" title="7.2 strlen()函数"></a>7.2 strlen()函数</h3><p>strlen()函数返回字符串的长度(字节数), <code>echo strlen(&quot;中文&quot;);</code>会输出 6，因为一个中文占 3 个字节</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$h</span> = <span class="hljs-string">&quot;Hello &quot;</span>;<br>  <span class="hljs-variable">$w</span> = <span class="hljs-string">&quot;World&quot;</span>;<br>  <span class="hljs-keyword">echo</span> strlen(<span class="hljs-variable">$h</span> . <span class="hljs-variable">$w</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-3-strpos-函数"><a href="#7-3-strpos-函数" class="headerlink" title="7.3 strpos()函数"></a>7.3 strpos()函数</h3><p>strpos()函数用于在字符串中查找字符串，如果找到匹配，则返回第一个匹配的字符位置，如果找不到，则返回 false</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">echo</span> strpos(<span class="hljs-string">&quot;Hello World!&quot;</span>, <span class="hljs-string">&quot;!&quot;</span>);<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>  <span class="hljs-keyword">echo</span> strpos(<span class="hljs-string">&quot;Hello World!&quot;</span>, <span class="hljs-string">&quot;World&quot;</span>);<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>  var_dump(strpos(<span class="hljs-string">&quot;Hello World!&quot;</span>, <span class="hljs-string">&quot;Worll&quot;</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-关联数组"><a href="#8-关联数组" class="headerlink" title="8. 关联数组"></a>8. 关联数组</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$age</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;A&quot;</span> =&gt; <span class="hljs-number">17</span>, <span class="hljs-string">&quot;B&quot;</span> =&gt; <span class="hljs-number">33</span>, <span class="hljs-string">&quot;C&quot;</span> =&gt; <span class="hljs-number">21</span>);<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * 创建关联数组的另一种方法:</span><br><span class="hljs-comment">   * $age[&quot;A&quot;] = 17;</span><br><span class="hljs-comment">   * $age[&quot;B&quot;] = 33;</span><br><span class="hljs-comment">   * $age[&quot;C&quot;] = 21;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;A is &quot;</span> . <span class="hljs-variable">$age</span>[<span class="hljs-string">&#x27;A&#x27;</span>] . <span class="hljs-string">&quot; years old.&quot;</span>;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>  <span class="hljs-comment">// 遍历关联数组</span><br>  <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$age</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>)<br>  &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Key = &quot;</span> . <span class="hljs-variable">$k</span> . <span class="hljs-string">&quot;, Value = &quot;</span> .<span class="hljs-variable">$v</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>  &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="9-支持可变参数的函数"><a href="#9-支持可变参数的函数" class="headerlink" title="9. 支持可变参数的函数"></a>9. 支持可变参数的函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">...<span class="hljs-variable">$args</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>      <span class="hljs-variable">$num</span> = count(<span class="hljs-variable">$args</span>);<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;函数调用参数个数: &quot;</span> . <span class="hljs-variable">$num</span> . PHP_EOL;<br>      <span class="hljs-comment">/* PHP_EOL是文本换行，直接使用的话，可能会是空格，需要在前面加echo &quot;&lt;pre&gt;&quot;;，</span><br><span class="hljs-comment">       * 做文本格式化处理，才能当成换行使用</span><br><span class="hljs-comment">       */</span><br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;函数参数详情: &quot;</span>;<br><br>      <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$args</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$args</span>)<br>      &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$args</span> . <span class="hljs-string">&quot; &quot;</span>;<br>      &#125;<br>      <span class="hljs-keyword">echo</span> PHP_EOL;<br><br>    &#125;<br>    test(<span class="hljs-string">&quot;a&quot;</span>);<br>    test(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br>    test(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>);<br>  <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="10-数据库"><a href="#10-数据库" class="headerlink" title="10. 数据库"></a>10. 数据库</h2><h3 id="10-1-连接数据库"><a href="#10-1-连接数据库" class="headerlink" title="10.1 连接数据库"></a>10.1 连接数据库</h3><ul><li>MySQLi 面向对象</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;密码&quot;</span>;<br><br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;connect_error);<span class="hljs-comment">// die() 函数输出一条消息，并退出当前脚本。</span><br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;连接成功&quot;</span>;<br><br><span class="hljs-variable">$conn</span>-&gt;close();  <span class="hljs-comment">// 关闭连接</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>MySQLi 面向过程</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;root1234&quot;</span>;<br><br><span class="hljs-variable">$conn</span> = mysqli_connect(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$conn</span>) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败: &quot;</span> . mysqli_connect_error());<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;连接成功&quot;</span>;<br><br>mysqli_close(<span class="hljs-variable">$conn</span>);<span class="hljs-comment">// 关闭连接</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>PDO</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;root1234&quot;</span>;<br><br><span class="hljs-keyword">try</span><br>&#123;<br>  <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> PDO(<span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$servername</span>;&quot;</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;连接成功&quot;</span>;<br>&#125;<br><span class="hljs-keyword">catch</span>(PDOException <span class="hljs-variable">$e</span>)<br>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$e</span>-&gt;getMessage();<br>&#125;<br><br><span class="hljs-variable">$conn</span> = <span class="hljs-literal">null</span>;  <span class="hljs-comment">// 关闭连接</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="10-2-创建数据库"><a href="#10-2-创建数据库" class="headerlink" title="10.2 创建数据库"></a>10.2 创建数据库</h3><ul><li>MySQLi 面向对象</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br>  <span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;root&quot;</span>;<br>  <span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;root1234&quot;</span>;<br><br>  <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;connect_error);<br>  &#125;<br><br>  <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;create database php_db&quot;</span>;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$conn</span>-&gt;query(<span class="hljs-variable">$sql</span>) === <span class="hljs-literal">true</span>) &#123;   <span class="hljs-comment">// 通过mysqli对象的query方法实现使用mysql语句，成功则返回true</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;数据库创建成功&quot;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;数据库创建失败: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;error;<br>  &#125;<br><br>  <span class="hljs-variable">$conn</span>-&gt;close();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6197c29c2ab3f51d910fcd75.jpg"></p><ul><li>MySQLi 面向过程</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br>  <span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;root&quot;</span>;<br>  <span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;root1234&quot;</span>;<br><br>  <span class="hljs-variable">$conn</span> = mysqli_connect(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br>  <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$conn</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败: &quot;</span> . mysqli_connect_error());<br>  &#125;<br><br>  <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;create database php_db_1&quot;</span>;<br>  <span class="hljs-keyword">if</span>(mysqli_query(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;数据库创建成功&quot;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;数据库创建失败: &quot;</span> . mysqli_error(<span class="hljs-variable">$conn</span>);<br>  &#125;<br><br>  mysqli_close(<span class="hljs-variable">$conn</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>PDO</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br>  <span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;root&quot;</span>;<br>  <span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;root1234&quot;</span>;<br><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> PDO(<span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$servername</span>&quot;</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br><br>     <span class="hljs-comment">// 设置 PDO 错误模式为异常</span><br>     <span class="hljs-variable">$conn</span>-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);<br>     <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;create database php_db_2&quot;</span>;<br><br>     <span class="hljs-variable">$conn</span>-&gt;exec(<span class="hljs-variable">$sql</span>);<br>     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;数据库创建成功&quot;</span>;<br>  &#125;<br>  <span class="hljs-keyword">catch</span>(PDOException <span class="hljs-variable">$e</span>)<br>  &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span> . <span class="hljs-string">&quot; &quot;</span> . <span class="hljs-variable">$e</span>-&gt;getMessage();<br>  &#125;<br><br>  <span class="hljs-variable">$conn</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="10-3-创建表"><a href="#10-3-创建表" class="headerlink" title="10.3 创建表"></a>10.3 创建表</h3><p>MySQLi 面向对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br>  <span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;root&quot;</span>;<br>  <span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;root1234&quot;</span>;<br>  <span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;php_db&quot;</span>;<br><br>  <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;connect_error);<br>  &#125;<br><br>  <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;create table guests_1(</span><br><span class="hljs-string">    id int(6) unsigned auto_increment primary key,</span><br><span class="hljs-string">    firname varchar(30) not null,</span><br><span class="hljs-string">    lastname varchar(30) not null,</span><br><span class="hljs-string">    email varchar(50),</span><br><span class="hljs-string">    reg_date timestamp</span><br><span class="hljs-string">  )&quot;</span>;<br><br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$conn</span>-&gt;query(<span class="hljs-variable">$sql</span>) === <span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;创建表成功&quot;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;创建表失败: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;error;<br>  &#125;<br><br>  <span class="hljs-variable">$conn</span>-&gt;close();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>其他操作，基本类似，具体实现可查<a href="https://www.runoob.com/php/php-tutorial.html">PHP 教程 | 菜鸟教程 (runoob.com)</a></p><p>参考：<a href="https://www.runoob.com/php/php-tutorial.html">PHP 教程 | 菜鸟教程 (runoob.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/2021/11/20/git-order/"/>
      <url>/2021/11/20/git-order/</url>
      
        <content type="html"><![CDATA[<h1 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h1><ol><li>git clone 远程仓库链接</li></ol><p>如下图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git clone git@gitee.com:czh0318/git_test.git<br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6198d73f2ab3f51d9187f67d.jpg"></p><p><img src="https://pic.imgdb.cn/item/6198d8482ab3f51d91885ccf.jpg"></p><ol start="2"><li>进入项目文件夹，进行操作，比如增加一个文件 test.html</li></ol><p><img src="https://pic.imgdb.cn/item/6198d8e82ab3f51d91889bf7.jpg"></p><ol start="3"><li><p>git add .(把修改放到暂存区)</p></li><li><p>git commit -m “提示信息”(提交到本地仓库)</p></li></ol><p><img src="https://pic.imgdb.cn/item/6198d9b82ab3f51d9188f150.jpg"></p><ol start="5"><li>git remote 查看远程仓库的别名(如果克隆仓库的话，会有一个 origin)</li></ol><p><img src="https://pic.imgdb.cn/item/6198da942ab3f51d91894614.jpg"></p><ol start="6"><li>git remote add 添加新的远程仓库</li></ol><p><img src="https://pic.imgdb.cn/item/6198db3b2ab3f51d9189849c.jpg"></p><ol start="7"><li>git push 提交到远程仓库</li></ol><p>语法：git push 远程仓库名 分支(gitee 默认 master, github 默认 main)</p><p><img src="https://pic.imgdb.cn/item/6198dbb72ab3f51d9189b274.jpg"></p><p><img src="https://pic.imgdb.cn/item/6198dca32ab3f51d918a2660.jpg"></p><ol start="8"><li>git pull 拉取代码</li></ol><p>语法：git pull 远程仓库名 分支名</p><p><img src="https://pic.imgdb.cn/item/6198dd442ab3f51d918a71e9.jpg"></p><p>团队协作部分：请移至<a href="https://13535944743.github.io/2021/10/20/git-skills/">远程仓库小技能</a></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js笔记</title>
      <link href="/2021/11/18/nodejs/"/>
      <url>/2021/11/18/nodejs/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js-笔记"><a href="#Node-js-笔记" class="headerlink" title="Node.js 笔记"></a>Node.js 笔记</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>Node.js 是一个开源和跨平台的 JavaScript 运行时环境。Node.js 在浏览器之外运行 V8 JavaScript 引擎（Google Chrome 的内核）</p><p><strong>特点</strong></p><ul><li>事件驱动：当事件被触发时，执行传递的回调函数</li><li>非阻塞 I/O 模型：当执行 I/O 操作时，不会阻塞线程</li><li>单线程</li><li>拥有世界最大的开源库生态系统 ——<strong>npm</strong></li></ul><p><a href="http://nodejs.cn/">Node.js 中文网 (nodejs.cn)</a></p><p>学习 Node.js 可以深入理解<strong>服务器开发</strong>、<strong>Web 请求和响应过程</strong>、<strong>了解服务器端如何与客户端配合</strong></p><h2 id="2-REPL-介绍"><a href="#2-REPL-介绍" class="headerlink" title="2. REPL 介绍"></a>2. REPL 介绍</h2><p>REPL 全称：Read-Eval-Print-Loop(交互式解释器)</p><p>R：读取， E：执行， P：打印，L：循环</p><p>控制台输入 node 命令进入 REPL 环境，两次 Ctrl + C 退出 REPL 环境</p><p><img src="https://pic.imgdb.cn/item/618395282ab3f51d91be5086.jpg"></p><p>执行 js 文件</p><p><img src="https://pic.imgdb.cn/item/618395c02ab3f51d91bef89b.jpg"></p><h2 id="3-文件读写"><a href="#3-文件读写" class="headerlink" title="3. 文件读写"></a>3. 文件读写</h2><p><strong>文件读写</strong>：需要用到 fs 模块, 加载 fs 模块,：<code> const fs = require(&#39;fs&#39;);</code></p><p><strong>写文件</strong>：</p><p><code> fs.writeFile(file, data[, options], callback)</code></p><ul><li>file: 文件路径</li><li>data: 写入的数据</li><li>options: 设置文件对应属性，如编码方式等, 选填</li><li>callback:文件写入完毕后的回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br>fs.writeFile(<span class="hljs-string">&quot;./file.txt&quot;</span>, <span class="hljs-string">&quot;Hello World!&quot;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;写文件出错，具体错误：&quot;</span>, err);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;ok&quot;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>读文件:</strong></p><p><code> fs.readFile(path[, options], callback)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br>fs.readFile(<span class="hljs-string">&quot;./file.txt&quot;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;读文件错误&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>__dirname</strong>: 当前模块的目录名</p><p><strong>__filename</strong>: 当前模块的文件名</p><p><img src="https://pic.imgdb.cn/item/618399f92ab3f51d91c3bba9.jpg"></p><p><strong>path 模块</strong>：用于文件路径的拼接</p><p><img src="https://pic.imgdb.cn/item/61839b132ab3f51d91c4f4d7.jpg"></p><h2 id="4-编写-http-服务程序"><a href="#4-编写-http-服务程序" class="headerlink" title="4. 编写 http 服务程序"></a>4. 编写 http 服务程序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 加载http模块</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><br><span class="hljs-comment">// 2. 创建http服务</span><br><span class="hljs-keyword">const</span> server = http.createServer();<br><br><span class="hljs-comment">// 3. 为http服务对象添加request事件</span><br>server.on(<span class="hljs-string">&quot;request&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>); <span class="hljs-comment">// 通过setHeader()来设置内容类型，让浏览器可以识别不同类型的文件</span><br>  res.write(<span class="hljs-string">&quot;Hello World! &lt;h1&gt;你好&lt;/h1&gt;&quot;</span>); <span class="hljs-comment">// 向请求的客户端发送响应内容</span><br>  res.end(); <span class="hljs-comment">// 结束响应</span><br>&#125;);<br><br><span class="hljs-comment">// 开启http服务监听</span><br>server.listen(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请访问：http://localhost:8080&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="5-根据不同请求做出不同响应"><a href="#5-根据不同请求做出不同响应" class="headerlink" title="5. 根据不同请求做出不同响应"></a>5. 根据不同请求做出不同响应</h2><p>实现进入首页出来首页的结构，进入其他页面出来 404 页面。<b style="color: red">现在不支持加载 html 文件中的其他文件，如 css 文件、图片等</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-keyword">const</span> server = http<br>  .createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (req.url === <span class="hljs-string">&quot;/&quot;</span> || req.url === <span class="hljs-string">&quot;/index&quot;</span>) &#123;<br>      fs.readFile(path.join(__dirname, <span class="hljs-string">&quot;htmls&quot;</span>, <span class="hljs-string">&quot;index.html&quot;</span>), <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>          <span class="hljs-keyword">throw</span> err;<br>        &#125;<br>        res.end(data);<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      fs.readFile(path.join(__dirname, <span class="hljs-string">&quot;htmls&quot;</span>, <span class="hljs-string">&quot;404.html&quot;</span>), <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>          <span class="hljs-keyword">throw</span> err;<br>        &#125;<br>        res.end(data);<br>      &#125;);<br>    &#125;<br>  &#125;)<br>  .listen(<span class="hljs-string">&quot;8080&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-built_in">console</span>.log(err);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;ok&quot;</span>);<br>    &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure><p>实现加载 css 文件等，就是在判断条件中增加判断 css 的条件，并且设置响应头中的 Content-Type 为 text/css 即可，图片等文件同理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-keyword">const</span> server = http<br>  .createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (req.url === <span class="hljs-string">&quot;/register&quot;</span>) &#123;<br>      fs.readFile(<br>        path.join(__dirname, <span class="hljs-string">&quot;htmls&quot;</span>, <span class="hljs-string">&quot;register.html&quot;</span>),<br>        <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-keyword">throw</span> err;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            res.end(data);<br>          &#125;<br>        &#125;<br>      );<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req.url === <span class="hljs-string">&quot;/css/register.css&quot;</span>) &#123;<br>      fs.readFile(<br>        path.join(__dirname, <span class="hljs-string">&quot;htmls&quot;</span>, <span class="hljs-string">&quot;css&quot;</span>, <span class="hljs-string">&quot;register.css&quot;</span>),<br>        <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-keyword">throw</span> err;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            res.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/css&quot;</span>);<br>            res.end(data);<br>          &#125;<br>        &#125;<br>      );<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      fs.readFile(path.join(__dirname, <span class="hljs-string">&quot;htmls&quot;</span>, <span class="hljs-string">&quot;404.html&quot;</span>), <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>          <span class="hljs-keyword">throw</span> err;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          res.end(data);<br>        &#125;<br>      &#125;);<br>    &#125;<br>  &#125;)<br>  .listen(<span class="hljs-number">8080</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">throw</span> err;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;ok&quot;</span>);<br>    &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure><p>通过<code>npm install mime</code>,然后使用 mime 模块优化上面的代码(上面的代码很多可复用的部分没有分离出来)</p><p>通过<a href="https://www.npmjs.com/">npm 官网</a>可以查看 mime 的用法</p><p>下面用到的用法：mime.getType(filePath)根据文件路径可以得到 Content-Type。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> mime = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mime&quot;</span>);<br><br><span class="hljs-keyword">const</span> server = http<br>  .createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> filePath = path.join(__dirname, <span class="hljs-string">&quot;public&quot;</span>, req.url);<br>    fs.readFile(filePath, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err) &#123;<br>        res.end(<span class="hljs-string">&quot;文件不存在 404&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.setHeader(<br>          <span class="hljs-string">&quot;Content-Type&quot;</span>,<br>          mime.getType(filePath) + <span class="hljs-string">&quot;;charset=utf-8;&quot;</span><br>        );<br>        res.end(data);<br>      &#125;<br>    &#125;);<br>  &#125;)<br>  .listen(<span class="hljs-number">8080</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">throw</span> err;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;ok&quot;</span>);<br>    &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure><h2 id="6-url-模块"><a href="#6-url-模块" class="headerlink" title="6. url 模块"></a>6. url 模块</h2><p>第一个参数是 url，第二个参数为 true 时，可以把查询字符串的参数部分变为对象形式，如下图所示</p><p><img src="https://pic.imgdb.cn/item/61a6150d2ab3f51d91068482.jpg"></p><p><img src="https://pic.imgdb.cn/item/618dd7932ab3f51d91bf836c.jpg"></p><p>第二个参数不是 true(默认为 false)时</p><p><img src="https://pic.imgdb.cn/item/618dd7a62ab3f51d91bf8b05.jpg"></p><h2 id="7-underscore-模块"><a href="#7-underscore-模块" class="headerlink" title="7. underscore 模块"></a>7. underscore 模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> _ = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;underscore&quot;</span>);<br><br><span class="hljs-keyword">const</span> html = <span class="hljs-string">&quot;&lt;h2&gt;&lt;%= name %&gt;&lt;/h2&gt;&quot;</span>; <span class="hljs-comment">// 类似vue的插值表达式&#123;&#123;&#125;&#125;</span><br><br><span class="hljs-keyword">const</span> f = _.template(html);<br><br><span class="hljs-built_in">console</span>.log(<br>  f(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>  &#125;)<br>);<br></code></pre></td></tr></table></figure><h2 id="8-events-模块"><a href="#8-events-模块" class="headerlink" title="8. events 模块"></a>8. events 模块</h2><p><strong>事件驱动程序</strong>：</p><p>Node.js 使用事件驱动模型，当 web server 接收到请求，就会把请求关闭，进行处理，然后去服务下一个 web 请求。当请求完成，它会被放回处理队列，当到达队列开头，结果会被返回给用户。</p><p>在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时会触发回调函数。</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/09/event_loop.jpg"></p><p>图片来源：菜鸟教程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> events = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;events&quot;</span>);<br><br><span class="hljs-keyword">const</span> eventEmitter = <span class="hljs-keyword">new</span> events.EventEmitter(); <span class="hljs-comment">// 创建eventEmitter对象</span><br><br><span class="hljs-keyword">const</span> connectHandler = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connected</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;连接成功&quot;</span>);<br>  eventEmitter.emit(<span class="hljs-string">&quot;data_received&quot;</span>);<br>&#125;;<br><br>eventEmitter.on(<span class="hljs-string">&quot;connection&quot;</span>, connectHandler); <span class="hljs-comment">// 绑定事件connection事件处理程序</span><br><br>eventEmitter.on(<span class="hljs-string">&quot;data_received&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;数据接收成功&quot;</span>);<br>&#125;);<br><br>eventEmitter.emit(<span class="hljs-string">&quot;connection&quot;</span>); <span class="hljs-comment">// 触发connection事件</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;程序执行完毕&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="9-模块系统"><a href="#9-模块系统" class="headerlink" title="9. 模块系统"></a>9. 模块系统</h2><p><img src="https://s2.loli.net/2022/02/22/8tSHeDKiyTOqIlE.png" alt="image-20220222135245211"></p><p>图片来自菜鸟教程</p><p>在路径 Y 下执行 require(X)语句执行顺序：</p><ol><li><p>如果 X 是内置模块，直接加载内置模块</p></li><li><p>如果 X 以’/‘开头，设置 Y 为文件根路径</p></li><li><p>如果 X 以’./‘或’/‘或’../‘开头</p><p>a. load_as_file(Y + X)</p><p>b. load_as_directory(Y + X)</p></li><li><p>寻找当前路径下有没有 node_modules 文件夹</p><p>a. 有，查看 node_modules 文件夹中有无要加载的模块</p><p>b. 没有，回到上一级查看有没有 node_modules 文件夹，直到回到项目根目录为止</p></li><li><p>抛出异常”not found”</p></li></ol><p><strong>load_as_file(X):</strong></p><ol><li>如果 X 是一个文件，将 X 作为 JavaScript 文本加载</li><li>如果 X.js 是一个文件，将 X.js 作为 JavaScript 文本加载</li><li>如果 X.json 是一个文件，解析 X.json 为 JavaScript 对象并加载</li><li>如果 X.node 是一个文件，将 X.node 作为二进制插件加载</li></ol><p><strong>load_as_directory(Y + X)：</strong></p><ol><li><p>如果 X/package.json 是一个文件</p><p>a. 解析 X/package.json，并查找”main”字段</p><p>b. let M = X + (json main 字段)</p><p>c. load_as _file(M)</p><p>d. load_index(M)</p></li><li><p>load_index(X)</p></li></ol><p><strong>load_index(X)：</strong></p><ol><li>如果 X/index.js 是一个文件，将 X/index.js 作为 JavaScript 文本加载</li><li>如果 X/index.json 是一个文件，解析 X/index.json 为 JavaScript 对象并加载</li><li>如果 X/index.node 是一个文件，将 X/index.node 作为二进制插件加载</li></ol><h2 id="10-web-模块"><a href="#10-web-模块" class="headerlink" title="10. web 模块"></a>10. web 模块</h2><ul><li><p>使用 Node 创建 web 服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br>http<br>  .createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    fs.readFile(__dirname + <span class="hljs-string">&quot;/index.html&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">throw</span> err;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.writeHead(<span class="hljs-number">200</span>, &#123;<br>          <span class="hljs-string">&quot;Contnet-Type&quot;</span>: <span class="hljs-string">&quot;text/html&quot;</span>,<br>        &#125;);<br>        res.write(data.toString());<br>      &#125;<br>      res.end();<br>    &#125;);<br>  &#125;)<br>  .listen(<span class="hljs-number">9090</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">throw</span> err;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:9090&quot;</span>);<br>    &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure></li><li><p>在该目录下创建一个 index.html 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Server<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>CLZ<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CZH<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>执行 server.js 文件</p></li><li><p>使用 Node 创建 web 客户端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><br><span class="hljs-keyword">const</span> options = &#123;<br>  <span class="hljs-comment">// 用于请求的选项</span><br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;localhost&quot;</span>,<br>  <span class="hljs-attr">port</span>: <span class="hljs-string">&quot;9090&quot;</span>,<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/index.html&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> callback = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>  <span class="hljs-comment">// 处理响应的回调函数</span><br>  <span class="hljs-keyword">let</span> body = <span class="hljs-string">&quot;&quot;</span>;<br>  res.on(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>    body += data;<br>  &#125;);<br><br>  res.on(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(body);<br>  &#125;);<br>&#125;;<br><br><span class="hljs-keyword">const</span> req = http.request(options, callback);<br>req.end();<br></code></pre></td></tr></table></figure></li><li><p><strong>新开一个终端</strong>, 执行 client.js 文件</p><p><img src="https://pic.imgdb.cn/item/6195aa5e2ab3f51d91e12648.jpg"></p></li></ul><h2 id="11-Express-框架"><a href="#11-Express-框架" class="headerlink" title="11. Express 框架"></a>11. Express 框架</h2><p>Express 框架的核心特性：</p><ul><li>可以设置中间件来响应 HTTP 请求</li><li>定义了路由表用于执行不同的 HTTP 请求</li><li>可以通过模板传递参数来动态渲染 HTML 页面</li></ul><h3 id="11-1-安装"><a href="#11-1-安装" class="headerlink" title="11.1 安装"></a>11.1 安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install express -S<br></code></pre></td></tr></table></figure><p>几个重要的模块</p><ul><li><strong>body-parser</strong>: node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据</li><li><strong>cookie-parser</strong>: 解析 Cookie 的工具，通过 req.cookies 可以取到传过来的 cookie，并将它们转化为对象</li><li><strong>multer</strong>: node.js 中间件，用于处理 enctype=”multipart/form-data”(设置表单的 MIME 编码)的表单数据</li></ul><h3 id="11-2-Express-框架实例"><a href="#11-2-Express-框架实例" class="headerlink" title="11.2 Express 框架实例"></a>11.2 Express 框架实例</h3><p>实例 1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> app = express();<br><br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>&#125;);<br><br><span class="hljs-keyword">const</span> server = app.listen(<span class="hljs-number">9090</span>, <span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> host = server.address().address;<br>  <span class="hljs-keyword">let</span> port = server.address().port;<br>  <span class="hljs-built_in">console</span>.log(server.address());<br><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://%s:%s&quot;</span>, host, port);<br>&#125;);<br></code></pre></td></tr></table></figure><p>执行以上代码后，在浏览器中访问 <a href="http://localhost:9090/">http://localhost:9090/</a></p><p>实例 2(路由)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> app = express();<br><br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&quot;Hello&quot;</span>);<br>&#125;);<br><br>app.get(<span class="hljs-string">&quot;/list_user&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&quot;用户列表页面&quot;</span>);<br>&#125;);<br><br>app.get(<span class="hljs-string">&quot;/ab*cd&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&quot;正则匹配&quot;</span>);<br>&#125;);<br><br><span class="hljs-keyword">const</span> server = app.listen(<span class="hljs-number">9090</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:9090&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>实例 3(静态资源)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> app = express();<br><br>app.use(express.static(<span class="hljs-string">&quot;public&quot;</span>)); <span class="hljs-comment">// 实现可以加载public目录下的静态资源文件</span><br><br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&quot;Hello&quot;</span>);<br>&#125;);<br><br><span class="hljs-keyword">const</span> server = app.listen(<span class="hljs-number">9090</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:9090&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6195b4f82ab3f51d91e727e1.jpg"></p><h2 id="12-MySQL"><a href="#12-MySQL" class="headerlink" title="12. MySQL"></a>12. MySQL</h2><h3 id="12-1-安装驱动"><a href="#12-1-安装驱动" class="headerlink" title="12.1 安装驱动"></a>12.1 安装驱动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install mysql<br></code></pre></td></tr></table></figure><h3 id="12-2-简单连接使用数据库"><a href="#12-2-简单连接使用数据库" class="headerlink" title="12.2 简单连接使用数据库"></a>12.2 简单连接使用数据库</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mysql&quot;</span>);<br><span class="hljs-keyword">const</span> connection = mysql.createConnection(&#123;<br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;localhost&quot;</span>,<br>  <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;root&quot;</span>,<br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;******&quot;</span>, <span class="hljs-comment">// 自己的密码</span><br>  <span class="hljs-attr">database</span>: <span class="hljs-string">&quot;node_mysql&quot;</span>,<br>&#125;);<br><br>connection.connect();<br><br>connection.query(<span class="hljs-string">&quot;select 1 + 1 as solution&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, results, fields</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-keyword">throw</span> err;<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;The solution is: &quot;</span> + results[<span class="hljs-number">0</span>].solution);<br>&#125;);<br></code></pre></td></tr></table></figure><p>参考：<a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">Node.js 教程 | 菜鸟教程 (runoob.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数组常用的方法</title>
      <link href="/2021/11/14/js-array-methods/"/>
      <url>/2021/11/14/js-array-methods/</url>
      
        <content type="html"><![CDATA[<h1 id="JS-数组常用的方法-个人感觉"><a href="#JS-数组常用的方法-个人感觉" class="headerlink" title="JS 数组常用的方法(个人感觉)"></a>JS 数组常用的方法(个人感觉)</h1><h2 id="1-forEach"><a href="#1-forEach" class="headerlink" title="1. forEach()"></a>1. forEach()</h2><p>循环，无法在中间停止</p><p><img src="https://pic.imgdb.cn/item/61500fc62ab3f51d91ee7252.jpg"></p><h2 id="2-some"><a href="#2-some" class="headerlink" title="2. some()"></a>2. some()</h2><p>循环，找到符合条件的之后，可以通过 return true 退出循环</p><p><img src="https://pic.imgdb.cn/item/6150106d2ab3f51d91ef3344.jpg"></p><h2 id="3-every"><a href="#3-every" class="headerlink" title="3. every()"></a>3. every()</h2><p>测试数组中的所有元素是否都能通过某个指定函数的测试。返回一个布尔值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><br><span class="hljs-keyword">let</span> result = arr.every(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> value &gt; <span class="hljs-number">0</span>); <span class="hljs-comment">//-1不满足条件，所以返回false</span><br><span class="hljs-built_in">console</span>.log(result);<br><br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>result = arr.every(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> value &gt; <span class="hljs-number">0</span>); <span class="hljs-comment">//全部满足条件，所以返回true</span><br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></td></tr></table></figure><h2 id="4-filter"><a href="#4-filter" class="headerlink" title="4. filter()"></a>4. filter()</h2><p>创建一个新数组，它包含符合某个指定函数的测试的所有元素</p><p><img src="https://pic.imgdb.cn/item/615013102ab3f51d91f258ee.jpg"></p><h2 id="5-reduce"><a href="#5-reduce" class="headerlink" title="5. reduce()"></a>5. reduce()</h2><p>实现累加</p><p><code> arr.reduce((累加的结果, 当前循环项) =&gt; &#123;&#125;, 初始值)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>];<br><br><span class="hljs-keyword">let</span> result = arr.reduce(<span class="hljs-function">(<span class="hljs-params">sum, value</span>) =&gt;</span> (sum += value), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">//输出11</span><br></code></pre></td></tr></table></figure><p>搭配 filter()实现，累加选中状态的总价格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;西瓜&quot;</span>,<br>    <span class="hljs-attr">state</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;榴莲&quot;</span>,<br>    <span class="hljs-attr">state</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">80</span>,<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">2</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;草莓&quot;</span>,<br>    <span class="hljs-attr">state</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">3</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> amount = arr<br>  .filter(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.state)<br>  .reduce(<span class="hljs-function">(<span class="hljs-params">amount, item</span>) =&gt;</span> (amount += item.price * item.count), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">console</span>.log(amount); <span class="hljs-comment">//返回70</span><br></code></pre></td></tr></table></figure><h2 id="6-map"><a href="#6-map" class="headerlink" title="6. map()"></a>6. map()</h2><p>map()方法把调用它的数组的每一个元素分别传给指定的函数，返回这个函数的返回值构成的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> newA = a.map(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> v * v);<br><span class="hljs-built_in">console</span>.log(newA);<br><br><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, , <span class="hljs-number">2</span>, , <span class="hljs-number">3</span>]; <span class="hljs-comment">// 如果数组是稀疏的，缺失元素不会调用函数，但是返回的数组也会和原始数组一样稀疏</span><br><span class="hljs-keyword">let</span> newA = a.map(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> v * v);<br><span class="hljs-built_in">console</span>.log(newA);<br></code></pre></td></tr></table></figure><h2 id="7-find"><a href="#7-find" class="headerlink" title="7. find()"></a>7. find()</h2><p>遍历数组，寻找第一个符合条件的元素，找到就停止迭代</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = (a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);<br><span class="hljs-built_in">console</span>.log(a.find(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> v &gt;= <span class="hljs-number">2</span>));<br><span class="hljs-built_in">console</span>.log(a.find(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> v &lt; <span class="hljs-number">0</span>)); <span class="hljs-comment">// 找不到符合条件的，返回undefined</span><br></code></pre></td></tr></table></figure><h2 id="8-flat"><a href="#8-flat" class="headerlink" title="8. flat()"></a>8. flat()</h2><p>用于打平数组(把嵌套数组变为普通的数组元素)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]];<br><span class="hljs-built_in">console</span>.log(a.flat());<br><br>a = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>]]];<br><span class="hljs-built_in">console</span>.log(a.flat()); <span class="hljs-comment">// 不带参，只会打平一级嵌套</span><br><br>a = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, [<span class="hljs-number">4</span>]]]];<br><span class="hljs-built_in">console</span>.log(a.flat(<span class="hljs-number">1</span>));<br><span class="hljs-built_in">console</span>.log(a.flat(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 带参，可以打平多级嵌套</span><br><span class="hljs-built_in">console</span>.log(a.flat(<span class="hljs-number">3</span>));<br><span class="hljs-built_in">console</span>.log(a.flat(<span class="hljs-number">4</span>)); <span class="hljs-comment">// 打平后的数组如果没有嵌套数组，则不会再被打平</span><br><br>a = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, [<span class="hljs-number">11</span>, <span class="hljs-number">12</span>]]]]]];<br><span class="hljs-built_in">console</span>.log(a.flat(<span class="hljs-literal">Infinity</span>)); <span class="hljs-comment">// 通过Infinity实现把任意嵌套数组打平为不嵌套的数组</span><br></code></pre></td></tr></table></figure><h2 id="9-concat"><a href="#9-concat" class="headerlink" title="9. concat()"></a>9. concat()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> b = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-built_in">console</span>.log(b.concat(a)); <span class="hljs-comment">// 拼接两个数组</span><br><span class="hljs-built_in">console</span>.log(b.concat(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">// 也可以添加元素。不会改变原数组，而是创建新数组</span><br></code></pre></td></tr></table></figure><h2 id="10-push-、pop-、shift-、unshift"><a href="#10-push-、pop-、shift-、unshift" class="headerlink" title="10. push()、pop()、shift()、unshift()"></a>10. push()、pop()、shift()、unshift()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = [];<br>a.push(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(a.push(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// push()在数组末尾添加元素，并返回数组的新长度</span><br><span class="hljs-built_in">console</span>.log(a);<br><br><span class="hljs-built_in">console</span>.log(a.pop()); <span class="hljs-comment">// pop()删除数组末尾的元素，并返回删除的元素</span><br><span class="hljs-built_in">console</span>.log(a);<br><br><span class="hljs-built_in">console</span>.log(a.unshift(<span class="hljs-number">11</span>, <span class="hljs-number">22</span>)); <span class="hljs-comment">// unshift()在数组的开头添加元素，并返回数组的新长度</span><br><span class="hljs-built_in">console</span>.log(a);<br><br><span class="hljs-built_in">console</span>.log(a.shift()); <span class="hljs-comment">// shift()删除数组开头的元素，并返回删除的元素</span><br><span class="hljs-built_in">console</span>.log(a);<br></code></pre></td></tr></table></figure><h2 id="11-slice-、splice"><a href="#11-slice-、splice" class="headerlink" title="11. slice()、splice()"></a>11. slice()、splice()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>];<br><span class="hljs-built_in">console</span>.log(a.slice(<span class="hljs-number">3</span>, <span class="hljs-number">6</span>)); <span class="hljs-comment">// 截取数组的一部分，返回一个新数组，第一个参数是起点，第二个是终点(但不包含终点)</span><br><span class="hljs-built_in">console</span>.log(a);<br><br><span class="hljs-built_in">console</span>.log(a.slice(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 一个参数，则是从起点截到数组的末尾</span><br><br><span class="hljs-built_in">console</span>.log(a.slice(-<span class="hljs-number">4</span>, -<span class="hljs-number">2</span>)); <span class="hljs-comment">// 可以是负数，-1表示倒数第一，-2表示倒数第二</span><br><br><span class="hljs-built_in">console</span>.log(a.slice(<span class="hljs-number">6</span>, <span class="hljs-number">0</span>)); <span class="hljs-comment">// 返回[], 不能往回截</span><br><br><span class="hljs-comment">/*************************/</span><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]; <span class="hljs-comment">// splice()会改变数组</span><br><span class="hljs-built_in">console</span>.log(a.splice(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;Hi&quot;</span>)); <span class="hljs-comment">// splice()的第一个参数是起点，第二个参数是要删除的元素个数，之后的参数是要插入的元素，返回删除的数组</span><br><span class="hljs-built_in">console</span>.log(a);<br><br><span class="hljs-built_in">console</span>.log(a.slice(<span class="hljs-number">3</span>)); <span class="hljs-comment">// 只有一个参数，则删除数组开头到起点的全部元素</span><br></code></pre></td></tr></table></figure><h2 id="12-indexOf-、lastIndexOf"><a href="#12-indexOf-、lastIndexOf" class="headerlink" title="12. indexOf()、lastIndexOf()"></a>12. indexOf()、lastIndexOf()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>];<br><span class="hljs-built_in">console</span>.log(a.indexOf(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 返回1， 数组a中第一个是2的元素的索引值是1</span><br><span class="hljs-built_in">console</span>.log(a.lastIndexOf(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 返回4， 数组a中最后一个是2的元素的索引值是4</span><br><span class="hljs-built_in">console</span>.log(a.lastIndexOf(<span class="hljs-number">99</span>)); <span class="hljs-comment">// 返回-1，找不到</span><br><br><span class="hljs-built_in">console</span>.log(a.indexOf(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">// 从索引值为2的元素开始找</span><br><span class="hljs-built_in">console</span>.log(a.lastIndexOf(<span class="hljs-number">2</span>, -<span class="hljs-number">3</span>)); <span class="hljs-comment">// 从倒数第三个元素开始找</span><br></code></pre></td></tr></table></figure><h2 id="13-includes"><a href="#13-includes" class="headerlink" title="13. includes()"></a>13. includes()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-literal">true</span>];<br><span class="hljs-built_in">console</span>.log(a.includes(<span class="hljs-literal">true</span>)); <span class="hljs-comment">// 返回true，因为数组中有true这个元素</span><br><span class="hljs-built_in">console</span>.log(a.includes(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 返回false</span><br></code></pre></td></tr></table></figure><h2 id="14-fill"><a href="#14-fill" class="headerlink" title="14. fill()"></a>14. fill()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">7</span>);<br><span class="hljs-built_in">console</span>.log(a.fill(<span class="hljs-number">0</span>)); <span class="hljs-comment">// 可以用于数组的初始化, 返回一个新数组</span><br><span class="hljs-built_in">console</span>.log(a.fill(<span class="hljs-number">7</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">// 从索引2开始把数组元素设置为7</span><br><span class="hljs-built_in">console</span>.log(a.fill(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">2</span>)); <span class="hljs-comment">// 第一个参数是要设置的值，第二个参数是起点，第三个参数是终点，可以是负数</span><br></code></pre></td></tr></table></figure><h2 id="15-join-、split"><a href="#15-join-、split" class="headerlink" title="15. join()、split()"></a>15. join()、split()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// join()用于把所有元素转换成字符串</span><br><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.log(a.join()); <span class="hljs-comment">// 默认使用逗号当分隔符</span><br><span class="hljs-built_in">console</span>.log(a.join(<span class="hljs-string">&quot; &quot;</span>)); <span class="hljs-comment">// 使用空格当作分隔符</span><br><br><span class="hljs-comment">// split()用于把字符串按指定分隔符转换成数组</span><br>a = <span class="hljs-string">&quot;Hello world!&quot;</span>;<br><span class="hljs-built_in">console</span>.log(a.split(<span class="hljs-string">&quot;&quot;</span>));<br>a = <span class="hljs-string">&quot;Hello, world!&quot;</span>;<br><span class="hljs-built_in">console</span>.log(a.split(<span class="hljs-string">&quot;,&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="16-sort"><a href="#16-sort" class="headerlink" title="16. sort()"></a>16. sort()</h2><p>sort()方法对数组元素按字母顺序对数组元素排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">23</span>, <span class="hljs-number">22</span>, <span class="hljs-number">111</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>];<br><span class="hljs-built_in">console</span>.log(arr.sort());<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://pic.imgdb.cn/item/6162e07f2ab3f51d91f3bcb3.jpg"></p><p>可以传入一个回调函数，来自定义排序规则。</p><p>回调函数的格式是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">(a, b) =&gt; &#123;<br>  <span class="hljs-comment">// a, b是数组中任意两个数</span><br>  <span class="hljs-keyword">return</span> xxx;<br>&#125;;<br></code></pre></td></tr></table></figure><p><b style="color: red">当返回值大于 0 时，a 排在 b 的后面；</b></p><p><b style="color: red">当返回值小于 0 时，a 排在 b 的前面；</b></p><p><b style="color: red">当返回值等于 0 时，a 和 b 的顺序不改变。</b></p><p>所以，要实现升序排序，可以按下面的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">23</span>, <span class="hljs-number">22</span>, <span class="hljs-number">111</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>];<br><span class="hljs-built_in">console</span>.log(<br>  arr.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &lt; b) &#123;<br>      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;)<br>);<br></code></pre></td></tr></table></figure><p>上面的代码还可以简化为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">23</span>, <span class="hljs-number">22</span>, <span class="hljs-number">111</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>];<br><span class="hljs-built_in">console</span>.log(arr.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b));<br><span class="hljs-comment">/* 要实现降序的话，则是变为return b - a; */</span><br></code></pre></td></tr></table></figure><p>原因(看不懂的话，结合上面红字)：</p><p>当 a &gt; b 时，</p><p>a - b &gt; 0, return a - b 排序的结果 ==&gt; b, a (升序)</p><p>b - a &lt; 0, return b - a 排序的结果 ==&gt; a, b (降序)</p><p>当 a &lt; b 时，</p><p>a - b &lt; 0, return a - b 排序的结果 ==&gt; a, b (升序)</p><p>b - a &gt; 0, return b - a 排序的结果 ==&gt; b, a (降序)</p><p>当 a = b 时，</p><p>a - b = b - a = 0, return a - b 和 return b - a 排序结果都不变</p><p>从上面所有的情况，可以发现，无论 a &gt; b，还是 a &lt; b, return a - b 总能得到升序的结果，return b - a 总能得到降序的结果</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库学习笔记(四)</title>
      <link href="/2021/11/06/SQL-4/"/>
      <url>/2021/11/06/SQL-4/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库学习笔记-四"><a href="#数据库学习笔记-四" class="headerlink" title="数据库学习笔记(四)"></a>数据库学习笔记(四)</h1><h2 id="1-数据库恢复技术"><a href="#1-数据库恢复技术" class="headerlink" title="1. 数据库恢复技术"></a>1. 数据库恢复技术</h2><h3 id="1-1-事务"><a href="#1-1-事务" class="headerlink" title="1.1 事务"></a>1.1 事务</h3><p><strong>事务</strong>：用户定义的一个数据库操作序列，是一个不可分割的工作单位。这些操作要么全做，要么全不做。<strong>是恢复的基本单位，也是并发控制的基本单位</strong></p><p><strong>定义事务</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">begin</span> transaction<br><span class="hljs-keyword">sql</span>语句<br><span class="hljs-keyword">commit</span><br># 事务正常结束，提交事务的所有操作<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">begin</span> transaction<br><span class="hljs-keyword">sql</span>语句<br><span class="hljs-keyword">rollback</span><br># 事务异常终止，事务回到开始的状态<br></code></pre></td></tr></table></figure><h3 id="1-2-事务的特性"><a href="#1-2-事务的特性" class="headerlink" title="1.2 事务的特性"></a>1.2 事务的特性</h3><p>ACID 特性</p><ul><li><p><strong>原子性</strong></p><p>事务是数据库的逻辑工作单位。事务中的操作要么都做，要么都不做</p></li><li><p><strong>一致性</strong></p><p>事务执行的结果必须是使数据库从一个一致性状态变为另一个一致性状态</p><p><strong>一致性状态</strong>：数据库中只包含成功事务提交的结果</p></li><li><p><strong>隔离性</strong></p><p>一个事务的执行不能被其他事务干扰</p></li><li><p><strong>持续性</strong></p><p>事务一旦提交，它对数据库中数据的改变应该是永久性的</p></li></ul><h3 id="1-3-故障"><a href="#1-3-故障" class="headerlink" title="1. 3 故障"></a>1. 3 故障</h3><p>对数据库的影响：</p><ol><li>数据库本身被破坏</li><li>数据库没有被破坏，但是数据可能不正确</li></ol><ul><li><p><strong>事务故障</strong>：事务没有达到预期的终点(commit 或显式的 rollback)、数据库可能处于不正确状态</p><p>恢复：<strong>事务撤销</strong>，强行回滚(rollback)该事务</p></li><li><p><strong>系统故障</strong>：造成系统停止运转的任何事件，使得系统要重新启动</p><p>恢复：需要通过<strong>undo/redo</strong>所有被中断的事务</p></li><li><p><strong>介质故障</strong>：称为硬故障。如硬盘损坏、磁头碰撞、瞬时强磁场干扰</p><p>恢复：重装数据库、重做已完成的事务</p></li><li><p><strong>计算机病毒</strong></p></li></ul><h3 id="1-4-恢复的实现技术"><a href="#1-4-恢复的实现技术" class="headerlink" title="1.4 恢复的实现技术"></a>1.4 恢复的实现技术</h3><p>恢复操作的基本原理：<strong>冗余</strong></p><ul><li>利用存储在系统中的<strong>冗余数据</strong>来<strong>重建</strong>数据库中已经被破坏或不正确的数据</li></ul><p>建立冗余数据的方法：</p><ul><li>数据转储(备份)</li><li>登记日志文件(logging)</li></ul><h4 id="1-4-1-数据转储"><a href="#1-4-1-数据转储" class="headerlink" title="1.4.1 数据转储"></a>1.4.1 数据转储</h4><p>转储是指数据库管理员定期将整个数据库复制到其他存储介质上保存下来的过程</p><ul><li>静态转储：在系统无运行事务时进行的转储操作。转储期间不允许对数据库的任何存取、修改活动</li><li>动态转储：转储操作与用户事务并发进行。转储期间允许对数据库进行存取、修改</li><li>海量转储：每次转储全部数据库</li><li>增量转储：只转储上次转储后更新后的数据</li></ul><h4 id="1-4-2-登记日志文件"><a href="#1-4-2-登记日志文件" class="headerlink" title="1.4.2 登记日志文件"></a>1.4.2 登记日志文件</h4><p><strong>日志文件</strong>：用来记录事务对数据库的更新操作的文件</p><p>作用：</p><ul><li>进行事务故障恢复</li><li>进行系统故障恢复</li><li>协助后备副本进行介质故障恢复</li></ul><p>为了保证数据库是可恢复的，登记日志文件必须遵循两条原则</p><ul><li>登记的次序严格按并发事务执行的时间次序</li><li>必须先写日志文件，后写数据库</li></ul><p><img src="https://pic.imgdb.cn/item/61866f562ab3f51d91226b91.jpg"></p><h2 id="2-并发控制"><a href="#2-并发控制" class="headerlink" title="2. 并发控制"></a>2. 并发控制</h2><p>多事务执行方式：</p><ul><li>事务<strong>串行</strong>执行：按事务排队，效率低</li><li><strong>交叉并发</strong>方式：在单处理机系统中。并行事务<strong>轮流交叉运行</strong>。假并行，但也提高了系统的效率。</li><li><strong>同时并发</strong>方式：多处理机系统中，多个系统可以同时运行多个事务</li></ul><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p><strong>事务</strong>是并发控制的基本单位。</p><p>并发控制机制的任务：</p><ul><li>对并发操作进行<strong>正确调度</strong></li><li>保证事务的<strong>隔离性</strong></li><li>保证数据库的<strong>一致性</strong></li></ul><p>并发操作带来的数据不一致性：</p><ol><li>丢失修改：两个事务 T1 和 T2 读取同一数据并修改，T2 的提交结果可能会破坏 T1 的结果，导致 T1 的修改被丢失</li><li>不可重复读：事务 T1 读取数据后，T2 对数据进行了修改等操作，事务 T1 再次读该数据时，得到与前一次不同的值</li><li>读脏数据：nT1 将 C 值修改为 200，T2 读到 C 为 200。T1 撤销，C 恢复原值，但是 T2 读到的 C 为 200，T2 读到的 C 就是脏数据。</li></ol><h3 id="2-2-封锁"><a href="#2-2-封锁" class="headerlink" title="2.2 封锁"></a>2.2 封锁</h3><p>基本封锁类型：</p><ul><li>**排他锁(又称写锁，X 锁)**：<ul><li>若事务 T 对数据对象 A 加上<strong>X 锁</strong>，则只允许 T 读取和修改 A，其他任何事务都<strong>不能再对 A 加任何类型的锁</strong>，直到 T 释放 A 上的锁</li><li>作用：保证其他事务在 T 释放 A 上的锁之前<strong>不能再读取和修改 A</strong></li></ul></li><li><strong>共享锁(又称读锁，S 锁)</strong><ul><li>若事务 T 对数据对象 A 加上 S 锁，则事务 T 可以读 A 但不能修改 A，其他事务<strong>只能再对 A 加 S 锁，而不能加 X 锁</strong>，直到 T 释放 A 上的 S 锁</li><li>作用：保证其他事务可以读 A，但在 T 释放 A 上的 S 锁之前不能对 A 做任何修改</li></ul></li></ul><h3 id="2-3-封锁协议"><a href="#2-3-封锁协议" class="headerlink" title="2.3 封锁协议"></a>2.3 封锁协议</h3><h4 id="2-3-1-一级封锁协议"><a href="#2-3-1-一级封锁协议" class="headerlink" title="2.3.1 一级封锁协议"></a>2.3.1 一级封锁协议</h4><p>事务 T 在修改数据 R 之前，必须先对它加上 X 锁，直到事务结束才释放。(结束包括正常结束 commit 和非正常结束 rollback)</p><p><img src="https://pic.imgdb.cn/item/618666d72ab3f51d91145cde.jpg"></p><p>作用：<strong>防止丢失修改</strong></p><h4 id="2-3-2-二级封锁协议"><a href="#2-3-2-二级封锁协议" class="headerlink" title="2.3.2 二级封锁协议"></a>2.3.2 二级封锁协议</h4><p>一级封锁协议加上事务 T 在读取数据 R 之前必须先对它加 S 锁，<strong>读完后就可以释放 S 锁</strong></p><p><img src="https://pic.imgdb.cn/item/6186660c2ab3f51d91132d46.jpg"></p><p>作用：<strong>防止丢失修改和读脏数据</strong></p><h4 id="2-3-三级封锁协议"><a href="#2-3-三级封锁协议" class="headerlink" title="2.3 三级封锁协议"></a>2.3 三级封锁协议</h4><p>一级封锁协议加上事务 T 在读取数据 R 之前必须先对它加 S 锁，<strong>直到事务结束，才可以释放 S 锁</strong></p><p><img src="https://pic.imgdb.cn/item/6186686d2ab3f51d9116e1dc.jpg"></p><p>作用：<strong>防止丢失修改、读脏数据和不可重复读</strong></p><p><img src="https://pic.imgdb.cn/item/618668992ab3f51d91172619.jpg"></p><h3 id="2-4-活锁和死锁"><a href="#2-4-活锁和死锁" class="headerlink" title="2.4 活锁和死锁"></a>2.4 活锁和死锁</h3><h4 id="2-4-1-活锁"><a href="#2-4-1-活锁" class="headerlink" title="2.4.1 活锁"></a>2.4.1 活锁</h4><ul><li>事务 T1 封锁了数据 R</li><li>事务 T2 请求封锁 R，等待，</li><li>T3 也请求封锁 R</li><li>T1 释放 R 上的封锁后，系统先批准 T3 的请求，T2 继续等</li><li>T4 请求封锁 R</li><li>T3 释放 R 上的封锁后，系统先批准 T4 的请求，T2 继续等。。。</li></ul><p>活锁：T2 有可能永远等待</p><p>采用<strong>先来先服务</strong>的策略可以避免活锁</p><p><img src="https://pic.imgdb.cn/item/61866a642ab3f51d911a40c8.jpg"></p><h4 id="2-4-2-死锁"><a href="#2-4-2-死锁" class="headerlink" title="2.4.2 死锁"></a>2.4.2 死锁</h4><ul><li>T1 封锁了数据 R1，T2 封锁了数据 R2</li><li>T1 请求封锁 R2，因为 T2 封锁了 R2，所以 T1 等待 T2 释放 R2 上的锁</li><li>T2 请求封锁 R1，因为 T1 封锁了 R1，所以 T2 等待 T1 释放 R1 上的锁</li></ul><p>死锁：T1 在等待 T2，T2 在等待 T1，T1 和 T2 两个事务永远不能结束</p><p><strong>死锁的诊断</strong>：</p><ul><li><p>超时法：如果一个事务的等待时间超过了规定的时限，就认为发生了死锁。</p><ul><li>优点：实现简单</li><li>缺点：时限若设置的太长，死锁发生后不能及时发现；有可能误判死锁</li></ul></li><li><p>等待图法</p><p><img src="https://pic.imgdb.cn/item/618684ee2ab3f51d91492f7d.jpg"></p></li></ul><p><strong>解决死锁</strong>：</p><ul><li><p>选择一个处理死锁代价最小的事务，将其撤销</p></li><li><p>释放此事务持有的所有的锁，使其他事务能继续运行下去</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库学习笔记(三)</title>
      <link href="/2021/11/06/SQL-3/"/>
      <url>/2021/11/06/SQL-3/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库学习笔记-三"><a href="#数据库学习笔记-三" class="headerlink" title="数据库学习笔记(三)"></a>数据库学习笔记(三)</h1><h2 id="1-数据库完整性"><a href="#1-数据库完整性" class="headerlink" title="1. 数据库完整性"></a>1. 数据库完整性</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><ul><li><strong>数据的正确性</strong>：指数据符合现实世界语义，反映了当前实际情况</li><li><strong>数据的相容性</strong>：指数据库同一对象在不同的表中的数据是符合逻辑的</li></ul><h4 id="数据的完整性和安全性"><a href="#数据的完整性和安全性" class="headerlink" title="数据的完整性和安全性"></a>数据的完整性和安全性</h4><p>是两个不同概念</p><ul><li><strong>数据的完整性</strong><ul><li>防止数据库中存在不符合语义的数据，也就是防止数据库中存在不正确的数据</li><li>防范对象：不合语义的、不正确的数据</li></ul></li><li><strong>数据的安全性</strong><ul><li>保护数据库，防止恶意的破坏和非法的存取</li><li>防范对象：非法用户和非法操作</li></ul></li></ul><h3 id="1-2-实体参照性"><a href="#1-2-实体参照性" class="headerlink" title="1.2 实体参照性"></a>1.2 实体参照性</h3><h4 id="1-2-1-实体完整性定义"><a href="#1-2-1-实体完整性定义" class="headerlink" title="1.2.1 实体完整性定义"></a>1.2.1 实体完整性定义</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Student<br>( Sno <span class="hljs-type">char</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">primary</span> key,# 在列级定义主码<br>  Sname <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  Ssex <span class="hljs-type">char</span>(<span class="hljs-number">2</span>)<br>);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Student<br>( Sno <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<br>  Sname <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  Ssex <span class="hljs-type">char</span>(<span class="hljs-number">2</span>),<br>  <span class="hljs-keyword">primary</span> key(Sno)   # 在表级定义主码<br>);<br><br># 如果是要将属性组定义为主码，只能在表级定义主码<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> SC<br>( Sno <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<br>  Cno <span class="hljs-type">char</span>(<span class="hljs-number">4</span>),<br>  Grade <span class="hljs-type">smallint</span>,<br>  <span class="hljs-keyword">primary</span> key(Sno, Cno)# 属性组定义为主码，只能在表级定义主码<br>);<br></code></pre></td></tr></table></figure><h3 id="1-3-参照完整性"><a href="#1-3-参照完整性" class="headerlink" title="1.3 参照完整性"></a>1.3 参照完整性</h3><h4 id="1-3-1-参照完整性定义"><a href="#1-3-1-参照完整性定义" class="headerlink" title="1.3.1 参照完整性定义"></a>1.3.1 参照完整性定义</h4><ul><li>在建表时用<b style="color: red"><code> foreign key</code></b>短语定义哪些列是外码</li><li>用<b style="color: red"><code> references</code></b>短语指明这些外码参照哪些表的主码</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> SC<br>( Sno <span class="hljs-type">char</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  Cno <span class="hljs-type">char</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  Grade <span class="hljs-type">smallint</span>,<br>  <span class="hljs-keyword">primary</span> key(Sno, Cno),<br>  <span class="hljs-keyword">foreign</span> key(Sno) <span class="hljs-keyword">references</span> Student(Sno),<br>  <span class="hljs-keyword">foreign</span> key(Cno) <span class="hljs-keyword">references</span> Course(Cno)# 在表级定义参照完整性<br>);<br></code></pre></td></tr></table></figure><p>参照完整性检查示例：</p><p>破坏参照完整性：</p><p><strong>SC 表增加一个元组</strong>，该元组的 Sno 属性的值在表 Student 中找不到一个元组，能让其 Sno 属性的值与之相等</p><p><img src="https://pic.imgdb.cn/item/617a75162ab3f51d91f54fab.jpg"></p><h3 id="1-4-用户定义的完整性"><a href="#1-4-用户定义的完整性" class="headerlink" title="1.4 用户定义的完整性"></a>1.4 用户定义的完整性</h3><p><strong>用户定义的完整性</strong>：针对某一具体应用的数据必须满足的语义要求</p><h4 id="1-4-1-属性上的约束条件"><a href="#1-4-1-属性上的约束条件" class="headerlink" title="1.4.1 属性上的约束条件"></a>1.4.1 属性上的约束条件</h4><p>建表时定义属性上的约束条件</p><ul><li>列值非空(not null)</li><li>列值唯一(unique)</li><li>检查列值是否满足一个条件表达式(check)</li></ul><ol><li><p>不允许取空值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> SC<br>( Sno <span class="hljs-type">char</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  Cno <span class="hljs-type">char</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  Grade <span class="hljs-type">smallint</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>  <span class="hljs-keyword">primary</span> key(Sno, Cno)# Sno、Cno、Grade属性不允许取空值<br>)<br></code></pre></td></tr></table></figure></li><li><p>列值唯一</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> DEPT<br>( Deptno <span class="hljs-type">numeric</span>(<span class="hljs-number">2</span>),<br>  Dname <span class="hljs-type">char</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">unique</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,# 要求Dname列值唯一，并且不能取空值<br>  <span class="hljs-keyword">primary</span> key(Deptno)<br>)<br></code></pre></td></tr></table></figure></li><li><p>用 check 短语指定列值应该满足的条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Student<br>( Sno <span class="hljs-type">char</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">primary</span> key,<br>  Sname <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  Ssex <span class="hljs-type">char</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">check</span>(Ssex <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>))  # Ssex只允许是<span class="hljs-string">&#x27;男&#x27;</span>或<span class="hljs-string">&#x27;女&#x27;</span><br>)<br></code></pre></td></tr></table></figure></li></ol><h4 id="1-4-2-元组上的约束条件"><a href="#1-4-2-元组上的约束条件" class="headerlink" title="1.4.2 元组上的约束条件"></a>1.4.2 元组上的约束条件</h4><p>建表时用<strong>check</strong>短语定义元组上的约束条件，即<strong>元组级的限制</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Student<br>( Sno <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<br>  Sname <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  Ssex <span class="hljs-type">char</span>(<span class="hljs-number">2</span>),<br>  <span class="hljs-keyword">primary</span> key(Sno),<br>  <span class="hljs-keyword">check</span>(Ssex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">or</span> Sname <span class="hljs-keyword">not</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;MS.%&#x27;</span>)# 当学生的性别是男时，名字不能以MS.开始<br>)<br></code></pre></td></tr></table></figure><h3 id="1-5-完整性约束命名子句"><a href="#1-5-完整性约束命名子句" class="headerlink" title="1.5 完整性约束命名子句"></a>1.5 完整性约束命名子句</h3><h4 id="1-5-1-完整性约束命名子句"><a href="#1-5-1-完整性约束命名子句" class="headerlink" title="1.5.1 完整性约束命名子句"></a>1.5.1 完整性约束命名子句</h4><p><code> constraint &lt;完整性约束条件名&gt; &lt;完整性约束条件&gt;</code></p><ul><li>完整性约束条件包括 not null、unique、primary key 短语、foreign key 短语、check 短语等</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Student<br>( Sno <span class="hljs-type">numeric</span>(<span class="hljs-number">6</span>)# 下面有完整性约束命名子句，所以没有逗号<br>  <span class="hljs-keyword">constraint</span> C1 <span class="hljs-keyword">check</span> (Sno <span class="hljs-keyword">between</span> <span class="hljs-number">9000</span> <span class="hljs-keyword">and</span> <span class="hljs-number">9999</span>),# 要求学号在<span class="hljs-number">9000</span><span class="hljs-operator">~</span><span class="hljs-number">9999</span>之间<br>  Sname <span class="hljs-type">char</span>(<span class="hljs-number">20</span>),<br>  <span class="hljs-keyword">constraint</span> C2 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  Sage <span class="hljs-type">numeric</span>(<span class="hljs-number">3</span>)<br>  <span class="hljs-keyword">constraint</span> C3 <span class="hljs-keyword">check</span>(Sage <span class="hljs-operator">&lt;</span> <span class="hljs-number">30</span>),<br>  <span class="hljs-keyword">constraint</span> StudentKey <span class="hljs-keyword">primary</span> key(Sno)# 主码约束，上面的C1、C2、C3都是列级约束<br>)<br></code></pre></td></tr></table></figure><h4 id="1-5-2-修改表中的完整性限制"><a href="#1-5-2-修改表中的完整性限制" class="headerlink" title="1.5.2 修改表中的完整性限制"></a>1.5.2 修改表中的完整性限制</h4><ul><li>使用 alter table 语句修改表中的完整性限制</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> Student<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">constraint</span> C3;# 删除对年龄的限制<br></code></pre></td></tr></table></figure><ul><li><p>修改表的约束条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 修改表的约束条件方法：先删除原来的约束条件，再增加新的约束条件<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> Student<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">constraint</span> C1;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> Student<br><span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> C1 <span class="hljs-keyword">check</span>(Sno <span class="hljs-keyword">between</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">and</span> <span class="hljs-number">9999</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-6-断言"><a href="#1-6-断言" class="headerlink" title="1.6 断言"></a>1.6 断言</h3><ul><li>在 SQL 中，可以使用 create assertion 语句，通过声明断点来指定更具一般性的约束</li><li>断言创建之后，任何对断言中涉及的关系的操作都会触发关系数据库管理系统对断言的检查，任何使断言不为真值的操作都会被拒绝执行</li></ul><h4 id="1-6-1-创建断言的语句格式"><a href="#1-6-1-创建断言的语句格式" class="headerlink" title="1.6.1 创建断言的语句格式"></a>1.6.1 创建断言的语句格式</h4><p><code> create assertion &lt;断言名&gt; &lt;check子句&gt;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> assertion ASSE_SC_CNUM1<br><span class="hljs-keyword">check</span>(<span class="hljs-number">60</span> <span class="hljs-operator">&gt;=</span> <span class="hljs-keyword">all</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> SC<br>                <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Cno)<br>     );# 限制每一门课程最多<span class="hljs-number">60</span>名学生选修<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 限制每个学期每一门课程最多<span class="hljs-number">60</span>名学生选修<br># 先增加一个学期属性<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> SC <span class="hljs-keyword">add</span> Team;<br><br># 定义断言<br><span class="hljs-keyword">create</span> assertion ASSE_SC_CNUM2<br><span class="hljs-keyword">check</span>(<span class="hljs-number">60</span> <span class="hljs-operator">&gt;=</span> <span class="hljs-keyword">all</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> SC<br>                <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Cno, Team)<br>     );<br></code></pre></td></tr></table></figure><h4 id="1-6-2-删除断言"><a href="#1-6-2-删除断言" class="headerlink" title="1.6.2 删除断言"></a>1.6.2 删除断言</h4><p><code> drop assertion &lt;断言名&gt;</code></p><h3 id="1-7-触发器"><a href="#1-7-触发器" class="headerlink" title="1.7 触发器"></a>1.7 触发器</h3><p><strong>触发器</strong>：用户定义在关系表上的一类由<strong>事件驱动</strong>的特殊过程</p><h4 id="1-7-1-定义触发器"><a href="#1-7-1-定义触发器" class="headerlink" title="1.7.1 定义触发器"></a>1.7.1 定义触发器</h4><p>概念太多，建议直接实践</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 当对表SC的Grade属性进行修改时，若分数增加了<span class="hljs-number">10</span><span class="hljs-operator">%</span> 则将这次的操作记录下来<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> SC<span class="hljs-operator">-</span>T<br>after update <span class="hljs-keyword">of</span> Grade <span class="hljs-keyword">on</span> SC# 分数发生修改后激活触发器<br><span class="hljs-keyword">referencing</span><br><span class="hljs-keyword">old</span> <span class="hljs-type">row</span> <span class="hljs-keyword">as</span> OldTuple# 把引发事件之前的值改名为OldTuple<br><span class="hljs-keyword">new</span> <span class="hljs-type">row</span> <span class="hljs-keyword">as</span> NewTuple# 把引发事件之后的值改名为NewTuple<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-type">row</span># 行级触发器，即每执行一次Grade的更新，下面的规则就会执行一次<br><span class="hljs-keyword">when</span>(NewTuple.Grade <span class="hljs-operator">&gt;=</span> <span class="hljs-number">1.1</span> <span class="hljs-operator">*</span> OldTuple.Grade)<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC_U(Sno, Cno, OldGrade, NewGrade)# 满足条件，把这次的操作记录下来<br><span class="hljs-keyword">values</span>(OldTuple.Sno, OldTuple.Cno, OldTuple.Grade, NewTuple.Grade)<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 将每次对表Student的插入操作所增加的学生个数记录下来<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> Student_Count<br>after <span class="hljs-keyword">insert</span> <span class="hljs-keyword">on</span> Student<br><span class="hljs-keyword">referencing</span><br><span class="hljs-keyword">new</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">as</span> Delta<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> statement<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> StudentInsertLog(Numbers)<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> Delta<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 定义一个BEFORE行级触发器，为教师表Teacher定义完整性规则“教授的工资不得低于<span class="hljs-number">4000</span>元，如果低于<span class="hljs-number">4000</span>元，自动改为<span class="hljs-number">4000</span>元<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> Insert_Or_Update_Sal<br>before <span class="hljs-keyword">insert</span> <span class="hljs-keyword">or</span> update <span class="hljs-keyword">on</span> Teacher# 插入工资前，或者更改工资前激活触发器<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-type">row</span><br><span class="hljs-keyword">begin</span># 定义触发动作体，是一个PL<span class="hljs-operator">/</span><span class="hljs-keyword">SQL</span>过程块<br>if (new.Jog <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;教授&#x27;</span>) <span class="hljs-keyword">and</span> (new.Sal <span class="hljs-operator">&lt;</span> <span class="hljs-number">4000</span>)<br><span class="hljs-keyword">then</span> new.Sal :<span class="hljs-operator">=</span> <span class="hljs-number">4000</span>;<br><span class="hljs-keyword">end</span> if;<br><span class="hljs-keyword">end</span>;# 触发动作体结束<br></code></pre></td></tr></table></figure><h4 id="1-7-2-激活触发器"><a href="#1-7-2-激活触发器" class="headerlink" title="1.7.2 激活触发器"></a>1.7.2 激活触发器</h4><ul><li><p>触发器的执行，是由<strong>触发事件激活</strong>的，并由数据库服务器自动执行</p><p>触发器执行时顺序</p><ol><li>执行该表上的 before 触发器</li><li>激活触发器上的 SQL 语句</li><li>执行该表上的 after 触发器</li></ol></li></ul><h4 id="1-7-3-删除触发器"><a href="#1-7-3-删除触发器" class="headerlink" title="1.7.3 删除触发器"></a>1.7.3 删除触发器</h4><p><code> drop trigger &lt;触发器名&gt; on &lt;表名&gt;;</code></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端流式布局</title>
      <link href="/2021/11/01/FlowLayout/"/>
      <url>/2021/11/01/FlowLayout/</url>
      
        <content type="html"><![CDATA[<h2 id="1-meta-视口标签"><a href="#1-meta-视口标签" class="headerlink" title="1. meta 视口标签"></a><h3>1. meta 视口标签</h3></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable = no, initial-scale=1.0, maximum-scale = 1.0, minimum-scale = 1.0&quot;&gt;<br></code></pre></td></tr></table></figure><p>width=device-width  &nbsp;  &nbsp; &nbsp; &nbsp; //设置页面宽度等于设备物理宽度</p><p>user-scalable = no &nbsp;  &nbsp; &nbsp; &nbsp; // 用户是否可以缩放 ，可以是yes或no, 1或0</p><p>initial-scale=1.0, maximum-scale = 1.0, minimum-scale = 1.0  &nbsp;  &nbsp; &nbsp; &nbsp; //依次是初始缩放比、最大缩放比、最小缩放比</p><h2 id="2-二倍图"><a href="#2-二倍图" class="headerlink" title="2. 二倍图"></a><h3>2. 二倍图</h3></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当设备像素比很大时，图片会被放大，而放大会让图片看起来模糊。为此，我们可以使用二倍图的方式来提高图片的清晰度。<br><br></p><p><b>原理：</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retina（视网膜屏幕）是一种显示技术 可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率 并提高屏幕显示的细腻程度。<img src="https://img-blog.csdnimg.cn/20210618120802760.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoaWxhbnpp,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于一张 50px * 50px 的图片，在手机 Retina 屏中打开 按照原本的物理像素比会放大倍速 这样会造成图片模糊<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过使用二倍图，提高图片质量 解决在高清设备中的模糊问题。<br><br><b>示例：</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;<br>&lt;title&gt;Myself&lt;/title&gt;<br>&lt;style&gt;<br>img:nth-child(2) &#123;<br>width: 50px;<br>/*移动设备中的图片会被放大， 所以先将二倍图压缩成原图大小，从而可以提高清晰度*/<br>height: 50px;<br>&#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>&lt;img src=&quot;images/apple50.jpg&quot; alt=&quot;&quot;&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>效果图：<br><img src="https://img-blog.csdnimg.cn/20210618120414167.png#pic_center" alt="在这里插入图片描述"></p><h2 id="3-流式布局"><a href="#3-流式布局" class="headerlink" title="3. 流式布局"></a><h3>3. 流式布局</h3></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;流式布局是一种等比例缩放布局方式，在 CSS 代码中使用百分比来设置宽度，也称百分比自适应的布局。 流式布局实现方法是将 CSS 固定像素宽度换算为百分比宽度。换算公式如下: 目标元素宽度/父盒子宽度=百分数宽度<br><br><br><b>示例：</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable = no, initial-scale=1.0&quot;&gt;<br>&lt;title&gt;Myself&lt;/title&gt;<br>&lt;style&gt;<br>* &#123;<br>margin: 0;<br>padding: 0;<br>&#125;<br><br>section &#123;<br>width: 100%;<br>/* max-width: 980px;<br>min-width: 600px; */       /*根据需要还可以设置max-width， min-width */<br>margin: 0 auto;<br>&#125;<br><br>section div &#123;<br>float: left;<br>width: 50%;<br>height: 400px;<br>&#125;<br><br>section div:nth-child(1) &#123;<br>background-color: pink;<br>&#125;<br><br>section div:nth-child(2) &#123;<br>background-color: purple;<br>&#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>&lt;section&gt;<br>&lt;div&gt;&lt;/div&gt;<br>&lt;div&gt;&lt;/div&gt;<br>&lt;/section&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>效果图：<br><br><img src="https://img-blog.csdnimg.cn/20210618123025156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoaWxhbnpp,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><center>PC端</center><br><br><p><img src="https://img-blog.csdnimg.cn/20210618123330306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoaWxhbnpp,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><center>移动端</center><br><h2 id="4-特殊样式"><a href="#4-特殊样式" class="headerlink" title="4. 特殊样式"></a><h3>4. 特殊样式</h3></h2><p><b>示例：</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable = no, initial-scale=1.0&quot;&gt;<br>&lt;title&gt;Myself&lt;/title&gt;<br>&lt;style&gt;<br><br>&lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>&lt;a href=&quot;#&quot;&gt;Test&lt;/a&gt;<br>&lt;input type=&quot;button&quot; value=&quot;按钮&quot;&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210618124419233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoaWxhbnpp,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable = no, initial-scale=1.0&quot;&gt;<br>&lt;title&gt;Myself&lt;/title&gt;<br>&lt;style&gt;<br>a &#123;<br>-webkit-tap-highlight-color: transparent;<br>/*移动端点击链接会高亮， 设置为透明色*/<br>&#125;<br><br>input &#123;<br>-webkit-appearance: none;<br>/*消除默认样式*/<br>&#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>&lt;a href=&quot;#&quot;&gt;Test&lt;/a&gt;<br>&lt;input type=&quot;button&quot; value=&quot;按钮&quot;&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rem适配布局</title>
      <link href="/2021/11/01/Rem-Layout/"/>
      <url>/2021/11/01/Rem-Layout/</url>
      
        <content type="html"><![CDATA[<h1 id="rem-适配布局"><a href="#rem-适配布局" class="headerlink" title="rem 适配布局"></a>rem 适配布局</h1><h2 id="rem-单位"><a href="#rem-单位" class="headerlink" title="rem 单位"></a>rem 单位</h2><p>rem 是根 em(root em)的缩写，是相对于根元素(html 元素)的字体大小。</p><p>rem 作用于非根元素字体大小时，相对于根元素字体大小；rem 作用于根元素字体大小时，相对于其初始字体的大小。</p><p>比如，根元素（html）设置 font-size = 12px;非根元素设置 width: 2rem;则换成 px 表示就是 24px。</p><p>整个页面只有一个 html，通过修改 html 的文字大小，可以很好的控制页面中元素的大小。</p><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>媒体查询(Media Query)是 CSS3 新语法。</p><ol><li>使用@media 查询，可以针对不同的媒体类型定义不同的样式；</li><li>@media 可以针对不同的屏幕尺寸设置不同的样式；</li><li>重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面；</li><li>苹果手机、Android 手机平板等设备都用得到多媒体查询。</li></ol><h3 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">@media mediatype and|not|only (media feature) &#123;<br>CSS-Code;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li>用 media 开头</li><li>media type 媒体类型</li><li>关键字 and、not、only</li><li>media feature 媒体特性必须有小括号包含</li></ol><h4 id="media-type-查询类型"><a href="#media-type-查询类型" class="headerlink" title="media type 查询类型"></a>media type 查询类型</h4><p>将不同的终端设备划分成不同的类型。称为媒体类型。</p><ol><li>all：用于所有设备</li><li>print：用于打印机和打印预览</li><li>screen：用于电脑屏幕、平板、手机等</li></ol><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>关键字将媒体类型和媒体特性连接起来作为媒体查询的条件。</p><ol><li>and：相当于”且”的意思，即当媒体类型和媒体特性都符合条件才起作用；</li><li>not：相当于”非”的意思，排除某个媒体类型，可以省略</li><li>only：指定某个特定的媒体类型，可以省略</li></ol><h4 id="媒体特性"><a href="#媒体特性" class="headerlink" title="媒体特性"></a>媒体特性</h4><p>每个媒体类型都具有不同的特性，根据不同媒体类型特性来设置不同的展示风格。</p><p>常用：width，max-width，min-width</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;zh-CN&quot;&gt;<br><br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>&lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;style&gt;<br>@media screen and (max-width: 800px) &#123;<br>body &#123;<br>background-color: pink;<br>&#125;<br>&#125;<br><br>@media screen and (max-width: 500px) &#123;<br>body &#123;<br>background-color: purple;<br>&#125;<br>&#125;<br>&lt;/style&gt;<br><br>&lt;body&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>当页面宽度小于等于 500px 时，页面背景色为紫色；当页面宽度大于 500px 小于等于 800px 时，页面背景色为粉色。</p><p>多个媒体特性示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">@media screen and (min-width: 540px) and (max-width: 969px) &#123;<br>body &#123;<br>background-color: green;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="引入资源"><a href="#引入资源" class="headerlink" title="引入资源"></a>引入资源</h3><p>当样式比较多时，我们可以针对不同的媒体使用不同的样式表。</p><p>原理：直接在 link 中判断设备的尺寸，然后引用不同的 css 文件。</p><h4 id="语法规范-1"><a href="#语法规范-1" class="headerlink" title="语法规范"></a>语法规范</h4><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;mystylesheet.css&quot; media=&quot;media and|not|only (media feature)&quot;&gt;</code></p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;zh-CN&quot;&gt;<br><br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>&lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;link rel=&quot;stylesheet&quot; href=&quot;css/style320.css&quot; media=&quot;screen and (min-width: 320px)&quot;&gt;<br>&lt;link rel=&quot;stylesheet&quot; href=&quot;css/style640.css&quot; media=&quot;screen and (min-width: 640px)&quot;&gt;<br><br>&lt;body&gt;<br>&lt;div&gt;1&lt;/div&gt;<br>&lt;div&gt;2&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><h3 id="CSS-弊端"><a href="#CSS-弊端" class="headerlink" title="CSS 弊端"></a>CSS 弊端</h3><p>CSS 是非程序是语言，没有变量、函数、作用域等概念。</p><ol><li>需要大量看似没有逻辑的代码，CSS 冗余度较高</li><li>不方便维护及扩展，不利于复用</li><li>没有良好的计算能力</li></ol><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>Less（Leaner Style Sheets 的缩写）是一门 CSS 扩展语言，成为 CSS 预处理器。</p><p>常见的 CSS 预处理器： Sass、Less、Stylus</p><p>Less 作为 CSS 一种形式上的扩展，没有减少 CSS 的功能，而是在现有的 CSS 语法上，加入程序式语言的特性。</p><p>引入了变量、Mixin（混入）、运算以及函数等功能。大大简化了 CSS 编写，并且降低了 CSS 的维护成本，可以实现用更少的代码完成更多的事。</p><p>总结：Less 是一门 CSS 预处理 1 语言，它扩展了 CSS 的动态特性。</p><p><a href="http://lesscss.cn/">Less 官网</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>过程：</p><ol><li>新建后缀名为 less 的文件，书写 less 语句</li><li>less 编译生成 css 文件</li><li>引入 CSS 文件</li></ol><h4 id="Less-变量"><a href="#Less-变量" class="headerlink" title="Less 变量"></a>Less 变量</h4><p>没有固定的值，可以改变的。颜色和数值经常使用。</p><p><code>@变量名:值;</code></p><p><b>变量命名规范</b></p><ol><li>必须以@为前缀</li><li>不能包含特殊字符</li><li>不能以数字开头</li><li>区分大小写</li></ol><p>使用示例：</p><p><img src="https://pic.imgdb.cn/item/6102825a5132923bf80bbd53.jpg"></p><h4 id="Less-编译"><a href="#Less-编译" class="headerlink" title="Less 编译"></a>Less 编译</h4><p>Less 包含一套自定义的语法和一个解析器，用户根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的 CSS 文件。</p><p>VSCode 插件：Easy LESS 插件可以实现</p><p>安装插件后，重新加载 VSCode，之后只要保存 less 文件，会自动生成对应的 CSS 文件。</p><h4 id="Less-嵌套"><a href="#Less-嵌套" class="headerlink" title="Less 嵌套"></a>Less 嵌套</h4><p>实例：<br>CSS：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.x .y &#123;<br>  background-color: #fff;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>Less:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.x &#123;<br>  .y &#123;<br>background-color: #fff;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>生成的 CSS 样式和上面的是一样的</p><br><p style = "color: red">如果遇到交集|伪类|伪元素选择器：<br />如果内层选择器前面没有&符号，则被解析为父选择器的后代；如果有，责备解析为父元素自身或父元素的伪类。</p><p>CSS:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.header a:hover &#123;<br>  color: blue;<br>&#125;<br>.header a::before &#123;<br>  content: &quot;&quot;;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Less:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.header a &#123;<br>  &amp;:hover &#123;<br>color: blue;<br>  &#125;<br>&#125;<br>.header a &#123;<br>  &amp;::before &#123;<br>content: &quot;&quot;;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Less-运算"><a href="#Less-运算" class="headerlink" title="Less 运算"></a>Less 运算</h4><p>和其他语言运算大同小异</p><ol><li>运算符左右两侧各自添加一个空格；</li><li>多个数参与运算，如果只有一个数有单位，则最后就是以这个单位为准；</li><li>多个数参与运算，如果多个数有单位，则最后就是以第一个单位为准；</li></ol><p>用上”/“的式子可能会不起作用，甚至会报错，需要用小括号包住整个式子或者除法的式子。</p><p>另外，Less 注释为 <code>//注释内容</code>,并且不会出现在对应的 CSS 中。</p><p>Less:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">@border: 5px;    @size: 50px;    div &#123;      width: 200px + 50;      height: 200px - 50;      border: @border solid #ccc;      margin: 100px auto;    &#125;    p &#123;      width: (82rem / @size + 50px);      height: 82 / 50rem;      // 没有实现运算, height: 30 + 82 / 50rem; 会报错      // 改成 height: (30 + 82 / 50rem)      // 或 height: 30 + (82 / 50rem);      font-size: 82 + 15px + 3rem;    &#125;<br></code></pre></td></tr></table></figure><p>生成的 CSS:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">div &#123;      width: 250px;      height: 150px;      border: 5px solid #ccc;      margin: 100px auto;    &#125;    p &#123;      width: 51.64rem;      height: 82 / 50rem;      font-size: 100px;    &#125;<br></code></pre></td></tr></table></figure><h2 id="rem-适配方案"><a href="#rem-适配方案" class="headerlink" title="rem 适配方案"></a>rem 适配方案</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>让一些不能等比自适应的元素，当设备尺寸发生改变时,等比例适配当前设备。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol><li>使用媒体查询根据不同设备按比例设置 html 的字体大小</li><li>页面元素使用 rem 做单位。这样的话，当 html 字体大小变化（即不同设备）时，元素尺寸也会发生变化，从而达到等比例缩放的适配。</li></ol><h3 id="rem-实际开发适配方案"><a href="#rem-实际开发适配方案" class="headerlink" title="rem 实际开发适配方案"></a>rem 实际开发适配方案</h3><ol><li>首先选一套标准尺寸 750 为准</li><li>动态设置 html 标签 font-size 大小</li><li>元素大小取值方法</li></ol><p>① 页面元素的 rem 值=页面元素值（px）/(屏幕宽度/划分的分数)<br>② 屏幕宽度/划分的份数就是 html&nbsp;&nbsp;font-size 大小<br>③ 页面元素的 rem 值=页面元素值（px）/html&nbsp;&nbsp;font-size 大小</p><p>@import 导入的 css 文件名：可以把一个样式文件导入到另一个样式文件中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">@import &quot;common&quot;;<br></code></pre></td></tr></table></figure><p>和 link 相似，区别：link 是把一个样式文件引入到 html 页面里面。</p><p>示例：</p><p><img src="https://pic.imgdb.cn/item/6107ef055132923bf88d211c.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;!DOCTYPE html&gt;    &lt;html lang=&quot;zh-CN&quot;&gt;        &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;/head&gt;    &lt;style&gt;    @media screen and (min-width: 320px) &#123;    html &#123;    font-size: 21.33px;    &#125;    &#125;        @media screen and (min-width: 750px) &#123;    html &#123;    font-size: 50px;    &#125;    &#125;        div &#123;    width: 2rem;    height: 2rem;    background-color: pink;    &#125;    &lt;/style&gt;        &lt;body&gt;    &lt;div&gt;&lt;/div&gt;    &lt;/body&gt;        &lt;/html&gt;<br></code></pre></td></tr></table></figure><p>rem 适配方案 1：</p><ol><li>less</li><li>媒体查询</li><li>rem</li><li>插件 easy less</li></ol><p>rem 适配方案 2：</p><ol><li>flexible.js</li><li>rem</li><li>插件 cssrem</li></ol><p>参考：<br>pink 老师前端入门教程</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库学习笔记(二)</title>
      <link href="/2021/10/29/SQL-2/"/>
      <url>/2021/10/29/SQL-2/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库学习笔记-二"><a href="#数据库学习笔记-二" class="headerlink" title="数据库学习笔记(二)"></a>数据库学习笔记(二)</h1><h2 id="1-数据库安全性"><a href="#1-数据库安全性" class="headerlink" title="1. 数据库安全性"></a>1. 数据库安全性</h2><h3 id="1-1-TCSEC-TDI-安全级别划分"><a href="#1-1-TCSEC-TDI-安全级别划分" class="headerlink" title="1.1 TCSEC/TDI 安全级别划分"></a>1.1 TCSEC/TDI 安全级别划分</h3><p><img src="https://pic.imgdb.cn/item/6170227f2ab3f51d91e74c50.jpg"></p><p><b style="color: red">B1 级：”安全”或”可信的”产品 ，真正意义上的安全产品</b></p><h3 id="1-2-数据库管理系统安全性控制模型"><a href="#1-2-数据库管理系统安全性控制模型" class="headerlink" title="1.2 数据库管理系统安全性控制模型"></a>1.2 数据库管理系统安全性控制模型</h3><p><img src="https://pic.imgdb.cn/item/617023a82ab3f51d91e8829f.jpg"></p><p><strong>存取控制流程</strong>：</p><ol><li>数据库管理系统对提出 SQL 访问请求的数据库用户进行身份鉴别，防止不可信用户使用系统</li><li>在 SQL 处理层进行自主存取控制和强制存取控制，甚至还可以进行推理控制</li><li>还可以对用户访问行为和系统关键操作进行审计，对异常用户行为进行简单入侵检测</li></ol><h3 id="1-3-数据库安全性控制的常用方法"><a href="#1-3-数据库安全性控制的常用方法" class="headerlink" title="1.3 数据库安全性控制的常用方法"></a>1.3 数据库安全性控制的常用方法</h3><ol><li>用户标识和鉴定</li><li>存取控制</li><li>视图</li><li>审计</li><li>数据加密</li></ol><h3 id="1-4-数据库安全性控制"><a href="#1-4-数据库安全性控制" class="headerlink" title="1.4 数据库安全性控制"></a>1.4 数据库安全性控制</h3><h4 id="1-4-1-用户身份鉴别"><a href="#1-4-1-用户身份鉴别" class="headerlink" title="1.4.1 用户身份鉴别"></a>1.4.1 用户身份鉴别</h4><ul><li>静态口令鉴别</li><li>动态口令鉴别</li><li>生物特征鉴别</li><li>智能卡鉴别</li></ul><h4 id="1-4-2-存取控制"><a href="#1-4-2-存取控制" class="headerlink" title="1.4.2 存取控制"></a>1.4.2 存取控制</h4><p><b style="color: red">自主存取控制</b>:</p><ul><li>C2 级</li><li>用户对不同的数据对象有不同的存取权限</li><li>不同的用户对同一对象有不同的权限</li><li>用户可以将其拥有的存取权限授予其他用户</li></ul><p><b style="color: red">强制存取控制</b>:</p><ul><li>B1 级</li><li>每一个数据对象被标以一定的密级</li><li>每个用户也会被授予某个级别的许可证</li><li>对于每一个对象，只有具有合法许可证的用户才可以存取</li></ul><h4 id="1-4-3-授权-授予与回收"><a href="#1-4-3-授权-授予与回收" class="headerlink" title="1.4.3 授权: 授予与回收"></a>1.4.3 授权: 授予与回收</h4><ol><li><p>grant</p><p>格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-operator">&lt;</span>权限<span class="hljs-operator">&gt;</span>[, <span class="hljs-operator">&lt;</span>权限<span class="hljs-operator">&gt;</span>]...<br><span class="hljs-keyword">on</span> <span class="hljs-operator">&lt;</span>对象类型<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>对象名<span class="hljs-operator">&gt;</span>[, <span class="hljs-operator">&lt;</span>对象类型<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>对象名<span class="hljs-operator">&gt;</span>]...<br><span class="hljs-keyword">to</span> <span class="hljs-operator">&lt;</span>用户<span class="hljs-operator">&gt;</span>[, <span class="hljs-operator">&lt;</span>用户<span class="hljs-operator">&gt;</span>]...<br>[<span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> option]# 指定这个的话，表示权限可以再授予，没有指定的话，则不行<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> Student<br><span class="hljs-keyword">to</span> U1;# 把查询Student表的权限授予用户U1<br><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> priviliges<br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> Student, Course<br><span class="hljs-keyword">to</span> U2, U3; # 把Student表和Course表的全部权限授予用户U2和U3<br><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> Student<br><span class="hljs-keyword">to</span> public;# 把查询Student表的权限授予所有用户<br><br><span class="hljs-keyword">grant</span> update(Sno), <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> Student<br><span class="hljs-keyword">to</span> U4# 把查询Student表和修改学号的权限授予用户U4<br><span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> option; # 允许用户U4再把此权限授予其他用户<br><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> Student<br><span class="hljs-keyword">to</span> U5;# 用户U4可以把自己的<span class="hljs-keyword">select</span>权限授予U5, U5不能再传播此权限<br></code></pre></td></tr></table></figure></li><li><p>revoke</p><p>格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">revoke</span> <span class="hljs-operator">&lt;</span>权限<span class="hljs-operator">&gt;</span>[, <span class="hljs-operator">&lt;</span>权限<span class="hljs-operator">&gt;</span>]...<br><span class="hljs-keyword">on</span> <span class="hljs-operator">&lt;</span>对象类型<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>对象名<span class="hljs-operator">&gt;</span>[, <span class="hljs-operator">&lt;</span>对象类型<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>对象名<span class="hljs-operator">&gt;</span>]...<br><span class="hljs-keyword">from</span> <span class="hljs-operator">&lt;</span>用户<span class="hljs-operator">&gt;</span>[, <span class="hljs-operator">&lt;</span>用户<span class="hljs-operator">&gt;</span>]...[cascade <span class="hljs-operator">|</span> restrict]<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> Student<br><span class="hljs-keyword">from</span> public； # 收回所有用户对标Student的查询权限<br><br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> Student<br><span class="hljs-keyword">from</span> U4 cascade; # 将用户U5的<span class="hljs-keyword">select</span>权限收回的时候，需要的使用cascade，否则拒绝执行该语句， 因为用户U4已经把<span class="hljs-keyword">select</span>权限授予给U5了，所有收回U4的<span class="hljs-keyword">select</span>权限的时候需要级联，收回用户U5的权限，因为U5的权限来自U4,U4没了，U5自然也会没<br></code></pre></td></tr></table></figure><p><strong>数据库管理员</strong>：</p><ul><li>拥有所有对象的所有权限</li><li>根据实际情况将不同的权限授予不同用户</li></ul><p><strong>用户</strong>：</p><ul><li>拥有自己建立的对象的全部的操作权限</li><li>可以使用 grant，把权限授予其他用户</li></ul><p><strong>被授权的用户</strong>：</p><ul><li>如果具有”继续授权”的许可，则可以把获得的权限再授予其他用户</li></ul></li><li><p>创建数据库模式的权限</p><ul><li><p>数据库管理员在创建用户时实现</p></li><li><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">&lt;</span>username<span class="hljs-operator">&gt;</span><br>[<span class="hljs-keyword">with</span>][DBA<span class="hljs-operator">|</span>RESOURCE<span class="hljs-operator">|</span><span class="hljs-keyword">CONNECT</span>];<br></code></pre></td></tr></table></figure><p><strong>CONNECT 权限</strong>：拥有 CONNECT 权限的用户不能创建新用户、模式、基本表，只能登录数据库</p><p><strong>RESOURCE 权限</strong>：能创建基本表和视图，但不能创建模式、新用户</p><p><strong>DBA 权限</strong>：可以创建新用户、创建模式、创建基本表和视图。DBA 拥有对所有数据库对象的存取权限，还可以吧这些权限授予一般用户</p></li></ul></li></ol><h4 id="1-4-4-数据库角色"><a href="#1-4-4-数据库角色" class="headerlink" title="1.4.4 数据库角色"></a>1.4.4 数据库角色</h4><p><strong>数据库角色</strong>：被命名的一组与数据库操作相关的权限</p><ul><li>角色是权限的集合</li><li>可以为一组具有相同权限的用户创建一个角色，用来简化授权的过程</li></ul><ol><li><p><strong>角色的创建</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> role <span class="hljs-operator">&lt;</span>角色名<span class="hljs-operator">&gt;</span>;<br></code></pre></td></tr></table></figure></li><li><p>给角色授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-operator">&lt;</span>权限<span class="hljs-operator">&gt;</span>[, <span class="hljs-operator">&lt;</span>权限<span class="hljs-operator">&gt;</span>]...<br><span class="hljs-keyword">on</span> <span class="hljs-operator">&lt;</span>对象类型<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>对象名<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">to</span> <span class="hljs-operator">&lt;</span>角色<span class="hljs-operator">&gt;</span>[, <span class="hljs-operator">&lt;</span>角色<span class="hljs-operator">&gt;</span>]...<br></code></pre></td></tr></table></figure></li><li><p>将一个角色授予其他的角色或用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-operator">&lt;</span>角色<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span>[, <span class="hljs-operator">&lt;</span>角色<span class="hljs-number">2</span><span class="hljs-operator">&gt;</span>]...<br><span class="hljs-keyword">to</span> <span class="hljs-operator">&lt;</span>角色<span class="hljs-number">3</span><span class="hljs-operator">&gt;</span>[, <span class="hljs-operator">&lt;</span>用户<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span>]...<br>[<span class="hljs-keyword">with</span> admin option] # 指定<span class="hljs-keyword">with</span> admin option的话，可以把权限授予其他角色或用户<br></code></pre></td></tr></table></figure></li><li><p>角色权限的收回</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">revoke</span> <span class="hljs-operator">&lt;</span>权限<span class="hljs-operator">&gt;</span>[, <span class="hljs-operator">&lt;</span>权限<span class="hljs-operator">&gt;</span>]...<br><span class="hljs-keyword">on</span> <span class="hljs-operator">&lt;</span>对象类型<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>对象名<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">from</span> <span class="hljs-operator">&lt;</span>角色<span class="hljs-operator">&gt;</span>[, <span class="hljs-operator">&lt;</span>角色<span class="hljs-operator">&gt;</span>]...<br></code></pre></td></tr></table></figure></li></ol><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> role R1;  # 创建一个角色R1<br><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>, update, <span class="hljs-keyword">insert</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> Student<br><span class="hljs-keyword">to</span> R1;# 给角色R1授予Student表的<span class="hljs-keyword">select</span>、update、<span class="hljs-keyword">insert</span>权限<br><br><span class="hljs-keyword">grant</span> R1<br><span class="hljs-keyword">to</span> clz, czh;# 将角色R1授予clz、czh，使他们具有角色R1所包含的全部权限<br><br><span class="hljs-keyword">revoke</span> R1<br><span class="hljs-keyword">from</span> clz;# 通过R1一次性收回clz的这<span class="hljs-number">3</span>个权限<br><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">delete</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> Student<br><span class="hljs-keyword">to</span> R1;# 使角色R1在原来的基础上增加了Student表的<span class="hljs-keyword">delete</span>权限<br><br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> Student<br><span class="hljs-keyword">from</span> R1;# 收回R1的<span class="hljs-keyword">select</span>权限<br></code></pre></td></tr></table></figure><h4 id="1-4-4-强制存取控制方法"><a href="#1-4-4-强制存取控制方法" class="headerlink" title="1.4.4 强制存取控制方法"></a>1.4.4 强制存取控制方法</h4><p><strong>强制存取控制(MAC)</strong>:</p><ul><li>保证更高程度的安全性</li><li>用户不能直接感知或进行控制</li><li>适用于对数据有严格而固定密级分类的部门</li></ul><p>在强制存取控制中，数据库管理系统所管理的全部实体被分为主体和客体两大类</p><p><strong>主体</strong>是系统中的活动实体</p><ul><li>包括数据库管理系统所管理的实际用户</li><li>也包括代表用户的各个进程</li></ul><p><strong>客体</strong>是系统中的被动实体，受主体控制</p><ul><li>文件、基本表、索引、视图等</li></ul><p><strong>敏感度标记</strong></p><ul><li><p>对于主体和客体，DBMS 为它们每一个实例指派一个敏感度标记</p></li><li><p>敏感度标记可分为若干级别</p><ul><li>绝密(TS)</li><li>机密(S)</li><li>可信(C)</li><li>公开(P)</li></ul><p><strong>TS&gt;=S&gt;=C&gt;=p</strong></p></li><li><p>主体的敏感度标记称为许可证级别</p></li><li><p>客体的敏感度标记称为密级</p></li></ul><p>强制存取控制规则：</p><ul><li>仅当主体的许可证级别<b style="color: red">大于或等于</b>客体的密级时，该主体才能<b style="color: red">读</b>相应的客体</li><li>仅当主体的许可证级别<b style="color: red">小于或等于</b>客体的密级时，该主体才能<b style="color: red">写</b>相应的客体</li></ul><p><strong>自主存取控制与强制存取控制共同构成数据库管理系统的安全机制</strong></p><ul><li>先进行自主存取控制检查(DAC 检查)，通过自主存取控制检查的数据对象再由系统进行强制存取控制检查(MAC 检查)，只有通过 MAC 检查的数据对象才可以存取。</li></ul><h3 id="1-5-视图机制"><a href="#1-5-视图机制" class="headerlink" title="1.5 视图机制"></a>1.5 视图机制</h3><ul><li>把要保密的数据对无权存取这些数据的用户隐藏，对数据提供一定程度的安全保护</li><li>间接实现支持存取谓词的用户权限定义</li></ul><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> CS_Student<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CS&#x27;</span>;# 建立计算机系学生的视图<br><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> CS_Student<br><span class="hljs-keyword">to</span> clz;<br><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> priviliges<br><span class="hljs-keyword">on</span> CS_Student<br><span class="hljs-keyword">to</span> czh;# 在视图上进一步定义存取权限<br></code></pre></td></tr></table></figure><h3 id="1-6-审计"><a href="#1-6-审计" class="headerlink" title="1.6 审计"></a>1.6 审计</h3><p>概念：</p><ul><li>启用一个专用的审计日志，将用户对数据库的所有操作记录在上面</li><li>审计员可以利用审计记录，监控数据库中的各种行为，找出非法存取数据的人、时间和内容</li><li><strong>C2 以上安全级别的 DBMS 必须具有审计功能</strong></li></ul><p><b style="color: red">应该只有保密级别高的才需要设置审计功能，因为审计很费时间和空间，会增加很多开销</b></p><p><strong>用户级审计</strong>：</p><ul><li>任何用户可设置的审计</li><li>主要是用户针对自己创建的数据库表和视图进行审计</li></ul><p><strong>系统级审计</strong>：</p><ul><li>只能由数据库管理员设置</li><li>可以监测成功或失败的登录请求、监测授权和收回操作以及其他数据库权限下的操作</li></ul><h4 id="1-6-1-audit-语句"><a href="#1-6-1-audit-语句" class="headerlink" title="1.6.1 audit 语句"></a>1.6.1 audit 语句</h4><p><strong>audit 语句</strong>：设置审计功能</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">audit <span class="hljs-keyword">alter</span>, update<br><span class="hljs-keyword">on</span> Student;# 对修改Student表结构或修改表数据的操作进行审计<br></code></pre></td></tr></table></figure><h4 id="1-6-2-noaudit-语句"><a href="#1-6-2-noaudit-语句" class="headerlink" title="1.6.2 noaudit 语句"></a>1.6.2 noaudit 语句</h4><p><strong>noaudit 语句</strong>：取消审计功能</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">noaudit <span class="hljs-keyword">alter</span>, update<br><span class="hljs-keyword">on</span> Student;# 取消对Student表的审计<br></code></pre></td></tr></table></figure><h3 id="1-7-数据加密"><a href="#1-7-数据加密" class="headerlink" title="1.7 数据加密"></a>1.7 数据加密</h3><h4 id="1-7-1-存储加密"><a href="#1-7-1-存储加密" class="headerlink" title="1.7.1 存储加密"></a>1.7.1 存储加密</h4><p><strong>透明存储加密</strong>：</p><ul><li>内核级加密保护方式对用户完全透明</li><li>将数据在写到磁盘时对数据进行，授权用户读取数据时再对其进行解密</li><li>数据库的管理应用程序不需要做任何修改，只需要在创建表语句中说明需加密的字段就可以</li></ul><p><b style="color: red">性能较好，安全完备性较高</b></p><p><strong>非透明存储加密</strong>：</p><ul><li>通过多个加密函数实现</li></ul><h4 id="1-7-2-传输加密"><a href="#1-7-2-传输加密" class="headerlink" title="1.7.2 传输加密"></a>1.7.2 传输加密</h4><p><strong>链路加密</strong>：</p><ul><li>在链路层进行加密</li><li>传输信息由报头和报文两部分组成</li><li>报文和报头都加密</li></ul><p><strong>端对端加密</strong>：</p><ul><li>在发送端加密，接收端解密</li><li>只加密报文，不加密报头</li><li>容易被非法监听者发现并从中获取敏感信息</li></ul><p><img src="https://pic.imgdb.cn/item/6170cfe42ab3f51d915fbfe3.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python(三)</title>
      <link href="/2021/10/29/python-3/"/>
      <url>/2021/10/29/python-3/</url>
      
        <content type="html"><![CDATA[<h1 id="python-三-字符串与正则表达式"><a href="#python-三-字符串与正则表达式" class="headerlink" title="python(三) 字符串与正则表达式"></a>python(三) 字符串与正则表达式</h1><h2 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1 字符串"></a>1 字符串</h2><h3 id="1-1-字符串格式化"><a href="#1-1-字符串格式化" class="headerlink" title="1.1 字符串格式化"></a>1.1 字符串格式化</h3><p>语法：<code>&#39;格式字符&#39; %要格式化的内容</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">16</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%o&#x27;</span> %x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%x&#x27;</span> %x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%e&#x27;</span> %x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d, %c&#x27;</span> %(<span class="hljs-number">65</span>, <span class="hljs-number">65</span>))   <span class="hljs-comment"># 如果要求格式化的对象多于一个，要放在元组中</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s&#x27;</span> %[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><p>使用 format()方法进行格式化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The number &#123;0&#125; in hex is: &#123;0:#x&#125;, the number &#123;1:,&#125; in oct is &#123;1:#o&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">16</span>, <span class="hljs-number">1234</span>))<br><span class="hljs-comment"># 字符串里的&#123;&#125;相当于占位符，把后面format()的参数放进去，按索引值放，即0代表放第一个参数，&#123;0:#x&#125;代表把第一个参数转换为16进制</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;My name is &#123;name&#125;, my age is &#123;age&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name = <span class="hljs-string">&#x27;clz&#x27;</span>, age = <span class="hljs-number">21</span>))<br><br>position = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x: &#123;0[0]&#125;, y:&#123;0[1]&#125;, z: &#123;0[2]&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(position))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:.4f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1.23456</span>))    <span class="hljs-comment"># 指定小数位数</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:.2%&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>/<span class="hljs-number">3</span>))        <span class="hljs-comment"># 格式化为百分数</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:^10.2%&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>/<span class="hljs-number">3</span>))     <span class="hljs-comment"># ^表示居中对齐，&lt;表示左对齐，&gt;表示右对齐</span><br><br></code></pre></td></tr></table></figure><p>从 Python 3.6.x 开始支持一种新的字符串格式化方法，官方叫做 Formatted String Literals, 简称为 f-字符串,在 Python 3.8 之后的版本中，支持 print(f’{width=}’)形式的用法++9+++</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">w = <span class="hljs-number">1</span><br>h = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;width is <span class="hljs-subst">&#123;w&#125;</span>, height is <span class="hljs-subst">&#123;h&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="1-2-字符串常用方法"><a href="#1-2-字符串常用方法" class="headerlink" title="1.2 字符串常用方法"></a>1.2 字符串常用方法</h3><p>**find()、rfind()、index()、rindex()、count()**：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;apple, peach, banana, peach&#x27;</span><br><span class="hljs-built_in">print</span>(s.find(<span class="hljs-string">&#x27;peach&#x27;</span>))  <span class="hljs-comment"># 返回第一次出现的位置</span><br><span class="hljs-built_in">print</span>(s.find(<span class="hljs-string">&#x27;peach&#x27;</span>, <span class="hljs-number">8</span>))  <span class="hljs-comment"># 从指定位置开始查找</span><br><span class="hljs-built_in">print</span>(s.find(<span class="hljs-string">&#x27;peaach&#x27;</span>, <span class="hljs-number">6</span>, <span class="hljs-number">24</span>))  <span class="hljs-comment"># 在指定范围中查找， 查找的字符串要完全在范围内才可以找到，只有开始或结束在范围内也会返回-1</span><br><br><span class="hljs-built_in">print</span>(s.rfind(<span class="hljs-string">&#x27;p&#x27;</span>))   <span class="hljs-comment"># rfind()是从后往前找</span><br><br><span class="hljs-built_in">print</span>(s.index(<span class="hljs-string">&#x27;p&#x27;</span>))     <span class="hljs-comment"># 返回首次出现的位置</span><br><span class="hljs-built_in">print</span>(s.index(<span class="hljs-string">&#x27;pe&#x27;</span>))<br><br><span class="hljs-comment"># print(s.index(&#x27;ppp&#x27;))      # 找不到会抛出异常</span><br><br><span class="hljs-built_in">print</span>(s.count(<span class="hljs-string">&#x27;p&#x27;</span>))     <span class="hljs-comment"># 计算子字符串出现的次数</span><br></code></pre></td></tr></table></figure><p>**split()、rsplit()、partition()、rpatition()**：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;a, b, c, d, e, hello&#x27;</span><br>li = s.split(<span class="hljs-string">&#x27;,&#x27;</span>)   <span class="hljs-comment"># 把字符串按指定分隔符分割，变成列表</span><br><span class="hljs-built_in">print</span>(li)<br><br>li = s.partition(<span class="hljs-string">&#x27;,&#x27;</span>)   <span class="hljs-comment"># 将字符串按指定的分隔符分割成三部分，分隔符前的字符串，分隔符，和分割符后的字符串，以元组形式</span><br><span class="hljs-built_in">print</span>(li)<br>li = s.rpartition(<span class="hljs-string">&#x27;,&#x27;</span>)<br><span class="hljs-built_in">print</span>(li)<br><br><span class="hljs-comment"># split()和rsplit()方法，如果不指定分隔符，则字符串中的任何空白符号(包括空格、换行符，制表符等)都会被认为是分隔符</span><br>s = <span class="hljs-string">&#x27;hello\t\tworld   I am\n\n\nclz&#x27;</span><br><span class="hljs-built_in">print</span>(s.split())<br><span class="hljs-built_in">print</span>(s.split(<span class="hljs-literal">None</span>, <span class="hljs-number">2</span>)) <span class="hljs-comment"># 指定最大分隔次数， None相当于不指定分隔符，即分隔符会是所有的空白字符</span><br></code></pre></td></tr></table></figure><p>**join()**：效率比直接使用’+’拼接高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># join()方法是将列表或其他可迭代对象中的字符串以指定的字符串连接， 如果当中含有非字符串的元素，则会抛出异常</span><br>li = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>]<br>sep = <span class="hljs-string">&#x27;::&#x27;</span><br><span class="hljs-built_in">print</span>(sep.join(li))<br></code></pre></td></tr></table></figure><p>**lower()、upper()、capitalize()、title()、swapcase()**：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;Hello World, hello python&#x27;</span><br><span class="hljs-built_in">print</span>(s.lower())    <span class="hljs-comment"># 转换成小写</span><br><span class="hljs-built_in">print</span>(s.upper())    <span class="hljs-comment"># 转化成大写</span><br><span class="hljs-built_in">print</span>(s.capitalize())   <span class="hljs-comment"># 字符串首字母大写</span><br><span class="hljs-built_in">print</span>(s.title())        <span class="hljs-comment"># 每个单词首字母大写</span><br><span class="hljs-built_in">print</span>(s.swapcase())     <span class="hljs-comment"># 大小写互换</span><br></code></pre></td></tr></table></figure><p>**replace()**：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">words = (<span class="hljs-string">&#x27;非法&#x27;</span>, <span class="hljs-string">&#x27;话&#x27;</span>, <span class="hljs-string">&#x27;暴力&#x27;</span>)<br>text = <span class="hljs-string">&#x27;这句话有非法内容&#x27;</span><br><br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:<br>    <span class="hljs-keyword">if</span> word <span class="hljs-keyword">in</span> text:<br>        text = text.replace(word, <span class="hljs-string">&#x27;**&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure><p><strong>maketrans()、translate()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">table = <span class="hljs-string">&#x27;&#x27;</span>.maketrans(<span class="hljs-string">&#x27;0123456789&#x27;</span>, <span class="hljs-string">&#x27;零一二三四五六七八九&#x27;</span>)    <span class="hljs-comment"># 生成字符映射表，可以搭配translate()使用，把字符串中第一个参数内的字符转换为对应第二个参数中的字符(转换过程是单向的)</span><br>s = <span class="hljs-string">&#x27;2021年10月1日&#x27;</span><br><span class="hljs-built_in">print</span>(s.translate(table))<br>s = <span class="hljs-string">&#x27;二零二一年一零月一日&#x27;</span><br><span class="hljs-built_in">print</span>(s.translate(table))<br></code></pre></td></tr></table></figure><p>**strip()、rstrip()、lstrip()**：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;  hello \n&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s))<br><span class="hljs-built_in">print</span>(s)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s.strip()))   <span class="hljs-comment"># 删除两端空白字符</span><br><span class="hljs-built_in">print</span>(s.strip())<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s.rstrip()))<br><span class="hljs-built_in">print</span>(s.rstrip())       <span class="hljs-comment"># 删除右端空白字符</span><br><br>s = <span class="hljs-string">&#x27;aabbccddffee&#x27;</span><br><span class="hljs-built_in">print</span>(s.lstrip(<span class="hljs-string">&#x27;ab&#x27;</span>))   <span class="hljs-comment"># 删除左端指定字符, 是按字符依次进行删除的，即先删除左端字符a，然后再删除左端字符b</span><br><span class="hljs-built_in">print</span>(s.lstrip(<span class="hljs-string">&#x27;ac&#x27;</span>))   <span class="hljs-comment"># 删除左端字符a后，因为c不在左端，所以不会删除c</span><br></code></pre></td></tr></table></figure><p>**eval()**：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;1 + 1&#x27;</span>))    <span class="hljs-comment"># eval()把任意字符串转换为Python表达式并求值</span><br><br>a = <span class="hljs-number">3</span><br>b = <span class="hljs-number">4</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;a + b&#x27;</span>))<br></code></pre></td></tr></table></figure><p>使用 eval()需要注意的问题：它可以计算任何合法表达式的值，即用户可以用特殊的字符串进行攻击</p><p><strong>in</strong>：</p><p>使用关键字来判断一个字符串是否在另一个字符串中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;abc&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;aabbcc&#x27;</span>)    <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;abc&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abcabc&#x27;</span>)    <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><p>**startswith()、endswith()**：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;Hello World!&quot;</span><br><span class="hljs-built_in">print</span>(s.startswith(<span class="hljs-string">&#x27;He&#x27;</span>))   <span class="hljs-comment"># 用来判断字符串是否以指定字符串开始</span><br><span class="hljs-built_in">print</span>(s.startswith(<span class="hljs-string">&#x27;He&#x27;</span>, <span class="hljs-number">5</span>))    <span class="hljs-comment"># 可以接收整数参数来限定字符串的检测范围</span><br><span class="hljs-built_in">print</span>(s.startswith(<span class="hljs-string">&#x27;He&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><p>其他方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1234abcd&#x27;</span>.isalnum())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1234abcd&#x27;</span>.isalpha())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1234abcd&#x27;</span>.isdigit())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;abcd&#x27;</span>.isalpha())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1234.053&#x27;</span>.isdigit())     <span class="hljs-comment"># 用来判断字符串是不是数字字符，小数点.不是数字字符，所以返回False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;00123400&#x27;</span>.isdigit())<br><span class="hljs-built_in">print</span>()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello world!&#x27;</span>.center(<span class="hljs-number">20</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello world!&#x27;</span>.center(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;=&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello world!&#x27;</span>.ljust(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;=&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello world!&#x27;</span>.rjust(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;=&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="1-3-字符串常量"><a href="#1-3-字符串常量" class="headerlink" title="1.3 字符串常量"></a>1.3 字符串常量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;数字: &#x27;</span>, string.digits)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;字母: &#x27;</span>, string.ascii_letters)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;特殊符号: &#x27;</span>, string.punctuation)<br><br><span class="hljs-comment"># 下面是生成8位长度的随机密码的例子</span><br><br>x = string.digits + string.ascii_letters + string.punctuation<br><br><span class="hljs-keyword">import</span> random<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([random.choice(x) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]))   <span class="hljs-comment"># random.choice() 方法返回一个列表，元组或字符串的随机项</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(random.sample(x, <span class="hljs-number">8</span>)))<br></code></pre></td></tr></table></figure><h2 id="2-正则表达式"><a href="#2-正则表达式" class="headerlink" title="2 正则表达式"></a>2 正则表达式</h2><p>正则表达式使用预定义的特定模式去匹配一类具有共同特征的字符串，主要用于字符串处理，可以快速、准确地完成复杂的查找、替换等处理任务。</p><h3 id="2-1-直接使用-re-模块函数"><a href="#2-1-直接使用-re-模块函数" class="headerlink" title="2.1 直接使用 re 模块函数"></a>2.1 直接使用 re 模块函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re       <span class="hljs-comment"># 在Python中，主要使用re模块来实现正则表达式的操作</span><br>text = <span class="hljs-string">&#x27;alpha,beta,gamma,delta&#x27;</span><br><span class="hljs-built_in">print</span>(re.split(<span class="hljs-string">&#x27;[,]+&#x27;</span>, text))       <span class="hljs-comment"># 根据匹配项分割字符串</span><br><br>pat = <span class="hljs-string">&#x27;[a-zA-Z]+&#x27;</span><br><span class="hljs-built_in">print</span>(re.findall(pat, text))    <span class="hljs-comment"># 在text中找符合pat的单词</span><br><br>pat = <span class="hljs-string">&#x27;&#123;name&#125;&#x27;</span><br>text = <span class="hljs-string">&#x27;Dear &#123;name&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(re.sub(pat, <span class="hljs-string">&#x27;clz&#x27;</span>, text))    <span class="hljs-comment"># 将text中的pat匹配项用第二个参数替换</span><br>s = <span class="hljs-string">&#x27;a s d&#x27;</span><br><span class="hljs-built_in">print</span>(re.sub(<span class="hljs-string">&#x27;a|s|d&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>, s))   <span class="hljs-comment"># 将s中的a、s、d替换成test</span><br><span class="hljs-built_in">print</span>(s)                            <span class="hljs-comment"># 不会改变原字符串</span><br><br><span class="hljs-built_in">print</span>(re.escape(<span class="hljs-string">&#x27;http://www.python.org&#x27;</span>))   <span class="hljs-comment"># 字符串转义</span><br><br><span class="hljs-built_in">print</span>(re.match(<span class="hljs-string">&#x27;a|b&#x27;</span>, <span class="hljs-string">&#x27;acgs&#x27;</span>))     <span class="hljs-comment"># re.match()在字符串的开始处匹配模式，匹配成功</span><br><span class="hljs-built_in">print</span>(re.match(<span class="hljs-string">&#x27;a|b&#x27;</span>, <span class="hljs-string">&#x27;cde&#x27;</span>))       <span class="hljs-comment"># 匹配不成功，返回None</span><br><br><span class="hljs-built_in">print</span>(re.match(<span class="hljs-string">&#x27;done|quit&#x27;</span>, <span class="hljs-string">&#x27;testdone&#x27;</span>))    <span class="hljs-comment"># 是在字符串的开始处进行匹配模式，所以会匹配不成功</span><br><span class="hljs-built_in">print</span>(re.search(<span class="hljs-string">&#x27;done|quit&#x27;</span>, <span class="hljs-string">&#x27;testdone&#x27;</span>))   <span class="hljs-comment"># re.search()在整个字符串中寻找模式，所以会匹配成功</span><br><br>text = <span class="hljs-string">&#x27;&#x27;&#x27;good</span><br><span class="hljs-string">bad</span><br><span class="hljs-string">test</span><br><span class="hljs-string">clz&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">r&#x27;\w+&#x27;</span>, text))<span class="hljs-comment"># r用来阻止转义</span><br><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">r&#x27;^\w+$&#x27;</span>, text))   <span class="hljs-comment"># \w不能匹配换行符,即有换行就会返回空列表，包括\n形式的换行</span><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">r&#x27;^.+$&#x27;</span>, text, re.S))      <span class="hljs-comment"># 单行模式，此时.可以匹配换行符，会把换行符变为\n</span><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">r&#x27;^.+$&#x27;</span>, text, re.M))      <span class="hljs-comment"># 多行模式，会把每一行变为列表中的元素</span><br><br></code></pre></td></tr></table></figure><h3 id="2-2-使用正则表达式对象"><a href="#2-2-使用正则表达式对象" class="headerlink" title="2.2 使用正则表达式对象"></a>2.2 使用正则表达式对象</h3><p>使用正则表达式对象的用法和正常使用 re 模块基本一样，首先通过 re 模块的 compile()函数将正则表达式编译生成正则表达式对象，然后再使用正则表达式对象提供的方法进行字符串处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>example = <span class="hljs-string">&#x27;ShanDong Institute of Business and Technology is a very beautiful school.&#x27;</span><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\bB\w+\b&#x27;</span>)   <span class="hljs-comment"># 以B开头的单词</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">\b表示匹配单词头或单词尾</span><br><span class="hljs-string">\w表示匹配任何字母、数字以及下划线</span><br><span class="hljs-string">+表示匹配位于+之前的字符或子模式的1次或多次重复</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(pattern.findall(example))<br><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\w+g\b&#x27;</span>)     <span class="hljs-comment"># 以g结尾的单词</span><br><span class="hljs-built_in">print</span>(pattern.findall(example))<br><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\b[a-zA-Z]&#123;3&#125;\b&#x27;</span>)    <span class="hljs-comment"># 3个字母长的单词</span><br><span class="hljs-built_in">print</span>(pattern.findall(example))<br><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\b\w*a\w*\b&#x27;</span>)        <span class="hljs-comment"># 查找所有含有字母a的单词</span><br><span class="hljs-built_in">print</span>(pattern.findall(example))<br></code></pre></td></tr></table></figure><h3 id="2-3-子模式与-Match-对象"><a href="#2-3-子模式与-Match-对象" class="headerlink" title="2.3 子模式与 Match 对象"></a>2.3 子模式与 Match 对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>telNumber = <span class="hljs-string">&#x27;&#x27;&#x27;Suppose my Phone No. is 0535-1234567,</span><br><span class="hljs-string">yours is 010-12344567, his is 025-123456789&#x27;&#x27;&#x27;</span><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;(\d&#123;3,4&#125;)-(\d&#123;7,8&#125;)&#x27;</span>)    <span class="hljs-comment"># 这里的字符串格式要注意：如,后不能跟空格，否则匹配不上。看了好久都没发现问题，最后才发现是自己的代码规范导致的</span><br><span class="hljs-built_in">print</span>(pattern.findall(telNumber))<br><br>email = <span class="hljs-string">&#x27;tony@tiremove_thisger.net&#x27;</span><br>m = re.search(<span class="hljs-string">&#x27;remove_this&#x27;</span>, email)     <span class="hljs-comment"># 利用re.search()返回的Match对象来删除字符串指定内容</span><br><span class="hljs-built_in">print</span>(email[:m.start()] + email[m.end():])<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Match对象的start()方法: 返回指定子模式内容的起始位置</span><br><span class="hljs-string">Match对象的end()方法: 返回指定子模式内容的结束位置的下一个位置</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>m = re.match(<span class="hljs-string">r&#x27;(\w+) (\w+)&#x27;</span>, <span class="hljs-string">&#x27;Isaac Newton, physicist&#x27;</span>)<br><span class="hljs-built_in">print</span>(m.group(<span class="hljs-number">0</span>))       <span class="hljs-comment"># 返回整个模式内容</span><br><span class="hljs-built_in">print</span>(m.group(<span class="hljs-number">1</span>))       <span class="hljs-comment"># 返回第1个子模式内容</span><br><span class="hljs-built_in">print</span>(m.group(<span class="hljs-number">2</span>))       <span class="hljs-comment"># 返回第2个子模式内容</span><br><span class="hljs-built_in">print</span>(m.group(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))    <span class="hljs-comment"># 返回指定的多个子模式的内容，元组形式</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">group(): 返回匹配的一个或多个子模式内容</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>m = re.match(<span class="hljs-string">r&#x27;(\d+)\.(\d+)&#x27;</span>, <span class="hljs-string">&#x27;12.3456&#x27;</span>)<br><span class="hljs-built_in">print</span>(m.groups())<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">groups(): 返回一个包含匹配的所有子模式内容的元组</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>m = re.match(<span class="hljs-string">r&#x27;(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)&#x27;</span>, <span class="hljs-string">&#x27;Malcolm Reynolds&#x27;</span>)     <span class="hljs-comment"># ?P&lt;groupname&gt;: 为子模式命名</span><br><span class="hljs-built_in">print</span>(m.groupdict())<br></code></pre></td></tr></table></figure><p>练习理解：使用正则表达找出 AABC 和 ABAC 类型的成员</p><p><img src="https://pic.imgdb.cn/item/616e4cdb2ab3f51d918f17bd.jpg"></p><p>首先，直接给出两个做法的答案</p><p><strong>做法 1</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">pattern = <span class="hljs-string">r&#x27;((.).\2.|(.)\3..)&#x27;</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> findall(pattern, text):<br>    <span class="hljs-built_in">print</span>(item[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p><strong>做法 2</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">pattern = <span class="hljs-string">r&#x27;(\b(?P&lt;F&gt;\w)\w(?P=F)\w\b|\b(?P&lt;D&gt;\w)(?P=D)\w\w\b)&#x27;</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> findall(pattern, text):<br>    <span class="hljs-built_in">print</span>(item[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>做法 1 讲解：</p><ol><li><p>首先，有一个会用到的重要概念，<b style="color: red">使用括号表示一个子模式</b></p></li><li><p>先 ABAC 类型(实际上 ABAB 也能匹配到，书上的也是这样，将错就错了，简单点)，小数点表示能匹配到除换行符的任意单个字符，所以先构建</p><p>正则表达式<code> pattern = r&#39;(..)&#39;</code></p></li><li><p>第三个应该要和第一个相同，所以不能直接<code>pattern = r&#39;(...)&#39;</code>, 这个时候就要用上正则表达式的复制粘贴功能了，首先，做好复制工作–<strong>用括号把要复制的部分包住</strong>，<code> pattern = r&#39;((.).)&#39;</code>, 然后是粘贴工作–反斜线加要粘贴的内容是第几个子模式，<code> pattern = r&#39;((.).\2)&#39;</code>,这里是 2 的原因就是上面说的重点了，<b style="color: red">使用括号表示一个子模式</b>，我们要把第二个括号里的东西复制粘贴，所以自然就是 2 了</p></li><li><p>第四个随便，所以正则表达式变成<code> pattern = r&#39;((.).\2.)&#39;</code></p></li><li><p>再 AABC 类型的，先加上’|’，<code>pattern = r&#39;((.).\2.|)&#39;</code>,<b style="color: red">这里的|左右不能有空格</b></p></li><li><p>之后的原理和上面的相同，需要注意的是：<b style="color: red">括号并不会重置为 0，才开始算，而是前面的括号也算</b>，所以变成<code> pattern = r&#39;((.).\2.|(.)\3..)&#39;</code></p></li><li><p>之后通过循环即可得到结果，因为 findall()是找出所有的匹配项，所以只需要 item[0]就行了</p></li></ol><p>做法 2 讲解：</p><ol><li>首先原理和做法 1 一样，不同的是复制粘贴的形式，做法 2 是先通过<code> (?P=&lt;groupname&gt;)</code>给要复制的内容命名，然后通过<code> (?P=groupname)</code>把内容粘贴过去</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机和网络(三) 数据链路层</title>
      <link href="/2021/10/20/computer-network-3/"/>
      <url>/2021/10/20/computer-network-3/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机和网络-三-——数据链路层"><a href="#计算机和网络-三-——数据链路层" class="headerlink" title="计算机和网络(三)——数据链路层"></a>计算机和网络(三)——数据链路层</h1><h2 id="1-使用点对点信道的数据链路层"><a href="#1-使用点对点信道的数据链路层" class="headerlink" title="1. 使用点对点信道的数据链路层"></a>1. 使用点对点信道的数据链路层</h2><p><strong>点对点信道</strong>：使用一对一的点对点通信方式</p><p>另一种信道：</p><p><strong>广播信道</strong>：</p><ul><li>使用一对多的广播通信方式</li><li>必须使用专用的共享信道协议来协调主机的数据发送</li></ul><p><img src="https://pic.imgdb.cn/item/61551ab92ab3f51d91313858.jpg"></p><h3 id="1-1-链路"><a href="#1-1-链路" class="headerlink" title="1.1 链路"></a>1.1 链路</h3><ul><li><p><strong>链路</strong>是一条无源的点到点的物理线路段，中间没有任何其他的交换节点。<b style="color: red">一条链路是一条通路的一个组成成分</b>。</p></li><li><p><strong>数据链路</strong>：除了物理线路外，还必须有通信协议来控制数据的传输。如果把这些协议的硬件和软件加到链路上，就构成了数据链路。如使用适配器(网卡)来实现协议的硬件和软件。</p></li><li><p><strong>物理链路</strong>：上面的链路</p></li><li><p><strong>逻辑链路</strong>：上面的数据链路，是物理链路加上必要的通信协议。(早期也被叫做<strong>通信规程</strong>)</p></li></ul><h3 id="1-2-帧"><a href="#1-2-帧" class="headerlink" title="1.2 帧"></a>1.2 帧</h3><p><img src="https://pic.imgdb.cn/item/61551cc42ab3f51d91333861.jpg"></p><h3 id="1-3-数据链路层协议三个基本问题"><a href="#1-3-数据链路层协议三个基本问题" class="headerlink" title="1.3 数据链路层协议三个基本问题"></a>1.3 数据链路层协议三个基本问题</h3><h4 id="1-3-1-封装成帧"><a href="#1-3-1-封装成帧" class="headerlink" title="1.3.1 封装成帧"></a>1.3.1 封装成帧</h4><p><strong>封装成帧</strong>就是在一段数据的前后分别添加首部和尾部，然后就构成一个帧。首部和尾部的作用是<b style="color: red">进行帧定界</b>。(首部是用来确定帧的数据部分是从哪里开始的，而尾部是用来确定数据部分什么时候结束)</p><p><img src="https://pic.imgdb.cn/item/61551e712ab3f51d9134e1d0.jpg"></p><ul><li>当数据是由可打印的 ASCII 码组成的文本文件时，帧定可以使用特殊的<strong>帧定界符</strong></li><li>控制字符 SOH(Start Of Header)放在帧的最前面，表示帧的首部开始，控制字符 EOT(End Of Transmission)表示帧的结束。</li></ul><h4 id="1-3-2-透明传输"><a href="#1-3-2-透明传输" class="headerlink" title="1.3.2 透明传输"></a>1.3.2 透明传输</h4><p>在数据链路层透明传送数据表示无论发送什么样的数据，这些数据都能够按照原样没有差错地通过数据链路层。</p><p>透明传输出现的问题：</p><p><img src="https://pic.imgdb.cn/item/61551f892ab3f51d9136208d.jpg"></p><p><strong>解决透明传输问题</strong>：</p><ul><li>解决办法：<b style="color: red">字节填充或字符填充</b></li><li>发送端的数据链路层在<b style="color: red">数据</b>中出现 SOH 或 EOT 的前面<strong>插入一个转义字符 ESC</strong>。(先把 SOH 和 EOT 的作用屏蔽掉，之后再把转义字符去掉，恢复功能)</li><li>接收端的数据链路层在将数据送往网络层之前删除插入的转义字符</li><li>如果转义字符也出现在数据中，也要在转义字符之前插入一个 ESC。当接收端收到连续的两个转义字符时，就删除前面的一个转义字符。</li></ul><p><img src="https://pic.imgdb.cn/item/6155225e2ab3f51d913978b9.jpg"></p><h4 id="1-3-3-差错控制"><a href="#1-3-3-差错控制" class="headerlink" title="1.3.3 差错控制"></a>1.3.3 差错控制</h4><p>在传输过程中可能会产生<strong>比特差错</strong>：1 可能会变成 0，而 0 也可能会变成 1。</p><ul><li><strong>误码率 BER</strong>(Bit Error Rate)：在一段时间内，传输错误的比特占所传输比特总数的比率</li><li>在数据链路层传送的帧中，广泛使用了<b style="color: red">循环冗余检验 CRC</b>的检错技术。</li></ul><p><strong>循环冗余检验的原理</strong>：</p><ul><li><p>在发送端，先把数据划分为组</p></li><li><p>在魅族后面再添加供差错检测用的 n 位冗余码，然后一起发送出去</p></li></ul><p>冗余码的计算示例：</p><p><img src="https://pic.imgdb.cn/item/6159bf202ab3f51d917c7321.jpg"></p><p><img src="https://pic.imgdb.cn/item/6159bf302ab3f51d917c965d.jpg"></p><p><strong>帧检验序列 FCS</strong>：</p><ul><li><strong>帧检验序列</strong>：在数据后面添加的冗余码</li><li>循环冗余检验 CRC 和帧检验序列<strong>不相同</strong><ol><li>CRC 是一种常用检错方法，而 FCS 是添加在数据后面的冗余码</li><li>FCS 可以用 CRC 得出，但 CRC 并不是获得 FCS 的唯一方法</li></ol></li></ul><p><b style="color: red">单纯使用 CRC 差错检测技术不能实现”无差错传输”或”可靠传输”</b></p><p><b style="color: red">“无比特差错”和”无传输差错”是不同的概念。</b></p><p>在数据链路层使用 CRC 检验，能够实现<strong>无比特差错</strong>的传输，但不是<strong>可靠传输</strong></p><h2 id="2-点对点协议-PPP"><a href="#2-点对点协议-PPP" class="headerlink" title="2. 点对点协议 PPP"></a>2. 点对点协议 PPP</h2><h3 id="2-1-PPP-的特点"><a href="#2-1-PPP-的特点" class="headerlink" title="2.1 PPP 的特点"></a>2.1 PPP 的特点</h3><ul><li>点对点的链路使用最广泛的数据链路层协议是<strong>点对点协议 PPP</strong></li><li>PPP 协议在 1994 年成为互联网的正式标准</li></ul><h4 id="2-1-1-PPP-协议要满足的要求"><a href="#2-1-1-PPP-协议要满足的要求" class="headerlink" title="2.1.1 PPP 协议要满足的要求"></a>2.1.1 PPP 协议要满足的要求</h4><ol><li><b style="color: red">简单</b></li><li>封装成帧：必须规定特殊的字符作为帧定界符</li><li>透明性：必须保证数据传输的透明性</li><li>多种网络层协议：能够在同一条物理链路上同时支持多种网络层协议</li><li>多种类型链路：可以在多种类型的链路上运行</li><li>差错检验：能够对接收端收到的帧进行检测，并立即丢弃有差错的帧</li><li>…</li></ol><h4 id="2-1-2-PPP-协议的组成"><a href="#2-1-2-PPP-协议的组成" class="headerlink" title="2.1.2 PPP 协议的组成"></a>2.1.2 PPP 协议的组成</h4><ul><li>一个将 IP 数据报封装到串行链路的方法</li><li>链路控制协议 LCP</li><li>网络控制协议 NCP</li></ul><h3 id="2-2-PPP-协议的帧格式"><a href="#2-2-PPP-协议的帧格式" class="headerlink" title="2.2 PPP 协议的帧格式"></a>2.2 PPP 协议的帧格式</h3><ul><li>PPP 帧的首部和尾部分别为 4 个字段和 2 个字段</li><li>标志字段 F=0x7E</li><li>地址字段 A=0xFF</li><li>控制字段 C=0x03</li><li><b style="color: red">PPP 是面向字节的，所有的 PPP 帧的长度都是整数字节</b></li></ul><p><img src="https://pic.imgdb.cn/item/6162ab612ab3f51d91aac337.jpg"></p><p><strong>实现透明传输</strong>：</p><ul><li><p>当 PPP 用在异步传输时，采用一种特殊的<strong>字符填充法</strong>（P79）</p><p><img src="https://pic.imgdb.cn/item/6162ad6a2ab3f51d91ad8fed.jpg"></p></li><li><p>当 PPP 用在同步传输链路时，采用<strong>零比特填充</strong>来实现透明传输(P80)</p><p><img src="https://pic.imgdb.cn/item/6162ad7c2ab3f51d91ada933.jpg"></p></li></ul><h2 id="3-使用广播信道的数据链路层"><a href="#3-使用广播信道的数据链路层" class="headerlink" title="3. 使用广播信道的数据链路层"></a>3. 使用广播信道的数据链路层</h2><h3 id="3-1-局域网的数据链路层"><a href="#3-1-局域网的数据链路层" class="headerlink" title="3.1 局域网的数据链路层"></a>3.1 局域网的数据链路层</h3><p>局域网主要特点：</p><ul><li>网络为一个单位所拥有</li><li>地理范围和站点数据都有限</li></ul><h4 id="3-1-1-以太网的两个标准"><a href="#3-1-1-以太网的两个标准" class="headerlink" title="3.1.1 以太网的两个标准"></a>3.1.1 以太网的两个标准</h4><ol><li><p><b style="color: red">DIX Ethernet V2</b>是世界上第一个局域网产品(以太网)的规约</p></li><li><p><b style="color: red">IEEE 802.3</b>是第一个 IEEE 的以太网标准</p><p><strong>严格来说，以太网值得应该是符合 DIX Ethernet V2 标准的局域网</strong></p></li></ol><h4 id="3-1-2-适配器"><a href="#3-1-2-适配器" class="headerlink" title="3.1.2 适配器"></a>3.1.2 适配器</h4><p>网络接口板又称为<strong>通信适配器</strong>或<strong>网络接口卡</strong>NIC, 或<strong>网卡</strong></p><p><strong>适配器的功能</strong>：</p><ol><li>进行串行/并行转换</li><li>对数据进行缓存</li><li>在计算机的操作系统安装设备驱动程序</li><li>实现以太网协议</li></ol><h3 id="3-2-CSMA-CD-协议"><a href="#3-2-CSMA-CD-协议" class="headerlink" title="3.2 CSMA/CD 协议"></a>3.2 CSMA/CD 协议</h3><h4 id="3-2-1-背景"><a href="#3-2-1-背景" class="headerlink" title="3.2.1 背景"></a>3.2.1 背景</h4><p>最初的以太网是将很多台计算机连接到一根总线上。但是，当很多台计算机同时发送时，会发生碰撞或冲突，导致发送失败。</p><h4 id="3-2-2-以太网采取的两种重要的措施"><a href="#3-2-2-以太网采取的两种重要的措施" class="headerlink" title="3.2.2 以太网采取的两种重要的措施"></a>3.2.2 以太网采取的两种重要的措施</h4><ul><li>采用较为灵活的<strong>无连接的工作方式</strong></li><li>以太网发送的数据都是用<strong>曼彻斯特编码</strong></li></ul><h4 id="3-2-3-CSMA-CD"><a href="#3-2-3-CSMA-CD" class="headerlink" title="3.2.3 CSMA/CD"></a>3.2.3 CSMA/CD</h4><p>CSMA/CD 含义：<strong>载波监听多点接入/碰撞检测</strong></p><ul><li><strong>载波监听</strong>：指每一个站在发送数据之前先要检测以下总线上是否有其他计算机在发送数据，如果有，则先不发送数据，避免发生碰撞</li><li><strong>多点接入</strong>：表示许多计算机以多点接入的方式连接在一根总线上</li><li><strong>碰撞检测</strong>：是计算机边发送数据边检测信道上的信号电压大小。当几个站同时在总线上发送数据时，总线上的信号电压摆动值会增大。所以，当信号电压摆动值超过一定值时，并认为总线上至少右两个站在同时发送数据，表明产生了碰撞。</li></ul><p>因为发送碰撞后，总线上传输的信号会产生严重的失真，无法会恢复出有用的信息。所以，一旦发现总线上出现了碰撞，就要<b style="color: red">立即停止发送</b>，然后<b style="color: red">等待一段随机时间</b>后再次发送。</p><p><img src="https://pic.imgdb.cn/item/6162c64e2ab3f51d91cd896a.jpg"></p><p><strong>争用期</strong>：</p><ul><li>最先发送数据帧的站，在发送数据后<strong>至多</strong>经过时间**2i(两倍的 1 端到端往返时延)**就可以知道发送的数据帧有没有发生碰撞</li><li><strong>争用期</strong>：以太网的端到端的往返时延 2i</li><li><strong>经过争用期的这段时间还没有检测到碰撞的话，才可以肯定这次发送不会发生碰撞</strong></li></ul><p>以太网使用<strong>截断二进制指数退避</strong>算法来确定重传的时机。(P88)</p><p><strong>10Mbit/s 以太网争用期的长度</strong>：</p><ul><li>10Mbit/s 以太网取 51.2μs 为争用期的长度</li><li>对于 10Mbit/s 的以太网，在争用期内可以发送 512bit，即 64 字节</li></ul><p><b style="color: red">即以太网在发送数据时，若前 64 字节没有发生冲突，则之后的数据也不会发生冲突。</b></p><p><b style="color: red">以太网规定了最短有效帧长为 64 字节，凡是长度小于 64 字节的帧都是由于冲突而异常中止的无效帧</b></p><p><strong>CSMA/CD 协议的重要特性</strong>：</p><ul><li>使用 CSMA/CD 协议的以太网不能进行全双工通信而<strong>只能进行半双工通信</strong>（双向交替通信）</li><li>每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性</li></ul><p><img src="https://pic.imgdb.cn/item/61639cbc2ab3f51d91dccae2.jpg"></p><h4 id="3-2-4-以太网的-MAC-层"><a href="#3-2-4-以太网的-MAC-层" class="headerlink" title="3.2.4 以太网的 MAC 层"></a>3.2.4 以太网的 MAC 层</h4><p><strong>1. MAC 层的硬件地址</strong></p><ul><li>在局域网中，<strong>硬件地址</strong>又称为<strong>物理地址</strong>，或<strong>MAC 地址</strong></li></ul><p><strong>45 位的 MAC 地址</strong>：</p><ul><li><p>IEEE802 标准规定 MAC 地址字段可以采用 6 字节(48 位)或 2 字节(16 位)这两种中的一种</p></li><li><p>地址字段 6 个字节中的前 3 个字节，是 IEEE 的注册管理机构 RA 向厂家分配的，称为<strong>组织唯一标识符</strong></p></li><li><p>地址字段 6 个字节中的后 3 个字节由厂家自行指派，称为<strong>扩展唯一标识符</strong>，<strong>必须保证生产出的适配器没有重复地址</strong></p><p><img src="https://pic.imgdb.cn/item/61666c722ab3f51d913e5d8a.jpg"></p></li></ul><p><strong>适配器检查 MAC 地址</strong>：</p><ul><li><p>适配器从网络上每收到一个 MAC 帧就首先用硬件检查 MAC 帧中的 MAC 地址</p><p>如果是<strong>发往本站的帧</strong>则收下， 否则就将此帧丢弃。</p><p><strong>发往本站的帧包括三种</strong>：</p><ol><li>单播帧(一对一)</li><li>广播帧(一对全体)</li><li>多播帧(一对多)</li></ol></li><li><p><strong>所有的适配器都能够识别单播地址和广播地址</strong></p></li><li><p>只有目的地址才能使用广播地址和多播地址</p></li></ul><h4 id="3-2-5-MAC-帧的格式"><a href="#3-2-5-MAC-帧的格式" class="headerlink" title="3.2.5 MAC 帧的格式"></a>3.2.5 MAC 帧的格式</h4><p>两种标准：</p><ul><li><strong>DIX Ethernet V2 标准</strong></li><li><strong>IEEE 的 802.3 标准</strong></li></ul><p>最常用的 MAC 帧是<b style="color: red">以太网 V2 的格式</b></p><p><img src="https://pic.imgdb.cn/item/6167b3b52ab3f51d91c817c5.jpg"></p><p><strong>类型字段</strong>：用来标志上一层使用的是什么协议</p><p><strong>数据字段</strong>：46 ~ 1500 字节</p><p><strong>数据字段的最小长度(46 字节) = 最小长度 64 字节 - 18 字节的首部和尾部</strong></p><p>至于最小长度为什么是 64 字节，参考 CSMA/CD 协议的争用期部分</p><p>当数据字段的长度小于 46 字节时，应在数据字段的后面加入整数字节的<strong>填充字段</strong>，以保证以太网的 MAC 帧长不小于 64 字节，不会被当成无效帧</p><p><strong>无效的 MAC 帧</strong>：</p><ul><li>数据字段的长度与长度字段的值不一致</li><li>帧的长度不是整数个字节</li><li>用帧检验序列 FCS 查出有差错</li><li>数据字段的长度不在 46 ~ 1500 字节之间</li><li>MAC 帧长度不再 64 ~ 1518 字节之间</li></ul><p><strong>帧间最小间隔</strong>：</p><ul><li>帧最小间隔为 9.6us，相当于 96bit 的发送时间</li><li>一个站在检测到总线开始空闲后，还要等待 9.6us 后才能再次发送数据</li><li>目的：清理前一个的接收缓存，做好接收下一帧的准备</li></ul><h2 id="4-扩展的以太网"><a href="#4-扩展的以太网" class="headerlink" title="4. 扩展的以太网"></a>4. 扩展的以太网</h2><h3 id="4-1-在物理层扩展以太网"><a href="#4-1-在物理层扩展以太网" class="headerlink" title="4.1 在物理层扩展以太网"></a>4.1 在物理层扩展以太网</h3><h4 id="4-1-1-使用光纤扩展"><a href="#4-1-1-使用光纤扩展" class="headerlink" title="4.1.1 使用光纤扩展"></a>4.1.1 使用光纤扩展</h4><p>主机使用光纤和一对光纤调制解调器连接到集线器</p><p><img src="https://pic.imgdb.cn/item/6168f2bb2ab3f51d919fac2c.jpg"></p><h4 id="4-1-2-使用集线器扩展"><a href="#4-1-2-使用集线器扩展" class="headerlink" title="4.1.2 使用集线器扩展"></a>4.1.2 使用集线器扩展</h4><p>将多个以太网连成更大的、多级星形结构的以太网</p><p><img src="https://pic.imgdb.cn/item/6168f3062ab3f51d919fff67.jpg"></p><p><strong>优点</strong>：</p><ul><li>使原来属于不同碰撞域的以太网上的计算机能够进行跨碰撞域的通信</li><li>扩大了以太网覆盖的地理范围</li></ul><p><strong>缺点</strong>：</p><ul><li>碰撞域增大了，但是总的吞吐量并没有提高</li><li>如果不同的碰撞使用不同的数据率，就不能用集线器把它们互连起来</li></ul><h3 id="4-2-在数据链路层扩展以太网"><a href="#4-2-在数据链路层扩展以太网" class="headerlink" title="4.2 在数据链路层扩展以太网"></a>4.2 在数据链路层扩展以太网</h3><p>在数据链路层扩展以太网<strong>更常用</strong></p><p>早期使用网桥，现在使用以太网交换机</p><p><img src="https://pic.imgdb.cn/item/6168f4362ab3f51d91a163b4.jpg"></p><h4 id="4-2-1-网桥"><a href="#4-2-1-网桥" class="headerlink" title="4.2.1 网桥"></a>4.2.1 网桥</h4><ul><li>网桥工作在数据链路层</li><li>根据 MAC 帧的目的地址对收到的帧进行转发和过滤</li><li>当网桥收到一个帧时，不会向所有的接口转发这个帧，而是先检查这个帧的目的 MAC 地址，然后确定要把它转发到哪一个接口，或丢弃它。</li></ul><h4 id="4-2-2-以太网交换机"><a href="#4-2-2-以太网交换机" class="headerlink" title="4.2.2 以太网交换机"></a>4.2.2 以太网交换机</h4><p>实质就是一个<strong>多接口的网桥</strong></p><p><strong>优点</strong>：</p><ul><li><p>用户独享带宽，增加了总容量</p><p><img src="https://pic.imgdb.cn/item/6168f67c2ab3f51d91a42fa4.jpg"></p></li><li><p>从共享总线以太网转到交换式以太网时，所有接入设备的软件和硬件、适配器等都不需要做任何改动</p></li><li><p>一般有多种速率的接口</p></li></ul><p><strong>以太网的交换方式</strong>：</p><ul><li>存储转发方式：将整个数据帧先缓存后再进行处理</li><li>直通方式：接收数据帧的同时，立即按数据帧的目的 MAC 地址决定该帧的转发接口，提高了帧的转发速度，可能会把一些无效帧也转发给其他的站</li></ul><p>**以太交换机的自学习功能(p100 或 ppt139)**：</p><p><img src="https://pic.imgdb.cn/item/6168f8252ab3f51d91a63ff9.jpg"></p><h4 id="4-2-3-从总线以太网到星形以太网"><a href="#4-2-3-从总线以太网到星形以太网" class="headerlink" title="4.2.3 从总线以太网到星形以太网"></a>4.2.3 从总线以太网到星形以太网</h4><ul><li>早期以太网采用无源的总线结构，现在采用以太网交换机的星形结构</li><li>总线以太网使用 CSMA/CD 协议，以半双工方式工作</li><li>以太网交换机不使用共享总线，没有碰撞问题，所以不使用 CSMA/CD 协议，以全双工方式工作。<b style="color: red">仍然采用以太网的帧结构</b></li></ul><h3 id="4-3-虚拟局域网"><a href="#4-3-虚拟局域网" class="headerlink" title="4.3 虚拟局域网"></a>4.3 虚拟局域网</h3><p>虚拟局域网 VLAN 是由一些局域网网段构成的<strong>与物理位置无关的逻辑组</strong>，而这些网段具有某些共同的需求。</p><p><b style="color: red">虚拟局域网只是局域网给用户提供的一种服务，而不是一种新型局域网</b></p><p><strong>虚拟局域网(VLAN)的主要优点</strong>：</p><ul><li>改善了性能</li><li>简化了管理</li><li>降低了成本</li><li>改善了安全性</li></ul><p><strong>划分虚拟局域网的方法(ppt162)</strong></p><ul><li>基于交换机端口</li><li>基于计算机网卡的 MAC 地址</li><li>基于协议类型</li><li>基于 IP 子网地址</li><li>基于高层应用或服务</li></ul><h2 id="5-高速以太网"><a href="#5-高速以太网" class="headerlink" title="5. 高速以太网"></a>5. 高速以太网</h2><p>高速以太网：速率达到或超过 100Mbit/s 的以太网</p><h3 id="5-1-100BASE-T-以太网"><a href="#5-1-100BASE-T-以太网" class="headerlink" title="5.1 100BASE-T 以太网"></a>5.1 100BASE-T 以太网</h3><p>100BASE-T 以太网也叫<strong>快速以太网</strong>，代号为<strong>IEEE 802.3u</strong></p><p><strong>特点</strong>：</p><ul><li>可在全双工方式下工作而无冲突发生。<strong>在全双工方式下工作时，不使用 CSMA/CD 协议</strong></li><li><strong>MAC 帧格式仍然是 802.3 标准规定的</strong></li><li>保持最短帧长不变，将一个网段的最大电缆长度减小到 100 米</li><li>帧间时间间隔从原来的 9.6 us 改为现在的 0.96 us</li></ul><h3 id="5-2-吉比特以太网"><a href="#5-2-吉比特以太网" class="headerlink" title="5.2 吉比特以太网"></a>5.2 吉比特以太网</h3><ul><li><p>允许在 1 Gbit/s 下以全双工和半双工两种方式工作</p></li><li><p>使用 IEEE 802.3 协议规定的帧格式</p></li><li><p><strong>在半双工方式下使用 CSMA/CD 协议，全双工方式下不使用 CSMA/CD 协议</strong></p></li><li><p>为了保持 64 字节最小帧长度，以及 100 米的网段的最大长度，吉比特以太网增加了<b style="color: red">载波延伸</b>和<b style="color: red">分组突发</b>两个功能（当吉比特以太网工作在全双工方式时，不需要这两个功能）</p><p><strong>载波延伸</strong>：使最短帧长仍为 64 字节，同时<strong>将争用期长度增长为 512 字节</strong></p><p><strong>分组突发</strong>：当很多短帧要发送时，第一个短帧要采用载波延伸方法进行填充，随后的一些短帧可以一个接一个地发送，只需留必要的帧间最小间隔</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机与网络(二) 物理层</title>
      <link href="/2021/10/20/computer-network-2/"/>
      <url>/2021/10/20/computer-network-2/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机与网络-二-——物理层"><a href="#计算机与网络-二-——物理层" class="headerlink" title="计算机与网络(二) ——物理层"></a>计算机与网络(二) ——物理层</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h2><p>物理层考虑的是怎样才能在连接各种计算机的传播媒体上<b style="color: red">传输数据比特流</b>，而<b style="color: red">不是指具体的传输媒体</b></p><p><b style="color: red">作用</b>：尽可能屏蔽掉不同传输媒体和通信手段的差异</p><p>用于物理层的协议也被称为物理层规程（一样意思，不同称呼而已）</p><h3 id="物理层的主要任务"><a href="#物理层的主要任务" class="headerlink" title="物理层的主要任务"></a>物理层的主要任务</h3><p><b style="color: red">  确定与传输媒体的接口的一些特性</b></p><ul><li>机械特性</li><li>电气特性</li><li>功能特性</li><li>过程特性</li></ul><h2 id="2-数据通信的基础知识"><a href="#2-数据通信的基础知识" class="headerlink" title="2 数据通信的基础知识"></a>2 数据通信的基础知识</h2><h3 id="2-1-数据通信系统的模型"><a href="#2-1-数据通信系统的模型" class="headerlink" title="2. 1 数据通信系统的模型"></a>2. 1 数据通信系统的模型</h3><p>包括三大部分：</p><ul><li>源系统（发送端、发送方）</li><li>传输系统（传输网络）</li><li>目的系统（接收端、接收方）</li></ul><p><img src="https://pic.imgdb.cn/item/6142fd742ab3f51d9120cb0d.jpg"></p><h4 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h4><ol><li><strong>数据</strong>：运送信息的实体</li><li><strong>信号</strong>：数据的电气的或电磁的表现</li><li><strong>模拟信号</strong>：代表消息的参数的取值是连续的</li><li><strong>数字信号</strong>：代表消息的参数的取值是离散的</li><li><strong>码元</strong>：在使用时间域（或时域）的波形表示数字信号时，代表不同离散数值的基本波形。</li></ol><h3 id="2-2-关于信道的基本概念"><a href="#2-2-关于信道的基本概念" class="headerlink" title="2.2 关于信道的基本概念"></a>2.2 关于信道的基本概念</h3><ol><li><p><strong>信道</strong>：一般用来表示向某一个方向传送信息的媒体</p></li><li><p><strong>单向通信（单工通信）</strong>：只能由一个方向的通信</p></li><li><p><strong>双向交替通信（半双工通信）</strong>：两个方向的通信，但是，<b style="color: red">通信双方不能同时发送和接收</b></p></li><li><p><strong>双向同时通信（全双工通信）</strong>：两个方向的通信，通信双方可以同时发送和接收信息</p></li><li><p><strong>基带信号（即基本频带信号）</strong>：来自信源的信号。如计算机输出的代表文字和图像文件的数据信号</p></li><li><p><strong>调制</strong>：基带信号会含有低频信号甚至直流信号，很多信道不能传输低频分量或直流分量，所以需要对基带信号进行调制。</p><p>调制分为两大类：</p><ul><li><strong>基带调制</strong>：只对基带信号的波形进行变换，使它能够与信道特性相适应。<b style="color: red">变化后的信号还是基带信号</b>。过程称为编码。</li><li><strong>带通调制</strong>：使用载波进行调制，把基带信号的频率搬到较高的频段，并<b style="color: red">转换为模拟信号</b>，就能更好地在模拟信道中传输（仅在一段频率范围内能够通过信道）。（低频信号或直流信号不能传输，所以使用载波，把它带过去高频区）</li><li><strong>带通信号</strong>：经过载波调制后的信号</li></ul></li></ol><h4 id="2-2-1-常用的编码方式"><a href="#2-2-1-常用的编码方式" class="headerlink" title="2.2.1 常用的编码方式"></a>2.2.1 常用的编码方式</h4><ol><li><p><strong>不归零制</strong>：正电平表示 1，负电平表示 0</p></li><li><p><strong>归零制</strong>：正脉冲代表 1，负脉冲表示 0</p></li><li><p><strong>曼彻斯特编码</strong>：位周期中心的向上跳表示 0，位周期中心的向下跳表示 1.也可以反过来定义。</p></li><li><p><strong>差分曼彻斯特编码</strong>：位周期中心仍然有跳变。位开始时，边界有跳变表示 0，边界没有跳变表示 1。</p><p><img src="https://pic.imgdb.cn/item/614305502ab3f51d912baafc.jpg"></p></li></ol><ul><li>由上图，曼彻斯特编码和差分曼彻斯特编码产生的信号频率比不归零制高</li><li>不归零制不能从信号波形本身中提取信号时钟频率（没有自同步能力），<b style="color: red">曼彻斯特编码和差曼彻斯特编码具有自同步能力</b></li></ul><h4 id="2-2-2-基本的带通调制方法"><a href="#2-2-2-基本的带通调制方法" class="headerlink" title="2.2.2 基本的带通调制方法"></a>2.2.2 基本的带通调制方法</h4><ol><li><strong>调幅（AM）</strong>：载波的振幅随基带数字信号而变化</li><li><strong>调频（FM）</strong>：载波的频率随基带数字信号的变化而变化</li><li><strong>调相（PM</strong>）：载波的初始相位随基带数字信号的变化而变化</li></ol><p><img src="https://pic.imgdb.cn/item/614307462ab3f51d912e3d11.jpg"></p><h5 id="正交振幅调制-QAM"><a href="#正交振幅调制-QAM" class="headerlink" title="正交振幅调制 QAM"></a>正交振幅调制 QAM</h5><p>作用：达到更高的信息传输速率</p><p><img src="https://pic.imgdb.cn/item/6144261a2ab3f51d9190701d.jpg"></p><p>由上图：</p><ul><li><p>可供选择的相位有 12 种，即 0，30°，60°，…，360°</p></li><li><p>对于每一种相位有 1 或 2 种振幅可供选择。总共有 16 种组合，即 16 个码元。</p><ul><li><p>上图中选的相位只有一种振幅选择</p></li><li><p>上图中<b style="color: red">红箭头</b>的相位有 2 种振幅选择</p><p><img src="https://pic.imgdb.cn/item/614427982ab3f51d919296ff.jpg"></p></li></ul></li><li><p>由于 4bit 编码共有 16 种不同的组合，所以上图的 16 个点中的每一个点都可以对应 1 种 4bit 的编码。数据传输率可提高 4 倍。</p></li></ul><p><b style="color: red">码元不是越多越好</b>，物极必反，当每一个码元对应的比特数越多，在接收端进行解调时要正确识别每一种状态就会越困难，出错率也会增加。</p><h4 id="2-2-3-信道的极限容量"><a href="#2-2-3-信道的极限容量" class="headerlink" title="2.2.3 信道的极限容量"></a>2.2.3 信道的极限容量</h4><p>码元传输的速率越大，或信号传输的距离越远，或传输媒体质量越差，在信道的输出端的波形的失真就会越严重。</p><p><img src="https://pic.imgdb.cn/item/614429cf2ab3f51d9195bc50.jpg"></p><h5 id="限制码元在信道上的传输速率的因素"><a href="#限制码元在信道上的传输速率的因素" class="headerlink" title="限制码元在信道上的传输速率的因素"></a>限制码元在信道上的传输速率的因素</h5><ol><li><p><strong>信道能够通过的频率范围</strong></p><ul><li>奈氏准则</li><li>在任何信道中，<b style="color: red">码元传输的速率是有上限的</b>，否则会出现<b style="color: red">码间串扰</b>的问题，使接收端对码元的识别成为不可能。</li><li>信道的频带越宽，即能够通过的信号高频分量越多，就可以用更高的速率传送码元而不出现码间串扰。</li></ul></li><li><p><strong>信噪比</strong></p><ul><li><b style="color: red">信噪比</b>是信号的平均功率和噪声的平均功率之比。记为 S/N，单位为分贝(db)</li></ul><p><img src="https://pic.imgdb.cn/item/61442c9d2ab3f51d919a067f.jpg"></p><ul><li><p>香农公式：香农用信息论推导出，带宽受限且有高斯白噪声干扰的信道的<b style="color: red">极限</b>、<b style="color: red">无差错</b>的信息传输速率</p></li><li><p>信道的极限信息传输速率 C 可以表示为：</p><p><img src="https://pic.imgdb.cn/item/61442d922ab3f51d919b6c03.jpg"></p><p><strong>香农公式表明</strong>：</p><ul><li>信道的带宽或信道的信噪比越大，信息的极限速率越大</li><li>只要信息传输速率低于信道的极限信息传输速率，就一定可以找到方法来实现无差错的传输</li><li>如果信道带宽 W 或信噪比 S/N 没有上限，则信道的极限信息传输速率 C 也没有上限（理论上）</li></ul><p>对于频带宽度已经确定的信道，如果信噪比和码元传输速率都已经达到了上限，可以通过<b style="color: red">用编码的方法让每一个马原携带更多比特的信息量</b>来提高信息的传输速率。</p></li></ul></li></ol><h2 id="3-物理层下的传输媒体"><a href="#3-物理层下的传输媒体" class="headerlink" title="3 物理层下的传输媒体"></a>3 物理层下的传输媒体</h2><ul><li><strong>传输媒体</strong>：又称传输介质或传输媒介。它是数据传输系统中发送器和接收器之间的物理通路。</li><li>传输媒体可分为导引型传输媒体和非导引型传输媒体。</li><li>在导引型传输媒体中，电磁波被导引沿着固体媒体（铜线或光纤）传播。</li><li>非导引型传输媒体是指自由空间。在非导引型传输媒体中，电磁波的传输被称为无线传输。</li></ul><h3 id="3-1-导引型传输媒体"><a href="#3-1-导引型传输媒体" class="headerlink" title="3.1 导引型传输媒体"></a>3.1 导引型传输媒体</h3><ol><li><strong>双绞线</strong>：<ul><li>最常用的传输媒体</li><li>模拟传输和数字传输都可以使用双绞线，通信距离为几到十几公里</li><li><strong>屏蔽双绞线 STP</strong></li><li><strong>无屏蔽双绞线 UTP</strong></li><li>双胶线标准规定了 5 各种类的 UTP 标准（从 1 类线到 5 类线），现在最常用的 UTP 是 5 类线。</li></ul></li></ol><p><img src="https://pic.imgdb.cn/item/614440bd2ab3f51d91b81ae5.jpg"></p><ol start="2"><li><strong>同轴电缆</strong>：<ul><li>同轴电缆具有很好的抗干扰特性，被广泛用于传输较高速率的数据</li><li>同轴电缆的带宽取决于电缆的质量</li><li><strong>50Ω 同轴电缆</strong>：LAN / 数字传输常用</li><li><strong>75Ω 同轴电缆</strong>：有线电视 / 模拟传输常用</li></ul></li></ol><p><img src="https://pic.imgdb.cn/item/614442042ab3f51d91ba0487.jpg"></p><ol start="3"><li><p><strong>光缆</strong>：</p><ul><li><p>光纤是光纤通信的传输媒体</p></li><li><p>光纤通信系统的传输带宽远远大于目前其他传输媒体的带宽：原因：可见光的频率非常高，10<sup>8</sup>MHz 的量级。</p></li><li><p><strong>工作原理</strong>：只要从纤芯中射到纤芯表面的光线的入射角大于某个临界角度，就可以产生全反射。</p><p><img src="https://pic.imgdb.cn/item/614443f52ab3f51d91bcc4d2.jpg"></p></li><li><p><strong>多模光纤</strong>：可以存在多条不同角度入射的光线在一条光纤中传输</p></li><li><p><strong>单模光纤</strong>：光线一直向前传播，不会产生多次反射。</p></li><li><p><strong>优点</strong>：</p><ol><li>通信容量很大</li><li>传输损耗小，中继距离长</li><li>抗雷电和电磁干扰性好</li><li>没有<a href="https://zhidao.baidu.com/question/521596849.html">串音干扰</a>，保密性好</li><li>体积小，重量轻</li></ol></li></ul></li></ol><h3 id="3-2-非导引型传输媒体"><a href="#3-2-非导引型传输媒体" class="headerlink" title="3.2 非导引型传输媒体"></a>3.2 非导引型传输媒体</h3><ul><li>自由空间</li><li>无线传输使用的频段很广</li><li>短波通信（高频通信）主要靠电离层的反射，短波信道的通信质量较差，传输速率小</li><li>微波在空间主要是直线传播</li><li>传统微波通信有两种方式：<ol><li>地面微波接力通信</li><li>卫星通信</li></ol></li></ul><h2 id="4-信道复用技术"><a href="#4-信道复用技术" class="headerlink" title="4 信道复用技术"></a>4 信道复用技术</h2><p>复用是指允许用户使用一个共享信道进行通信，从而降低成本，提高利用率。</p><p><img src="https://pic.imgdb.cn/item/6146e00f2ab3f51d919024ce.jpg"></p><h3 id="4-1-频分复用-FDM"><a href="#4-1-频分复用-FDM" class="headerlink" title="4.1 频分复用 FDM"></a>4.1 频分复用 FDM</h3><ul><li>将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中始终占用这个频带</li><li>频分复用的所有用户在同样的时间<strong>占用不同的带宽资源</strong>(这里是指频率带宽而不是数据的发送速率)</li></ul><p><img src="https://pic.imgdb.cn/item/6149a1952ab3f51d91efc11e.jpg"></p><h3 id="4-2-时分复用-TDM"><a href="#4-2-时分复用-TDM" class="headerlink" title="4.2 时分复用 TDM"></a>4.2 时分复用 TDM</h3><ul><li><p>时分复用是将时间划分为一段段等长的<strong>时分复用帧</strong>(TDM 帧)，每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙</p></li><li><p>每一个用户所占用的时隙是<strong>周期性出现的</strong>(周期就是 TDM 帧的长度)</p></li><li><p>TDM 信号也被称为<strong>等时</strong>信号</p></li><li><p><strong>时分复用的所有用户在不同的时间占用相同的频带宽度</strong></p><p><img src="https://pic.imgdb.cn/item/6149a2e62ab3f51d91f1d548.jpg"></p></li><li><p><b style="color: red">时分复用可能会造成线路资源的浪费</b></p><p><img src="https://pic.imgdb.cn/item/6149a38b2ab3f51d91f2da2c.jpg"></p></li></ul><h3 id="4-3-统计时分复用-STDM"><a href="#4-3-统计时分复用-STDM" class="headerlink" title="4.3 统计时分复用 STDM"></a>4.3 统计时分复用 STDM</h3><p>STDM 帧<strong>不是固定分配</strong>时隙，而是<strong>按需动态地</strong>分配时隙。所以统计时分复用可以提高线路的利用率。(优化了时分复用，减小线路资源的浪费)</p><p><img src="https://pic.imgdb.cn/item/6149a4532ab3f51d91f429c5.jpg"></p><h3 id="4-4-波分复用-WDM"><a href="#4-4-波分复用-WDM" class="headerlink" title="4.4 波分复用 WDM"></a>4.4 波分复用 WDM</h3><p>波分复用就是指光的频分复用。使用一根光纤来同时传输多个光载波信号</p><p><img src="https://pic.imgdb.cn/item/6149a4b72ab3f51d91f4d502.jpg"></p><h3 id="4-5-码分复用-CDM"><a href="#4-5-码分复用-CDM" class="headerlink" title="4.5 码分复用 CDM"></a>4.5 码分复用 CDM</h3><ul><li>常用名词<strong>码分多址</strong>CDMA</li><li>各用户使用经过特殊挑选的不同码型，因此彼此之间不会造成干扰</li><li>这种系统发出的信号有很强的抗干扰能力</li></ul><p><strong>码片序列</strong>：</p><ul><li>每一个比特时间划分为 m 个短的间隔，称为<strong>码片</strong></li><li>每个站被指派一个唯一的 m bit 码片序列<ul><li>如果发送比特 1，就发送自己的 m bit 码片序列</li><li>如果发送比特 0， 就发送该码片序列的二进制反码</li></ul></li><li>例如，S 站的 8 bit 码片序列是 0001 1011<ul><li>发送比特 1 时，就发送序列 0001 1011</li><li>发送比特 0 时，就发送序列 1110 0100</li></ul></li><li>S 站的码片序列是(-1 -1 -1 +1 +1 -1 +1 +1)</li></ul><p><strong>CDMA 的重要特点</strong>：</p><ul><li>每个站分配的码片序列<b style="color: red">必须各不相同</b>, 并且还<b style="color: red">必须互相正交</b></li><li>在使用的系统中使用<strong>伪随机码序列</strong></li></ul><p><strong>码片序列的正交关系</strong>：</p><ul><li><p>向量 S 表示站 S 的码片向量，T 表示其他任何站的码片向量</p></li><li><p>两个不同站的码片序列正交，就是向量 S 和 T 的规格化<strong>内积</strong>等于 0</p><p><img src="C:\Users\CZH0318\AppData\Roaming\Typora\typora-user-images\image-20210923225303662.png" alt="image-20210923225303662"></p></li><li><p>任何一个码片向量和自生的规格化内积都是 1</p></li><li><p>一个码片向量和该码片反码的向量的规格化内积值是-1</p></li></ul><h2 id="5-数字传输系统"><a href="#5-数字传输系统" class="headerlink" title="5 数字传输系统"></a>5 数字传输系统</h2><p>PCM 有两个互不兼容的国际标准：</p><ul><li>北美的 24 路 PCM(简称为 T1)， 速率是 1.544 Mbit / s</li><li>欧洲的 30 路 PCM(简称为 E1), 速率是 2.048 Mbit / s，是我国采用的标准</li></ul><p><strong>旧数字传输系统两大缺点</strong>：</p><ul><li><strong>速率不统一</strong></li><li><strong>不是同步传输</strong></li></ul><h2 id="6-宽带接入技术"><a href="#6-宽带接入技术" class="headerlink" title="6 宽带接入技术"></a>6 宽带接入技术</h2><p>从宽带接入的媒体来分，可以分为两大类：</p><ul><li>有线宽带接入</li><li>无线宽带接入</li></ul><h3 id="6-1-ADSL-技术"><a href="#6-1-ADSL-技术" class="headerlink" title="6.1 ADSL 技术"></a>6.1 ADSL 技术</h3><ul><li><strong>非对称数字用户线 ADSL</strong>技术就是用数字技术对现有的模拟电话用户先进行改造，使它能够承载宽带业务</li><li>标准模拟电话信号的频带被限制在 300~3400Hz 之间，但是用户线本身实际可通过的信号频率超过 1 MHz</li><li>ADSL 把 0~4 kHz 低端频谱留给传统电话使用，原来没有被用上的高端频谱留给用户上网使用</li><li>DSL 是<strong>数字用户线</strong>（Digital Subscriber Line）的缩写</li></ul><p><strong>ADSL 的传输距离</strong>：</p><ul><li>ADSL 的传输距离取决于数据率和用户线的线径(用户线越细，信号传输时的衰减就越大)</li><li>ADSL 能得到的最高数据传输速率与实际的用户线上的信噪比密切相关</li></ul><p><strong>ADSL 的特点</strong>：</p><ul><li>上行和下行的带宽是不对称的(上行指的是从用户到 ISP, 下行指的是从 ISP 到用户)</li><li>ADSL 在用户线的两端各安装一个<strong>ADSL 调制解调器</strong></li></ul><p><strong>ADSL 的数据率</strong>：</p><ul><li><strong>ADSL 采用自适应调制技术使用户线能够传送尽可能高的数据率</strong></li><li><strong>ADSL 不能保证固定的数据率</strong>，质量差的用户线可能无法开通 ADSL</li></ul><p><strong>第二代 ADSL</strong>:</p><ul><li>包括 ADSL2 和 ADSL2+</li><li>通过提高调制效率得到了<strong>更高的数据率</strong></li><li>采用<strong>无缝速率自适应技术 SRA</strong>，可以在运营中不中断通信和不产生误码的情况下，自适应地调整数据率</li><li>改善了线路质量和故障定位功能，对提高网络的运行维护水平具有重要的意义</li></ul><h3 id="6-2-光纤同轴混合网-HFC-网"><a href="#6-2-光纤同轴混合网-HFC-网" class="headerlink" title="6.2 光纤同轴混合网(HFC 网)"></a>6.2 光纤同轴混合网(HFC 网)</h3><ul><li><p>HFC 网是在目前覆盖面很广的有线电视网 CATV 的基础上开发的一种居民宽带接入网</p></li><li><p>HFC 网除可传送 CATV 外，还提供电话、数据和其他宽带交互型业务</p></li><li><p>现有的 CATV 网是树型拓扑结构的同轴电缆网络，采用模拟技术的频分复用对电视节目进行单向传输</p></li><li><p>HFC 网对 CATV 网进行了改造</p></li><li><p>HFC 网将原 CATV 网中的同轴电缆<strong>主干部分换成光纤</strong>，并使用<strong>模拟光纤技术</strong></p></li><li><p>在模拟光纤中采用<strong>光的振幅调制 AM</strong></p></li></ul><p><strong>HFC 网具有双向传输功能，扩展了传输频带</strong></p><h3 id="6-3-FTTx-技术"><a href="#6-3-FTTx-技术" class="headerlink" title="6.3 FTTx 技术"></a>6.3 FTTx 技术</h3><ul><li>FTTx 是一种实现宽带居民接入网的方案，代表多种宽带光纤接入方式</li><li>FTTx 代表 Fiber To The … （光纤到…）<ul><li><strong>光纤到户 FTTH</strong>：光纤一直铺设到用户家庭</li><li><strong>光纤到达楼 FTTB</strong>：光纤进入大楼后转换成电信号，然后用电缆或双绞线分配到各用户</li><li><strong>光纤到路边 FTTC</strong>：光纤铺到路边，从路边到各用户可使用星形结构双绞线作为传输媒体。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库学习笔记(一)</title>
      <link href="/2021/10/20/SQL-1/"/>
      <url>/2021/10/20/SQL-1/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库学习笔记-一"><a href="#数据库学习笔记-一" class="headerlink" title="数据库学习笔记(一)"></a>数据库学习笔记(一)</h1><p><b style="color: red">个人习惯，SQL 都直接用小写字母，SQL 不区分大小写，大写个人看着别扭。</b></p><h2 id="1-SQL-概述"><a href="#1-SQL-概述" class="headerlink" title="1. SQL 概述"></a>1. SQL 概述</h2><ul><li><p>SQL(Structured Query Language)：结构化查询语言，是关系数据库的标准语言。</p></li><li><p>SQL 是一个通用的、功能极强的关系数据库语言</p></li><li><p>SQL 以同一种语法结构提供多种使用方式</p><ol><li>SQL 是一门独立的语言，能够独立地用于联机交互的使用方式</li><li>SQL 也是一门嵌入式语言，能够嵌入到高级语言(如 C、Java)中</li></ol></li></ul><h2 id="2-数据定义"><a href="#2-数据定义" class="headerlink" title="2. 数据定义"></a>2. 数据定义</h2><h3 id="2-1-模式的定义与删除"><a href="#2-1-模式的定义与删除" class="headerlink" title="2.1 模式的定义与删除"></a>2.1 模式的定义与删除</h3><h4 id="2-1-1-定义模式"><a href="#2-1-1-定义模式" class="headerlink" title="2.1.1 定义模式"></a>2.1.1 定义模式</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> schema &quot;S-T&quot; <span class="hljs-keyword">authorization</span> Wang   # 为用户Wang定义一个模式S<span class="hljs-operator">-</span>T<br></code></pre></td></tr></table></figure><p>如果没有指定模式名，则模式名隐含为用户名</p><h4 id="2-1-2-删除模式"><a href="#2-1-2-删除模式" class="headerlink" title="2.1.2 删除模式"></a>2.1.2 删除模式</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> schema <span class="hljs-operator">&lt;</span>模式名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>cascade<span class="hljs-operator">|</span>restrict<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><ul><li>cascade(级联)：删除模式的同时把该模式中的所有数据库对象(如表等)全部删除</li><li>restrict(限制)：如果该模式中定义了数据库对象(如表、视图等)，则会拒绝该删除语句的执行</li></ul><h3 id="2-2-基本表的定义、删除与修改"><a href="#2-2-基本表的定义、删除与修改" class="headerlink" title="2.2 基本表的定义、删除与修改"></a>2.2 基本表的定义、删除与修改</h3><h4 id="2-2-1-基本表定义"><a href="#2-2-1-基本表定义" class="headerlink" title="2.2.1 基本表定义"></a>2.2.1 基本表定义</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span><br>(<span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span> [<span class="hljs-operator">&lt;</span>列级完整性约束条件<span class="hljs-operator">&gt;</span>]<br>     [,<span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span> [<span class="hljs-operator">&lt;</span>列级完整性约束条件<span class="hljs-operator">&gt;</span>]]<br>     ...<br>     [,<span class="hljs-operator">&lt;</span>表级完整性约束条件<span class="hljs-operator">&gt;</span>]);<br></code></pre></td></tr></table></figure><p>基本表定义：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Student<br>(Sno <span class="hljs-type">char</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">primary</span> key,# 列级完整性约束条件，Sno是主码<br>     Sname <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span>, # Sname取唯一值<br>     Sage <span class="hljs-type">smallint</span><br>    );<br></code></pre></td></tr></table></figure><p>有外码的基本表定义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Course<br>(Cno <span class="hljs-type">char</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">primary</span> key,<br>     Cname <span class="hljs-type">char</span>(<span class="hljs-number">40</span>),<br>     <span class="hljs-keyword">foreign</span> key(Cpno) <span class="hljs-keyword">references</span> Course(Cno) # 表级完整性约束条件<br>     # Cpno是外码，被参照表是Course,被参照列是Cno<br>    );<br></code></pre></td></tr></table></figure><h4 id="2-2-2-模式与表"><a href="#2-2-2-模式与表" class="headerlink" title="2.2.2 模式与表"></a>2.2.2 模式与表</h4><ul><li><p>每一个基本表都属于某一个模式</p></li><li><p>一个模式包含多个基本表</p></li><li><p>定义基本表所属模式</p><ol><li><p>在表名中给出模式名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> &quot;S-T&quot;.Student(...);   # 模式名为S<span class="hljs-operator">-</span>T<br></code></pre></td></tr></table></figure></li><li><p>在创建模式语句中同时创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> schema Test <span class="hljs-keyword">authorization</span> Zhang<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tab(...);<br></code></pre></td></tr></table></figure></li><li><p>设置所属的模式</p></li></ol></li><li><p>创建基本表(以及其他数据库对象)，如果没有指定模式，系统会根据<strong>搜索对象</strong>来确定该对象所属的模式</p></li><li><p>关系数据库管理系统会使用模式列表中<strong>第一个存在的模式</strong>作为数据库对象的模式名</p></li></ul><p>显示当前的搜索路径: <code> show search_path;</code></p><h4 id="2-2-3-修改基本表"><a href="#2-2-3-修改基本表" class="headerlink" title="2.2.3 修改基本表"></a>2.2.3 修改基本表</h4><ul><li><p>增加列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> Student <span class="hljs-keyword">add</span> S_entrance <span class="hljs-type">Date</span>;<br><span class="hljs-comment">/* 向Student表中增加列S_entrance, 数据类型为日期型 */</span><br></code></pre></td></tr></table></figure><p><strong>新增的列为空值</strong></p></li><li><p>修改列的数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> Student <span class="hljs-keyword">alter</span> <span class="hljs-keyword">column</span> Sage <span class="hljs-type">int</span>;<br><span class="hljs-comment">/* 将年龄那一列地数据类型变为整型 */</span><br></code></pre></td></tr></table></figure></li><li><p>增加列的约束条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> Course <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span>(Cname)<br><span class="hljs-comment">/* 为表Course的Cname列增加必须取唯一值的约束条件 */</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-2-4-删除基本表"><a href="#2-2-4-删除基本表" class="headerlink" title="2.2.4 删除基本表"></a>2.2.4 删除基本表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> [cascade<span class="hljs-operator">|</span>restrict]  # 参考删除模式<br></code></pre></td></tr></table></figure><h3 id="2-3-索引的建立与删除"><a href="#2-3-索引的建立与删除" class="headerlink" title="2.3 索引的建立与删除"></a>2.3 索引的建立与删除</h3><p>建立索引的目的：加快查询速度</p><h4 id="2-3-1-建立索引"><a href="#2-3-1-建立索引" class="headerlink" title="2.3.1 建立索引"></a>2.3.1 建立索引</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> [<span class="hljs-keyword">unique</span>] [cluster] index <span class="hljs-operator">&lt;</span>索引名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">on</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span>(<span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span>[<span class="hljs-operator">&lt;</span>次序<span class="hljs-operator">&gt;</span>]);<br></code></pre></td></tr></table></figure><ul><li>次序：指定索引值的排列次序，升序：asc，降序：desc，默认值是 asc</li><li>unique：该索引的每一个索引值只对应唯一的数据记录</li><li>cluster：表示要建立的索引是聚簇索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index Stusno <span class="hljs-keyword">on</span> Student(Sno); # Student表按学号升序建唯一索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index SCno <span class="hljs-keyword">on</span> SC(Sno, <span class="hljs-keyword">asc</span>, Cno, <span class="hljs-keyword">desc</span>);<br><span class="hljs-comment">/* SC表按学号升序和课程号降序建唯一索引 */</span><br></code></pre></td></tr></table></figure><h4 id="2-3-2-修改索引"><a href="#2-3-2-修改索引" class="headerlink" title="2.3.2 修改索引"></a>2.3.2 修改索引</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> index <span class="hljs-operator">&lt;</span>旧索引名<span class="hljs-operator">&gt;</span> rename <span class="hljs-keyword">to</span> <span class="hljs-operator">&lt;</span>新索引名<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> index SCno rename <span class="hljs-keyword">to</span> SCSno; # 将SC表的SCno索引名改为SCSno<br></code></pre></td></tr></table></figure><h4 id="2-3-3-删除索引"><a href="#2-3-3-删除索引" class="headerlink" title="2.3.3 删除索引"></a>2.3.3 删除索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> index SCno; # 删除SCno索引<br></code></pre></td></tr></table></figure><h2 id="3-数据查询"><a href="#3-数据查询" class="headerlink" title="3. 数据查询"></a>3. 数据查询</h2><h3 id="3-1-单表查询"><a href="#3-1-单表查询" class="headerlink" title="3.1 单表查询"></a>3.1 单表查询</h3><p><strong>查询只涉及一个表</strong></p><ul><li><p>选择表中的若干列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/* 1. 查询指定列 */</span><br>selete Sno, Sname <span class="hljs-keyword">from</span> Student;<br><br><span class="hljs-comment">/* 2. 查询全部列 */</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Student;<br><br><span class="hljs-comment">/* 3. 查询经过计算的值 */</span><br><span class="hljs-keyword">select</span> Sname, <span class="hljs-number">2021</span><span class="hljs-operator">-</span>Sage <span class="hljs-keyword">from</span> Student;<br></code></pre></td></tr></table></figure></li><li><p>选择表中的若干元组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/* 如果没有指定distinct关键词，则默认为all，all不会去重 */</span><br><span class="hljs-keyword">select</span> Sno <span class="hljs-keyword">from</span> SC;<br># 等价于<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">all</span> Sno <span class="hljs-keyword">from</span> SC;<br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> Sno <span class="hljs-keyword">from</span> SC; # 会去重<br><br><span class="hljs-comment">/* 查询满足条件的元组 */</span><br><span class="hljs-comment">/* 1. 比较大小 */</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> Sno <span class="hljs-keyword">from</span> SC<br><span class="hljs-keyword">where</span> Grade<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span>;  # 查询考试成绩有不及格的学生的学号<br><br><span class="hljs-comment">/* 2. 确定范围 */</span><br><span class="hljs-keyword">select</span> Sname <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sage <span class="hljs-keyword">between</span> <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-number">23</span>; # 用谓词<span class="hljs-keyword">between</span> ... <span class="hljs-keyword">and</span> ... 来确定范围<br><br><span class="hljs-comment">/* 3. 确定集合 */</span><br><span class="hljs-keyword">select</span> Sname <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sdept <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;CS&#x27;</span>, <span class="hljs-string">&#x27;MA&#x27;</span>, <span class="hljs-string">&#x27;Is&#x27;</span>); # 查询CS系、MA系、<span class="hljs-keyword">IS</span>系的学生的姓名<br><br><span class="hljs-comment">/* 4. 字符匹配 */</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sno <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;201211123&#x27;</span>; # 查询学号为<span class="hljs-number">201211123</span>的学生的信息<br><br><span class="hljs-keyword">select</span> Sname <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;_阳%&#x27;</span>  # 查询名字中第二个字为&quot;阳&quot;的学生的姓名<br><span class="hljs-comment">/* 通配符%代表任意长度的(包括长度为0)的字符串，而通配符_代表匹配任意单个字符 */</span><br><br><span class="hljs-keyword">select</span> Cno <span class="hljs-keyword">from</span> Course<br><span class="hljs-keyword">where</span> Cname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;DB/_Design&#x27;</span> <span class="hljs-keyword">escape</span> &quot;/&quot;; <span class="hljs-comment">/*使用换码字符&quot;/&quot;将通配符转义为普通字符*/</span><br><br><span class="hljs-comment">/* 5. 涉及空值的查询 */</span><br><span class="hljs-keyword">select</span> Sno <span class="hljs-keyword">from</span> SC<br><span class="hljs-keyword">where</span> Grade <span class="hljs-keyword">is</span> <span class="hljs-keyword">NULL</span>;  # 查询没有成绩的学生的学号<br><br></code></pre></td></tr></table></figure></li><li><p>order by 子句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> Sno <span class="hljs-keyword">from</span> SC<br><span class="hljs-keyword">where</span> Cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> Grade <span class="hljs-keyword">DESC</span>; # 查询选修了<span class="hljs-number">3</span>号课程的学生的学号，结果按分数降序排列<br></code></pre></td></tr></table></figure></li><li><p>聚集函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> Student;   # 查询学生总人数<br><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(Grade) <span class="hljs-keyword">from</span> SC<br><span class="hljs-keyword">where</span> Cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span>;  # 查询<span class="hljs-number">1</span>号课程的学生的平均成绩<br></code></pre></td></tr></table></figure></li><li><p>group by 子句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> Cno, <span class="hljs-built_in">count</span>(Sno) <span class="hljs-keyword">from</span> SC<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Cno; # 根据Cno分组，会去重<br><br><span class="hljs-keyword">select</span> Cno, <span class="hljs-built_in">count</span>(Sno) <span class="hljs-keyword">from</span> SC<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Cno, Sno; # 根据Cno,Sno分组，只有Cno和Sno相同的会分为一组<br><br><span class="hljs-comment">/* 增加条件表达式 */</span><br><span class="hljs-keyword">select</span> Sno <span class="hljs-keyword">from</span> Sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Sno<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">avg</span>(Grade)<span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure><p><strong>having 短语与 where 自居的区别</strong>：</p><ul><li>作用对象不同</li><li>where 子句作用于基表或视图，从中选择满足条件的元组</li><li>having 短语作用于组，从中选择满足条件的元组</li></ul><p><b style="color: red">where 子句中不能使用聚集函数作为条件表达式</b></p></li></ul><h3 id="3-2-连接查询"><a href="#3-2-连接查询" class="headerlink" title="3.2 连接查询"></a>3.2 连接查询</h3><p>连接查询：同时涉及两个以上的表的查询</p><ul><li><p>等值与非等值连接查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/* 等值连接 */</span><br><span class="hljs-keyword">select</span> Student.<span class="hljs-operator">*</span>, SC.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Studentm SC<br><span class="hljs-keyword">where</span> Student.Sno <span class="hljs-operator">=</span> SC.Sno   # 查询每个学生及其选修课程的情况<br><br><span class="hljs-comment">/*  自然连接 */</span><br><span class="hljs-keyword">select</span> Student.Sno, Sname, Sage, Cno, GRade <span class="hljs-keyword">from</span> Student, SC<br><span class="hljs-keyword">where</span> Student.Sno <span class="hljs-operator">=</span> SC.Sno  # 上面的查询用自然连接完成<br></code></pre></td></tr></table></figure></li><li><p>自身连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> First.Cno, Second.Cpno<br><span class="hljs-keyword">from</span> Course <span class="hljs-keyword">First</span>, Course <span class="hljs-keyword">Second</span> # 因为所有属性名都是同名的，所以需要使用别名前缀<br><span class="hljs-keyword">where</span> First.Cpno <span class="hljs-operator">=</span> Second.Cno;  # 查询每一门课的间接先修课<br></code></pre></td></tr></table></figure></li><li><p>外连接</p></li><li><p>多表连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> Student.Sno, Sname, Cname<br><span class="hljs-keyword">from</span> Student, SC, Course<br><span class="hljs-keyword">where</span> Student.Sno <span class="hljs-operator">=</span> SC.Sno <span class="hljs-keyword">and</span> SC.Cno <span class="hljs-operator">=</span> Course.Cno;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-3-嵌套查询"><a href="#3-3-嵌套查询" class="headerlink" title="3.3 嵌套查询"></a>3.3 嵌套查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*  1. 带有in谓词的子查询 */</span><br><span class="hljs-keyword">select</span> Sno, Sname, Sdept <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sdept <span class="hljs-keyword">in</span><br>(<span class="hljs-keyword">select</span> Sdept <span class="hljs-keyword">from</span> Student<br>     <span class="hljs-keyword">where</span> Sname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;刘成&#x27;</span><br>    );   # 查询和&quot;刘成&quot;在同一个系的学生<br><br><br><span class="hljs-comment">/* 2. 带有比较运算符的子查询 */</span><br><span class="hljs-keyword">select</span> Sno, Cno <span class="hljs-keyword">from</span> SC x<br><span class="hljs-keyword">where</span> Grade <span class="hljs-operator">&gt;=</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(Grade) <span class="hljs-keyword">from</span> SC y<br>   <span class="hljs-keyword">where</span> y.Sno <span class="hljs-operator">=</span> x.Sno);<br><br><span class="hljs-comment">/* 3. 带有any(some)或all谓词的子查询 */</span><br># 使用<span class="hljs-keyword">any</span>或<span class="hljs-keyword">all</span>谓词时需要同时使用比较运算<br># <span class="hljs-keyword">any</span>表示子查询结果中的某个值, <span class="hljs-keyword">all</span>表示子查询结果中的所有值<br><br><span class="hljs-keyword">select</span> Sname, Sage <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sage <span class="hljs-operator">&lt;</span> <span class="hljs-keyword">any</span>(<span class="hljs-keyword">select</span> Sage <span class="hljs-keyword">from</span> Student<br>                 <span class="hljs-keyword">where</span> Sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span>)<br><span class="hljs-keyword">and</span> Sdept <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;CS&#x27;</span>;   # 父查询块中的条件，<span class="hljs-string">&#x27;&lt;&gt;&#x27;</span>作用和<span class="hljs-string">&#x27;!=&#x27;</span>一样<br><span class="hljs-comment">/* 子查询先把所有CS系的学生的年龄找出来，然后使用any谓词找出比找出来的结果中任意一个年龄小的 */</span><br><br><span class="hljs-comment">/* 4. 带有exists谓词的子查询 */</span><br><span class="hljs-keyword">select</span> Sname <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span>   # 带有<span class="hljs-keyword">exists</span>谓词的子查询不返回任何数据，若内层查询结果为空，则外层的<span class="hljs-keyword">where</span>子句返回假值<br>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> SC<br>     <span class="hljs-keyword">where</span> Sno <span class="hljs-operator">=</span> Student.Sno <span class="hljs-keyword">and</span> Cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span><br>    );<br><br></code></pre></td></tr></table></figure><h3 id="3-4-集合查询"><a href="#3-4-集合查询" class="headerlink" title="3.4 集合查询"></a>3.4 集合查询</h3><ul><li><p>并集 union</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sage<span class="hljs-operator">&lt;=</span><span class="hljs-number">19</span>  # 查询CS系以及年龄不超过<span class="hljs-number">19</span>岁的学生<br><span class="hljs-comment">/* union: 将多个查询结果合并起来，系统会自动去重 */</span><br><span class="hljs-comment">/* union all: 将多个查询结果合并起来后，不去重 */</span><br></code></pre></td></tr></table></figure></li><li><p>交集 intersect</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span><br><span class="hljs-keyword">intersect</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sage<span class="hljs-operator">&lt;=</span><span class="hljs-number">19</span>   # 查询CS系而且年龄不超过<span class="hljs-number">19</span>岁的学生<br></code></pre></td></tr></table></figure></li><li><p>差集 except</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span><br><span class="hljs-keyword">except</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sage<span class="hljs-operator">&lt;=</span><span class="hljs-number">19</span>   # 查询CS系中年龄超过<span class="hljs-number">19</span>岁的学生<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-数据更新"><a href="#4-数据更新" class="headerlink" title="4. 数据更新"></a>4. 数据更新</h2><h3 id="4-1-插入数据"><a href="#4-1-插入数据" class="headerlink" title="4.1 插入数据"></a>4.1 插入数据</h3><p>两种插入方式：</p><ul><li><p>插入元组</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> [(<span class="hljs-operator">&lt;</span>属性列<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span>, <span class="hljs-operator">&lt;</span>属性列<span class="hljs-number">2</span><span class="hljs-operator">&gt;</span>...)]<br><span class="hljs-keyword">values</span>(<span class="hljs-operator">&lt;</span>常量<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span>, <span class="hljs-operator">&lt;</span>常量<span class="hljs-number">2</span><span class="hljs-operator">&gt;</span>...);<br></code></pre></td></tr></table></figure><p>作用：将元组插入到指定表中</p><p>into 子句：</p><ol><li>指定要插入的表名及属性列</li><li>属性列的顺序和表定义的顺序可以不一致</li><li>没有指定属性列：表示要插入的是完整的元组，而且属性列顺序和表定义的顺序需要一致</li><li>指定部分属性列：插入的元组在其余属性列上取空值</li></ol><p>values 子句：提供的值必须和 into 子句匹配，包括值的个数和值的类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC(Sno, Cno)<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;20121112&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);   # 增加选课记录<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Student<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;2012322221&#x27;</span>, <span class="hljs-string">&#x27;ttt&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">111</span>, <span class="hljs-string">&#x27;CS&#x27;</span>);  # <span class="hljs-keyword">into</span>子句没有给出指定属性列，所以插入的是完整的元组<br></code></pre></td></tr></table></figure></li><li><p>插入子查询结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/* 1. 建表 */</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Dept_age<br>(Sdept <span class="hljs-type">char</span>(<span class="hljs-number">15</span>)<br>     Avg_age <span class="hljs-type">smallint</span>);<br><br><span class="hljs-comment">/* 2. 插入数据 */</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Dept_age(Sdept, Avg_age)<br><span class="hljs-keyword">select</span> Sdept, <span class="hljs-built_in">avg</span>(Sage) <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Sdept;<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-2-修改数据"><a href="#4-2-修改数据" class="headerlink" title="4.2 修改数据"></a>4.2 修改数据</h3><p>语句格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">update <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">set</span> <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;=</span><span class="hljs-operator">&lt;</span>表达式<span class="hljs-operator">&gt;</span>[, <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;=</span><span class="hljs-operator">&lt;</span>表达式<span class="hljs-operator">&gt;</span>]...<br>[<span class="hljs-keyword">where</span> <span class="hljs-operator">&lt;</span>条件<span class="hljs-operator">&gt;</span>]  # 省略<span class="hljs-keyword">where</span>子句，表示要修改表中的所有元组<br></code></pre></td></tr></table></figure><h4 id="4-2-1-修改某一个元组的值"><a href="#4-2-1-修改某一个元组的值" class="headerlink" title="4.2.1 修改某一个元组的值"></a>4.2.1 修改某一个元组的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">update Student<br><span class="hljs-keyword">set</span> Sage <span class="hljs-operator">=</span> <span class="hljs-number">22</span><br><span class="hljs-keyword">where</span> Sno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;201123012&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="4-2-2-修改多个元组的值"><a href="#4-2-2-修改多个元组的值" class="headerlink" title="4.2.2 修改多个元组的值"></a>4.2.2 修改多个元组的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">update Student<br><span class="hljs-keyword">set</span> Sage <span class="hljs-operator">=</span> Sage <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h4 id="4-2-3-带子查询的修改语句"><a href="#4-2-3-带子查询的修改语句" class="headerlink" title="4.2.3 带子查询的修改语句"></a>4.2.3 带子查询的修改语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">update SC<br><span class="hljs-keyword">set</span> Grade <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">where</span> Sno <span class="hljs-keyword">in</span><br>(<span class="hljs-keyword">select</span> Sno <span class="hljs-keyword">from</span> Student<br>     <span class="hljs-keyword">where</span> Sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CS&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="4-3-删除数据"><a href="#4-3-删除数据" class="headerlink" title="4.3 删除数据"></a>4.3 删除数据</h3><h4 id="4-3-1-删除某一个元组的值"><a href="#4-3-1-删除某一个元组的值" class="headerlink" title="4.3.1 删除某一个元组的值"></a>4.3.1 删除某一个元组的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;201233215&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="4-3-2-删除多个元组的值"><a href="#4-3-2-删除多个元组的值" class="headerlink" title="4.3.2 删除多个元组的值"></a>4.3.2 删除多个元组的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> SC;<br></code></pre></td></tr></table></figure><h4 id="4-3-3-带子查询的删除语句"><a href="#4-3-3-带子查询的删除语句" class="headerlink" title="4.3.3 带子查询的删除语句"></a>4.3.3 带子查询的删除语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> SC<br><span class="hljs-keyword">where</span> Sno <span class="hljs-keyword">in</span><br>(<span class="hljs-keyword">select</span> Sno <span class="hljs-keyword">from</span> Student<br>     <span class="hljs-keyword">where</span> Sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="5-空值的处理"><a href="#5-空值的处理" class="headerlink" title="5. 空值的处理"></a>5. 空值的处理</h2><p><strong>空值</strong>：不知道或不存在或无意义的值，有以下几种情况</p><ul><li>该属性应该有值，但是目前不知道它的具体值</li><li>该属性不应该有值</li><li>由于某种原因不便于填写</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 产生空值<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC(Sno, Cno, Grade)<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;2012345632&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-keyword">null</span>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC(Sno, Cno)<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;2012345621&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);# 没有赋值的属性，其值为空值<br><br>update Student<br><span class="hljs-keyword">set</span> Sdept <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span><br><span class="hljs-keyword">where</span> Sno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;20123245656&#x27;</span>;<br><br># 空值的判断<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sname <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p><strong>不能取空值的情况</strong>：</p><ul><li>有 not null 约束条件不能取空值</li><li>加了 unique 限制的属性不能取空值</li><li>码属性不能取空值</li></ul><p><strong>空值与另一个值(包括空值)的算术运算的结果是空值</strong></p><p><strong>空值与另一个值(包括空值)的比较运算结果是 unknown</strong></p><h2 id="6-视图"><a href="#6-视图" class="headerlink" title="6. 视图"></a>6. 视图</h2><p>视图的特点：</p><ul><li>虚表，是从一个或几个基本表导出的表</li><li>只存放视图的定义，不存放视图对应的数据</li><li>基表中的数据发生变化，从试图中查询出来的数据也会改变</li></ul><h3 id="6-1-定义视图"><a href="#6-1-定义视图" class="headerlink" title="6.1 定义视图"></a>6.1 定义视图</h3><h4 id="6-1-1-建立视图"><a href="#6-1-1-建立视图" class="headerlink" title="6.1.1 建立视图"></a>6.1.1 建立视图</h4><p>语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> <span class="hljs-operator">&lt;</span>视图名<span class="hljs-operator">&gt;</span> [<span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span>, <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span>...]<br><span class="hljs-keyword">as</span> <span class="hljs-operator">&lt;</span>子查询<span class="hljs-operator">&gt;</span><br>[<span class="hljs-keyword">with</span> <span class="hljs-keyword">check</span> option];<br># <span class="hljs-keyword">with</span> <span class="hljs-keyword">check</span> option：对视图进行update、<span class="hljs-keyword">insert</span>和<span class="hljs-keyword">delete</span>操作时要保证更新、插入和删除的行满足视图定义中的谓词条件<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> IS_Student<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> Sno <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IS&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="6-1-2-删除视图"><a href="#6-1-2-删除视图" class="headerlink" title="6.1.2 删除视图"></a>6.1.2 删除视图</h4><p>语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> <span class="hljs-operator">&lt;</span>视图名<span class="hljs-operator">&gt;</span> [cascade];# 使用cascade级联删除语句，会把该视图和由它导出的所有的所有试图一起删除<br></code></pre></td></tr></table></figure><p><strong>删除基表时，需要显式的使用 drop view 语句删除，或者使用 cascade 级联删除</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> IS_Student;<br></code></pre></td></tr></table></figure><h3 id="6-2-查询视图"><a href="#6-2-查询视图" class="headerlink" title="6.2 查询视图"></a>6.2 查询视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> Sno, Sage <span class="hljs-keyword">from</span> IS_Student<br><span class="hljs-keyword">where</span> Sage <span class="hljs-operator">&lt;</span> <span class="hljs-number">20</span>;<br><br># 视图消解转换后的查询语句：<br><span class="hljs-keyword">select</span> Sno, Sage <span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IS&#x27;</span> <span class="hljs-keyword">and</span> Sage <span class="hljs-operator">&lt;</span> <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">/* 视图消解法：1. 进行有效性检查</span><br><span class="hljs-comment">2. 转换成等价的对基本表的查询</span><br><span class="hljs-comment">3. 执行修正后的查询</span><br></code></pre></td></tr></table></figure><h3 id="6-3-更新视图"><a href="#6-3-更新视图" class="headerlink" title="6.3 更新视图"></a>6.3 更新视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">update IS_Student<br><span class="hljs-keyword">set</span> Sname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;clz&#x27;</span><br><span class="hljs-keyword">where</span> Sno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;20213114565&#x27;</span>;<br><br># 转换后的语句：<br>update Student<br><span class="hljs-keyword">set</span> Sname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;clz&#x27;</span><br><span class="hljs-keyword">where</span> Sno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;20213114565&#x27;</span> <span class="hljs-keyword">and</span> Sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;IS&#x27;</span>;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> IS_Student<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;202132456&#x27;</span>, <span class="hljs-string">&#x27;clz&#x27;</span>, <span class="hljs-number">21</span>);<br><br># 转换后的语句：<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Student(Sno, Sname, Sage, Sdept)<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;202132456&#x27;</span>, <span class="hljs-string">&#x27;clz&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;IS&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="6-4-视图的作用"><a href="#6-4-视图的作用" class="headerlink" title="6.4 视图的作用"></a>6.4 视图的作用</h3><ul><li>视图能够简化用户的操作</li><li>视图使用户能以多种角度看待同一数据</li><li>视图对重构数据库提供了一定程度的逻辑独立性</li><li>视图能够对机密数据提供安全保护</li><li>适当的利用视图可以更清晰的表达查询</li></ul>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python(二) 序列</title>
      <link href="/2021/10/20/python-2/"/>
      <url>/2021/10/20/python-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-二-序列"><a href="#Python-二-序列" class="headerlink" title="Python(二) 序列"></a>Python(二) 序列</h1><p>常用的序列结构：列表、元组、字符串、字典、range、zip、enumerate 等</p><h2 id="1-列表"><a href="#1-列表" class="headerlink" title="1. 列表"></a>1. 列表</h2><p><strong>列表对象常用方法</strong></p><p>​ 1. append(x)：将元素 x 添加到列表尾部</p><p>​ 2. extend(可迭代对象)：将可迭代对象中所有的元素添加到列表尾部</p><p>​ 3. insert(index, x)：在列表指定位置 index 处添加元素 x</p><p>​ 4. remove(x)：在列表中删除首次出现的指定元素</p><p>​ 5. pop([index])：删除并返回列表中指定位置的元素，默认为最后一个元素</p><p>​ 6. clear()：删除列表中所有元素，会保留列表对象</p><p>​ 7. index(x)：返回第一个值为 x 的元素的下标，不存在则抛出异常</p><p>​ 8. count(x)：返回指定元素 x 在列表中的出现次数</p><p>​ 9. reverse()：对列表元素进行原地翻转</p><p>​ 10. sort()：对列表元素进行排序</p><p>​ 11. copy()：返回列表对象的浅复制</p><h3 id="1-1-列表创建、元素的增加、元素的删除"><a href="#1-1-列表创建、元素的增加、元素的删除" class="headerlink" title="1.1 列表创建、元素的增加、元素的删除"></a>1.1 列表创建、元素的增加、元素的删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python">a_list = [<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;World&quot;</span>]<br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a_list))  <span class="hljs-comment"># 列表的创建</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>))  <span class="hljs-comment"># 通过list()方法将可迭代对象类型转换为列表</span><br><span class="hljs-built_in">print</span>()<br><br>a_list += [<span class="hljs-number">7</span>]   <span class="hljs-comment"># 元素增加方法1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;元素增加方法1：&quot;</span>)<br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-built_in">print</span>()<br><br>a_list.append(<span class="hljs-string">&quot;two&quot;</span>)    <span class="hljs-comment"># 元素增加方法2(append())</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;元素增加方法2：&quot;</span>)<br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-built_in">print</span>()<br><br>a_list.extend([<span class="hljs-string">&quot;three1&quot;</span>, <span class="hljs-string">&quot;three2&quot;</span>])     <span class="hljs-comment"># 元素增加方法3(extend())</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;元素增加方法3：&quot;</span>)<br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-built_in">print</span>()<br><br>a_list.insert(<span class="hljs-number">0</span>, <span class="hljs-number">99</span>)    <span class="hljs-comment"># 元素增加方法4(insert),第一个参数是要新增元素插入的位置,第二个参数是要增加的元素</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;元素增加方法4：&quot;</span>)<br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-built_in">print</span>()<br><br>a_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">del</span> a_list[<span class="hljs-number">1</span>]   <span class="hljs-comment"># 使用del命令删除列表指定位置上的元素</span><br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-built_in">print</span>()<br><br><span class="hljs-built_in">print</span>(a_list.pop())    <span class="hljs-comment"># 使用列表的pop()删除并返回指定位置上的元素(默认是最后一个)</span><br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-built_in">print</span>()<br><br>a_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]<br>a_list.remove(<span class="hljs-number">2</span>)    <span class="hljs-comment"># 使用列表的remove()删除第一次出现的指定元素</span><br><span class="hljs-built_in">print</span>(a_list)<br></code></pre></td></tr></table></figure><h3 id="1-2-列表元素的访问、计数、成员资格判断"><a href="#1-2-列表元素的访问、计数、成员资格判断" class="headerlink" title="1.2 列表元素的访问、计数、成员资格判断"></a>1.2 列表元素的访问、计数、成员资格判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">aList = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>]<br><span class="hljs-built_in">print</span>(aList[<span class="hljs-number">2</span>])     <span class="hljs-comment"># 列表的访问</span><br>aList[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;Hello&quot;</span>  <span class="hljs-comment"># 修改元素</span><br><span class="hljs-built_in">print</span>(aList)<br><span class="hljs-built_in">print</span>()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;计数：&quot;</span>)<br>aList = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br><span class="hljs-built_in">print</span>(aList.count(<span class="hljs-number">7</span>))   <span class="hljs-comment"># 指定元素在列表中出现的次数</span><br><span class="hljs-built_in">print</span>(aList.count(<span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>()<br><br>aList = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;成员判断：&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> <span class="hljs-keyword">in</span> aList)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">5</span> <span class="hljs-keyword">in</span> aList)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">5</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> aList)<br><br></code></pre></td></tr></table></figure><h3 id="1-3-切片"><a href="#1-3-切片" class="headerlink" title="1.3 切片"></a>1.3 切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">aList = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;切片:&quot;</span>)<br><span class="hljs-built_in">print</span>(aList[::])<br><span class="hljs-built_in">print</span>(aList[::-<span class="hljs-number">1</span>])  <span class="hljs-comment"># 步长为负数时，切片从后往前切</span><br><span class="hljs-built_in">print</span>(aList)<br><span class="hljs-built_in">print</span>(aList[<span class="hljs-number">2</span>:<span class="hljs-number">6</span>:<span class="hljs-number">2</span>])     <span class="hljs-comment"># 下标范围在[2, 6)且间隔为2</span><br><span class="hljs-built_in">print</span>(aList[<span class="hljs-number">3</span>:])    <span class="hljs-comment"># 得到下标&gt;=3的元素</span><br><br>aList[<span class="hljs-built_in">len</span>(aList):] = [<span class="hljs-number">89</span>]     <span class="hljs-comment"># 在尾部追加元素</span><br><span class="hljs-built_in">print</span>(aList)<br><br>aList[:<span class="hljs-number">3</span>] = [<span class="hljs-number">77</span>, <span class="hljs-number">88</span>, <span class="hljs-number">99</span>]    <span class="hljs-comment"># 替换前3个元素</span><br><span class="hljs-built_in">print</span>(aList)<br><br>aList[:<span class="hljs-number">3</span>] = []      <span class="hljs-comment"># 删除前三个元素</span><br><span class="hljs-built_in">print</span>(aList)<br><br>aList = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-keyword">del</span> aList[:<span class="hljs-number">3</span>]   <span class="hljs-comment"># 结合del删除前3个元素</span><br><span class="hljs-built_in">print</span>(aList)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">aList = [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]<br>bList = aList[:]    <span class="hljs-comment"># 切片，浅复制</span><br><br><span class="hljs-built_in">print</span>(aList)<br><span class="hljs-built_in">print</span>(bList)<br><span class="hljs-built_in">print</span>(aList == bList)   <span class="hljs-comment"># bList和aList包含同样的元素引用</span><br><span class="hljs-built_in">print</span>(aList <span class="hljs-keyword">is</span> bList)   <span class="hljs-comment"># 不是同一个对象</span><br><br>bList[<span class="hljs-number">0</span>] = <span class="hljs-number">99</span>   <span class="hljs-comment"># 这个时候，bList里面的都是整型， 所以修改bList不影响aList</span><br><span class="hljs-built_in">print</span>(aList)<br><span class="hljs-built_in">print</span>(bList)<br><br>aList = [<span class="hljs-number">1</span>, [<span class="hljs-number">88</span>], <span class="hljs-number">2</span>]<br>bList = aList[:]<br><br>bList[<span class="hljs-number">1</span>].append(<span class="hljs-number">99</span>)     <span class="hljs-comment"># 这里使用append方法改变bList会同时影响到aList，如果是直接通过复制，则结果会和上面的相同</span><br><span class="hljs-built_in">print</span>(aList)<br><span class="hljs-built_in">print</span>(bList)<br><br><span class="hljs-comment"># 下面的例子是深复制的例子</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下面的例子是深复制的例子&quot;</span>)<br><span class="hljs-keyword">import</span> copy<br>aList = [<span class="hljs-number">1</span>, [<span class="hljs-number">88</span>], <span class="hljs-number">2</span>]<br>bList = copy.deepcopy(aList)    <span class="hljs-comment"># aList和bList完全独立，互相不影响</span><br><br><span class="hljs-built_in">print</span>(aList == bList)   <span class="hljs-comment"># bList和aList包含同样的元素引用</span><br><span class="hljs-built_in">print</span>(aList <span class="hljs-keyword">is</span> bList)   <span class="hljs-comment"># 不是同一个对象</span><br><span class="hljs-built_in">print</span>(aList)<br><span class="hljs-built_in">print</span>(bList)<br><br>bList[<span class="hljs-number">1</span>].append(<span class="hljs-number">99</span>)     <span class="hljs-comment"># 深复制，修改bList不会影响到aList</span><br><span class="hljs-built_in">print</span>(aList)<br><span class="hljs-built_in">print</span>(bList)<br></code></pre></td></tr></table></figure><h3 id="1-4-列表排序和逆序"><a href="#1-4-列表排序和逆序" class="headerlink" title="1.4 列表排序和逆序"></a>1.4 列表排序和逆序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;排序：&quot;</span>)<br>aList = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">15</span>, <span class="hljs-number">256</span>, <span class="hljs-number">51</span>, <span class="hljs-number">8</span>]<br><br>aList.sort()    <span class="hljs-comment"># 默认升序排列</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sort()升序&quot;</span>)<br><span class="hljs-built_in">print</span>(aList)<br><span class="hljs-built_in">print</span>()<br><br>aList.sort(reverse=<span class="hljs-literal">True</span>)    <span class="hljs-comment"># 降序排列</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sort()降序&quot;</span>)<br><span class="hljs-built_in">print</span>(aList)<br><span class="hljs-built_in">print</span>()<br><br>aList.sort(key=<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(x)))       <span class="hljs-comment"># 按转换为字符串后的长度排序</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sort()其他方式排序：转换为字符串后的长度排序&quot;</span>)<br><span class="hljs-built_in">print</span>(aList)<br><span class="hljs-built_in">print</span>()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sorted()升序&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(aList))    <span class="hljs-comment"># sorted()默认升序，返回新列表,不会改变原列表</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sorted()降序&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(aList, reverse=<span class="hljs-literal">True</span>))  <span class="hljs-comment"># 降序</span><br><span class="hljs-built_in">print</span>()<br><br>aList = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>]<br>aList.reverse()  <span class="hljs-comment"># 原地逆序</span><br><span class="hljs-built_in">print</span>(aList)<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># reversed方法返回逆序排列后的迭代对象，不会影响到原列表</span><br>aList = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>]<br>newList = <span class="hljs-built_in">reversed</span>(aList)<br><span class="hljs-built_in">print</span>(newList)<br><br><span class="hljs-built_in">print</span>(aList)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(newList))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(newList))    <span class="hljs-comment"># 访问过的元素不可以再次访问</span><br></code></pre></td></tr></table></figure><h3 id="1-5-用于序列操作的常用内置函数"><a href="#1-5-用于序列操作的常用内置函数" class="headerlink" title="1. 5 用于序列操作的常用内置函数"></a>1. 5 用于序列操作的常用内置函数</h3><p>any()用来测试序列或可迭代对象中是否存在等价于 True 的元素</p><p>all()用来测试序列或可迭代对象中是否所有元素都等价于 True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;any():&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">any</span>([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]))   <span class="hljs-comment"># any()用来测试序列或可迭代对象中是否存在等价于True的元素</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">any</span>([<span class="hljs-number">0</span>]))<br><span class="hljs-built_in">print</span>()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;all():&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">all</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]))    <span class="hljs-comment"># all()用来测试序列或可迭代对象中是否所有元素都等价于True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">all</span>([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))<br></code></pre></td></tr></table></figure><p>sum()：对数值型列表的元素进行求和运算，对于非数值型列表需要指定第二个参数，适用于元组、集合、range 对象、字典、map 对象、filter 对象等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = &#123;<br>    <span class="hljs-number">1</span>: <span class="hljs-number">77</span>,<br>    <span class="hljs-number">2</span>: <span class="hljs-number">88</span>,<br>    <span class="hljs-number">3</span>: <span class="hljs-number">99</span><br>&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(a))       <span class="hljs-comment"># 对字典的键进行求和</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(a.values()))      <span class="hljs-comment"># 对字典的值进行求和</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>([[<span class="hljs-number">1</span>], [<span class="hljs-number">2</span>], [<span class="hljs-string">&quot;name&quot;</span>]], []))    <span class="hljs-comment"># 非数值型，第二个参数需要指定</span><br></code></pre></td></tr></table></figure><p>zip()方法、enumerate()方法参考 python(一)</p><h3 id="1-5-列表推导式"><a href="#1-5-列表推导式" class="headerlink" title="1.5 列表推导式"></a>1.5 列表推导式</h3><p>列表推导式语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[exp <span class="hljs-keyword">for</span> variable <span class="hljs-keyword">in</span> iterable <span class="hljs-keyword">if</span> condition]<br></code></pre></td></tr></table></figure><p>列表推导式使用非常简洁的方式来快速生成满足特定需求的列表。（<b style="color: red">非常简洁，以至于有时候很难看懂，应多看多敲</b>）</p><p>几个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">aList = [x*x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(aList)<br><span class="hljs-built_in">print</span>()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">相当于</span><br><span class="hljs-string">aList = []</span><br><span class="hljs-string">for x in range(10):</span><br><span class="hljs-string">    aList.append(x * x)</span><br><span class="hljs-string"></span><br><span class="hljs-string">print(aList)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>vec = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;使用列表推导式实现嵌套列表的平铺&quot;</span>)<br><span class="hljs-built_in">print</span>(vec)<br><span class="hljs-built_in">print</span>([num <span class="hljs-keyword">for</span> elem <span class="hljs-keyword">in</span> vec <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> elem])    <span class="hljs-comment"># 使用列表推导式实现嵌套列表的平铺</span><br><span class="hljs-built_in">print</span>()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;在列表推导式中使用多个循环&quot;</span>)<br><span class="hljs-built_in">print</span>([(x, y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)])     <span class="hljs-comment"># 在列表推导式中使用多个循环</span><br></code></pre></td></tr></table></figure><h2 id="2-元组"><a href="#2-元组" class="headerlink" title="2. 元组"></a>2. 元组</h2><h3 id="2-1-元组的创建和删除"><a href="#2-1-元组的创建和删除" class="headerlink" title="2.1 元组的创建和删除"></a>2.1 元组的创建和删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">myTuple = ()<br><span class="hljs-built_in">print</span>(myTuple)  <span class="hljs-comment"># 空元组</span><br><br>myTuple = (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(myTuple)<br><br>myTuple = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-literal">True</span>, <span class="hljs-string">&quot;Hello&quot;</span>   <span class="hljs-comment"># 有逗号时可以没有括号</span><br><span class="hljs-built_in">print</span>(myTuple)<br><br>myTuple = (<span class="hljs-number">2</span>)     <span class="hljs-comment"># 不是元组，即使元组只有一个元素，元素后面也必须要带逗号，即myTuple = (2, )才对</span><br><span class="hljs-built_in">print</span>(myTuple)<br><br>myTuple = <span class="hljs-built_in">tuple</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>)<br><span class="hljs-built_in">print</span>(myTuple)       <span class="hljs-comment"># 通过tuple()函数可以把列表、字符串、集合等可迭代对象转为元组</span><br><br><span class="hljs-keyword">del</span> myTuple     <span class="hljs-comment"># 只能通过del命令删除整个元组对象，不能删除只删除特定元素，因为元组属于不可变序列</span><br></code></pre></td></tr></table></figure><h3 id="2-2-元组和列表的区别"><a href="#2-2-元组和列表的区别" class="headerlink" title="2.2 元组和列表的区别"></a>2.2 元组和列表的区别</h3><ul><li>列表属于可变序列， 元组属于不可变序列</li><li>元组没有提供 append()、extend()、insert()和 remove()、pop()方法</li><li>元组不支持对元组元素进行 del 操作，只能用 del 命令删除整个元组</li><li>元组也支持切片操作，但只能通过切片来访问元组中的元素</li><li>元组的访问和处理速度比列表更快</li></ul><p><b style="color: red">元组属于不可变序列，其元素的值是不可改变的，但是元组中含有可变序列的话，可以通过调用可变序列的方法来改变可变序列的值。</b></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">myTuple = (<span class="hljs-number">1</span>, [<span class="hljs-number">77</span>, <span class="hljs-number">88</span>], <span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(myTuple)<br><br>myTuple[<span class="hljs-number">1</span>].append(<span class="hljs-number">99</span>)   <span class="hljs-comment"># 调用元组里的可变序列的方法来改变可变序列的值</span><br><span class="hljs-built_in">print</span>(myTuple)<br><br>myTuple[<span class="hljs-number">1</span>] += [<span class="hljs-number">111</span>]  <span class="hljs-comment"># 这样子相当于直接给可变序列赋值，即给元组的元素赋值，会报错</span><br><span class="hljs-built_in">print</span>(myTuple)<br></code></pre></td></tr></table></figure><h3 id="2-3-序列解包"><a href="#2-3-序列解包" class="headerlink" title="2.3 序列解包"></a>2.3 序列解包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">x, y, z = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(x, y, z)<br><br>myTuple = (<span class="hljs-literal">True</span>, <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-number">88</span>)<br>(x, y, z) = myTuple<br><br><span class="hljs-built_in">print</span>(x, y, z)<br></code></pre></td></tr></table></figure><p>序列解包用于列表和字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">a, b, c = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-built_in">print</span>(a, b, c)<br><br><span class="hljs-comment"># 下面是序列解包用于字典</span><br>s = &#123;<br>    <span class="hljs-string">&#x27;Hello&#x27;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&#x27;World&#x27;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&#x27;!&#x27;</span>: <span class="hljs-number">3</span>,<br>&#125;<br><br>a, b, c = s              <span class="hljs-comment"># 序列解包对字典使用，默认是对字典&quot;键&quot;操作</span><br><span class="hljs-built_in">print</span>(a, b, c)<br><br>a, b, c = s.items()     <span class="hljs-comment"># 使用字典的items()方法说明，是对字典&quot;键:值&quot;操作</span><br><span class="hljs-built_in">print</span>(a, b, c)<br><br>a, b, c = s.values()    <span class="hljs-comment"># 使用字典的values()方法说明，是对字典&quot;值&quot;操作</span><br><span class="hljs-built_in">print</span>(a, b, c)<br></code></pre></td></tr></table></figure><p>使用序列解包方便同时遍历多个序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">keys = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(keys, values):<br>    <span class="hljs-built_in">print</span>(k, v)<br><br></code></pre></td></tr></table></figure><p>可以加上一个或两个星号(*)进行序列解包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(*[<span class="hljs-number">1</span>], *[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>, *[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<br><br><span class="hljs-built_in">print</span>(&#123;*<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>), <span class="hljs-number">5</span>, *(<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>)&#125;)<br><br><span class="hljs-built_in">print</span>(&#123;<br>    <span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1</span>,<br>    **&#123;<span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">2</span>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="2-4-生成器表达式"><a href="#2-4-生成器表达式" class="headerlink" title="2.4 生成器表达式"></a>2.4 生成器表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">g = ((i + <span class="hljs-number">2</span>)**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))     <span class="hljs-comment"># 生成器表达式，和列表推导式非常接近</span><br><span class="hljs-built_in">print</span>(g)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(g))      <span class="hljs-comment"># 转化为列表</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(g))      <span class="hljs-comment"># 元素已经遍历完了，所以输出空数组</span><br><br>g = ((i + <span class="hljs-number">2</span>)**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(g.__next__())     <span class="hljs-comment"># 通过生成器对象的__next__()方法获取下一个元素</span><br><span class="hljs-built_in">print</span>(g.__next__())     <span class="hljs-comment"># 生成器对象中的每个元素只能访问一次，所以两次输出不一样</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))      <span class="hljs-comment"># 使用内置函数next()获取下一个元素</span><br><br>g = ((i + <span class="hljs-number">2</span>)**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> g:     <span class="hljs-comment"># 使用循环遍历生成器对象中的元素</span><br>    <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="3-字典"><a href="#3-字典" class="headerlink" title="3. 字典"></a>3. 字典</h2><h3 id="3-1-字典的创建与删除"><a href="#3-1-字典的创建与删除" class="headerlink" title="3.1 字典的创建与删除"></a>3.1 字典的创建与删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python">mydict = &#123;<br>    <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-built_in">print</span>(mydict)<br><br>keys = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br>values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(keys, values)))      <span class="hljs-comment"># 通过内置函数dict()创建字典</span><br><br>mydict = <span class="hljs-built_in">dict</span>()   <span class="hljs-comment"># 空字典</span><br><span class="hljs-built_in">print</span>(mydict)    <span class="hljs-comment"># 看着像集合，但是是字典</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mydict))<br><br>mydict = &#123;&#125;     <span class="hljs-comment"># 空字典</span><br><span class="hljs-built_in">print</span>(mydict)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mydict))<br><br>mydict = <span class="hljs-built_in">dict</span>(name=<span class="hljs-string">&#x27;clz&#x27;</span>, age=<span class="hljs-number">21</span>, sex=<span class="hljs-string">&#x27;male&#x27;</span>, address=<span class="hljs-string">&#x27;QQ&#x27;</span>)   <span class="hljs-comment"># 通过dict()键值对形式创建字典</span><br><span class="hljs-built_in">print</span>(mydict)<br><br><span class="hljs-keyword">del</span> mydict[<span class="hljs-string">&#x27;age&#x27;</span>]<br><span class="hljs-built_in">print</span>(mydict)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----pop()----------&#x27;</span>)<br><span class="hljs-built_in">print</span>(mydict.pop(<span class="hljs-string">&#x27;sex&#x27;</span>))     <span class="hljs-comment"># 删除指定&quot;键&quot;的元素，并返回对应被删除的值</span><br><span class="hljs-built_in">print</span>(mydict)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----popitem()------&#x27;</span>)<br><span class="hljs-built_in">print</span>(mydict.popitem())     <span class="hljs-comment"># 删除并返回字典中的一个元素</span><br><span class="hljs-built_in">print</span>(mydict)<br><br>mydict.clear()      <span class="hljs-comment"># 删除字典中的所有元素,字典变为空字典，不像del&quot;连根拔起&quot;</span><br><span class="hljs-built_in">print</span>(mydict)<br><br></code></pre></td></tr></table></figure><h3 id="3-2-字典元素的读取"><a href="#3-2-字典元素的读取" class="headerlink" title="3.2 字典元素的读取"></a>3.2 字典元素的读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">mydict = <span class="hljs-built_in">dict</span>(name=<span class="hljs-string">&#x27;clz&#x27;</span>, age=<span class="hljs-number">21</span>, sex = <span class="hljs-string">&#x27;male&#x27;</span>)   <span class="hljs-comment"># 通过dict()键值对形式创建字典</span><br><br><span class="hljs-built_in">print</span>(mydict[<span class="hljs-string">&#x27;name&#x27;</span>])   <span class="hljs-comment"># 直接使用字典的&quot;键&quot;作为下标访问字典元素的值,找不到会报错</span><br><br><span class="hljs-built_in">print</span>(mydict.get(<span class="hljs-string">&#x27;age&#x27;</span>))       <span class="hljs-comment"># 使用字典对象的get()方法访问字典元素的值，找不到会返回None</span><br><br><span class="hljs-built_in">print</span>(mydict.keys())        <span class="hljs-comment"># 返回字典的&quot;键&quot;</span><br><br><span class="hljs-built_in">print</span>(mydict.values())        <span class="hljs-comment"># 返回字典的&quot;值&quot;</span><br><br><span class="hljs-built_in">print</span>(mydict.items())        <span class="hljs-comment"># 返回字典的键值对</span><br><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> mydict.items():      <span class="hljs-comment"># 序列解包，遍历每个元素的&quot;键&quot;和&quot;值&quot;</span><br>    <span class="hljs-built_in">print</span>(key, value, sep=<span class="hljs-string">&#x27;:&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-3-字典的添加与修改"><a href="#3-3-字典的添加与修改" class="headerlink" title="3.3 字典的添加与修改"></a>3.3 字典的添加与修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">mydict = <span class="hljs-built_in">dict</span>(name=<span class="hljs-string">&#x27;clz&#x27;</span>, age=<span class="hljs-number">21</span>, sex = <span class="hljs-string">&#x27;male&#x27;</span>)   <span class="hljs-comment"># 通过dict()键值对形式创建字典</span><br><br>mydict[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&#x27;czh&#x27;</span>      <span class="hljs-comment"># 当前已经有name这个键了，所以修改这个键的值</span><br><span class="hljs-built_in">print</span>(mydict)<br><br>mydict[<span class="hljs-string">&#x27;address&#x27;</span>] = <span class="hljs-string">&#x27;QQ&#x27;</span>    <span class="hljs-comment"># 当前还没有address这个键，所以添加一个新元素</span><br><span class="hljs-built_in">print</span>(mydict)<br><br>mydict2 = <span class="hljs-built_in">dict</span>(name=<span class="hljs-string">&#x27;czh&#x27;</span>, age=<span class="hljs-number">22</span>, sex = <span class="hljs-string">&#x27;male&#x27;</span>, haha = <span class="hljs-string">&#x27;Hello&#x27;</span>)<br>mydict.update(mydict2)   <span class="hljs-comment"># 以调用这个方法的字典对象为准，把它没有的键对应的键值对加入到字典中</span><br><span class="hljs-built_in">print</span>(mydict)<br></code></pre></td></tr></table></figure><h2 id="4-集合"><a href="#4-集合" class="headerlink" title="4. 集合"></a>4. 集合</h2><p>特点：没有重复的元素</p><h3 id="4-1-集合的创建和删除"><a href="#4-1-集合的创建和删除" class="headerlink" title="4.1 集合的创建和删除"></a>4.1 集合的创建和删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">myset = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>&#125;<br><span class="hljs-built_in">print</span>(myset)<br><br>myset = <span class="hljs-built_in">set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(myset)<br><br>myset = <span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 空集合</span><br><span class="hljs-built_in">print</span>(myset)<br><br>myset.add(<span class="hljs-number">3</span>)   <span class="hljs-comment"># 使用add方法添加元素</span><br><span class="hljs-built_in">print</span>(myset)<br>myset.add(<span class="hljs-number">2</span>)   <span class="hljs-comment"># add()方法是在前面添加元素</span><br>myset.add(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(myset)<br><br>myset.pop()<br><span class="hljs-built_in">print</span>(myset)   <span class="hljs-comment"># pop()方法是弹出在最前面元素,不接受参数</span><br><br>myset.remove(<span class="hljs-number">3</span>)  <span class="hljs-comment"># remove()删除指定元素</span><br><span class="hljs-built_in">print</span>(myset)<br><br></code></pre></td></tr></table></figure><h3 id="4-2-集合运算"><a href="#4-2-集合运算" class="headerlink" title="4.2 集合运算"></a>4.2 集合运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">aset = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br>bset = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;<br><br><span class="hljs-built_in">print</span>(aset | bset)      <span class="hljs-comment"># 并集</span><br><br><span class="hljs-built_in">print</span>(aset &amp; bset)      <span class="hljs-comment"># 交集</span><br><br><span class="hljs-built_in">print</span>(aset - bset)      <span class="hljs-comment"># 差集</span><br><br><span class="hljs-built_in">print</span>(aset ^ bset)      <span class="hljs-comment"># 对称差集</span><br><br>aset = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>bset = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;<br><span class="hljs-built_in">print</span>(bset &lt; aset)<br><span class="hljs-built_in">print</span>(bset == aset)<br><span class="hljs-built_in">print</span>(bset &gt; aset)   <span class="hljs-comment"># 三个都是false，因为a集合和b集合没有关系</span><br><br>cset = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;<br><span class="hljs-built_in">print</span>(aset &lt; cset)  <span class="hljs-comment"># a集合是c集合的子集，所以是true</span><br></code></pre></td></tr></table></figure><h2 id="5-复杂数据结构"><a href="#5-复杂数据结构" class="headerlink" title="5. 复杂数据结构"></a>5. 复杂数据结构</h2><h3 id="5-1-堆"><a href="#5-1-堆" class="headerlink" title="5.1 堆"></a>5.1 堆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># heapq模块默认建最小堆</span><br><span class="hljs-keyword">import</span> heapq<br><span class="hljs-keyword">import</span> random<br>data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br>random.shuffle(data)        <span class="hljs-comment"># 随机打乱顺序</span><br><span class="hljs-built_in">print</span>(data)<br><br>heap = []<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> data:<br>    heapq.heappush(heap, n)     <span class="hljs-comment"># 建堆</span><br><br><span class="hljs-built_in">print</span>(heap)<br><br>heapq.heappush(heap, <span class="hljs-number">0.5</span>)   <span class="hljs-comment"># 新数据入堆</span><br><span class="hljs-built_in">print</span>(heap)<br><span class="hljs-built_in">print</span>(heapq.heappop(heap))  <span class="hljs-comment"># 弹出最小的元素，堆会自动重建</span><br><span class="hljs-built_in">print</span>(heap)<br><br>myheap = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">434</span>]<br>heapq.heapify(myheap)  <span class="hljs-comment"># 将列表转化为堆</span><br><span class="hljs-built_in">print</span>(myheap)<br><br>heapq.heapreplace(myheap, <span class="hljs-number">6</span>)  <span class="hljs-comment"># 替换堆中的最小元素值，堆会自动重建</span><br><span class="hljs-built_in">print</span>(myheap)<br><br><span class="hljs-built_in">print</span>(heapq.nlargest(<span class="hljs-number">4</span>, myheap))  <span class="hljs-comment"># 返回堆中最大的4个元素(是数值最大，不是层数)，按从大到小排序</span><br><span class="hljs-built_in">print</span>(heapq.nsmallest(<span class="hljs-number">5</span>, myheap))  <span class="hljs-comment"># 返回堆中最小的5个元素，按从小到大排序</span><br><br></code></pre></td></tr></table></figure><h3 id="5-2-队列"><a href="#5-2-队列" class="headerlink" title="5.2 队列"></a>5.2 队列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> queue<br>q = queue.Queue()  <span class="hljs-comment"># 创建队列的实例</span><br><br>q.put(<span class="hljs-number">1</span>)    <span class="hljs-comment"># 入队</span><br>q.put(<span class="hljs-number">5</span>)<br>q.put(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(q.queue)<br><br><span class="hljs-built_in">print</span>(q.get())   <span class="hljs-comment"># 队列头元素出队</span><br><span class="hljs-built_in">print</span>(q.queue)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">后进先出队列</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>LiFoQueue = queue.LifoQueue(<span class="hljs-number">5</span>)<br>LiFoQueue.put(<span class="hljs-number">1</span>)<br>LiFoQueue.put(<span class="hljs-number">2</span>)<br>LiFoQueue.put(<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">print</span>(LiFoQueue.queue)<br><span class="hljs-built_in">print</span>(LiFoQueue.get())<br><span class="hljs-built_in">print</span>(LiFoQueue.queue)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">优先级队列</span><br><span class="hljs-string">优先级队列,自动依照元素的权值排列。权值最高者排在最前面</span><br><span class="hljs-string">没有去权值时，则按建堆来排列</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>PriQueue = queue.PriorityQueue(<span class="hljs-number">5</span>)<br>PriQueue.put(<span class="hljs-number">3</span>)<br>PriQueue.put(<span class="hljs-number">5</span>)<br>PriQueue.put(<span class="hljs-number">1</span>)<br>PriQueue.put(<span class="hljs-number">7</span>)<br><span class="hljs-built_in">print</span>(PriQueue.queue)<br><br><span class="hljs-built_in">print</span>(PriQueue.get())<br><span class="hljs-built_in">print</span>(PriQueue.queue)<br></code></pre></td></tr></table></figure><h3 id="5-3-栈"><a href="#5-3-栈" class="headerlink" title="5.3 栈"></a>5.3 栈</h3><p>可以使用列表来实现栈，append()方法用于实现入栈操作，pop()方法用于实现出栈操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">mystack = []<br>mystack.append(<span class="hljs-number">1</span>)<br>mystack.append(<span class="hljs-number">3</span>)<br>mystack.append(<span class="hljs-number">5</span>)<br><br><span class="hljs-built_in">print</span>(mystack)<br><span class="hljs-built_in">print</span>(mystack.pop())<br><span class="hljs-built_in">print</span>(mystack)<br><br>mystack.pop()<br><span class="hljs-built_in">print</span>(mystack)<br>mystack.pop()<br><span class="hljs-built_in">print</span>(mystack)<br></code></pre></td></tr></table></figure><p><b style="color: red">用列表来实现栈不足：1. 当列表为空时，再执行 pop()会抛出异常； 2. 无法限制栈的大小</b></p><p>可以自己自定义栈结构来实现。</p><h3 id="5-4-链表"><a href="#5-4-链表" class="headerlink" title="5.4 链表"></a>5.4 链表</h3><p>可以使用列表来实现链表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">linkTable = []<br>linkTable.append(<span class="hljs-number">1</span>)<br>linkTable.append(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(linkTable)<br><br>linkTable.insert(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 正在链表中间插入节点</span><br><span class="hljs-built_in">print</span>(linkTable)<br><br>linkTable.remove(linkTable[<span class="hljs-number">2</span>])   <span class="hljs-comment"># 删除节点</span><br><span class="hljs-built_in">print</span>(linkTable)<br></code></pre></td></tr></table></figure><h3 id="5-5-二叉树"><a href="#5-5-二叉树" class="headerlink" title="5.5 二叉树"></a>5.5 二叉树</h3><p>自定义二叉树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTree</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, value</span>):</span><br>        self.__left = <span class="hljs-literal">None</span>    <span class="hljs-comment"># 和c++中的一开始让左孩子指向null类似</span><br>        self.__right = <span class="hljs-literal">None</span><br>        self.__data = value<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">buildLeftChild</span>(<span class="hljs-params">self, value</span>):</span><br>        <span class="hljs-keyword">if</span> self.__left:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;左孩子已经存在&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            self.__left = BinaryTree(value)<br>            <span class="hljs-keyword">return</span> self.__left<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">buildRightChild</span>(<span class="hljs-params">self, value</span>):</span><br>        <span class="hljs-keyword">if</span> self.__right:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;右孩子已经存在&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            self.__right = BinaryTree(value)<br>            <span class="hljs-keyword">return</span> self.__right<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(self.__data)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">preOrder</span>(<span class="hljs-params">self</span>):</span>     <span class="hljs-comment"># 前序遍历</span><br>        <span class="hljs-built_in">print</span>(self.__data)<br>        <span class="hljs-keyword">if</span> self.__left:<br>            self.__left.preOrder()<br>        <span class="hljs-keyword">if</span> self.__right:<br>            self.__right.preOrder()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inOrder</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> self.__left:<br>            self.__left.inOrder()<br>        <span class="hljs-built_in">print</span>(self.__data)<br>        <span class="hljs-keyword">if</span> self.__right:<br>            self.__right.inOrder()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">postOrder</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> self.__left:<br>            self.__left.postOrder()<br>        <span class="hljs-keyword">if</span> self.__right:<br>            self.__right.postOrder()<br>        <span class="hljs-built_in">print</span>(self.__data)<br></code></pre></td></tr></table></figure><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><p>之前没有学到的特别用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">5</span> <span class="hljs-keyword">if</span> <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">6</span>   <span class="hljs-comment"># 后面不能写成x=6，只能是值的形式</span><br><span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-comment"># 等价于</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">if 2 &gt; 1:</span><br><span class="hljs-string">    x = 5</span><br><span class="hljs-string">else:</span><br><span class="hljs-string">    x = 6</span><br><span class="hljs-string"></span><br><span class="hljs-string">print(x)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程仓库小技能</title>
      <link href="/2021/10/20/git-skills/"/>
      <url>/2021/10/20/git-skills/</url>
      
        <content type="html"><![CDATA[<h1 id="远程仓库小技能"><a href="#远程仓库小技能" class="headerlink" title="远程仓库小技能"></a>远程仓库小技能</h1><h2 id="1-github-dev"><a href="#1-github-dev" class="headerlink" title="1. github_dev"></a>1. github_dev</h2><p>这个功能 gitee<strong>好像</strong>没有，突然发现的工具，可以在网页直接编辑仓库文件，而且有 vscode 支持，和直接用 vscode 差不多</p><ol><li><p>进入要修改的仓库，按下键盘.(句号那个键)</p><p><img src="https://pic.imgdb.cn/item/616d9f642ab3f51d911fce14.jpg"></p></li><li><p>等一小会，进入以下界面</p><p><img src="https://pic.imgdb.cn/item/616d9fcb2ab3f51d91203540.jpg"></p></li><li><p>直接开始修改代码，这个 网页版的 vscode 会实时保存，所以，当你修改后，在下图红框框中会出现小标，当你手动恢复原状时，小标又会消失</p></li></ol><p><img src="https://pic.imgdb.cn/item/616da0362ab3f51d91209c0f.jpg"></p><ol start="4"><li><p>点击小标后，按顺序点击下图的 1， 2，和 vscode 类似，比 vscode 简单，相当于没有远程库了，因为你在网页上打开的就是 github 上的库，所以只需要执行 git add . 和 git commit -m “add test3”就行，1 和 2 分别对应这两个步骤</p><p><img src="https://pic.imgdb.cn/item/616da1742ab3f51d9121bc0b.jpg"></p></li><li><p>回到仓库，会发现已经修改成功</p><p><img src="https://pic.imgdb.cn/item/616da30b2ab3f51d9123332a.jpg"></p></li><li><p>删除文件也是同理，通过这个工具再也不用为了删除一个无关文件，而把整个库克隆到本地，再修改提交到远程仓库了</p></li></ol><h2 id="2-gitee-项目仓库流程"><a href="#2-gitee-项目仓库流程" class="headerlink" title="2. gitee 项目仓库流程"></a>2. gitee 项目仓库流程</h2><ol><li><p>管理员建仓库</p></li><li><p>邀请成员</p><p><img src="https://pic.imgdb.cn/item/616fab6e2ab3f51d918e5798.jpg"></p><p><img src="https://pic.imgdb.cn/item/616fabb62ab3f51d918e8108.jpg"></p></li><li><p>设置保护分支，防止项目成员不小心误推</p><p>「保护分支」是 Gitee 针对团队协作中代码权限管理的功能，即为了减小成员误操作带来的损失，对一些关键的分支进行保护，防止被破坏。保护以后，只有仓库的管理员才能对这个分支进行修改、合并等操作。(转自 gitee)</p><p><img src="https://pic.imgdb.cn/item/616fad072ab3f51d918f4c08.jpg"></p></li><li><p>设置保护分支规则(比如谁可以推之类的)</p><p><img src="https://pic.imgdb.cn/item/616fadb32ab3f51d918fc252.jpg"></p><p><img src="https://pic.imgdb.cn/item/616fad882ab3f51d918fa574.jpg"></p></li><li><p>既然添加了保护分支规则，那就肯定不是所有项目成员都可以直接 push 到仓库的了，这里就需要先 fork 仓库，再 push 到自己的仓库，然后发起 pull request 请求</p><p><img src="https://pic.imgdb.cn/item/616fb3062ab3f51d91930d9a.jpg"></p><p><img src="https://pic.imgdb.cn/item/616fb36f2ab3f51d9193512d.jpg"></p><p><img src="https://pic.imgdb.cn/item/616fb4612ab3f51d9193d0fb.jpg"></p></li><li><p>等待管理员合并代码</p><p>tips: git 使用 https 协议，每次 pull,push 都要输入密码，使用 git 协议，使用 ssh 密钥可以省去每次输密码</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(三)</title>
      <link href="/2021/10/15/vue-3/"/>
      <url>/2021/10/15/vue-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-学习笔记-三"><a href="#Vue-学习笔记-三" class="headerlink" title="Vue 学习笔记(三)"></a>Vue 学习笔记(三)</h1><h2 id="1-插槽"><a href="#1-插槽" class="headerlink" title="1. 插槽"></a>1. 插槽</h2><p>插槽允许开发者在封装组件时，把<strong>不确定的、希望由用户指定的部分</strong>定义为插槽。</p><p>我们使用标签时，开始标签和结束标签之间之前都没有写东西。组件的标签和正常的双标签，如 div、p 等一样，可以在里面写东西。但是，直接在里面写，会发现，写的东西不会显示出来，也找不到了，被丢弃了。其实这个也挺好理解的，组件本来就有东西了，vue 又不知道你写的东西要插到哪里去。所以，vue 提供了插槽，可以在想要插的地方加上一个插槽，之后再把内容插过去。</p><p>用法例子：</p><p><img src="https://pic.imgdb.cn/item/61529ba52ab3f51d917efa3d.jpg"></p><p>效果：</p><p><img src="https://pic.imgdb.cn/item/61529bb92ab3f51d917f0fce.jpg"></p><p><b style="color: red">没有预留插槽的话，用户提供的自定义内容都会被丢弃。</b></p><ul><li><p>封装组件时，可以为预留的插槽提供默认内容，如果组件的使用者没有为插槽提供内容，默认内容就会生效。</p><p><img src="https://pic.imgdb.cn/item/61529cdb2ab3f51d91804660.jpg"></p></li></ul><h3 id="1-1-具名插槽"><a href="#1-1-具名插槽" class="headerlink" title="1.1 具名插槽"></a>1.1 具名插槽</h3><p><img src="https://pic.imgdb.cn/item/61529e812ab3f51d91821f07.jpg"></p><p>上面的例子中，有多个插槽，输入的文章头这段信息原本想插在第一个插槽里面的，但是会发现，它插到了所有的插槽中。</p><p>这个时候就需要使用<strong>具名插槽了</strong>。</p><p><b style="color: red">具名插槽</b>：如果在封装组件时需要预留多个插槽，则需要为每个插槽指定具体的名称。这种带有具体名称的插槽就叫”具名插槽”。</p><p><img src="https://pic.imgdb.cn/item/6152a22c2ab3f51d91870ab3.jpg"></p><p>如果没有给插槽起名字，则插槽默认叫”default”。要插入插槽的内容如果没有指定要插到哪里去，则会插到名为”default”的插槽中。</p><p>这就是为什么上面没有使用具名插槽时，内容会插到所有的插槽中去。</p><h3 id="1-2-作用域插槽"><a href="#1-2-作用域插槽" class="headerlink" title="1.2 作用域插槽"></a>1.2 作用域插槽</h3><p>在封装组件时，可以为预留的 slot 插槽绑定 props 数据，这个<strong>带有 props 数据的 slot 插槽</strong>叫做<strong>作用域插槽</strong></p><p><img src="https://pic.imgdb.cn/item/6152a5bd2ab3f51d918bc348.jpg"></p><p><strong>解构插槽</strong>：因为得到的数据是对象形式的，所以可以解构，得到要用的数据</p><p><img src="https://pic.imgdb.cn/item/6152a6332ab3f51d918c5a45.jpg"></p><h2 id="2-自定义指令"><a href="#2-自定义指令" class="headerlink" title="2. 自定义指令"></a>2. 自定义指令</h2><h3 id="2-1-私有自定义指令"><a href="#2-1-私有自定义指令" class="headerlink" title="2.1 私有自定义指令"></a>2.1 私有自定义指令</h3><p>在每个 vue 组件中，可以在 directives 节点下声明<strong>私有自定义指令</strong>。</p><p><img src="https://pic.imgdb.cn/item/6152a81d2ab3f51d918eacae.jpg"></p><ul><li><p>为自定义指令动态绑定参数值</p><p>通过=的方式，为当前指令动态添加参数值，通过形参中的第二个参数<strong>binding</strong>来接收指令的参数值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-color</span>=<span class="hljs-string">&quot;color&quot;</span>&gt;</span>App根组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;blue&quot;</span>,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">directives</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">color</span>: &#123;</span><br><span class="javascript">        <span class="hljs-comment">//自定义指令名字</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">el, binding</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">//el是绑定了这个指令的DOM对象</span></span><br><span class="javascript">          <span class="hljs-comment">// el.style.color = &#x27;red&#x27;;</span></span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(binding);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.app-container</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#efefef</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打印的结果：</p><p><img src="https://pic.imgdb.cn/item/6152a97c2ab3f51d9190653f.jpg"></p><p>可以知道 binding.value 就是参数值。</p><p>所以上面的 bind()改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"> bind(el, binding) &#123;  //el是绑定了这个指令的DOM对象<br>  el.style.color = binding.value;<br>&#125;,<br></code></pre></td></tr></table></figure><p>就可以实现为自定义指令动态绑定参数值</p></li><li><p><b style="color: red">update 函数</b>：bind 函数只会调用一次，当指令第一次绑定到元素时调用，<strong>当 DOM 更新时 bind 函数不会触发</strong>。update()函数则是<strong>每当 DOM 更新时</strong>，都会触发。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-color</span>=<span class="hljs-string">&quot;color&quot;</span>&gt;</span>App根组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;color = color==&#x27;red&#x27; ? &#x27;blue&#x27; : &#x27;red&#x27;&quot;</span>&gt;</span>变色<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;blue&quot;</span>,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">directives</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">color</span>: &#123;</span><br><span class="javascript">        <span class="hljs-comment">//自定义指令名字</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">el, binding</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">//el是绑定了这个指令的DOM对象</span></span><br><span class="javascript">          el.style.color = binding.value;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.app-container</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#efefef</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的示例中，无论怎么点击变色按钮，颜色都不会变，这就是因为 bind()方法只在当指令第一次绑定到元素时调用，且<strong>只调用一次</strong>，所以此时需要用 update()方法。<b style="color: red">不能只有 update()，没有 bind()。每当 DOM 更新时，都会触发，但是指令第一次绑定到元素时，update()不会调用</b>。</p><p>directives 节点改为以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">directives: &#123; color:&#123; //自定义指令名字 bind(el, binding) &#123;<br>//el是绑定了这个指令的DOM对象 el.style.color = binding.value;<br>console.log(&quot;bind&quot;); &#125;, update(el, binding) &#123; //el是绑定了这个指令的DOM对象<br>el.style.color = binding.value; console.log(&quot;update&quot;); &#125;, &#125; &#125;<br></code></pre></td></tr></table></figure><p>连续点击变色按钮。</p><p><img src="https://pic.imgdb.cn/item/6152ae852ab3f51d9196e16e.jpg"></p><p>简写：上面那张图，可以看到 bind()和 update()方法的业务逻辑一样，此时，可以使用简写形式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">color(el, binding) &#123; //el是绑定了这个指令的DOM对象 el.style.color =<br>binding.value; &#125;,<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-2-公有自定义指令"><a href="#2-2-公有自定义指令" class="headerlink" title="2.2 公有自定义指令"></a>2.2 公有自定义指令</h3><p>所有组件都能使用。</p><p>在 main.js 中通过**Vue.directive()**进行声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.directive(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-function">(<span class="hljs-params">el, binding</span>) =&gt;</span> &#123;<br>  el.style.color = binding.value;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="3-ESlint-使用"><a href="#3-ESlint-使用" class="headerlink" title="3. ESlint 使用"></a>3. ESlint 使用</h2><p>ESLint 最初是由<a href="http://nczonline.net/">Nicholas C. Zakas</a> 于 2013 年 6 月创建的开源项目。它的目标是提供一个插件化的 javascript 代码检测工具。(用来团队协作时，不会因为代码规范问题酿成大错，事先规定好代码的规范，不符合规范会报错或警告)</p><p>新建 vue 项目时选择</p><p><img src="https://pic.imgdb.cn/item/6157f7df2ab3f51d91ce06f9.jpg"></p><p><img src="https://pic.imgdb.cn/item/6157f7f22ab3f51d91ce2dcf.jpg"></p><p><img src="https://pic.imgdb.cn/item/6157f84e2ab3f51d91cee142.jpg"></p><p>故意在 main.js 中空两行结果：</p><p><img src="https://pic.imgdb.cn/item/6157f9cc2ab3f51d91d19a79.jpg"></p><p>复制上图红框框的字，到<a href="https://eslint.bootcss.com/">ESLint - 插件化的 JavaScript 代码检测工具</a>查找错误原因</p><p><img src="https://pic.imgdb.cn/item/6157fa4a2ab3f51d91d27d96.jpg"></p><p>ctrl+F,把复制的内容粘贴上去</p><p><img src="https://pic.imgdb.cn/item/6157fb542ab3f51d91d46249.jpg"></p><p><strong>修改规则</strong>：</p><p>可以自己修改规则</p><p><img src="https://pic.imgdb.cn/item/6157fc4f2ab3f51d91d63059.jpg"></p><p><img src="https://pic.imgdb.cn/item/6157fcdc2ab3f51d91d736d9.jpg"></p><p><img src="https://pic.imgdb.cn/item/6157fdf62ab3f51d91d92893.jpg"></p><h2 id="4-axios-优化"><a href="#4-axios-优化" class="headerlink" title="4. axios 优化"></a>4. axios 优化</h2><p>axios 用法可查看<a href="https://13535944743.github.io/2021/10/01/vue-1/">Vue 学习笔记(一)</a></p><p>用之前的方法每次新的组件需要使用 axios 时，都需要反复导入，通过 main.js 和原型链把 axios 挂载到 Vue 的原型上</p><p><img src="https://pic.imgdb.cn/item/61580a122ab3f51d91f0224f.jpg"></p><p>用的时候不需要重新导入，而是直接通过 this.$http 调用即可</p><p><img src="https://pic.imgdb.cn/item/61580a762ab3f51d91f0dc6f.jpg"></p><p><strong>全局配置 axios 的请求根路径</strong>：</p><p><img src="https://pic.imgdb.cn/item/61580bb22ab3f51d91f3338e.jpg"></p><p><b style="color: red">较高效用法</b>：</p><ol><li>通过 axios.create()设置好基址</li></ol><p><img src="https://pic.imgdb.cn/item/6165589c2ab3f51d91012d2e.jpg"></p><ol start="2"><li><p>其他要用到的地方导入使用即可</p><p><img src="https://pic.imgdb.cn/item/616559282ab3f51d9101d5cb.jpg"></p></li></ol><h2 id="5-路由"><a href="#5-路由" class="headerlink" title="5. 路由"></a>5. 路由</h2><h3 id="5-1-前端路由的概念"><a href="#5-1-前端路由的概念" class="headerlink" title="5.1 前端路由的概念"></a>5.1 前端路由的概念</h3><p>路由(router)是<strong>对应关系</strong>，前端路由则是 Hash 地址与组件之间的对应关系</p><p><strong>SPA 和前端路由</strong>：SPA 指的是一个 web 网站只有唯一的一个 HTML 页面，通过<strong>组件的展示和切换</strong>来实现类似多个 HTML 页面的效果。<strong>不同组件之间的切换</strong>需要通过<strong>前端路由</strong>来实现。</p><p><strong>前端路由的工作方式</strong>：</p><ol><li>用户点击了页面上的<strong>路由链接</strong></li><li>导致 URL 地址栏中的 Hash 值发生变化</li><li>前端路由监听到 Hash 地址的变化</li><li>前端路由把当前 Hash 地址的组件渲染到浏览器中</li></ol><p>例子：</p><p><img src="https://pic.imgdb.cn/item/615853f62ab3f51d916a363a.jpg"></p><h3 id="5-2-vue-router"><a href="#5-2-vue-router" class="headerlink" title="5.2 vue-router"></a>5.2 vue-router</h3><p>只能结合 vue 项目进行使用，可以轻松地管理 SPA 项目中组件的切换。</p><h4 id="5-2-1-基本用法"><a href="#5-2-1-基本用法" class="headerlink" title="5.2.1 基本用法"></a>5.2.1 基本用法</h4><ol><li><p>安装 vue-router</p><p><code> npm install vue-router -S</code></p></li><li><p>创建路由模块</p><p><img src="https://pic.imgdb.cn/item/61585e2e2ab3f51d917d6792.jpg"></p></li><li><p>导入并挂载路由模块</p><p>src/main.js 入口文件</p><p><img src="https://pic.imgdb.cn/item/615861a52ab3f51d91856ad6.jpg"></p></li><li><p>声明<strong>路由链接</strong>和<strong>占位符</strong></p><p>用 vue-router 提供的<strong>router-link</strong>来声明<strong>路由链接</strong>，</p><p>用<strong>router-view</strong>来声明<strong>占位符</strong>，用来放路由链接对应的组件</p><p><img src="https://pic.imgdb.cn/item/615863112ab3f51d91885e23.jpg"></p></li><li><p>声明路由的<strong>匹配规则</strong></p><p>在 src/router/index.js 路由模块中，通过<strong>routes 数组</strong>声明路由的匹配规则。</p><p><img src="https://pic.imgdb.cn/item/615866172ab3f51d918e4905.jpg"></p></li><li><p>路由重定向</p><p>经过上面五步后，会发现根路径不会出现首页，这个时候需要<strong>路由重定向</strong>。</p><p><strong>路由重定向</strong>：用户在访问地址 A 时，强制用户跳转到特定的组件页面。通过路由规则的 redirect 属性，指定一个新的路由地址。</p><p><img src="https://pic.imgdb.cn/item/615868152ab3f51d9191f89c.jpg"></p><p>用 component 也指定 Home 可以实现类似结果。区别是，用重定向的方法相当于是没有根路径，进入根路径时会强制重定向地址。而用 component 也指定 Home 的方法则是有两个一样的页面。</p></li></ol><h4 id="5-2-2-嵌套路由"><a href="#5-2-2-嵌套路由" class="headerlink" title="5.2.2 嵌套路由"></a>5.2.2 嵌套路由</h4><p>和路由的基本用法类似，不同的是用来声明路由的匹配规则不能直接写在 router/index.js 下的 routes 中，而应是在已经有的匹配规则中添加 chilaren 节点，再添加嵌套路由匹配规则。</p><p>声明路由链接和占位符和路由的基本用法一样</p><p><img src="https://pic.imgdb.cn/item/6159155f2ab3f51d91547419.jpg"></p><p><img src="https://pic.imgdb.cn/item/615915e92ab3f51d9155333a.jpg"></p><p>​ <img src="https://pic.imgdb.cn/item/615afb912ab3f51d9106dd53.jpg"></p><h4 id="5-2-3-动态路由匹配"><a href="#5-2-3-动态路由匹配" class="headerlink" title="5.2.3 动态路由匹配"></a>5.2.3 动态路由匹配</h4><p><strong>动态路由</strong>：把 Hash 地址中可变的部分定义为参数项，从而提高路由规则的复用性。使用<code>:</code>来定义路由的参数项。</p><p><img src="https://pic.imgdb.cn/item/615919432ab3f51d9159c444.jpg"></p><p><img src="https://pic.imgdb.cn/item/615919892ab3f51d915a217a.jpg"></p><p>经过上面的步骤后可以实现点击三部电影，都出现电影的组件。</p><p>可以在展示的组件中，通过**$route.params 参数对象**得到参数值</p><p><img src="https://pic.imgdb.cn/item/615be3132ab3f51d91fe2c81.jpg"></p><p><b style="color: red">获取参数的另一个方法，开启 props 传参</b></p><p><img src="https://pic.imgdb.cn/item/61591d3c2ab3f51d915f3ee0.jpg"></p><p><img src="https://pic.imgdb.cn/item/61591fa02ab3f51d9162c542.jpg"></p><p><img src="https://pic.imgdb.cn/item/6187434a2ab3f51d911cc2d4.jpg"></p><h4 id="5-2-4-编程式导航"><a href="#5-2-4-编程式导航" class="headerlink" title="5.2.4 编程式导航"></a>5.2.4 编程式导航</h4><ul><li><b style="color: red">编程式导航</b>：通过<strong>调用 API 方法</strong>实现导航的方式，如通过<strong>location.href</strong>跳转到新页面的方式</li><li><b style="color: red">声明式导航</b>：<strong>点击链接</strong>实现导航的方式，如点击<strong>a 链接</strong>和点击 vue 项目中的<strong>router-link</strong></li></ul><p><strong>vue-router 中的编程式导航 API</strong>：</p><ol><li><p><strong>$router.push(‘hash 地址’)<strong>：跳转到指定的 hash 地址，并</strong>增加一条历史记录</strong></p></li><li><p><strong>$router.replace(‘hash 地址’)<strong>：跳转到指定的 hash 地址，并</strong>替换当前历史记录</strong></p></li><li><p>**$router.go(‘数值’)**：实现导航历史的前进、后退</p><p><img src="https://pic.imgdb.cn/item/61596ca92ab3f51d91ec585a.jpg"></p></li><li><p>**$router.back()**：回退到历史记录中的上一个界面</p></li><li><p>**$router.forward()**：前进到历史记录中的下一个界面</p></li></ol><h4 id="5-2-5-导航守卫"><a href="#5-2-5-导航守卫" class="headerlink" title="5.2.5 导航守卫"></a>5.2.5 导航守卫</h4><p><strong>导航守卫</strong>可以<strong>控制路由的访问权限</strong>。</p><p><img src="https://pic.imgdb.cn/item/61596e432ab3f51d91ef09c9.jpg"></p><p><strong>全局前置守卫</strong>：每次发生路由的导航跳转时，都会触发全局前置守卫。通过全局前置守卫可以对每个路由进行权限的控制。</p><p>通过 router.beforeEach(fn)可以实现声明全局前置守卫。</p><p>fn 接收 3 个形参(to, from, next)，<strong>to</strong>是将要访问的路由的信息对象, <strong>from</strong>是将要离开的路由的信息对象，next 是一个函数，调用 next()表示可以前往。</p><p><img src="https://pic.imgdb.cn/item/6159a0ce2ab3f51d913fa530.jpg"></p><p><strong>导航守卫控制权限</strong>示例：</p><p><img src="https://pic.imgdb.cn/item/6159a50d2ab3f51d91477abf.jpg"></p><p>学习链接：</p><p><a href="https://www.bilibili.com/video/BV1zq4y1p7ga">黑马程序员 Vue 全套视频教程</a></p><p><a href="https://vuejs.org/">Vue.js (vuejs.org)</a></p><p><a href="https://router.vuejs.org/zh/guide/#html">Vue Router (vuejs.org)</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS选择器</title>
      <link href="/2021/10/15/css-selector/"/>
      <url>/2021/10/15/css-selector/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h1><h2 id="1-标签选择器"><a href="#1-标签选择器" class="headerlink" title="1. 标签选择器"></a>1. 标签选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-ID-选择器"><a href="#2-ID-选择器" class="headerlink" title="2. ID 选择器"></a>2. ID 选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-类选择器"><a href="#3-类选择器" class="headerlink" title="3. 类选择器"></a>3. 类选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-通配符选择器"><a href="#4-通配符选择器" class="headerlink" title="4. 通配符选择器*"></a>4. 通配符选择器*</h2><p>匹配任何标签。<strong>页面标签越多，效率越低</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>World<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-后代选择器"><a href="#5-后代选择器" class="headerlink" title="5. 后代选择器"></a>5. 后代选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>  Father<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    Son<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>孙子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.father</span> <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-子元素选择器"><a href="#6-子元素选择器" class="headerlink" title="6. 子元素选择器"></a>6. 子元素选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>  Father<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    Son1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>孙子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>&#125;<br><br><span class="hljs-selector-class">.father</span> &gt; <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-交集选择器"><a href="#7-交集选择器" class="headerlink" title="7. 交集选择器"></a>7. 交集选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>.test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>h3.test<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h3</span><span class="hljs-selector-class">.test</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-并集选择器"><a href="#8-并集选择器" class="headerlink" title="8. 并集选择器"></a>8. 并集选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>box<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>h2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h3</span>,<br><span class="hljs-selector-class">.box</span>,<br><span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-属性选择器"><a href="#9-属性选择器" class="headerlink" title="9. 属性选择器"></a>9. 属性选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;aa hh&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a b&quot;</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;b a c&quot;</span>&gt;</span>bb<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span> <span class="hljs-attr">title</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>cc<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;jsvascript:;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;ac&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a-test&quot;</span>&gt;</span>ac<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;jsvascript:;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;ca&quot;</span>&gt;</span>ca<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>[attr]</p><p>选择存在 attr 属性的元素, attr 属性没有值也会选中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[title]</span> &#123;<br>  <span class="hljs-comment">/** 选择存在title属性的&lt;a&gt;元素, title属性没有值也会选中**/</span><br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>[attr=value]</p><p>选择存在 attr 属性且属性值为 value 的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[title=<span class="hljs-string">&quot;aa&quot;</span>]</span> &#123;<br>  <span class="hljs-comment">/** 选择存在title属性且属性值为aa的&lt;a&gt;元素**/</span><br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>[attr*=value]</p><p>选择存在 attr 属性且属性值中包含 value 值的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[title*=<span class="hljs-string">&quot;a&quot;</span>]</span> &#123;<br>  <span class="hljs-comment">/** 选择存在title属性且属性值中有a的&lt;a&gt;元素**/</span><br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>[attr^=value]</p><p>选择存在 attr 属性且属性值中以 value 值开头的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[title^=<span class="hljs-string">&quot;a&quot;</span>]</span> &#123;<br>  <span class="hljs-comment">/** 选择存在title属性且属性值以a为开头的&lt;a&gt;元素**/</span><br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>[attr$=value]</p><p>选择存在 attr 属性且属性值中以 value 值结尾的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[title$=<span class="hljs-string">&quot;a&quot;</span>]</span> &#123;<br>  <span class="hljs-comment">/** 选择存在title属性且属性值以a为结尾的&lt;a&gt;元素**/</span><br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>[attr~=value]</p><p>选择存在 attr 属性，且该属性是一个以空格作为分隔的值列表，其中至少有一个值为 value 的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[class~=<span class="hljs-string">&quot;a&quot;</span>]</span> &#123;<br>  <span class="hljs-comment">/** 选择存在class属性,且属性值是以空格作为分隔的值一系列值，其中至少有一个属性值是a**/</span><br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>[attr|=value]</p><p>选择存在 attr 属性，且属性值为“value”或是以“value-”为前缀的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[class|=<span class="hljs-string">&quot;a&quot;</span>]</span> &#123;<br>  <span class="hljs-comment">/** 选择存在class属性，且属性值为“a”或是以“a-”为前缀的元素**/</span><br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="10-伪类选择器"><a href="#10-伪类选择器" class="headerlink" title="10. 伪类选择器"></a>10. 伪类选择器</h2><p><strong>伪类</strong>：同一个元素，有<strong>不同的状态，有不同的样式</strong></p><p>可分为两种。</p><ol><li><p><strong>静态伪类</strong>：只能用于<strong>超链接</strong>的样式</p><ul><li><code> :link</code>：超链接点击之前</li><li><code> :visited</code>：超链接被访问之后</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.xxx.com&quot;</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<br>  <span class="hljs-attribute">color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>动态伪类</strong>：<strong>所有标签</strong>都使用的样式</p><ul><li><code> :hover</code>：鼠标悬停在标签上的时候</li><li><code> :active</code>：鼠标点击标签，但是还没松手的时候</li><li><code>:focus</code>：标签获得焦点时的样式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获得焦点变色(:focus)&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>悬停变色(:hover)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>按住变色(:active)<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>&#125;<br><br><span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:active</span> &#123;<br>  <span class="hljs-attribute">color</span>: purple;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="超链接的四个状态"><a href="#超链接的四个状态" class="headerlink" title="超链接的四个状态"></a>超链接的四个状态</h3><ul><li><code>:link</code></li><li><code> :visited</code></li><li><code> :hover</code></li><li>` :active</li></ul><p><b style="color: red">在 css 中，超链接的四个状态必须按固定的顺序写：<code> :link -&gt; :visited -&gt; :hover -&gt; :active</code>，否则可能会失效</b></p><p><strong>按顺序一切正常</strong>：</p><p><code> &lt;a href=&quot;http://www.com&quot;&gt;www&lt;/a&gt;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: purple;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<br>  <span class="hljs-attribute">color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>:active 换到最前面去</strong>：按住链接时，不会变粉色了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<br>  <span class="hljs-attribute">color</span>: pink;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: purple;<br>&#125;<br></code></pre></td></tr></table></figure><p>原因：</p><p>css 样式是由权重的，上面的权重都相同，所以 a:hover 的样式会覆盖掉前面的 a:active 的样式，因为链接被激活时，鼠标也是悬停在链接上方的，所以效果是什么样，就看谁没有被覆盖了。</p><p>知道原理后，就可能会提出，这样的话，就没有必要一定要按照顺序了，只需要提高权重就行了。如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<br>  <span class="hljs-attribute">color</span>: pink <span class="hljs-meta">!important</span>;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: purple;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然这样子确实可以，但是按照代码规范就可以避免的问题，为什么要绕弯路呢？这样做以后也可能会引发出大问题。</p><h2 id="11-相邻兄弟选择器"><a href="#11-相邻兄弟选择器" class="headerlink" title="11. 相邻兄弟选择器"></a>11. 相邻兄弟选择器</h2><p><strong>相邻兄弟选择器</strong> (<code>+</code>) 介于两个选择器之间，当第二个元素<em>紧跟在</em>第一个元素之后，并且两个元素都是属于同一个父元素的子元素，则第二个元素将被选中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>上<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>相邻兄弟选择器<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>下1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>下2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span> + <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12-通用兄弟选择器"><a href="#12-通用兄弟选择器" class="headerlink" title="12. 通用兄弟选择器"></a>12. 通用兄弟选择器</h2><p><strong>a~b</strong>：a 和 b 同级，选择 a 元素之后所有同级的 b 元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>上<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>通用兄弟选择器<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>下1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>下2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>不同级<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span> ~ <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="13-nth-child-选择器"><a href="#13-nth-child-选择器" class="headerlink" title="13. :nth-child() 选择器"></a>13. :nth-child() 选择器</h2><p><strong>:nth-child()这个伪类选择器会先找到当前元素的兄弟元素，然后按位置先后顺序从 1 开始排序</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Myself<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="css">        <span class="hljs-comment">/* 先把p的兄弟元素找出来，排序，因为h2也是p的兄弟元素，所以h2的序号是1,所以p-1会变红 */</span></span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-comment">/* ele:nth-child()选择器是用来选择符合条件的ele元素的，所以p:nth-child(1)不会选择到任何元素，因为没有序号为1的p元素 */</span></span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>h2-1<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p-1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p-2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p-3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p-4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p-5<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p-6<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p-7<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p-8<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其他用法：</p><p><b style="color: red">如果:nth-child()括号中不是数字而是表达式，如 2n + 1，n 是从零开始整数，所以会选择序号为 1, 3, 5, … , 2n+1 的元素。</b></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>n + <span class="hljs-number">1</span>)  <span class="hljs-comment">/* 表示选中序号为奇数的p元素,这里的n是从零开始的 */</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>n)  <span class="hljs-comment">/* 表示选中序号为偶数数的p元素 */</span><br><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(odd)<span class="hljs-comment">/* 表示选中序号为奇数的p元素 */</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(even)<span class="hljs-comment">/* 表示选中序号为偶数的p元素 */</span><br><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(n + <span class="hljs-number">3</span>)<span class="hljs-comment">/* 表示选中序号大于等于3的p元素 */</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(-n + <span class="hljs-number">3</span>)<span class="hljs-comment">/* 表示选中序号小于等于3的p元素 */</span><br></code></pre></td></tr></table></figure><p>:nth-last-child()和:nth-child()用法类似，不同的是它从结尾开始排序。</p><h2 id="14-nth-of-type-选择器"><a href="#14-nth-of-type-选择器" class="headerlink" title="14. :nth-of-type()选择器"></a>14. :nth-of-type()选择器</h2><p>用法和:nth-child()选择器类似。</p><p>不同的是：<b style="color: red">:nth-of-type()选择器是把要选择的元素按先后顺序排序。</b>如下面的例子，p:nth-of-type(2)会先把所有的 p 标签排序，而不是把 p 标签的兄弟元素进行排序，所以变红的就是 p-2</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Myself<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>h2-1<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p-1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p-2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p-3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p-4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p-5<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p-6<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p-7<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p-8<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="15-first-child-选择器"><a href="#15-first-child-选择器" class="headerlink" title="15. :first-child 选择器"></a>15. :first-child 选择器</h2><p>和:nth-child(1)用法一样</p><h2 id="16-first-of-type-选择器"><a href="#16-first-of-type-选择器" class="headerlink" title="16. :first-of-type 选择器"></a>16. :first-of-type 选择器</h2><p>和:nth-of-type(1)用法一样</p><p>参考链接:</p><p><a href="https://developer.mozilla.org/zh-CN/">MDN Web Docs (mozilla.org)</a></p><p><a href="https://www.cnblogs.com/qianguyihao/p/8280814.html">CSS 选择器：伪类（图文详解） - 千古壹号 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/DYD850804/article/details/80997251?utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.control">CSS 的四种基本选择器和四种高级选择器<em>Jack-CSDN 博客</em>高级选择器</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(二)</title>
      <link href="/2021/10/08/vue-2/"/>
      <url>/2021/10/08/vue-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-学习笔记-二"><a href="#Vue-学习笔记-二" class="headerlink" title="Vue 学习笔记(二)"></a>Vue 学习笔记(二)</h1><p><strong>单页面应用程序 SPA</strong>，指的是<strong>一个 Web 网站中只有唯一一个 HTML 页面</strong>，所有的功能和交互都在这个唯一的页面内完成。</p><h2 id="1-vue-cli"><a href="#1-vue-cli" class="headerlink" title="1. vue-cli"></a>1. vue-cli</h2><p>vue-cli 是 Vue.js 开发的标准工具。</p><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><p><code> npm install -g @vue/cli</code></p><h3 id="1-2-vue-项目的部分文件功能"><a href="#1-2-vue-项目的部分文件功能" class="headerlink" title="1.2 vue 项目的部分文件功能"></a>1.2 vue 项目的部分文件功能</h3><p>vue 通过 main.js 把 App.vue 渲染到 index.html 的指定区域中。</p><ul><li>App.vue 用来编写待渲染的模板结构</li><li>index.html 需要预留一个 el 区域等待渲染</li><li>main.js 把 App.vue 渲染到 index.html 预留的区域中</li></ul><p><strong>$(mount)用法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> MyCom <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/myComponent&quot;</span>;<br><br>Vue.config.productionTip = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// new Vue(&#123;</span><br><span class="hljs-comment">//   el: &#x27;#app&#x27;,</span><br><span class="hljs-comment">//   render: h =&gt; h(MyCom),</span><br><span class="hljs-comment">// &#125;)</span><br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">h</span>) =&gt;</span> h(MyCom),<br>&#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>); <span class="hljs-comment">//$(mount)和上面的el属性用法一样</span><br></code></pre></td></tr></table></figure><h2 id="2-组件"><a href="#2-组件" class="headerlink" title="2. 组件"></a>2. 组件</h2><p><strong>组件化开发</strong>：把<strong>页面上可复用的 UI 结构封装成组件</strong>，从而方便项目的开发和维护</p><p>vue<strong>支持组件化开发</strong>。组件的后缀名是**.vue**</p><p>每个.vue 组件可有三个部分组成：</p><ul><li><strong>template</strong>：组件的模板结构(<strong>必须包含</strong>), <b style="color: red">只能有一个根节点</b></li><li><strong>script</strong>：组件的 Javascript 行为</li><li><strong>style</strong>：组件的样式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>用户名：&#123;&#123; username &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// data: &#123;</span></span><br><span class="javascript">    <span class="hljs-comment">//     username: &#x27;admin&#x27;</span></span><br><span class="javascript">    <span class="hljs-comment">// &#125;        //.vue文件中的数据源不可以用对象形式，而应是函数形式</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;admin&quot;</span>,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">color</span>: red;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>在 vue 中使用 less</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">    <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">color</span>: red;</span><br><span class="css">    &#125;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-1-组件使用的三个步骤"><a href="#2-1-组件使用的三个步骤" class="headerlink" title="2.1 组件使用的三个步骤"></a>2.1 组件使用的三个步骤</h3><ol><li>使用 import 语法导入要用的组件</li><li>在 components 节点注册组件</li><li>直接把组件当成标签在要渲染的地方使用</li></ol><p><img src="https://pic.imgdb.cn/item/614d68ff2ab3f51d91b8ffbd.jpg"></p><h3 id="2-2-注册全局组件"><a href="#2-2-注册全局组件" class="headerlink" title="2.2 注册全局组件"></a>2.2 注册全局组件</h3><p>上面的注册组件的方法是私有注册，即每一个需要用到经常用的组件，都需要反复注册。这个时候，可以直接在 main.js 中进行全局组件的注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> Test <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Test.vue&quot;</span>; <span class="hljs-comment">//导入要注册的全局组件</span><br><br>Vue.config.productionTip = <span class="hljs-literal">false</span>;<br><br>Vue.component(<span class="hljs-string">&quot;Mytest&quot;</span>, Test); <span class="hljs-comment">//使用Vue.component()来进行全局组件的注册，第一个参数是要注册的组件的名称，第二个参数是要注册的组件</span><br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">h</span>) =&gt;</span> h(App),<br>&#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="2-3-组件的-props"><a href="#2-3-组件的-props" class="headerlink" title="2.3 组件的 props"></a>2.3 组件的 props</h3><p>props 是组件的自定义属性，在封装通用组件时，合理使用 props 可以<strong>提高组件的复用性</strong>，允许使用者通过自定义属性，为当前组件指定初始值</p><p><img src="https://pic.imgdb.cn/item/614d7b6d2ab3f51d91d23d39.jpg"></p><p><b style="color: red">props 是只读的</b>。</p><p><img src="https://pic.imgdb.cn/item/614d7bfe2ab3f51d91d32164.jpg"></p><p>要修改的话，可以把得到的初始值赋给 data 中的属性，再进行修改，props 中的属性的值会一直是初始值</p><p><img src="https://pic.imgdb.cn/item/614d7cff2ab3f51d91d4a226.jpg"></p><p><strong>default 属性、type 属性和 required 属性</strong>：如果使用者使用使用组件时，没有传递 init 属性, 则默认值生效</p><p>使用语法示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">props: &#123; init: &#123; default: 0, //用default属性定义属性的默认值 type: Number,<br>//限定传递的属性的类型，不匹配会报错 required: true,<br>//设置为true时，必须要传递参数，否则即使有默认值，也会报错 &#125; &#125;,<br></code></pre></td></tr></table></figure><h3 id="2-4-组件之间的样式冲突"><a href="#2-4-组件之间的样式冲突" class="headerlink" title="2.4 组件之间的样式冲突"></a>2.4 组件之间的样式冲突</h3><p>默认情况下，写在**.vue 组件中的样式会全局生效<strong>，所以很容易造成</strong>多个组件之间的样式冲突问题**</p><p>导致组件之间的样式冲突的原因：</p><ol><li>单页面应用程序中，所有的组件的 DOM 结构都是基于<strong>唯一的 index.html 页面</strong>呈现的</li><li>每个组件中的样式都会<strong>影响到整个 index.html 页面</strong>中的所有 DOM 元素</li></ol><p><img src="https://pic.imgdb.cn/item/614d8ab52ab3f51d91e9188c.jpg"></p><p><strong>通过给要设置样式的组件的 style 标签中添加”scoped”属性，可以实现不影响到其他组件的样式</strong></p><p><img src="https://pic.imgdb.cn/item/614d8b8b2ab3f51d91ea2bae.jpg"></p><p>原理：给组件里的所有标签都来一个自定义样式，然后通过属性选择器实现样式只会影响到该组件</p><p>上面使用”scoped”的代码，不使用”scoped”属性实现:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left-container&quot;</span> <span class="hljs-attr">data-d-001</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">data-d-001</span>&gt;</span>Left 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">MyCount</span> <span class="hljs-attr">:init</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">data-d-001</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">MyCount</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;&#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.left-container</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="css">    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">250px</span>;</span><br><span class="css">    <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-tag">h3</span><span class="hljs-selector-attr">[data-d-001]</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">color</span>: red;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><b style="color: red">只是使用”scoped”的话，无法实现单独修改用上的其他组件的样式</b></p><p><img src="https://pic.imgdb.cn/item/614d8e572ab3f51d91edfcc3.jpg"></p><p>如果想要让某些样式对子组件生效，可以使用**/deep/ 深度选择器**</p><p><img src="https://pic.imgdb.cn/item/614d8f3a2ab3f51d91ef4356.jpg"></p><p>通过浏览器查看生效样式：</p><p><img src="https://pic.imgdb.cn/item/61697df82ab3f51d91535348.jpg"></p><p><strong>属性选择器使用不一定需要依靠其他选择器，单独使用表示选择所有有对应属性的元素</strong></p><p><img src="https://pic.imgdb.cn/item/614d91de2ab3f51d91f2f9cb.jpg"></p><h2 id="3-组件的生命周期"><a href="#3-组件的生命周期" class="headerlink" title="3. 组件的生命周期"></a>3. 组件的生命周期</h2><p><strong>生命周期</strong>是指一个组件从<strong>创建</strong>-&gt;<strong>运行</strong>-&gt;<strong>销毁</strong>的整个阶段，强调的是一个时间段</p><p><strong>生命周期函数</strong>：由 vue 框架提供的<strong>内置函数</strong>，会伴随组件的生命周期，<strong>自动按次序执行</strong>。</p><p><b style="color: red">生命周期强调的是时间段，生命周期函数强调的是时间点</b></p><p><strong>组件生命周期函数的分类</strong>：</p><p><img src="https://pic.imgdb.cn/item/614daf602ab3f51d9118fe5c.jpg"></p><p><strong>生命周期图示</strong>：</p><p><img src="https://cn.vuejs.org/images/lifecycle.png"></p><h3 id="3-1-组件创建阶段"><a href="#3-1-组件创建阶段" class="headerlink" title="3.1 组件创建阶段"></a>3.1 组件创建阶段</h3><h4 id="3-1-1-beforeCreate"><a href="#3-1-1-beforeCreate" class="headerlink" title="3.1.1 beforeCreate()"></a>3.1.1 beforeCreate()</h4><p>组件的<strong>props</strong>、<strong>data</strong>、<strong>methods</strong>还没有被创建，都处于<strong>不可用</strong>状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>test组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">props</span>: [<span class="hljs-string">&quot;info&quot;</span>],</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;message&quot;</span>,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;show&quot;</span>);</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">beforeCreate</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-comment">// console.log(this.info);</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(this.message);</span></span><br><span class="javascript">      <span class="hljs-built_in">this</span>.show();</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/614dd1372ab3f51d914cdc07.jpg"></p><h4 id="3-1-2-created"><a href="#3-1-2-created" class="headerlink" title="3.1.2 created()"></a>3.1.2 created()</h4><p>组件的<strong>props</strong>、<strong>data</strong>、<strong>methods</strong>已经创建完，处于<strong>可用</strong>状态。</p><p><img src="https://pic.imgdb.cn/item/614dd21e2ab3f51d914e5be3.jpg"></p><p><b style="color: red">created 方法很重要，经常在里面调用 methods 的方法，请求服务器的数据，并把请求到的数据转存到 data 中，供渲染时使用</b>,因为应该尽可能早的请求数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>共有 &#123;&#123; books.length &#125;&#125; 本书<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">props</span>: [<span class="hljs-string">&quot;info&quot;</span>],</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;message&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">books</span>: [],</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;show&quot;</span>);</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">initBooklist</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="javascript">        xhr.open(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;http://www.liulongbin.top:3006/api/getbooks&quot;</span>);</span><br><span class="javascript">        xhr.send(<span class="hljs-literal">null</span>);</span><br><span class="javascript">        xhr.addEventListener(<span class="hljs-string">&quot;load&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.books = result.data;</span><br><span class="javascript">        &#125;); <span class="hljs-comment">//使用ajax获取图书信息示例</span></span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.initBooklist();</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>组件的模板结构还没生成</strong>(DOM 节点现在不能操作)</p><p><img src="https://pic.imgdb.cn/item/614dd72c2ab3f51d91571ed9.jpg"></p><h4 id="3-1-3-beforeMount"><a href="#3-1-3-beforeMount" class="headerlink" title="3.1.3 beforeMount()"></a>3.1.3 beforeMount()</h4><p><strong>将要</strong>把内存中编译好的<strong>HTML 结构</strong>渲染到当前组件的 DOM 结构</p><p><img src="https://pic.imgdb.cn/item/614dd9232ab3f51d915a7d7e.jpg"></p><h4 id="3-1-4-mounted"><a href="#3-1-4-mounted" class="headerlink" title="3.1.4 mounted()"></a>3.1.4 mounted()</h4><p><b style="color: red">重要，要操作当前组件的 DOM，最早只能在 mounted 阶段</b>，已经把内存中的 HTML 结构成功的渲染到了浏览器中，此时已经包含了当前组件的<strong>DOM 结构</strong></p><p><img src="https://pic.imgdb.cn/item/614ddac12ab3f51d915d7206.jpg"></p><h3 id="3-2-组件的运行阶段"><a href="#3-2-组件的运行阶段" class="headerlink" title="3.2 组件的运行阶段"></a>3.2 组件的运行阶段</h3><h4 id="3-2-1-beforeUpdate"><a href="#3-2-1-beforeUpdate" class="headerlink" title="3.2.1 beforeUpdate()"></a>3.2.1 beforeUpdate()</h4><p><strong>将要</strong>根据变化过后、最新的数据，<strong>重新渲染</strong>到组件的模板结构。(即现在 data 里的数据已经变化了，但是 DOM 元素里的数据还没来得及变)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><br>      用于测试运行阶段的message:<br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;datachange&quot;</span>&gt;</span>更改数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">props</span>: [<span class="hljs-string">&quot;info&quot;</span>],</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Hello&quot;</span>,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">datachange</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.message += <span class="hljs-string">&quot;!&quot;</span>;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">beforeUpdate</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> span = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;h3 span&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;data里的数据：&quot;</span> + <span class="hljs-built_in">this</span>.message);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;DOM中的数据：&quot;</span> + span.innerHTML);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/614e760c2ab3f51d9122b3c6.jpg"></p><h4 id="3-2-2-updated"><a href="#3-2-2-updated" class="headerlink" title="3.2.2 updated()"></a>3.2.2 updated()</h4><p>已经<strong>完成了</strong>组件 DOM 结构的<strong>重新渲染</strong></p><p><img src="https://pic.imgdb.cn/item/614e76782ab3f51d9123223b.jpg"></p><p><b style="color: red">数据发生变化时，如果要操作重新渲染过的 DOM，应在 updated()中执行</b></p><h3 id="3-3-组件销毁阶段"><a href="#3-3-组件销毁阶段" class="headerlink" title="3.3 组件销毁阶段"></a>3.3 组件销毁阶段</h3><h4 id="3-3-1-beforeDestroy"><a href="#3-3-1-beforeDestroy" class="headerlink" title="3.3.1 beforeDestroy()"></a>3.3.1 beforeDestroy()</h4><p><strong>将要</strong>销毁组件,组件还处于正常工作的状态</p><h4 id="3-3-2-destroyed"><a href="#3-3-2-destroyed" class="headerlink" title="3.3.2 destroyed()"></a>3.3.2 destroyed()</h4><p>DOM 结构已经完全销毁</p><h2 id="4-组件间的数据共享"><a href="#4-组件间的数据共享" class="headerlink" title="4. 组件间的数据共享"></a>4. 组件间的数据共享</h2><h3 id="4-1-父组件向子组件传递数据"><a href="#4-1-父组件向子组件传递数据" class="headerlink" title="4.1 父组件向子组件传递数据"></a>4.1 父组件向子组件传递数据</h3><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>      父组件数据: &#123;&#123; message &#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      &#123;&#123; present &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Test</span> <span class="hljs-attr">:msg</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">:pst</span>=<span class="hljs-string">&quot;present&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Test</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> Test <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/Test.vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Hello Son!&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">present</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">fruit</span>: <span class="hljs-string">&quot;apple&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">toy</span>: <span class="hljs-string">&quot;car&quot;</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">components</span>: &#123;</span><br><span class="javascript">      Test,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;de&quot;</span>&gt;</span>子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>接收父组件传来的message: &#123;&#123;msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>接收父组件传来的present: &#123;&#123;pst &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">props</span>: [<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;pst&quot;</span>],</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Hello&quot;</span>,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">datachange</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.message += <span class="hljs-string">&quot;!&quot;</span>;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scope</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.de</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">color</span>: red;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>实现父组件向子组件传递数据，主要依靠</p><ul><li><b style="color: red">在子组件自定义属性</b></li><li><b style="color: red">在父组件通过 v-bind 传递数据给子组件的自定义属性</b></li></ul><p><b style="color: red">通过上面的方法，传递给子组件的数据在 props 的属性中，只读，所以需要修改的话，要把接收的数据赋给子组件 data 中的元素</b></p><p><img src="https://pic.imgdb.cn/item/614e88112ab3f51d91389e87.jpg"></p><h3 id="4-2-子组件向父组件传递数据"><a href="#4-2-子组件向父组件传递数据" class="headerlink" title="4.2 子组件向父组件传递数据"></a>4.2 子组件向父组件传递数据</h3><p>通过<b style="color: red">在父组件处自定义事件</b>,和<b style="color: red">在子组件处通过$.emit()方法触发自定义事件</b>来实现子组件向父组件传递数据</p><p><img src="https://pic.imgdb.cn/item/614e8b3c2ab3f51d913d17f9.jpg"></p><h3 id="4-3-兄弟组件组件的数据共享"><a href="#4-3-兄弟组件组件的数据共享" class="headerlink" title="4.3 兄弟组件组件的数据共享"></a>4.3 兄弟组件组件的数据共享</h3><p>兄弟组件之间的数据共享方案是<strong>EventBus</strong></p><p>步骤：</p><ol><li>创建 eventBus.js 文件，向外共享一个 Vue 的实例对象(用法相当于中转站)</li><li>在数据<strong>发送方</strong>，调用<strong>bus.$emit</strong>(‘事件名称’, 要发送的数据)方法<strong>触发自定义事件</strong></li><li>在数据<strong>接收方</strong>，调用<strong>bus.$on</strong>(‘事件名称’, 事件处理函数)方法<strong>注册一个自定义事件</strong></li></ol><p><img src="https://pic.imgdb.cn/item/614e925e2ab3f51d91467cbc.jpg"></p><h2 id="5-ref-引用"><a href="#5-ref-引用" class="headerlink" title="5. ref 引用"></a>5. ref 引用</h2><p>ref 用来辅助开发者在<strong>不依赖 jQuery 的情况下</strong>，获取 DOM 元素或组件的引用。</p><p>每个 vue 的组件实例上，都包含一个**$refs 对象<strong>，里面存储着对应的 DOM 元素或组件的引用。默认情况下，</strong>组件的$refs 指向一个空对象**。</p><p><img src="https://pic.imgdb.cn/item/61605a9c2ab3f51d9141b3d1.jpg"></p><p><strong>使用 ref 引用 DOM 元素</strong>：</p><p><img src="https://pic.imgdb.cn/item/614f36e72ab3f51d9129cdaf.jpg"></p><p>所以上面要操作 DOM 元素可以通过<strong>this.$refs.myh3</strong>来修改，如：</p><p><img src="https://pic.imgdb.cn/item/614f379f2ab3f51d912adbae.jpg"></p><p><strong>使用 ref 引用组件实例</strong>：<br><img src="https://pic.imgdb.cn/item/614f3c552ab3f51d9131ad80.jpg"></p><p><strong>控制文本框和按钮的按需切换</strong>：(点击按钮，按钮隐藏，文本框显示；文本框失去焦点，按钮显示，文本框隐藏；文本框显示时自动获取焦点)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myh3&quot;</span>&gt;</span>MyRef组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;inputVisible&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myipt&quot;</span> @<span class="hljs-attr">blur</span>=<span class="hljs-string">&quot;showButton&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-else</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInput&quot;</span>&gt;</span>展示输入框<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// import Left from &#x27;@/components/Left.vue&#x27;</span></span><br><span class="javascript">  <span class="hljs-comment">// import Right from &#x27;@/components/Right.vue&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">inputVisible</span>: <span class="hljs-literal">false</span>,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">showInput</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.inputVisible = <span class="hljs-literal">true</span>;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs.myipt); <span class="hljs-comment">//调用showInput时，数据刚刚发生了改变，而这行和上一行代码之间的时间间隔太短，</span></span><br><span class="javascript">        <span class="hljs-comment">// 导致DOM结构没有进行完渲染，所以此时出现undefined</span></span><br><span class="javascript">        <span class="hljs-built_in">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">//组件的$nextTick()方法，会把回调函数推迟到下一个DOM更新周期之后执行</span></span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs.myipt);</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.$refs.myipt.focus();</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">showButton</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.inputVisible = <span class="hljs-literal">false</span>;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-comment">// components: &#123;</span></span><br><span class="javascript">    <span class="hljs-comment">//   Left,</span></span><br><span class="javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.app-container</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#efefef</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><b style="color: red">this.$nextTick(callback)方法</b>：</p><p>组件的**$nextTick(callback)方法<strong>会把 callback</strong>推迟到下一个 DOM 更新周期之后执行**，即等组件的 DOM 更新完之后，再执行 callback 回调函数。从而保证回调函数能操作到最新的 DOM 元素。</p><p>上面的例子不能在生命周期函数中的 updated()中使用 input.focus()，因为 data 中的数据一发生变化，updated()都会执行一次，即 input 隐藏时也会执行，此时压根没有 input 元素，又何来 input.focus()之说呢。</p><h2 id="6-动态组件"><a href="#6-动态组件" class="headerlink" title="6. 动态组件"></a>6. 动态组件</h2><p>动态组件指的是<strong>动态切换组件的显示与隐藏</strong></p><p>vue 提供了一个内置的<component>组件，<strong>专门用来实现动态组件的渲染</strong>。</p><ul><li><p>使用组件的三大步骤：</p><ol><li>引入组件</li><li>注册组件</li><li>通过标签使用组件</li></ol><p><img src="https://pic.imgdb.cn/item/61605ab92ab3f51d9141f278.jpg"></p><p>第三步，可以使用内置的 component 组件，通过 is 属性来动态指定要渲染的组件</p><p>即上面的 3 可以换成<code> &lt;component :is=&quot;&#39;Left&#39;&quot;&gt;&lt;/component&gt;</code></p></li></ul><p>动态指定渲染组件示例：</p><p>App 组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>App 根组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;comName=&#x27;Left&#x27;&quot;</span>&gt;</span>展示Left组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;comName=&#x27;Right&#x27;&quot;</span>&gt;</span>展示Right组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;comName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> Left <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/Left.vue&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> Right <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/Right.vue&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">comName</span>: <span class="hljs-string">&quot;Left&quot;</span>,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">components</span>: &#123;</span><br><span class="javascript">      Left,</span><br><span class="javascript">      Right,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.app-container</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#efefef</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Left 组件(注释代码是后面的部分才用上的)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left-container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Left 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>count的值是 &#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count += 1&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// name: &#x27;MyLeft&#x27;,</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;左侧被创建了&quot;</span>);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">destroyed</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;左侧被销毁了&quot;</span>);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-comment">// activated() &#123;</span></span><br><span class="javascript">    <span class="hljs-comment">//   console.log(&#x27;左侧被激活了&#x27;);</span></span><br><span class="javascript">    <span class="hljs-comment">// &#125;,</span></span><br><span class="javascript">    <span class="hljs-comment">// deactivated() &#123;</span></span><br><span class="javascript">    <span class="hljs-comment">//   console.log(&#x27;左侧休息了&#x27;);</span></span><br><span class="javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.left-container</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="css">    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">250px</span>;</span><br><span class="css">    <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>问题</strong>：在上面的示例中，点击 Left 组件的+1 按钮，已经改变了数值，但是，点击展示 Right 组件后，再重新展示 Left 组件，会发现数值又回归了初始状态。从控制台中的输出，可以知道，原因是动态指定渲染 Right 组件时，Left 组件会被销毁，之后右重新创建，所以数据会是初始状态。</p><p>可以通过 vue 内置的<b style="color: red"><code>&lt;keep-alive&gt;组件</code></b>保持动态组件的状态。</p><p>用法：用 keep-alive 组件包住动态组件就可以。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;comName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当组件被激活时，会自动触发组件的<strong>activated</strong>生命周期函数。</p><p>当组件休眠时，会自动触发组件的<strong>deactivated</strong>生命周期函数。</p><p>把上面 Left 组件的注释代码启用。可以发现，当 Left 组件激活时(展示 Left)，会打印出”左侧被激活了”；而 Left 休眠时(展示 Right)，会打印出”左侧休息了”。</p><p><b style="color: red">include 属性</b><strong>：实现只有名字匹配的组件才会被缓存。就是说，上面的例子中，Left 组件中有数据，想要保存 Left 的状态，但是 Right 组件没有必要缓存，甚至有可能 Right 组件是一次性的用法。这个时候通过 include 属性，可以指定谁会被缓存。多个组件间用</strong>英文的逗号**分隔。</p><p><img src="https://pic.imgdb.cn/item/61528f9f2ab3f51d9172712f.jpg"></p><p><strong>逗号左右不要有空格</strong></p><p>用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">include</span>=<span class="hljs-string">&quot;Left&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;comName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/61528db32ab3f51d916ff37c.jpg"></p><p>可以发现，上面的 Right 组件在调试工具中显示的名字并不是 Right，而是自定义的 MyRight。这是通过组件的 name 节点修改的。</p><p><img src="https://pic.imgdb.cn/item/61528e8d2ab3f51d917118c6.jpg"></p><p>如果修改了组件的名称，那么在 include 属性中的名字应该是修改后的名字。</p><p><b style="color: red">exclude 属性</b>：表示不缓存哪些组件。和 include 属性一起用没有意义，要不就是取消掉 include 属性的作用。要不就是多此一举。还会让代码可读性下降。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客自制背景动画(代码雨)</title>
      <link href="/2021/10/04/blog-bg-animate/"/>
      <url>/2021/10/04/blog-bg-animate/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-博客自制背景动画-代码雨"><a href="#hexo-博客自制背景动画-代码雨" class="headerlink" title="hexo 博客自制背景动画(代码雨)"></a>hexo 博客自制背景动画(代码雨)</h1><p>起因：看到<a href="https://pranx.com/matrix-code-rain/">比较厉害的特效</a>，想学一下加到自己的博客中看看效果。</p><h2 id="1-首先，在单独一个-html-文件中实现动画效果"><a href="#1-首先，在单独一个-html-文件中实现动画效果" class="headerlink" title="1. 首先，在单独一个 html 文件中实现动画效果"></a>1. 首先，在单独一个 html 文件中实现动画效果</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>代码雨<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-id">#canvas</span> &#123;</span><br><span class="css">                <span class="hljs-attribute">position</span>: fixed;</span><br><span class="css">                <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">                <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">1</span>;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-built_in">window</span>.onload = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                <span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;canvas&quot;</span>)</span><br><span class="javascript">                <span class="hljs-keyword">const</span> window_screen = <span class="hljs-built_in">window</span>.screen</span><br><span class="javascript">                <span class="hljs-keyword">const</span> w = (canvas.width = window_screen.width)</span><br><span class="javascript">                <span class="hljs-keyword">const</span> h = (canvas.height = window_screen.height)</span><br><span class="javascript">                <span class="hljs-keyword">const</span> fontSize = <span class="hljs-number">12</span></span><br><span class="javascript">                <span class="hljs-keyword">const</span> context = canvas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>) <span class="hljs-comment">// 返回一个用于在画布上绘图的环境</span></span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-keyword">let</span> col = <span class="hljs-number">0</span> <span class="hljs-comment">// 列数</span></span><br><span class="javascript">                <span class="hljs-keyword">let</span> drops = [] <span class="hljs-comment">// 保存每一列当前的位置</span></span><br><span class="javascript"></span><br><span class="javascript">                col = <span class="hljs-built_in">Math</span>.floor(w / fontSize) <span class="hljs-comment">// 得到代码雨的列数</span></span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; col; i++) &#123;</span><br><span class="javascript">                    drops.push(<span class="hljs-number">0</span>)</span><br><span class="javascript">                &#125;</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;qwertyuiopasdfghjklzxcvbnm0123456789&#x27;</span> <span class="hljs-comment">//代码雨中的文字</span></span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rain</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    context.fillStyle = <span class="hljs-string">&#x27;rgba(0, 0, 0, .1)&#x27;</span> <span class="hljs-comment">// 增加一个遮盖层</span></span><br><span class="javascript">                    context.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, w, h)</span><br><span class="javascript">                    context.fillStyle = <span class="hljs-string">&#x27;#00ff00&#x27;</span> <span class="hljs-comment">// 先为要显示的文字设置好颜色</span></span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; col; i++) &#123;</span><br><span class="javascript">                        <span class="hljs-keyword">const</span> index = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * str.length)</span><br><span class="javascript">                        <span class="hljs-keyword">const</span> x = i * fontSize</span><br><span class="javascript">                        <span class="hljs-keyword">const</span> y = drops[i] * fontSize</span><br><span class="javascript"></span><br><span class="javascript">                        context.fillText(str[index], x, y) <span class="hljs-comment">// 把文字写到画布上去</span></span><br><span class="javascript">                        <span class="hljs-keyword">if</span> (y &gt;= canvas.height &amp;&amp; <span class="hljs-built_in">Math</span>.random() &gt;= <span class="hljs-number">0.99</span>) &#123;</span><br><span class="javascript">                            <span class="hljs-comment">// 通过random()实现列与列位置的差别</span></span><br><span class="javascript">                            drops[i] = <span class="hljs-number">0</span></span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                        drops[i]++</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-built_in">setInterval</span>(rain, <span class="hljs-number">30</span>)</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://codepen.io/13535944743/pen/VwWOrxx">结果展示</a></p><p>现在的效果可能有点不太好看，因为是看了很多代码雨的 js 代码，明白了大概如何实现之后依葫芦画瓢做出来的，待未来优化。</p><h2 id="2-实现动画效果后，把它加到-hexo-主题中去"><a href="#2-实现动画效果后，把它加到-hexo-主题中去" class="headerlink" title="2. 实现动画效果后，把它加到 hexo 主题中去"></a>2. 实现动画效果后，把它加到 hexo 主题中去</h2><ul><li><p>在<code>blog\themes\hexo-theme-matery\source\js</code>中添加名为 digitalRain.js 的 js 文件，把之前写的 js 代码复制粘贴上去。</p><p>这样子的话，部署(<code>hexo g -d</code>)之后可以在<code>blog\public\js</code>中发现新增的 js 文件</p></li></ul><p><img src="https://pic.imgdb.cn/item/615a9f742ab3f51d91819a05.jpg"></p><ul><li><p>这个时候，js 文件到位了，但是 html 文件并没有引入 js 文件，就要使用 hexo 主题的功能了</p><p>找到下图框框中的文件</p><p><img src="https://pic.imgdb.cn/item/615aa0492ab3f51d9182f8b3.jpg"></p><p>打开后，可以看到它引入了很多 js 文件，只是引入的方式有点高端，但是先普通的引入，按下图框框中引入，<b style="color: red">这个路径并不是当前路径，而是相对于<code>blog\public</code>的路径</b>。</p><p><img src="https://pic.imgdb.cn/item/615aa0c02ab3f51d9183bb5e.jpg"></p><p>如果路径填错了，会报一个 404 错误。这个时候可以到 github 下的博客仓库看一下，js 文件有没有在上面</p><p><img src="https://pic.imgdb.cn/item/615aa3112ab3f51d9187710e.jpg"></p></li></ul><p>引入成功的话，如下图，双击下图 js 文件时会去到 js 文件的地址</p><p><img src="https://pic.imgdb.cn/item/615aa3cd2ab3f51d9188a271.jpg"></p><ul><li><p>把 js 引入后，就需要设置一下样式了。样式可以通过 js 设置，但是这样子，样式部分和行为部分就混在一起了，之后想改进时会变得很困难。所以样式应该放到 css 文件中</p><p>在<code> blog\themes\hexo-theme-matery\source\css</code>中原有的 css 文件中添加 canvas 的样式，可能有权重问题</p></li></ul><p><img src="https://pic.imgdb.cn/item/615a9ed82ab3f51d91809926.jpg"></p><h2 id="3-部署网站"><a href="#3-部署网站" class="headerlink" title="3. 部署网站"></a>3. 部署网站</h2><p>如果它原本就有<code>&lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</code>，那么就可以正常实现背景动画，但是，当它原本没有 canvas 标签时，就需要微操一下 js 代码了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/****** 微操前 ************/</span><br><span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;canvas&quot;</span>);<br><span class="hljs-keyword">const</span> window_screen = <span class="hljs-built_in">window</span>.screen;<br><br><span class="hljs-comment">/****** 微操后 ************/</span><br><span class="hljs-keyword">const</span> body = <span class="hljs-built_in">document</span>.body; <span class="hljs-comment">// 获取body节点</span><br><span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;canvas&quot;</span>); <span class="hljs-comment">// 动态生成canvas标签</span><br>canvas.id = <span class="hljs-string">&quot;canvas&quot;</span>;<br>body.insertBefore(canvas, body.children[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 插入body节点中</span><br><br><span class="hljs-keyword">const</span> window_screen = <span class="hljs-built_in">window</span>.screen;<br></code></pre></td></tr></table></figure><p>成功实现，结束。</p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript_元素三大系列</title>
      <link href="/2021/10/03/Javascript-threeSeries/"/>
      <url>/2021/10/03/Javascript-threeSeries/</url>
      
        <content type="html"><![CDATA[<h1 id="元素三大系列"><a href="#元素三大系列" class="headerlink" title="元素三大系列"></a>元素三大系列</h1><p style="color:red">这里讲的三大系列的属性返回的是数值，不带单位</p><h2 id="元素偏移量-offset-系列"><a href="#元素偏移量-offset-系列" class="headerlink" title="元素偏移量 offset 系列"></a>元素偏移量 offset 系列</h2><p>使用 offset 系列相关属性可以动态得到该元素的位置（偏移）、大小等。</p><p>作用：</p><ol><li>获得元素距离定位父元素的位置（如果没有父元素或者父元素都没有定位，则是距离 body 的位置）</li><li>获得元素自身宽度高度</li></ol><p style="color:red">返回的是数值，不带单位</p><p>offset 系列常用属性:</p><table><thead><tr><th>offset 系列属性</th><th align="center">作用</th></tr></thead><tbody><tr><td>element.offsetParent</td><td align="center">返回该元素带有定位的父级元素，都没有定位则返回 body</td></tr><tr><td>element.offsetTop</td><td align="center">返回该元素相对于带有定位父元素上方的偏移</td></tr><tr><td>element.offsetLeft</td><td align="center">返回该元素相对于带有定位父元素左边框的偏移</td></tr><tr><td>element.offsetWidth</td><td align="center">返回该元素自身包括 padding、边框、内容区的宽度）</td></tr><tr><td>element.offsetHeight</td><td align="center">返回该元素自身高度（同上）</td></tr></tbody></table><p style="color:red">返回的是数值，不带单位</p><p><a href="https://codepen.io/13535944743/pen/YzQqBLb">offsetParent 示例</a></p><p><a href="https://codepen.io/13535944743/pen/QWgKEer">offsetTop 和 offsetLeft 示例</a></p><p><a href="https://codepen.io/13535944743/pen/VwWKKKm">offsetWidth 和 offsetHeight 示例</a></p><h3 id="offset-和-style-的区别"><a href="#offset-和-style-的区别" class="headerlink" title="offset 和 style 的区别"></a>offset 和 style 的区别</h3><table><thead><tr><th>offset</th><th align="center">style</th></tr></thead><tbody><tr><td>offset 可以得到所有样式表的样式值</td><td align="center">style 只能得到行内样式表中的样式值</td></tr><tr><td>offset 得到的是数值,没有单位</td><td align="center">style 得到的是带有单位的字符串</td></tr><tr><td>offsetWidth 包含 width+padding+border</td><td align="center">style.width 只包含 width,不包含 padding 和 border</td></tr><tr><td>offset 系列属性是只读属性，只能获取不能赋值</td><td align="center">style.width 等是可读写属性，可以获取也能赋值</td></tr></tbody></table><p style="color:red">获取元素大小位置，offset更合适，更改元素大小位置，style更合适</p><p>offset 各属性示意图：</p><p><img src="https://i.loli.net/2021/09/04/jV21Y8vt6dJeKTO.png"></p><p>例子：</p><p><a href="https://codepen.io/13535944743/pen/rNwMmqz">计算鼠标在盒子里的坐标</a></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>拖动的模态框</p><h2 id="元素可视区-client-系列"><a href="#元素可视区-client-系列" class="headerlink" title="元素可视区 client 系列"></a>元素可视区 client 系列</h2><p>使用 client 系列相关属性来获取元素可视区的相关信息。</p><p>作用：</p><ol><li>动态得到该元素的边框大小</li><li>动态得到该元素的元素大小</li></ol><p style="color:red">返回的是数值，不带单位</p><table><thead><tr><th>client 系列属性</th><th align="center">作用</th></tr></thead><tbody><tr><td>element.clientTop</td><td align="center">返回元素上边框大小</td></tr><tr><td>element.clientLeft</td><td align="center">返回元素左边框大小</td></tr><tr><td>element.clientWidth</td><td align="center">返回自身包括 padding、内容区的宽度，不含边框</td></tr><tr><td>elemeng.clientHeight</td><td align="center">返回自身高度（同上）</td></tr></tbody></table><p style="color:red">返回的是数值，不带单位</p><p>示例：</p><p><a href="https://codepen.io/13535944743/pen/YzQGvJR">client 系列</a></p><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">(function()&#123;<br> //代码<br>&#125;)();<br><br>或<br>(function() &#123;<br> //代码<br>&#125;())<br><br><br></code></pre></td></tr></table></figure><p>作用：创建一个独立的作用域，避免命名冲突的问题，因为里面的变量都是局部变量。</p><p>第一种形式比较好理解，首先需要定义函数，但是是立即执行函数，所以不需要函数名，不加函数名的话有可能是写错代码了，所以立即执行函数的语法就是用”()”包住立即执行函数，就可以区分出错误代码和立即执行函数。之后的”()”便是函数调用。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">(function(a, b) &#123;<br> console.log(a * b);<br>&#125;)(9, 8);<br><br>//********************<br><br>(function(a, b) &#123;<br> console.log(a * b);<br>&#125;(9, 8));<br><br><br></code></pre></td></tr></table></figure><h2 id="元素滚动-scroll-系列"><a href="#元素滚动-scroll-系列" class="headerlink" title="元素滚动 scroll 系列"></a>元素滚动 scroll 系列</h2><p>使用 scroll 系列的相关属性可以动态的得到该元素的大小，滚动距离等。</p><p style="color:red">返回的是数值，不带单位</p><table><thead><tr><th>scroll 系列属性</th><th align="center">作用</th></tr></thead><tbody><tr><td>element.scrollTop</td><td align="center">返回被卷去的上侧距离</td></tr><tr><td>element.scrollLeft</td><td align="center">被卷去的左侧距离</td></tr><tr><td>element.scrollWidth</td><td align="center">返回自身<b style="color: red">实际</b>宽度，不含边框</td></tr><tr><td>element.scrollHeight</td><td align="center">返回自身实际高度(同上)</td></tr></tbody></table><p style="color:red">返回的是数值，不带单位</p><p>scrollWidth、scrollHeight：返回自身实际宽度、高度，即使内容区的内容不显示出来</p><p>示例：</p><p><a href="https://codepen.io/13535944743/pen/ZEyBQZz">scroll 系列</a></p><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><p>仿淘宝固定侧边栏</p><p>知识点：</p><p>element.scrollTop 是返回元素被卷去的上侧距离，而 window.pageYOffset 是页面被卷去的距离</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p style="color:red">返回的是数值，不带单位</p><table><thead><tr><th>三大系列大小对比</th><th align="center">作用</th></tr></thead><tbody><tr><td>element.offsetWidth</td><td align="center">返回自身包括 padding、边框、内容区的宽度</td></tr><tr><td>element.clientWidth</td><td align="center">返回自身包括 padding、内容区的宽度，不含边框</td></tr><tr><td>element.scrollWidth</td><td align="center">返回自身实际的宽度，不含边框</td></tr></tbody></table><p>用法：</p><ol><li>offset 系列经常用于获得元素位置（<b style="color: red">offsetTop、offsetLeft</b>）</li><li>client 系列经常用于获取元素大小（<b style="color: red">clientWidth、clientHeight</b>）</li><li>scroll 经常用于获取滚动距离（<b style="color: red">scrollTop、scrollLeft</b>）</li><li>页面滚动距离不是通过 scrollTop、scrollLeft 获取，而是通过 window.pageXOffset、window.pageYOffset 获取</li></ol><p>学习链接：<br><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha">pink 老师前端入门</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM</title>
      <link href="/2021/10/01/Javascript-BOM/"/>
      <url>/2021/10/01/Javascript-BOM/</url>
      
        <content type="html"><![CDATA[<h1 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM(浏览器对象模型)"></a>BOM(浏览器对象模型)</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>BOM(Brower Object Model) 即浏览器对象，它提供了独立于内容而与浏览器窗口进行交互的对象，核心对象是 window。</p><p>BOM 缺乏标准，Javascript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C，BOM 最初是 Netscape 浏览器标准的一部分</p><h3 id="BOM-和-DOM"><a href="#BOM-和-DOM" class="headerlink" title="BOM 和 DOM"></a>BOM 和 DOM</h3><p><img src="https://pic.imgdb.cn/item/612e171044eaada739b68a93.jpg"></p><h3 id="BOM-构成"><a href="#BOM-构成" class="headerlink" title="BOM 构成"></a>BOM 构成</h3><p>BOM 比 DOM 更大，它包括 DOM。</p><p><img src="https://pic.imgdb.cn/item/612e176e44eaada739b76e73.jpg"></p><p>window 对象是浏览器的顶级对象。</p><ol><li>它是 JS 访问浏览器窗口的一个接口</li><li>它是一个全局对象。定义在全局作用域中的变量函数都会变成 window 对象的属性和方法。调用时可以省略 window,alert()和 prompt()都是 window 对象方法。</li></ol><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var num = 1;<br>      console.log(num); //实际console.log(window.num);<br><br>      function fn() &#123;<br>          alert(1); //window.alert(1);<br>      &#125;<br>      fn(); //window.fn();<br><br><br></code></pre></td></tr></table></figure><h2 id="window-对象的常见事件"><a href="#window-对象的常见事件" class="headerlink" title="window 对象的常见事件"></a>window 对象的常见事件</h2><h3 id="窗口加载事件"><a href="#窗口加载事件" class="headerlink" title="窗口加载事件"></a>窗口加载事件</h3><h4 id="load-事件"><a href="#load-事件" class="headerlink" title="load 事件"></a>load 事件</h4><p><code>window.addEventListener(&quot;load&quot;, function()&#123;&#125;);</code></p><p>是窗口（页面）加载事件，当文档内容完全加载完成后会触发事件（包括图像、脚本文件、CSS 文件等），就调用的处理函数。</p><p>作用：有了窗口加载事件就可以把 JS 代码放在页面元素上方。因为 load 事件是等页面内容完全加载完毕，才去执行事件处理函数。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;zh-CN&quot;&gt;<br><br>&lt;head&gt;<br>  &lt;meta charset=&quot;UTF-8&quot;&gt;<br>  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>  &lt;title&gt;Myself&lt;/title&gt;<br>  &lt;script&gt;<br>      window.addEventListener(&quot;load&quot;, () =&gt; &#123;<br>          const btn = document.querySelector(&quot;button&quot;);<br>          btn.addEventListener(&quot;click&quot;, () =&gt; &#123;<br>              alert(1);<br>          &#125;);<br>      &#125;);<br>  &lt;/script&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>  &lt;button&gt;点击&lt;/button&gt;<br><br>&lt;/body&gt;<br><br>&lt;/html&gt;<br><br><br></code></pre></td></tr></table></figure><h4 id="DOMContentLoaded-事件"><a href="#DOMContentLoaded-事件" class="headerlink" title="DOMContentLoaded 事件"></a>DOMContentLoaded 事件</h4><p><code>document.addEventListener(&quot;DOMContentLoaded&quot;, function()&#123;&#125;);</code></p><p>DOMContentLoaded 事件触发时，仅当 DOM 加载完成时，不包括样式表，图片等。IE9 以上才支持。</p><p>应用背景：当页面的图片很多时，从用户访问到 onload 触发可能需要较长的时间，会影响到用户的体验，此时用 DOMContentLoaded 事件更合适。</p><p>用法和 load 事件类似。</p><h3 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h3><p><code>window.addEventListener(&quot;resize&quot;, function()&#123;&#125;);</code></p><p>只要窗口大小发生变化，就会触发事件。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">const btn = document.querySelector(&quot;button&quot;);<br>      window.addEventListener(&quot;resize&quot;, () =&gt; &#123;<br>          if (window.innerWidth &lt; 800) &#123; //window.innerWidth是当前窗口大小<br>              btn.style.display = &quot;none&quot;;<br>          &#125; else &#123;<br>              btn.style.display = &quot;inline&quot;;<br>          &#125;<br>      &#125;)<br><br></code></pre></td></tr></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="setTimeout-定时器"><a href="#setTimeout-定时器" class="headerlink" title="setTimeout()定时器"></a>setTimeout()定时器</h3><p><code>window.setTimeout(调用函数，[延迟的毫秒数]);</code></p><p>用于设置一个定时器，在时间到后执行调用函数。</p><p>注意：</p><ol><li>window 可以省略</li><li>延迟的毫秒数默认是 0</li><li>一般给定时器一个标识符，方便停止定时器等操作</li></ol><p>调用函数也称为回调函数 callback。普通函数按照代码顺序直接调用，而 setTimeout 需要等待时间，时间到了才调用函数，因此被称为回调函数。</p><p>注册事件时的事件处理函数也是回调函数。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">let timer = setTimeout(fn, 1000);<br><br>      function fn() &#123;<br>          console.log(&quot;时间到了&quot;);<br>      &#125;<br><br></code></pre></td></tr></table></figure><h3 id="停止-setTimeout-定时器"><a href="#停止-setTimeout-定时器" class="headerlink" title="停止 setTimeout()定时器"></a>停止 setTimeout()定时器</h3><p><code>window.clearTimeout(timeoutID)</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">let timer = setTimeout(fn, 1000);<br><br>      function fn() &#123;<br>          console.log(&quot;时间到了&quot;);<br>      &#125;<br><br>      clearTimeout(timer);<br><br></code></pre></td></tr></table></figure><h3 id="setInterval-定时器"><a href="#setInterval-定时器" class="headerlink" title="setInterval()定时器"></a>setInterval()定时器</h3><p><code>window.setInterval(回调函数，[延迟的毫秒数]);</code></p><p>和 setTimeout()基本一样，不一样的是，setInterval()会重复调用回调函数，每隔一段时间，就调用一次回调函数。</p><p>注意：第一次执行也是需要等待延迟的毫秒数才会执行</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">let timer = setInterval(fn, 1000);<br><br>      function fn() &#123;<br>          console.log(&quot;时间到了&quot;);<br>      &#125;<br><br></code></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>倒计时效果</p><h3 id="停止-setInterval-定时器"><a href="#停止-setInterval-定时器" class="headerlink" title="停止 setInterval()定时器"></a>停止 setInterval()定时器</h3><p><code>window.clearInterval(intervalID)</code></p><p>需要注意的是 setTimeout()和 setInterval()共用一个编号池，技术上，clearTimeout()和 clearInterval() 可以互换。但是，为了避免混淆，不要混用取消定时函数。<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout">来源</a></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">const start = document.querySelector(&quot;.start&quot;);<br>      const stop = document.querySelector(&quot;.pause&quot;);<br>      let timer = null;<br><br>      start.addEventListener(&quot;click&quot;, () =&gt; &#123;<br>          timer = setInterval(() =&gt; &#123;<br>              console.log(&quot;时间到了&quot;);<br>          &#125;, 1000);<br>      &#125;);<br>      stop.addEventListener(&quot;click&quot;, () =&gt; &#123;<br>          clearInterval(timer);<br>      &#125;);<br><br></code></pre></td></tr></table></figure><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><p>发送短信案例</p><h2 id="this-指向"><a href="#this-指向" class="headerlink" title="this 指向"></a>this 指向</h2><p>this 的指向只有在函数执行的时候才能确定指向，一般情况下 this 指向的是调用它的对象。</p><ol><li>全局作用域和普通函数中 this 指向全局对象 window,定时器里面的 this 也是指向 window</li></ol><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">console.log(this);<br><br>      function fn() &#123;<br>          console.log(this);<br>      &#125;<br>      fn();<br><br>      setTimeout(function () &#123;<br>          console.log(this);<br>      &#125;, 200);<br><br></code></pre></td></tr></table></figure><ol start="2"><li>方法调用中谁调用 this，this 就指向谁</li></ol><p style ="color: red">注意：匿名函数和箭头函数的区别：匿名函数和传统方式一样会创建独有的this对象（即触发事件的元素），而箭头函数是继承绑定它所在函数的this对象</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">let o = &#123;            sayHi: function () &#123;                console.log(this);            &#125;        &#125;;        o.sayHi();<br></code></pre></td></tr></table></figure><ol start="3"><li>构造函数中 this 指向构造函数的实例</li></ol><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">function Student() &#123;            console.log(this);        &#125;        let st = new Student();<br></code></pre></td></tr></table></figure><h2 id="JS-执行机制"><a href="#JS-执行机制" class="headerlink" title="JS 执行机制"></a>JS 执行机制</h2><p>Javascript 语言的一个特点是单线程。</p><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><p>单线程会导致所有任务都要排队，即假如有计时器，程序会堵住。为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 Javascript 开启多个线程，于是，JS 出现了同步和异步。</p><p>同步：前一个任务结束后再执行下一个任务。</p><p>异步：可以同时执行多个任务。</p><p>JS 为防止任务有排队或者等待时间较长的问题，把任务分为<b>同步任务</b>和<b>异步任务</b>两大类。</p><p>同步任务都在主线程上执行，形成一个执行栈。</p><p>异步任务：JS 的异步时通过回调函数实现的。一般有三种类型。异步任务的相关回调函数放在<b>任务队列</b>(消息队列)中。</p><ol><li>普通事件，如 click,resize 等</li><li>资源加载，如 load,error 等</li><li>定时器，如 setTimeout,setInterval 等</li></ol><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">console.log(1);    //①        setTimeout(function () &#123;            console.log(3);        &#125;, 0);             //②        console.log(2);     //③<br></code></pre></td></tr></table></figure><p>分析：</p><ol><li>首先，执行主线程执行栈第一个任务，打印出 1</li><li>第二个任务有回调函数，通过异步进程处理， 满足条件后（即点击事件点击了，定时器事件时间到了），把异步任务（回调函数）添加到任务队列中，但是不执行</li><li>继续执行第三个任务，打印出 2；</li><li>如果执行栈中的同步任务执行完后，系统会按顺序读取任务队列的异步任务，被读取的异步任务进入执行栈，执行。</li><li>执行栈中没有任务后，还会一直监听着任务队列（比如 click 事件，用户一直有点击的可能），又称为”事件循环”,任务队列中有新任务，则该任务进入执行栈。</li></ol><p><img src="https://pic.imgdb.cn/item/6132123344eaada739c8261a.jpg"></p><p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha">更详细见 P280</a></p><h2 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h2><h3 id="什么是-location-对象"><a href="#什么是-location-对象" class="headerlink" title="什么是 location 对象"></a>什么是 location 对象</h3><p>window 对象给我们提供了一个 location 属性用于<b style="color:red">获取或设置窗体的 URL</b>,并且可以用于<b style="color:red">解析 URL</b>。这个属性返回的是一个对象，所以这个属性也称为 location 对象。</p><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>统一资源定位符（Uniform Resource Locator, URL）是互联网上标准资源的地址。互联网上每个文件都有一个唯一的 URL。</p><p>URL 的一般语法格式:</p><p><code>protocal://host[:port]/path/[?query]#fragment</code></p><p>样例：<a href="http://www.itcast.cn/index.html?name=andy&amp;age=18#link">http://www.itcast.cn/index.html?name=andy&amp;age=18#link</a></p><p><img src="https://pic.imgdb.cn/item/61321aca44eaada739d92d9a.jpg"></p><h3 id="location-对象的属性"><a href="#location-对象的属性" class="headerlink" title="location 对象的属性"></a>location 对象的属性</h3><table><thead><tr><th>location 对象属性</th><th align="center">返回值</th></tr></thead><tbody><tr><td><b style="color:red">location.href</b></td><td align="center">获取或设置整个 URL</td></tr><tr><td>location.host</td><td align="center">返回域名</td></tr><tr><td>location.post</td><td align="center">返回端口号</td></tr><tr><td>location.pathname</td><td align="center">返回路径</td></tr><tr><td>location.search</td><td align="center">返回参数</td></tr><tr><td>location.hash</td><td align="center">返回片段，上图的 fragment 部分（#后面内容）</td></tr></tbody></table><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><p>5 秒钟之后跳转页面</p><p>获取 URL 参数</p><h3 id="location-对象的方法"><a href="#location-对象的方法" class="headerlink" title="location 对象的方法"></a>location 对象的方法</h3><table><thead><tr><th>location 对象方法</th><th align="center">作用</th></tr></thead><tbody><tr><td>location.assign()</td><td align="center">跳转页面，可回退</td></tr><tr><td>location.replace()</td><td align="center">替换当前页面，不能回退</td></tr><tr><td>location.reload()</td><td align="center">重新加载页面，即刷新页面</td></tr></tbody></table><h2 id="navigator-对象"><a href="#navigator-对象" class="headerlink" title="navigator 对象"></a>navigator 对象</h2><p>navigator 对象包含有关浏览器的信息，有很多属性，最常用的是 userAgent，作用是可以实现通过识别用户使用手机还是电脑打开页面，并跳转到对应的页面。</p><h2 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h2><p>history 对象与浏览器历史记录进行交互。它包含用户在浏览器窗口中访问的 URL。</p><table><thead><tr><th>history 对象方法</th><th align="center">作用</th></tr></thead><tbody><tr><td>history.back()</td><td align="center">后退功能</td></tr><tr><td>history.forward()</td><td align="center">前进功能</td></tr><tr><td>history.go(参数 n)</td><td align="center">n&gt;0,前进 n 个页面；n&lt;0,后退 n 个页面</td></tr></tbody></table><p>参考链接：<br><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha">pink 老师前端入门</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2021/10/01/webpack/"/>
      <url>/2021/10/01/webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="前端工程化和-webpack"><a href="#前端工程化和-webpack" class="headerlink" title="前端工程化和 webpack"></a>前端工程化和 webpack</h1><p>前端开发四大要点：</p><ol><li><strong>模块化</strong>：js、css、资源的模块化</li><li><strong>组件化</strong>：UI 结构、样式、行为可复用</li><li><strong>规范化</strong>：目录结构、编码、接口、文档规范化、git 分支管理</li><li><strong>自动化</strong>：自动化构建、自动部署、自动化测试</li></ol><h2 id="1-前端工程化"><a href="#1-前端工程化" class="headerlink" title="1. 前端工程化"></a>1. 前端工程化</h2><p><strong>前端工程化</strong>：在企业级的前端项目开发中，把前端开发所需的工具、技术、经验等进行规范化、标准化。</p><p>早期的前端工程化解决方案：</p><ul><li>grunt</li><li>gulp</li></ul><p>目前主流的前端工程化解决方案：[webpack](<a href="https://www.webpackjs.com/">webpack 中文文档 | webpack 中文网 (webpackjs.com)</a>)</p><h2 id="2-webpack-的基本使用"><a href="#2-webpack-的基本使用" class="headerlink" title="2. webpack 的基本使用"></a>2. webpack 的基本使用</h2><p><strong>webpack</strong>是前端项目工程化的具体解决方案。</p><p>主要功能：提供友好的<strong>前端模块化开发</strong>支持，以及<strong>代码压缩混淆</strong>，<strong>处理浏览器端 Javascript 的兼容性</strong>，<strong>性能优化</strong>等功能。</p><p>优点：<strong>提高了前端开发效率和项目的可维护性</strong></p><p>例子：</p><p>创建列表隔行换色项目</p><p>步骤：</p><ol><li><p>新建项目空白目录（路径英文），运行<code> npm init -y</code>命令，初始化包管理配置文件 package.json</p><p><img src="https://pic.imgdb.cn/item/61473bdd2ab3f51d9129e6f5.jpg"></p></li><li><p>新建 src 源代码目录</p></li><li><p>新建 src/index.html 首页和 src/index.js 文件</p></li><li><p>初始化首页基本的结构</p><p><img src="https://pic.imgdb.cn/item/61473e572ab3f51d912eb768.jpg"></p></li><li><p>运行<code> npm install jquery -S</code>命令，安装 jQuery,其中-S 是–save 的缩写</p><p><img src="https://pic.imgdb.cn/item/61473f4c2ab3f51d91307175.jpg"></p></li><li><p>编写 index.js，实现隔行换色效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;jquery&quot;</span>; <span class="hljs-comment">/*导入jquery，用$符号接*/</span><br><br>$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;ul li:odd&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;pink&quot;</span>);<br>  $(<span class="hljs-string">&quot;ul li:even&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;purple&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>报错：</p><p><img src="https://pic.imgdb.cn/item/614741a22ab3f51d9134bfed.jpg"></p><p>原因：import 方法较高级，浏览器执行会出错,可使用 webpack 解决问题</p></li><li><p>在项目中安装 webpack</p><p>安装 webpack 相关的两个包<code> npm install webpack webpack-cli -D</code>（-D 是–save-dev 的缩写）</p><p><img src="https://pic.imgdb.cn/item/6147436b2ab3f51d91383879.jpg"></p></li><li><p>配置 webpack</p><ol><li><p>在项目根目录下，创建名为 webpack.config.js 的 webpack 配置文件，并初始化配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>, <span class="hljs-comment">//mode用来指定模式，可以是development(开发模式)或production(生产模式)</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/614745542ab3f51d913c1e41.jpg"></p></li><li><p>在 package.json 的 scripts 节点下，新增 dev 脚本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack&quot;</span><br> &#125;<br><span class="hljs-comment">//dev脚本名字可变，后面的webpack是命令名，不可变，script节点下的脚本可以通过npm run执行，如npm run dev</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>执行<code> npm run dev</code>命令，启动 webpack 进行项目的打包构建</p><p><img src="https://pic.imgdb.cn/item/614747862ab3f51d91408073.jpg"></p></li><li><p>更换使用的 js 文件为新生成的 js 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../dist/main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/23/SJUBCnszLdmr1ZQ.png" alt="image-20210919222517017"></p></li></ol><p>配置 webpack 时 mode 节点的可选值有两个：</p><ol><li><p>development</p><ul><li><strong>开发环境</strong></li><li><strong>不会</strong>对打包生成的文件进行<strong>代码压缩</strong>和<strong>性能优化</strong></li><li>打包<strong>速度快</strong>， 适合在开发阶段使用</li></ul></li><li><p>production</p><ul><li><strong>生产环境</strong></li><li>会<strong>对打包生成的文件进行</strong>代码压缩<strong>和</strong>性能优化**</li><li>打包<strong>速度很慢</strong>， 适合在项目发布阶段使用</li></ul><p><img src="https://pic.imgdb.cn/item/6147fdf62ab3f51d917ac9e7.jpg"></p><p>webpack.config.js 是 webpack 的配置文件。webpack 在真正开始打包构建之前，会<strong>先读取这个配置文件</strong>，然后根据给定的配置，对项目进行打包。</p><p>webpack4.x 和 5.x 的版本中：</p><ol><li>默认的打包入口文件为 src/index.js</li><li>默认的输出文件路径为 dist/main.js</li></ol><p>找不到入口文件会报错，如更改 src 文件夹和更改 index.js 文件名</p><p><img src="https://pic.imgdb.cn/item/6147ffc82ab3f51d917d6373.jpg"></p><p>可以更改通过 webpack 的配置文件来自定义打包的入口和出口。通过<strong>entry 节点</strong>指定<strong>打包的入口</strong>，通过<strong>output 节点</strong>指定<strong>打包的出口</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>); <span class="hljs-comment">//导入node.js中专门操作路径的模块</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>, <span class="hljs-comment">//mode用来指定模式，可以是development(开发模式)或production(生产模式)</span><br><br>  <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">&quot;./src/myindex.js&quot;</span>), <span class="hljs-comment">//打包入口文件路径</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">&quot;./dist/mymain.js&quot;</span>), <span class="hljs-comment">//打包的出口路径</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;mymain.js&quot;</span>, <span class="hljs-comment">//输出文件名称</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/614802ab2ab3f51d918171aa.jpg"></p><p><b style="color: red">问题：更改 myindex.js，页面用的还是打包的版本，需要再次执行<code>npm run dev</code>命令</b></p></li></ol><h2 id="3-webpack-插件"><a href="#3-webpack-插件" class="headerlink" title="3. webpack 插件"></a>3. webpack 插件</h2><h3 id="3-1-webpack-dev-server"><a href="#3-1-webpack-dev-server" class="headerlink" title="3.1 webpack-dev-server"></a>3.1 webpack-dev-server</h3><p>每当修改了源代码，webpack 会自动进行项目的打包和构建</p><ul><li><p>安装 webpack-dev-server，<code>npm install webpack-dev-server@3.11.2 -D</code>，-D 表示只在开发阶段会用到，这里练习时，不加版本号报错</p></li><li><p>配置 webpack-dev-server：修改 package.json 中的 script 节点的 dev 命令为”webpack serve”</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack serve&quot;</span><br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>再次执行<code> npm run dev</code>命令，重新进行项目的打包<img src="https://pic.imgdb.cn/item/614806e12ab3f51d91870a28.jpg"></p><p>命令没有结束，会一直监听源代码有没有变化，每当保存源代码，都会自动打包</p><p><img src="https://pic.imgdb.cn/item/614808012ab3f51d91889be0.jpg"></p><p><b style="color: red">注意：这里又会出现问题，自动打包后，vscode，右键打开 index.html 文件会发现，没有变化</b>。因为 webpack-dev-server 会启动一个<strong>实时打包的 http 服务器</strong>，即无法通过 file 协议查看打包效果，需要通过 http 协议查看效果</p></li><li><p>在浏览器中访问 <a href="http://localhost:8080/">http://localhost:8080</a> 地址，查看自动打包效果</p><p>问题还是没有解决：样式还是没有实时变化。</p><p><img src="https://pic.imgdb.cn/item/614816732ab3f51d919d71ee.jpg"></p><p>原因：</p><p>配置了 webpack-dev-server 后，打包生成的文件并没有放在物理磁盘上，而是放到了<strong>内存</strong>中，可以在 <a href="http://localhost:8080/mymain.js%EF%BC%88%E5%90%8E%E9%9D%A2%E6%98%AF%E7%94%9F%E6%88%90%E7%9A%84%E6%96%87%E4%BB%B6%E5%90%8D%EF%BC%89%E4%B8%AD%E6%9F%A5%E7%9C%8B%E7%9C%9F%E6%AD%A3%E7%94%9F%E6%88%90%E7%9A%84">http://localhost:8080/mymain.js（后面是生成的文件名）中查看真正生成的</a> js 文件。</p><p>为什么要放在内存中呢？</p><p>因为可能会需要频繁保存源代码，需要频繁读写文件，放在内存中，可以提高实时打包输出的性能，因内存比物理磁盘快很多。</p></li><li><p>这样子的话，引入 js 文件的路径就得变成内存中的位置才对了</p><script src="/mymain.js"></script></li><li><p>之后，每次更改源代码，会实时刷新，可以实时查看效果</p></li></ul><h3 id="3-2-html-webpack-plugin"><a href="#3-2-html-webpack-plugin" class="headerlink" title="3.2 html-webpack-plugin"></a>3.2 html-webpack-plugin</h3><p>html-webpack-plugin 是**webpack 中的 HTML 插件，通过此插件可以复制 html 文件放到其他位置（内存中）</p><ul><li><p>安装 html-webpack-plugin 插件，<code> npm install html-webpack-plugin@5.3.2 -D</code></p></li><li><p>配置 html-webpack-plugin，(在 webpack.config.js 中)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 导入HTML插件，得到一个构造函数</span><br><span class="hljs-keyword">const</span> HtmlPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><br><span class="hljs-comment">//2. 创建HTML插件的实例对象</span><br><span class="hljs-keyword">const</span> htmlPlugin = <span class="hljs-keyword">new</span> HtmlPlugin(&#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;./src/index.html&quot;</span>, <span class="hljs-comment">//指定要复制的文件路径</span><br>  <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;./index.html&quot;</span>, <span class="hljs-comment">//指定生成的文件的路径</span><br>&#125;);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br><br>  <span class="hljs-comment">//3. 通过plugins节点，使htmlPlugin插件生效</span><br>  <span class="hljs-attr">plugins</span>: [htmlPlugin],<br>  <span class="hljs-comment">//plugins：插件的数组，webpack运行时会加载并调用这些插件</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>这里只有配置 html-webpack-plugin 的内容，为了看起来更清晰</strong></p></li><li><p>重新执行<code> npm run dev</code>命令，打开 <a href="http://localhost:8080/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E6%9F%A5%E7%9C%8B%E6%95%88%E6%9E%9C%EF%BC%8C%E4%B9%9F%E6%98%AF%E4%BC%9A%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0">http://localhost:8080/，可以直接查看效果，也是会实时更新</a></p><p>通过插件复制的 index.html 页面，<strong>被放到了内存中</strong></p><p>HTML 插件在生成复制的 index.html 页面时，会自动引入打包的 js 文件（即不需要自己引入 js 文件）</p><p><img src="https://pic.imgdb.cn/item/61483d642ab3f51d91e05328.jpg"></p></li></ul><h3 id="3-3-devServer-节点"><a href="#3-3-devServer-节点" class="headerlink" title="3.3 devServer 节点"></a>3.3 devServer 节点</h3><p>在 webpack.config.js 配置文件中，可以通过 devServer 节点进行其他配置，如实现初次打包时，自动打开浏览器等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">devServer: &#123;<br>        <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-comment">//使用的主机地址</span><br>        <span class="hljs-attr">port</span>: <span class="hljs-number">80</span>, <span class="hljs-comment">//实时打包使用的端口号</span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="4-loader"><a href="#4-loader" class="headerlink" title="4. loader"></a>4. loader</h2><p>webpack 默认只能打包处理以.js 后缀为结尾的模块。其他不是以.js 后缀为结尾的模块 webpack 默认处理不了，<strong>需要调用 loader 加载器才可以正常打包</strong>。</p><p>loader 加载器的作用：协助 webpack 打包处理特定的文件模块</p><ul><li>css-loader：可以打包处理.css 相关文件</li><li>less-loader：可以打包处理.less 相关的文件</li><li>babel-loader：可以打包处理 webpack 无法处理的高级 JS 语法</li></ul><p>例子：</p><h3 id="4-1-打包处理-css-文件"><a href="#4-1-打包处理-css-文件" class="headerlink" title="4.1 打包处理 css 文件"></a>4.1 打包处理 css 文件</h3><ol><li><p>编写 CSS 文件</p></li><li><p>myindex.js 文件导入 css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;jquery&quot;</span>; <span class="hljs-comment">/*导入jquery，用$符号接*/</span><br><br><span class="hljs-comment">//导入样式，在webpack中，一切都是模块</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./css/index.css&quot;</span>;<br><br>$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;ul li:odd&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>);<br>  $(<span class="hljs-string">&quot;ul li:even&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;pink&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>安装处理 css 文件的 loader，<code> npm i style-loader@3.0.0 css-loader@5.2.6 -D</code></p></li><li><p>在 webpack 的配置文件中的 module-&gt;rules 数组中，添加 loader 规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>: &#123;<br>  <span class="hljs-comment">//所有第三方文件模板的匹配规则</span><br>  <span class="hljs-attr">rules</span>: [<br>    <span class="hljs-comment">//对应文件的匹配规则</span><br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>      <span class="hljs-comment">//test表示匹配的文件类型（后缀名）</span><br><br>      use: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>],<br>      <span class="hljs-comment">//use表示对应要调用的loader,多个loader的调用顺序是从后往前调用，</span><br>      <span class="hljs-comment">//即先调用css-loader，再调用style-loader，前面没有loader后给会webpack，webpack把style-loader处理的结果，合并到/dist/mymain.js中，生成最终打包好的文件</span><br>    &#125;,<br>  ];<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>npm run dev，<b style="color: red">注意，这里如果 index.html 导入了 css 文件，myindex.js 文件也导入 css 文件，会报错</b></p></li></ol><h3 id="4-2-打包处理-less-文件"><a href="#4-2-打包处理-less-文件" class="headerlink" title="4.2 打包处理 less 文件"></a>4.2 打包处理 less 文件</h3><ol><li><p>编写 less 文件</p></li><li><p>myindex.js 文件导入 less</p></li><li><p>安装处理 less 文件的 loader，<code> npm i less-loader@10.0.1 -D</code></p></li><li><p>添加 loader 规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>: &#123;<br>  <span class="hljs-comment">//所有第三方文件模板的匹配规则</span><br>  <span class="hljs-attr">rules</span>: [<br>    <span class="hljs-comment">//对应文件的匹配规则</span><br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>      use: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>],<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>      use: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;less-loader&quot;</span>],<br>    &#125;,<br>  ];<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="4-3-打包处理与-url-路径相关的文件"><a href="#4-3-打包处理与-url-路径相关的文件" class="headerlink" title="4.3 打包处理与 url 路径相关的文件"></a>4.3 打包处理与 url 路径相关的文件</h3><ol><li><p>通过 myindex.js 导入图片</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;jquery&quot;</span>; <span class="hljs-comment">/*导入jquery，用$符号接*/</span><br><br><span class="hljs-comment">//导入样式，在webpack中，一切都是模块</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./css/index.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./css/myindex.less&quot;</span>;<br><br><span class="hljs-keyword">import</span> logo <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./images/logo.png&quot;</span>;<br><br>$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;img&quot;</span>).attr(<span class="hljs-string">&quot;src&quot;</span>, logo);<br><br>  $(<span class="hljs-string">&quot;ul li:odd&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>);<br>  $(<span class="hljs-string">&quot;ul li:even&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;pink&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>运行命令，<code> npm i url-loader@4.1.1 file-loader@6.2.0 -D</code></p></li><li><p>添加 loader 规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>: &#123;<br>  <span class="hljs-comment">//所有第三方文件模板的匹配规则</span><br>  <span class="hljs-attr">rules</span>: [<br>    <span class="hljs-comment">//对应文件的匹配规则</span><br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.jpg|png|gif$/</span>,<br>      use: <span class="hljs-string">&quot;url-loader&quot;</span>,<br>    &#125;,<br>  ];<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的 use 中，后面可以增加参数</p><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>: &#123;<br>  <span class="hljs-comment">//所有第三方文件模板的匹配规则</span><br>  <span class="hljs-attr">rules</span>: [<br>    <span class="hljs-comment">//对应文件的匹配规则</span><br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.jpg|png|gif$/</span>,<br>      use: <span class="hljs-string">&quot;url-loader?limit=300&quot;</span>,<br>    &#125;,<br>  ];<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>limie 用来指定图片格式的大小，单位是字节</li><li>只有&lt;=limit 大小的图片，才会被转成 base64 格式的图片</li></ul><p>练习用图片大小：337 字节</p><p>limit=300 时，输出 logo</p><p><img src="https://pic.imgdb.cn/item/61485acb2ab3f51d91108a8f.jpg"></p><p>limit=400 时，输出 logo</p><p><img src="https://pic.imgdb.cn/item/61485b5d2ab3f51d911146e2.jpg"></p></li></ol><h2 id="5-打包发布"><a href="#5-打包发布" class="headerlink" title="5. 打包发布"></a>5. 打包发布</h2><p>项目开发完成之后，需要使用 webpack 对项目进行打包发布。原因：</p><ol><li>开发环境下，打包生成的文件<strong>存在于内存中</strong>，无法获取到最终生成的文件</li><li>开发环境下，打包生成的文件<strong>不会出现代码压缩和性能优化</strong></li></ol><p>配置 webpack 的打包发布</p><p>在 package.json 文件的 script 节点下，增加新的命令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack serve&quot;</span>,<br>   <span class="hljs-comment">//开发环境中，运行dev命令(npm run dev)</span><br>  <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack --mode production&quot;</span><br>    <span class="hljs-comment">//项目发布时，运行build命令(npm run build)，--mode用来指定webpack的运行模式。会覆盖webpack.config.js中的model选项</span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行 npm run dev 命令后，会发现生成的 js 文件、图片文件（只有 base64 格式的图片会生成）和 index.html 文件都直接放在 dist 文件夹下。</p><h3 id="5-1-把-js-文件统一放到生成的-js-目录中"><a href="#5-1-把-js-文件统一放到生成的-js-目录中" class="headerlink" title="5.1 把 js 文件统一放到生成的 js 目录中"></a>5.1 把 js 文件统一放到生成的 js 目录中</h3><p>在 webpack.config.js 的 output 节点中，进行配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">output: &#123;<br>        <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">&quot;./dist&quot;</span>), <span class="hljs-comment">//打包的出口路径</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;js/mymain.js&quot;</span> <span class="hljs-comment">//输出文件名称</span><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-把图片文件统一放到生成的-images-目录下"><a href="#5-2-把图片文件统一放到生成的-images-目录下" class="headerlink" title="5.2 把图片文件统一放到生成的 images 目录下"></a>5.2 把图片文件统一放到生成的 images 目录下</h3><p>在 webpack.config.js 配置文件中的 module 下的 rules，对应的 url 路径相关的文件下的 use 后增加参数，位置具体参考 4.3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.jpg|png|gif$/</span>,<br>    use: <span class="hljs-string">&quot;url-loader?limit=300&amp;outputPath=images&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>outputPath 选项可以指定图片文件的输出路径</p><p>没有及时删除 dist 再重新 npm run build 会出现以下下问题</p><p><img src="https://pic.imgdb.cn/item/6148907c2ab3f51d91660de2.jpg"></p><h3 id="5-3-自动清理-dist-目录下的旧文件"><a href="#5-3-自动清理-dist-目录下的旧文件" class="headerlink" title="5.3 自动清理 dist 目录下的旧文件"></a>5.3 自动清理 dist 目录下的旧文件</h3><p>为了在每次打包发布时<strong>自动清理 dist 目录下的旧文件</strong>，可以安装 clean-webpack-plugin 插件</p><ol><li>安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install --save-dev clean-webpack-plugin<br></code></pre></td></tr></table></figure><ol start="2"><li><p>配置（在 webpack.config.js 中）</p><p><img src="https://pic.imgdb.cn/item/614892a72ab3f51d916a3df4.jpg"></p></li></ol><h2 id="6-Souce-Map"><a href="#6-Souce-Map" class="headerlink" title="6. Souce Map"></a>6. Souce Map</h2><p>前端项目在投入生产环境之前，都要对 Javascript 源代码进行压缩混淆，减小文件体积，提高文件加载效率。</p><p>对压缩混淆之后的代码除错很困难：</p><ul><li>变量会被替换成没有任何语义的名称，如 a, b, c 等</li><li>空行和注释被剔除</li></ul><p>Source Map 时一个信息文件，里面存着位置信息。Source Map 文件中存着压缩混淆后的代码对应变化前的位置。</p><p>有了它，出错时会直接显示原始代码，而不是转换后的代码，方便了程序员的调试。</p><h3 id="6-1-默认-Source-Map-的问题"><a href="#6-1-默认-Source-Map-的问题" class="headerlink" title="6.1 默认 Source Map 的问题"></a>6.1 默认 Source Map 的问题</h3><p>在开发环境下，webpack 默认启用了 Source Map 功能。当程序出错时，可以直接在控制台显示错误行的位置，并定位到具体的源代码。</p><p>默认生成的 Source Map 记录的是生成后的代码的位置，会导致报错时的行数与源代码的行数不一致。</p><p><img src="https://pic.imgdb.cn/item/6148966b2ab3f51d91711419.jpg"></p><h3 id="6-2-解决默认-Source-Map-的问题"><a href="#6-2-解决默认-Source-Map-的问题" class="headerlink" title="6.2 解决默认 Source Map 的问题"></a>6.2 解决默认 Source Map 的问题</h3><p>开发环境下，在 webpack.config.js 中添加以下配置，就可以实现运行时报错的行数和源代码的行数保持一致</p><p><img src="https://pic.imgdb.cn/item/614897432ab3f51d9172ab98.jpg"></p><p>生产环境中，如果省略 devtool 选项，那么生成的文件中不包含 Source Map。这样可以防止源代码通过 Source Map 的形式暴露出去。</p><p><img src="https://pic.imgdb.cn/item/614898c42ab3f51d9175a293.jpg"></p><p><strong>只定位行数，不暴露源码</strong>：在生产环境下，只想知道报错的地方在源码的具体行数，而且不想暴露源码，将 devtool 的值设置为<strong>nosources-source-map</strong>。</p><p><img src="https://pic.imgdb.cn/item/614899f92ab3f51d917801c4.jpg"></p><p><strong>定位行数，暴露源码</strong>：将 devtool 的值设置为<strong>source-map</strong>。了解即可，<b style="color:red">极其不安全</b></p><p>总结：</p><p><img src="https://pic.imgdb.cn/item/61489a962ab3f51d91792fbc.jpg"></p><p>学习链接：</p><p><a href="https://www.bilibili.com/video/BV1zq4y1p7ga">黑马程序员 Vue 全套视频教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记(一)</title>
      <link href="/2021/10/01/vue-1/"/>
      <url>/2021/10/01/vue-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-学习笔记-一"><a href="#Vue-学习笔记-一" class="headerlink" title="Vue 学习笔记(一)"></a>Vue 学习笔记(一)</h1><h2 id="1-vue-简介"><a href="#1-vue-简介" class="headerlink" title="1. vue 简介"></a>1. vue 简介</h2><p>Vue 是一套<strong>用于构建用户界面</strong>的前端<strong>框架</strong></p><h3 id="1-1-vue-的两个特性"><a href="#1-1-vue-的两个特性" class="headerlink" title="1.1 vue 的两个特性"></a>1.1 vue 的两个特性</h3><ol><li><p><strong>数据驱动视图</strong></p><ul><li>使用了 vue 的页面，vue 会监听数据的变化，<strong>自动</strong>重新渲染页面的结构</li><li><img src="https://pic.imgdb.cn/item/614957ae2ab3f51d917d98ae.jpg"></li><li>数据驱动视图是<strong>单向的数据绑定</strong>，即只能由数据来影响页面结构</li></ul></li><li><p><strong>双向数据绑定</strong></p><ul><li><p><b style="color: red">填写表单</b>时，双向数据绑定可以让开发者在<strong>不操作 DOM 的前提下</strong>，自动把用户填写的内容同步到数据源中</p><p><img src="https://pic.imgdb.cn/item/614958cb2ab3f51d917f049a.jpg"></p></li></ul></li></ol><h3 id="1-2-MVVM"><a href="#1-2-MVVM" class="headerlink" title="1.2 MVVM"></a>1.2 MVVM</h3><p>vue 实现<strong>数据驱动视图</strong>和<strong>双向数据绑定</strong>的核心原理。</p><p>M 指的是 Model，V 指的是 View，VM 指的是 ViewModel</p><p>​ <strong>Model</strong>：表示当前页面渲染时依赖的数据源</p><p>​ <strong>View</strong>：表示当前页面所渲染 DOM 结构</p><p>​ <strong>ViewModel</strong>：表示 vue 的实例，是 MVVM 的核心</p><p><strong>MVVM 的工作原理</strong>：ViewModel 作为 MVVM 的核心，它把当前页面的<strong>数据源</strong>(Model)和<strong>页面的结构</strong>(View)连在一起。</p><ul><li>当数据源发生变化时，会被 ViewModel 监听到，VM 会自动更新页面的结构</li><li>当表单元素的值发生变化时，也会被 VM 监听到，VM 会把更新的值自动同步到数据源(Model)中</li></ul><p><img src="https://pic.imgdb.cn/item/61495b702ab3f51d9182657f.jpg"></p><h2 id="2-vue-的基本使用"><a href="#2-vue-的基本使用" class="headerlink" title="2. vue 的基本使用"></a>2. vue 的基本使用</h2><p><strong>步骤</strong></p><ol><li>导入 vue.js 文件</li><li>在页面中声明要被 vue 操作的 DOM 区域</li><li>创建 vue 实例对象</li></ol><p><img src="https://pic.imgdb.cn/item/61873bf12ab3f51d9112f478.jpg"></p><h2 id="3-vue-的指令"><a href="#3-vue-的指令" class="headerlink" title="3. vue 的指令"></a>3. vue 的指令</h2><p><strong>指令</strong>是 vue 为开发者提供的<strong>模板语法</strong>，用于<strong>辅助开发者渲染页面的基本结构</strong></p><p>按照用途可分为 6 大类：</p><ol><li>内容渲染指令</li><li>属性绑定指令</li><li>事件绑定指令</li><li>双向绑定指令</li><li>条件绑定指令</li><li>列表渲染指令</li></ol><h3 id="3-1-内容渲染指令"><a href="#3-1-内容渲染指令" class="headerlink" title="3.1 内容渲染指令"></a>3.1 内容渲染指令</h3><ol><li><p><strong>v-text</strong></p><p>会覆盖元素内默认内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>姓名：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 这里的姓名会被直接覆盖成下面数据源中的username --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//表示操作的区域，值是选择器</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//Model数据源</span></span><br><span class="javascript">      <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;clz&quot;</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>插值表达式<code>&#123;&#123;&#125;&#125;</code></strong></p><p>不会覆盖元素内默认内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>姓名：&#123;&#123; username &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 下面数据源中的username会被渲染到姓名后面 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//表示操作的区域，值是选择器</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//Model数据源</span></span><br><span class="javascript">      <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;clz&quot;</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>v-html</strong></p><p>可以把包含 html 标签的字符串渲染成页面的 HTML 元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; test_v_html &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;test_v_html&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;test_v_html&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//表示操作的区域，值是选择器</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//Model数据源</span></span><br><span class="javascript">      <span class="hljs-attr">test_v_html</span>: <span class="hljs-string">&#x27;&lt;b style=&quot;color: red&quot;&gt;Hello!&lt;/b&gt;&#x27;</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://pic.imgdb.cn/item/614962692ab3f51d918b4755.jpg"></p></li></ol><h3 id="3-2-属性绑定指令"><a href="#3-2-属性绑定指令" class="headerlink" title="3.2 属性绑定指令"></a>3.2 属性绑定指令</h3><p>为<strong>元素的属性</strong>动态绑定属性值时，需要用到<strong>v-bind</strong>属性绑定指令</p><p><b style="color: red">简写形式”:”</b></p><p><img src="https://pic.imgdb.cn/item/614966832ab3f51d919111c5.jpg"></p><p>vue 提供的模板渲染语法，除了支持<strong>绑定简单的数据</strong>之外，还<strong>支持 Javascript 表达式的运算</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1 + 1 = &#123;&#123; 1 + 1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; hello &#125;&#125; 反转后: &#123;&#123; hello.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;&#x27;box&#x27; + index&quot;</span>&gt;</span>鼠标悬浮一下<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 使用属性绑定指令时，进行字符串拼接的字符串需要使用嵌套引号 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 否则，会到data中找要渲染的数据，找不到会报错 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//表示操作的区域，值是选择器</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//Model数据源</span></span><br><span class="javascript">      <span class="hljs-attr">hello</span>: <span class="hljs-string">&quot;Hello World!&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">index</span>: <span class="hljs-number">3</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-事件绑定指令"><a href="#3-3-事件绑定指令" class="headerlink" title="3.3 事件绑定指令"></a>3.3 事件绑定指令</h3><p>vue 提供<strong>v-on 事件绑定指令</strong>，用来辅助程序员为 DOM 元素绑定事件监听。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>count的值是: &#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;addCount&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//表示操作的区域，值是选择器</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//Model数据源</span></span><br><span class="javascript">      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//事件处理函数放在methods节点里</span></span><br><span class="javascript">      <span class="hljs-comment">// addCount: function () &#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//     this.count++;</span></span><br><span class="javascript">      <span class="hljs-comment">// &#125;</span></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">addCount</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-comment">//简便方式</span></span><br><span class="javascript">        <span class="hljs-built_in">this</span>.count++;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><b style="color: red">v-on 事件绑定指令简写形式”@”</b>，而且如果事件处理函数的代码只有一行，可以直接写在行内</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>count的值是: &#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count += 1&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//表示操作的区域，值是选择器</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//Model数据源</span></span><br><span class="javascript">      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>事件参数对象</strong>：通过 e.target 使被点击的按钮变色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>count的值是: &#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addCount&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//表示操作的区域，值是选择器</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//Model数据源</span></span><br><span class="javascript">      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">addCount</span>(<span class="hljs-params">e</span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.count++;</span><br><span class="javascript">        e.target.style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>传参</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>count的值是: &#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addCount(3)&quot;</span>&gt;</span>+3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//表示操作的区域，值是选择器</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//Model数据源</span></span><br><span class="javascript">      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">addCount</span>(<span class="hljs-params">step</span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.count += step;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可实现传参后，可以发现事件参数对象被参数覆盖了，而 vue 提供一个特殊变量**$event<strong>，用来表示</strong>原生的事件参数对象 event<strong>，然后手动把</strong>$event**当成参数传进去用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>count的值是: &#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addCount($event, 3)&quot;</span>&gt;</span>+3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//表示操作的区域，值是选择器</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//Model数据源</span></span><br><span class="javascript">      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">addCount</span>(<span class="hljs-params">e, step</span>)</span> &#123;</span><br><span class="javascript">        e.target.style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.count += step;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>事件修饰符</strong>：vue 提供了事件修饰符的概念，辅组程序员更方便地<strong>对事件的触发进行控制</strong></p><p><img src="https://pic.imgdb.cn/item/614982882ab3f51d91bd5be9.jpg"></p><p><img src="https://pic.imgdb.cn/item/614982232ab3f51d91bcb021.jpg"></p><p><strong>按键修饰符</strong>：在监听<strong>键盘事件</strong>时，如果需要<strong>判断详细的按键</strong>，可以为键盘相关事件添加<strong>按键修饰符</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.esc</span>=<span class="hljs-string">&quot;clearIpt&quot;</span> /&gt;</span><br>  <span class="hljs-comment">&lt;!-- 通过按键修饰符可以判断详细的按键 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//表示操作的区域，值是选择器</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//Model数据源</span></span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">clearIpt</span>(<span class="hljs-params">e</span>)</span> &#123;</span><br><span class="javascript">        e.target.value = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-4-双向绑定指令"><a href="#3-4-双向绑定指令" class="headerlink" title="3.4 双向绑定指令"></a>3.4 双向绑定指令</h3><p>用来辅助开发者在<strong>不操作 DOM</strong>的前提下，<strong>快速获取表单的数据</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>用户名是: &#123;&#123; username &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>  <span class="hljs-comment">&lt;!-- 在input中填入的数据会让h2中的数据实时变化 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 可以添加修饰符.lazy,实现在&quot;change&quot;时才更新，比如，用户把焦点移出input了 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//表示操作的区域，值是选择器</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//Model数据源</span></span><br><span class="javascript">      <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;clz&quot;</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>v-model 指令的修饰符</strong></p><p><img src="https://pic.imgdb.cn/item/6149894c2ab3f51d91c870ec.jpg"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;n1&quot;</span> /&gt;</span> +<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;n2&quot;</span> /&gt;</span> =<br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; n1 + n2 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//表示操作的区域，值是选择器</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//Model数据源</span></span><br><span class="javascript">      <span class="hljs-attr">n1</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">      <span class="hljs-attr">n2</span>: <span class="hljs-number">2</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-5-条件渲染指令"><a href="#3-5-条件渲染指令" class="headerlink" title="3.5 条件渲染指令"></a>3.5 条件渲染指令</h3><p>条件渲染指令用来辅助开发者<strong>按需来控制 DOM 的显示与隐藏</strong>。</p><p>有两个条件渲染指令</p><ul><li>v-if</li><li>v-show</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- v-if和v-show都是根据&quot;=&quot;后的部分为true或false来决定是显示还是隐藏--&gt;</span><br>  <span class="hljs-comment">&lt;!-- 为true时显示，为false时隐藏 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>v-if<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>v-if<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>v-show<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//表示操作的区域，值是选择器</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//Model数据源</span></span><br><span class="javascript">      <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;&#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>区别：</p><p>实现原理不同：</p><ul><li>v-if 是通过<strong>动态创建或移除 DOM 元素</strong>来控制元素在页面上的显示与隐藏，隐藏后，还贴心的把隐藏的节点所在的位置变为空注释，暗示有东西藏着</li><li>v-show 指令会动态为元素<strong>添加或移除 style=”display: none;”样式</strong>，来控制元素的显示与隐藏</li></ul><p>性能消耗不同：</p><ul><li>v-if 的切换开销更高，而 v-show 的初始渲染开销更高</li><li><strong>需要频繁切换</strong>，使用 v-show</li><li><strong>运行时条件很少变化</strong>，用 v-if</li></ul><p><img src="https://pic.imgdb.cn/item/61498d7d2ab3f51d91cf68e5.jpg"></p><p>v-if 可以单独使用，也可以搭配 v-else、v-else-if 使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;type&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;B&quot;</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;C&quot;</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;D&quot;</span>&gt;</span>D<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;E&quot;</span>&gt;</span>E<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span>优秀<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span>良好<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span>及格<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>差<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//表示操作的区域，值是选择器</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//Model数据源</span></span><br><span class="javascript">      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;A&quot;</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;&#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-6-列表渲染指令"><a href="#3-6-列表渲染指令" class="headerlink" title="3.6 列表渲染指令"></a>3.6 列表渲染指令</h3><p>v-for 列表渲染指令，用于实现<strong>基于一个数组来渲染一个列表结构</strong>。v-for 指令需要使用<strong>item in items</strong>形式的特殊语法，items 是要循环的数组，item 是循环的每一项</p><p>v-for 指令支持一个可选的第二个参数，即当前项的索引。语法为<code> (item, index) in items</code></p><p><b style="color: red">需要为每一项提供唯一的 key 属性，用于维护列表的状态</b></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-bordered table-hover table-striped&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>索引<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(user, index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;user.id&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; index &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; user.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//表示操作的区域，值是选择器</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//Model数据源</span></span><br><span class="javascript">      <span class="hljs-attr">list</span>: [</span><br><span class="javascript">        &#123;</span><br><span class="javascript">          <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        &#123;</span><br><span class="javascript">          <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李四&quot;</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        &#123;</span><br><span class="javascript">          <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王五&quot;</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      ],</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;&#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>key 的注意事项</strong>：</p><ol><li><p>key 的值只能是*字符串或<strong>数字</strong>类型</p></li><li><p>key 的值必须具有<strong>唯一性</strong></p></li><li><p>建议把<strong>数据项的 id 属性</strong>作为 key 的值(因为 id 属性的值具有唯一性)</p></li><li><p>使用 v-for 指令时<strong>一定要指定 key 的值</strong>(既可以提升性能，又可以防止列表状态混乱)</p></li><li><p>使用 index 的值作为 key 的值没有意义(因为 index 的值不具有唯一性)</p><p>index 的值看起来像是具有唯一性，但是这个是假唯一性</p><p>例子：</p><p>现在又一个数组 list，list=[“张三”，”李四”]，假如选择 index 作为 key 值的话，选择 key=1,即现在选中了李四，这个时候在数组的头那里插入一个新人”王五”，那么李四的 key 值将会变成 2,而之前选的是 key 为 1 的，所以，张三就篡位了。</p></li></ol><h2 id="4-过滤器"><a href="#4-过滤器" class="headerlink" title="4. 过滤器"></a>4. 过滤器</h2><p>过滤器常用于<strong>文本的格式化</strong>，可用于<strong>插值表达式</strong>和<strong>v-bind 属性绑定</strong></p><p>过滤符由**管道符”|”**进行调用</p><p><img src="https://pic.imgdb.cn/item/614bd7912ab3f51d91a452e0.jpg"></p><p><b style="color: red">在 filters 节点下定义的过滤器，是私有过滤器，只能在当前的 vm 实例所控制的 el 区域内可以使用。</b>要实现<strong>多个 vue 实例之间共享过滤器</strong>，可以定义<strong>全局过滤器</strong>。</p><p><b style="color: red">注意，全局过滤器要放在要用到的 vm 实例之前</b></p><p><img src="https://pic.imgdb.cn/item/614bdc422ab3f51d91a963a7.jpg"></p><p><b style="color: red">注意，查看上面的结果可以发现，只有 vm2 控制的区域后面会跟着”全局版本”,这是因为 vm 也有一个私有过滤器 mychange，所以 vm 就直接用自己的了（懒得再去全局那里拿来用）</b></p><p>过滤器可以<strong>串联的</strong>进行调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  &#123;<br>    message | fileterA | filterB;<br>  &#125;<br>&#125; <span class="hljs-comment">//先把message的值给过滤器filterA处理，之后把处理的结果给B处理，最后再把最后的结果渲染到页面上</span><br></code></pre></td></tr></table></figure><p><strong>过滤器可以传参</strong>：过滤器本质是函数，可以传参，只不过，<b style = "color: red">第一个参数已经规定好了，是管道符”|”之前的数据。</b></p><h2 id="5-侦听器"><a href="#5-侦听器" class="headerlink" title="5. 侦听器"></a>5. 侦听器</h2><p>允许开发者监视数据的变化，从而<strong>针对数据的变化做特定的操作</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;admin&quot;</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">watch</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">username</span>(<span class="hljs-params">newVal, oldVal</span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-comment">//要监听谁，就把谁的名字作为方法名，新值在前，旧值在后</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(newVal, oldVal);</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-1-immediate-选项"><a href="#5-1-immediate-选项" class="headerlink" title="5.1 immediate 选项"></a>5.1 immediate 选项</h3><p><strong>默认情况下，组件在初次加载完时，不会调用 watch 侦听器</strong>。想要 watch 侦听器<strong>立即被调用</strong>，需要把<strong>immediate</strong>选项变为 true(默认值为 false)，<b style="color: red">这个时候的侦听器应该是对象形式的。</b></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;admin&quot;</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">watch</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">username</span>: &#123;</span><br><span class="javascript">        <span class="hljs-comment">//对象形式</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newVal, oldVal</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(newVal, oldVal);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//实现初次加载完成时也会调用监听器</span></span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-deep-选项"><a href="#5-2-deep-选项" class="headerlink" title="5.2 deep 选项"></a>5.2 deep 选项</h3><p>如果 watch 监听的是一个对象，如果对象中的属性值发生了变化，则无法被监听到。（就像是监视一个人，只能看到他干了什么，没法看到他里面的消化系统在干什么），这个时候需要把<strong>deep 选项</strong>变为 true</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.username&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">info</span>: &#123;</span><br><span class="javascript">        <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;admin&quot;</span>,</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">watch</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">info</span>: &#123;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newVal</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(newVal.username);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">        <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子，如果<strong>只是想监听单个属性的变化</strong>，可以不变化 deep 选项，按以下方式即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.username&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">info</span>: &#123;</span><br><span class="javascript">        <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;admin&quot;</span>,</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">watch</span>: &#123;</span><br><span class="javascript">      <span class="hljs-string">&quot;info.username&quot;</span>: &#123;</span><br><span class="javascript">        <span class="hljs-comment">//监听单个属性需要用字符串形式</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newVal</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">//这个时候的新值newVal，就是属性变化后的值</span></span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(newVal);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6-计算属性"><a href="#6-计算属性" class="headerlink" title="6. 计算属性"></a>6. 计算属性</h2><p>计算属性是指通过一系列计算之后，最终得到一个<strong>属性值</strong>，这个<strong>动态计算出来的属性值</strong>可以被模板结构或 methods 方法使用。</p><p><strong>特点</strong>：</p><ol><li>计算属性声明的时候被定义为方法，但是计算属性的<strong>本质是一个属性</strong></li><li>只要<strong>计算属性依赖的数据源变化</strong>了，那么计算属性就会<strong>自动重新求值</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Myself<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>R: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;r&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>G: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;g&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>B: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;b&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;backgroundColor: rgb&#125;&quot;</span>&gt;</span><br>        &#123;&#123; rgb &#125;&#125;<br>        <span class="hljs-comment">&lt;!-- 使用时，就和普通属性一样用法 --&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showColor&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">          <span class="hljs-attr">g</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">          <span class="hljs-attr">b</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-title">showColor</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.rgb);</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">computed</span>: &#123;</span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-title">rgb</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-comment">//计算属性，声明时是函数形式</span></span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-string">`rgb(<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.r&#125;</span>, <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.g&#125;</span>, <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.b&#125;</span>)`</span>;</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(vm);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/614c3c872ab3f51d912f40cc.jpg"></p><h2 id="7-axios"><a href="#7-axios" class="headerlink" title="7. axios"></a>7. axios</h2><p>axios 是一个专注于数据请求的库。</p><p><strong>基本使用</strong>：</p><p>安装命令</p><p><code> npm install axios -S</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">//axios()方法返回一个promise对象</span></span><br><span class="javascript">  axios(&#123;</span><br><span class="javascript">    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-comment">//请求方式</span></span><br><span class="javascript">    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://www.liulongbin.top:3006/api/getbooks&quot;</span>, <span class="hljs-comment">//请求路径</span></span><br><span class="javascript">  &#125;).then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">//这里得到的result不是得到的数据，result.data才是，result是数据被axios包装后得到的</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(result.data);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><p>发起 get 请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">//axios()方法返回一个promise对象</span></span><br><span class="javascript">  axios(&#123;</span><br><span class="javascript">    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-comment">//请求方式</span></span><br><span class="javascript">    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://www.liulongbin.top:3006/api/getbooks&quot;</span>, <span class="hljs-comment">//请求路径</span></span><br><span class="javascript">    <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">//查询参数，即请求方式为get时的参数</span></span><br><span class="javascript">      <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-comment">// data: &#123;</span></span><br><span class="javascript">    <span class="hljs-comment">//     //请求体参数：post时的参数，和params二选一</span></span><br><span class="javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="javascript">  &#125;).then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(result.data);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>发起 post 请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发起POST请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;button&quot;</span>).addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="javascript">    <span class="hljs-comment">// //axios()方法返回一个promise对象</span></span><br><span class="javascript">    <span class="hljs-comment">// axios(&#123;</span></span><br><span class="javascript">    <span class="hljs-comment">//     method: &#x27;post&#x27;, //请求方式</span></span><br><span class="javascript">    <span class="hljs-comment">//     url: &#x27;http://www.liulongbin.top:3006/api/post&#x27;, //请求路径</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">//     data: &#123;</span></span><br><span class="javascript">    <span class="hljs-comment">//         name: &#x27;张三&#x27;,</span></span><br><span class="javascript">    <span class="hljs-comment">//         age: 11</span></span><br><span class="javascript">    <span class="hljs-comment">//     &#125;</span></span><br><span class="javascript">    <span class="hljs-comment">// &#125;).then((result) =&gt; &#123;</span></span><br><span class="javascript">    <span class="hljs-comment">//     console.log(result.data);</span></span><br><span class="javascript">    <span class="hljs-comment">// &#125;)</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">//不用then，简化版本</span></span><br><span class="javascript">    <span class="hljs-comment">//如果调用某个方法的返回值时Promise实例，则前面可以加await</span></span><br><span class="javascript">    <span class="hljs-comment">//await只能在被async修饰的方法中</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: result &#125; = <span class="hljs-keyword">await</span> axios(&#123;</span><br><span class="javascript">      <span class="hljs-comment">//使用解构赋值,把data属性结构出来,并重命名为result</span></span><br><span class="javascript">      <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://www.liulongbin.top:3006/api/post&quot;</span>,</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">11</span>,</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="7-1-axios-get"><a href="#7-1-axios-get" class="headerlink" title="7.1 axios.get()"></a>7.1 axios.get()</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.get(<span class="hljs-string">&quot;url地址&quot;</span>, &#123;<br>  <span class="hljs-attr">params</span>: &#123;<br>    get参数,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span>get<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.get&quot;</span>).addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: result &#125; = <span class="hljs-keyword">await</span> axios.get(</span><br><span class="javascript">      <span class="hljs-string">&quot;http://www.liulongbin.top:3006/api/getbooks&quot;</span>,</span><br><span class="javascript">      &#123;</span><br><span class="javascript">        <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    );</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(result.data);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-2-axios-post"><a href="#7-2-axios-post" class="headerlink" title="7.2 axios.post()"></a>7.2 axios.post()</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.post(<span class="hljs-string">&quot;url&quot;</span>, &#123;<br>  请求体参数, <span class="hljs-comment">//注意，这里不需要写在data里面</span><br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>post<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.post&quot;</span>).addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: result &#125; = <span class="hljs-keyword">await</span> axios.post(</span><br><span class="javascript">      <span class="hljs-string">&quot;http://www.liulongbin.top:3006/api/post&quot;</span>,</span><br><span class="javascript">      &#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    );</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>学习链接：</p><p><a href="https://www.bilibili.com/video/BV1zq4y1p7ga">黑马程序员 Vue 全套视频教程</a></p><p><a href="https://vuejs.org/">Vue.js (vuejs.org)</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python(一)</title>
      <link href="/2021/09/25/python-1/"/>
      <url>/2021/09/25/python-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-一"><a href="#Python-一" class="headerlink" title="Python(一)"></a>Python(一)</h1><p>本系列是个人学习 Python 的学习笔记。董付国编著的 Python 程序设计（第三版）</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><ul><li>Python 是一门<b style="color: red">跨平台、开源、免费的解释型高级动态编程语言</b>b&gt;，支持伪编译将 Python 源程序转换为字节码来优化程序和提高运行速度，支持使用 py2exe、<strong>pyinstaller</strong>或 cx_Freeze 工具将 Python 程序转换为二进制可执行程序。</li><li>Python 支持<b style="color: red">命令式编程、函数式编程</b>，完全支持面向对象程序设计，拥有大量成熟<b style="color: red">扩展库</b>。</li></ul><h2 id="2-对象模型"><a href="#2-对象模型" class="headerlink" title="2. 对象模型"></a>2. 对象模型</h2><p>对象是 python 中最基本的概念，在 python 中处理的一切都是对象。</p><p><img src="https://pic.imgdb.cn/item/61401ef344eaada739a0a693.jpg"></p><p><img src="https://pic.imgdb.cn/item/61401f0c44eaada739a0cf04.jpg"></p><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h2><ul><li><p>不需要事先声明变量名及其类型，直接赋值即可创建各种类型的对象变量。</p></li><li><p>Python 属于<b style="color: red">强类型编程语言</b>，Python 解释器会根据赋值或运算来自动推断变量类型。</p></li><li><p>Python 还是一种<b style="color: red">动态类型语言</b>，变量的类型可以随时变化。</p></li><li><p><strong>字符串和元组属于不可变序列</strong>，不能通过下标的方式来修改其中的元素值。</p></li><li><p>Python 允许多个变量指向同一个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(x))<br><br>y = x<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(y))<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://s2.loli.net/2022/01/11/ysDYe9Cfp5VBgZU.png" alt="image-20210914130135133"></p><p>​ 其中的一个变量修改值之后，对应的内存地址会发生变化，但是不会影响另一个变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(x))<br><br>y = x<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(y))<br><br>x += <span class="hljs-number">6</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(x))<br><br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(y))<br><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/11/CNzZvMPSsVLEIGd.png" alt="image-20210914130401482"></p><p>上面两个例子原因：Python 采用<b style="color: red">基于值的内存管理方式</b>,如果为不同变量复制为相同值，这个值在内存中只保存一份，多个变量指向同一个值的内存空间首地址，这样可以减少内存空间的占用，提高内存利用率。</p><p>Python 启动时，会对[-5, 256]区间的整数进行缓存，即多个变量的值相等，为整数，且介于[-5, 256]区间内，这些变量公用同一个值的内存空间。</p><p>在区间[-5, 256]区间之外的整数以及剩下的实数，会分为同一个程序和交互模式的区分。交互模式不常用，暂不考虑。同一个程序的同值不同变量会共用同一个内存空间</p><ul><li>赋值语句的执行过程：首先把等号右侧表达式的值计算出来，然后在内存中寻找一个位置把值放进去，最后创建变量并指向这个内存地址。<b style="color: red">Python 中的变量并不是直接存储值，而是存储值的内存地址或者引用</b>，这也是变量类型可以随时改变的原因。</li><li>Python 具有<strong>自动管理内存</strong>的功能，会跟踪所有的值，并自动删除不再使用或引用次数为 0 的值。</li></ul><h2 id="4-数字"><a href="#4-数字" class="headerlink" title="4. 数字"></a>4. 数字</h2><ul><li><p>可以表示任意大小的值</p></li><li><p>整数类型可以分为：</p><pre><code>1. 十进制整数： 如0， -1232. 十六进制整数：必须用0x开头，如0xabcdf93. 八进制整数：必须以0o开头，如0o354. 二进制整数：必须以0b开头，如0b101</code></pre></li><li><p>浮点数，如 15.0、1.2e2、1.2e-2</p></li><li><p>Python 支持复数类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">3</span> + <span class="hljs-number">4j</span><br>b = <span class="hljs-number">5</span> + <span class="hljs-number">6j</span><br>c = a + b<br><br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-built_in">print</span>(c.real)      <span class="hljs-comment">#查看复数实部</span><br><span class="hljs-built_in">print</span>(c.imag)      <span class="hljs-comment">#查看复数虚部</span><br><br><span class="hljs-built_in">print</span>(c.conjugate())      <span class="hljs-comment">#返回共轭复数</span><br><br><span class="hljs-built_in">print</span>(a * b)    <span class="hljs-comment"># 复数乘法</span><br></code></pre></td></tr></table></figure></li><li><p>Python 3.6.x 开始支持在数字中间位置使用单个下划线作为分隔来提高数字的可读性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">1_000_000</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1_2_3_3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1_2</span> + <span class="hljs-number">3_4j</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1_2.3_45_678</span>)<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-字符串"><a href="#5-字符串" class="headerlink" title="5. 字符串"></a>5. 字符串</h2><p>字符串前面加字母 r 或 R 表示原始字符串，其中的特殊字符不进行转义，但字符串的最后一个字符不能是\。</p><p><img src="https://pic.imgdb.cn/item/6141966a2ab3f51d91c404f8.jpg"></p><h2 id="6-运算符和表达式"><a href="#6-运算符和表达式" class="headerlink" title="6. 运算符和表达式"></a>6. 运算符和表达式</h2><ul><li>+运算符除了用于算数加法外，还可以用于列表、元组、字符串的连接，但<b style="color: red">不支持不同类型的对象之间相加或连接</b>，部分语言字符串和数字相加时，会把数字转成字符串后连接。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>b = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-built_in">print</span>(a + b)<br><br>a = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>b = (<span class="hljs-number">4</span>,)  <span class="hljs-comment"># 元组只有一个元素时，后面应该带一个&quot;,&quot;</span><br><span class="hljs-built_in">print</span>(a + b)<br><br>a = <span class="hljs-string">&quot;Hello&quot;</span><br>b = <span class="hljs-string">&quot; World!&quot;</span><br><span class="hljs-built_in">print</span>(a + b)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-literal">True</span> + <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-literal">False</span> + <span class="hljs-number">4</span>)   <span class="hljs-comment"># python会把True当成1，把False当成0处理</span><br></code></pre></td></tr></table></figure><ul><li>*运算符除了用于算数乘法外，还可以用于列表、字符串、元组等类型，对内容进行重复，并返回重复后的新对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] * <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>((<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>) * <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><ul><li><p>python 中的除法有两种，”/“表示除法运算(真正数学意义上的除法)，”//“表示整除运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> / <span class="hljs-number">5</span>)         <span class="hljs-comment"># 0.6</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> // <span class="hljs-number">5</span>)        <span class="hljs-comment"># 0</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3.0</span> / <span class="hljs-number">5</span>)       <span class="hljs-comment"># 0.6</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3.0</span> // <span class="hljs-number">5</span>)      <span class="hljs-comment"># 0.0</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">13</span> // <span class="hljs-number">10</span>)      <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(-<span class="hljs-number">13</span> // <span class="hljs-number">10</span>)     <span class="hljs-comment"># -2, -13 = -2 * 10 + 7</span><br></code></pre></td></tr></table></figure></li><li><p>关系运算符可以进行连用，一般用于<b style="color: red">同类型对象之间</b>的大小比较，或者测试集合之间的包含关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span> &lt; <span class="hljs-number">3</span> &lt; <span class="hljs-number">5</span>)    <span class="hljs-comment"># 等价 1 &lt; 3 and 3 &lt; 5</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello&quot;</span> &gt; <span class="hljs-string">&quot;world&quot;</span>)    <span class="hljs-comment"># 比较字符串大小</span><br><br><span class="hljs-built_in">print</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] &lt; [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>])   <span class="hljs-comment"># 比较列表大小</span><br><br><span class="hljs-built_in">print</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125; &lt; &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;)      <span class="hljs-comment"># 测试是否是子集</span><br></code></pre></td></tr></table></figure></li><li><p>成员测试运算符 in 用于成员测试，即测试一个对象是否是另一个对象的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">4</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])  <span class="hljs-comment"># 测试4是否存在于列表[1, 2, 3]中</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">5</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>))   <span class="hljs-comment"># 测试5是否在[1, 10)中</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;abc&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;abcdef&quot;</span>)     <span class="hljs-comment"># 子字符串测试</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>):<br>    <span class="hljs-built_in">print</span>(i, end = <span class="hljs-string">&#x27; &#x27;</span>)  <span class="hljs-comment"># 循环，成员遍历， end = &#x27; &#x27;,可以更换print()的默认模式，print()默认会换行，这里改成空格</span><br></code></pre></td></tr></table></figure></li><li><p>同一性测试运算符 is 用来测试两个对象是否是同一个，如果是，返回 True，否则返回 False。<b style="color: red">如果两个对象是同一个，二者具有相同的内存地址</b>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">300.0</span><br>b = <span class="hljs-number">300.0</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><br>x = [<span class="hljs-number">300</span>, <span class="hljs-number">300</span>, <span class="hljs-number">300</span>]<br><span class="hljs-built_in">print</span>(x[<span class="hljs-number">0</span>] <span class="hljs-keyword">is</span> x[<span class="hljs-number">1</span>])   <span class="hljs-comment"># 基于值的内存管理，同一个值在内存中只有一份</span><br><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>b = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br></code></pre></td></tr></table></figure></li><li><p><strong>位运算符只能用于整数</strong>，内部执行过程：先将整数转换为二进制数，然后右对齐，必要的时候左侧补 0，按位进行运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> &lt;&lt; <span class="hljs-number">2</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">左移一位相当于乘以2，移两位相当于乘以4</span><br><span class="hljs-string">0011</span><br><span class="hljs-string">1100</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> &amp; <span class="hljs-number">7</span>)  <span class="hljs-comment"># 位与运算</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0011 &amp; 0111 = 0011</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> | <span class="hljs-number">8</span>)  <span class="hljs-comment"># 位或运算</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> ^ <span class="hljs-number">5</span>)  <span class="hljs-comment"># 位异或运算</span><br></code></pre></td></tr></table></figure></li><li><p>集合的交集、并集、对称差集等运算借助位运算符来实现，而差集利用减号运算符实现（<b style="color: red">并集运算符不是用加号</b>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125; | &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;)       <span class="hljs-comment"># 并集，自动去除重复元素</span><br><br><span class="hljs-built_in">print</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125; &amp; &#123;<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>&#125;)         <span class="hljs-comment"># 交集</span><br><br><span class="hljs-built_in">print</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125; ^ &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;)      <span class="hljs-comment"># 对称差集</span><br><br><span class="hljs-built_in">print</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125; - &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;)        <span class="hljs-comment"># 差集</span><br></code></pre></td></tr></table></figure></li><li><p>and 和 or 对应于 c 语言的&amp;&amp;和||，具有惰性求值的特点，只计算必须计算的表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> &gt; <span class="hljs-number">5</span> <span class="hljs-keyword">and</span> a &gt; <span class="hljs-number">3</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">PyCharm会显示错误，不过运行不会出现错误</span><br><span class="hljs-string">因为 3 &gt; 5 的值为False,由于and运算符的惰性求值，不会计算之后的表达式</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> &lt; <span class="hljs-number">5</span> <span class="hljs-keyword">or</span> a &gt; <span class="hljs-number">3</span>)   <span class="hljs-comment"># 同理</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">print(3 &gt; 5 or a &gt; 3)</span><br><span class="hljs-string">这个输出会报错，因为3&gt;5的值为False，所以or被迫要去计算之后的表达式</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">5</span> <span class="hljs-keyword">and</span> <span class="hljs-number">3</span>)  <span class="hljs-comment"># 最后一个计算表达式的值作为整个表达式的值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-number">5</span> &lt; <span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) <span class="hljs-comment"># 逻辑非运算符not，对应于c语言的!</span><br></code></pre></td></tr></table></figure></li><li><p>逗号不是运算符，只是普通分隔符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>))<br><br>x = <span class="hljs-number">3</span>,     <span class="hljs-comment"># 赋值时使用逗号，变量会变为元组</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))<br><br>x = <span class="hljs-number">3</span> + <span class="hljs-number">5</span>, <span class="hljs-number">7</span><br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure></li><li><p><b style="color: red">Python 不支持++和–运算符</b></p></li></ul><h2 id="7-常用内置函数"><a href="#7-常用内置函数" class="headerlink" title="7. 常用内置函数"></a>7. 常用内置函数</h2><p>int()：把实数转换为整数，或者把数字字符串按指定进制转换为十进制数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-number">3.5</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(-<span class="hljs-number">3.5</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot; \t  8 \n &quot;</span>))  <span class="hljs-comment"># 自动忽略数字两侧的空格</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;101&#x27;</span>, <span class="hljs-number">2</span>))    <span class="hljs-comment"># 转换为二进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;101&#x27;</span>, <span class="hljs-number">16</span>))   <span class="hljs-comment"># 转换为十六进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;x2&#x27;</span>, <span class="hljs-number">36</span>))    <span class="hljs-comment"># 转换为三十六进制</span><br></code></pre></td></tr></table></figure><ul><li><p>ord()和 chr()是一对功能相反的函数。ord()返回单个字符对应的 ASCII 数值，或者 Unicode 数值。chr()返回传入的整数对应的字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">65</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>) + <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure></li><li><p>str()：将任意类型参数转换成字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(<span class="hljs-number">7777</span>))<br><span class="hljs-built_in">print</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(<span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure></li><li><p>max()和 min()的 key 参数可以指定比较规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">arr = [<span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">67</span>, <span class="hljs-number">99</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(arr))<br><br>arr = [<span class="hljs-string">&quot;0123&quot;</span>, <span class="hljs-string">&quot;456&quot;</span>, <span class="hljs-string">&quot;88&quot;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(arr))   <span class="hljs-comment"># 正常比，比较每个字符的ASCII值，直到找到最大值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(arr, key=<span class="hljs-built_in">len</span>))    <span class="hljs-comment"># 比较字符串长度最大值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(arr, key=<span class="hljs-built_in">int</span>))    <span class="hljs-comment"># 字符串转为整型后比较最大值</span><br></code></pre></td></tr></table></figure></li><li><p>sum()可以实现<strong>非数值型列表元素</strong>的求和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>( <span class="hljs-built_in">sum</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]) )<br></code></pre></td></tr></table></figure></li><li><p>type()和 isinstance()可以判断数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>([<span class="hljs-number">3</span>]))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>((<span class="hljs-number">3</span>, )))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(&#123;<span class="hljs-number">3</span>&#125;) <span class="hljs-keyword">in</span> (<span class="hljs-built_in">list</span>, <span class="hljs-built_in">tuple</span>, <span class="hljs-built_in">dict</span>))     <span class="hljs-comment"># 判断&#123;3&#125;是否是list、tuple或dict的类型</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>))       <span class="hljs-comment"># 判断3是否是int类型的实例</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(<span class="hljs-number">3j</span>, (<span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>, <span class="hljs-built_in">complex</span>)))    <span class="hljs-comment"># 判断3j是否为int,float或complex的类型</span><br></code></pre></td></tr></table></figure></li><li><p>sorted()对列表、元组、字典、集合或其他可迭代对象进行排序并返回新列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = (<span class="hljs-number">2</span>, <span class="hljs-number">77</span>, <span class="hljs-number">33</span>, <span class="hljs-number">33</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">99</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(a))<br></code></pre></td></tr></table></figure></li><li><p>reversed()对可迭代对象（生成器对象和具有惰性求值特性的 zip、map、filter、enumeate 等类似对象除外）进行翻转，并返回可迭代的 reversed 对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = (<span class="hljs-number">2</span>, <span class="hljs-number">77</span>, <span class="hljs-number">33</span>, <span class="hljs-number">33</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">99</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">reversed</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">reversed</span>(a)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">reversed</span>(a)))   <span class="hljs-comment"># 列表 list() 方法用于将可迭代对象（字符串、列表、元祖、字典）转换为列表。</span><br></code></pre></td></tr></table></figure></li><li><p>range([start, ] end [,step]), 返回具有懒惰求值特点的 range 对象，其中范围是[start, end)内以 step 为步长的整数。start 默认为 0，step 默认为 1.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))         <span class="hljs-comment"># start默认为0，step默认为1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>)))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">3</span>)))  <span class="hljs-comment"># 步长为负数时，如果start比end小，得到的range对象不含有任何整数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">3</span>)))<br></code></pre></td></tr></table></figure></li><li><p>enumerate()：用来枚举可迭代对象中的元素，返回可迭代的 enumerate 对象，其中每个元素都是包含索引和值和元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">enumerate</span>(<span class="hljs-string">&quot;abcd&quot;</span>)))          <span class="hljs-comment"># 枚举字符串的元素</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">enumerate</span>([<span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-string">&quot;World&quot;</span>])))   <span class="hljs-comment"># 枚举列表的元素</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">enumerate</span>(&#123;      <span class="hljs-comment"># 枚举字典的元素</span><br>    <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">97</span>,<br>    <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">98</span>,<br>    <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">99</span><br>&#125;.items())))    <span class="hljs-comment"># items() 函数以列表返回可遍历的(键, 值) 元组数组。</span><br></code></pre></td></tr></table></figure></li><li><p>map()：把一个函数 func 依次映射到序列或迭代器对象的每个元素上，并返回一个可迭代 map 对象作为结果，map 对象中的每个元素是原序列中元素经过函数 func 处理后的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)))   <span class="hljs-comment"># 把列表中的元素转换为字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)))   <span class="hljs-comment"># 没有用map方法的</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add5</span>(<span class="hljs-params">a</span>):</span><br>    <span class="hljs-keyword">return</span> a + <span class="hljs-number">5</span><br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(add5, <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))))   <span class="hljs-comment"># 相当于把range()中的所有整数都会去调用add5</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>):</span><br>    <span class="hljs-keyword">return</span> x + y<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(add, <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>), <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>, <span class="hljs-number">12</span>))))<span class="hljs-comment"># 两个参数版本的</span><br></code></pre></td></tr></table></figure></li><li><p>filter()：通过参数中的函数来筛选参数中的序列中符合条件的元素组成的 filter 对象，如果指定函数为 None，则返回序列中等价于 True 的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">arr = [<span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;45?&#x27;</span>, <span class="hljs-string">&#x27;***&#x27;</span>]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> x.isalnum()  <span class="hljs-comment"># 测试是否是字母或数字</span><br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">filter</span>(func, arr))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(func, arr)))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">str</span>.isalnum, arr)))    <span class="hljs-comment"># 等价用法</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>))<br><br>filterObject = <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>, data)   <span class="hljs-comment"># 过滤，只留下所有奇数</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> <span class="hljs-keyword">in</span> filterObject)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(filterObject))       <span class="hljs-comment"># filter只会访问一次元素，所以，3和3之前的元素不会输出</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(filterObject))       <span class="hljs-comment"># 上面的语句访问了所有的元素</span><br></code></pre></td></tr></table></figure></li><li><p>zip()：把多个可迭代对象中的元素压缩在一起，返回一个可迭代的 zip 对象，其中每个元素都是包含原来的多个可迭代对象对应位置上元素的元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(<span class="hljs-string">&#x27;abcd&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])))     <span class="hljs-comment"># 压缩字符串和列表</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(<span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;,?!&#x27;</span>)))       <span class="hljs-comment"># 压缩3个序列</span><br></code></pre></td></tr></table></figure></li><li><p>map、filter、enumeraye、zip 等对象具有惰性求值的特点，<b style="color: red">访问过的元素不可以再次访问</b>。</p><p>例子见 filter()的第二个例子</p></li></ul><h2 id="8-基本输入输出"><a href="#8-基本输入输出" class="headerlink" title="8. 基本输入输出"></a>8. 基本输入输出</h2><h3 id="8-1-input-：返回输入的对象。"><a href="#8-1-input-：返回输入的对象。" class="headerlink" title="8.1 input()：返回输入的对象。"></a>8.1 input()：返回输入的对象。</h3><p><b style="color: red">input()函数的返回结果都是字符串</b></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入第一个数:&quot;</span>)<br>b = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入第二个数:&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;加法运算结果是:&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(a) + <span class="hljs-built_in">int</span>(b)))<span class="hljs-comment"># a, b都是字符串，转换为int类型后进行加法运算，之后再转换成字符串和前面的字符串进行拼接操作</span><br></code></pre></td></tr></table></figure><h3 id="8-2-print-：进行输出"><a href="#8-2-print-：进行输出" class="headerlink" title="8.2 print()：进行输出"></a>8.2 print()：进行输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, sep=<span class="hljs-string">&#x27;:: &#x27;</span>)     <span class="hljs-comment"># 指定分隔符</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>):<br>    <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27;!! &#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">循环，成员遍历， end = &#x27; &#x27;,可以更换print()的默认模式</span><br><span class="hljs-string">print()默认会换行，这里改成空格</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="9-模块的导入"><a href="#9-模块的导入" class="headerlink" title="9. 模块的导入"></a>9. 模块的导入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-built_in">print</span>(random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>))    <span class="hljs-comment"># 获得[1, 100]上的整数</span><br></code></pre></td></tr></table></figure><ul><li><p><code> from 模块名 import 对象名[ as 别名]</code> 可以减少查询次数，提高执行速度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sin <span class="hljs-keyword">as</span> f<br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">1.57</span>))<br></code></pre></td></tr></table></figure></li><li><p>如果需要导入多个模块，一般建议以下顺序进行导入</p><ol><li>标准库</li><li>成熟的第三方扩展库</li><li>自己开发的库</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机与网络(一)</title>
      <link href="/2021/09/25/computer-network-1/"/>
      <url>/2021/09/25/computer-network-1/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机与网络-一"><a href="#计算机与网络-一" class="headerlink" title="计算机与网络(一)"></a>计算机与网络(一)</h1><p>写了几个月的学习笔记（虽然是每周一篇），发现了新世界，以前只觉得花时间写学习笔记效率不是很高，一直没有写过学习笔记之类的，但是实际上，写学习笔记的过程实际上又是重新复习了一下。</p><p style="color:red">学习计算机网络的笔记系列，参考谢希仁编著的计算机网络（第七版），用自己的话尽量复述一边，无法复述，就自己手敲一次，加深印象。</p><h2 id="1-引子"><a href="#1-引子" class="headerlink" title="1. 引子"></a>1. 引子</h2><p><b>计算机和网络已经成为当今信息时代的核心，已经成为信息社会的命脉和发展知识经济的重要基础。</b></p><p>网络：泛指把人或物互连在一起而形成的系统。</p><p>大众熟悉的三大网络：</p><ol><li>电信网络：提供电话、电报及传真等服务</li><li>有线电视网络：向用户传送各种电视节目</li><li>计算机网络：使用户能在计算机之间传送数据文件。</li></ol><p>其中，发展最快并起到核心作用的是计算机网络。</p><h2 id="2-计算机网络的定义及其特点"><a href="#2-计算机网络的定义及其特点" class="headerlink" title="2. 计算机网络的定义及其特点"></a>2. 计算机网络的定义及其特点</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p>首先，计算机网络的精确定义现在还没有统一。</p><p>较好的定义：<br>计算机网络主要由一些通用的、可编程的硬件互连而成的，而这些硬件并非用来实现某一特定目的（如传送数据或视频信号）。这些可编程硬件能够用来传送多种不同的数据，并能支持广泛的和日益增长的应用。</p><p>定义中重要的两点：</p><ol><li>多种硬件:包括计算机、智能手机、智能传感器等</li><li>多种应用：包括数据、语音、视频，以及未来可能出现的应用</li></ol><h3 id="2-2-计算机网络的特点"><a href="#2-2-计算机网络的特点" class="headerlink" title="2.2 计算机网络的特点"></a>2.2 计算机网络的特点</h3><p><b style="color:red">连通性</b>：</p><ol><li>使上网用户之间都可以交换信息。</li><li>互联网具有虚拟的特点，无法准确知道对方身份和位置等。</li></ol><p><b style="color:red">共享</b>：</p><ol><li>指资源共享</li><li>多方面，如信息共享、软件共享和硬件共享等。</li><li>由于网络的存在，这些资源就像在用户身边一样，非常方便。</li></ol><h4 id="网络的表示"><a href="#网络的表示" class="headerlink" title="网络的表示"></a>网络的表示</h4><ol><li>用图表示网络</li></ol><p><img src="https://pic.imgdb.cn/item/613a21b244eaada7399270df.jpg"></p><ol start="2"><li>用云表示网络（主机在云里）</li></ol><p><img src="https://pic.imgdb.cn/item/613a21e444eaada73992e3ca.jpg"></p><ol start="3"><li>用云表示网络（主机在云外）</li></ol><p><img src="https://pic.imgdb.cn/item/613a220b44eaada739933a69.jpg"></p><h2 id="3-互联网概述"><a href="#3-互联网概述" class="headerlink" title="3. 互联网概述"></a>3. 互联网概述</h2><h3 id="3-1-互联网概念"><a href="#3-1-互联网概念" class="headerlink" title="3.1 互联网概念"></a>3.1 互联网概念</h3><p>互联网是目前技术最为成功、应用最为广泛的计算机网络。</p><h4 id="3-1-1-互联网定义"><a href="#3-1-1-互联网定义" class="headerlink" title="3.1.1 互联网定义"></a>3.1.1 互联网定义</h4><p>互联网，特指 Internet，起源于美国，是由数量极大的各种计算机网络互连起来而形成的一个互连网络。它采用 TCP/IP 协议族作为通信规则，是一个覆盖全球的、实现全球范围内连通性和资源共享的计算机网络。（定义超长）</p><p><b style="color:red">TCP/IP、覆盖全球、实现连通性和资源共享、计算机网络</b></p><h4 id="3-1-2-internet-和-Internet-的区别"><a href="#3-1-2-internet-和-Internet-的区别" class="headerlink" title="3.1.2 internet 和 Internet 的区别"></a>3.1.2 internet 和 Internet 的区别</h4><p>对大小写敏感？？？</p><ol><li>小写字母”i”开始： internet(互连网，没有写错)，是通用名词。泛指由多个计算机网络互连而成的网络。</li><li>大写字母”I”开始：Internet（互联网或因特网）是专有名词。指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用 TCP/IP 协议族作为通信规则，其前身是美国的 ARPANET。（1990 年正式宣布关闭)。</li></ol><p>相似之处：网络的网络</p><p>不同之处：</p><table><thead><tr><th>互联网(Internet)</th><th align="center">互连网(internet)</th></tr></thead><tbody><tr><td>特指采用 TCP/IP 标准、利用路由器将各种计算机网络互连起来而形成的、一个覆盖全球的、特定的互连网</td><td align="center">泛指由多个不同类型的计算机网络互连而成的网络</td></tr><tr><td>使用 TCP/IP</td><td align="center">除 TCP/IP 外，可使用其他协议</td></tr><tr><td>专有名词</td><td align="center">通用名词</td></tr></tbody></table><h3 id="3-2-互联网基础结构发展的三个阶段"><a href="#3-2-互联网基础结构发展的三个阶段" class="headerlink" title="3.2 互联网基础结构发展的三个阶段"></a>3.2 互联网基础结构发展的三个阶段</h3><h4 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h4><p><b style="color:red">从单个网络 ARPANET 向互联网发展的过程。</b></p><ol><li>1983 年，TCP/IP 协议成为 ARPANET 上的标准协议，使得所有 TCP、IP 协议的计算机都能利用互连网相互通信。</li><li>人们把 1983 年作为互联网的诞生时间。</li><li>1990 年，ARPANET 正式宣布关闭。</li></ol><h4 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h4><p>建立了三级结构的互联网</p><p>如图所示</p><p><img src="https://pic.imgdb.cn/item/613b70be44eaada739664181.jpg"></p><p>上图是一个三级计算机网络，分为主干网、地区网和校园网。</p><h4 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h4><p>逐渐形成了多层次 ISP 结构的互联网</p><ol><li>出现了互联网服务提供商 ISP（Internet Service Provider）</li><li>任何机构和个人只要向 ISP 交纳规定费用，就可以从该 ISP 获取所需 IP 地址的使用权，并能够通过该 ISP 接入到互联网</li><li>根据提供服务的覆盖面积和所拥有的 IP 地址数目的不同，ISP 可以分成不同层次的 ISP:主干 ISP、地区 ISP 和本地 ISP</li></ol><p>示意图：</p><p><img src="https://pic.imgdb.cn/item/613b724544eaada739699b58.jpg"></p><p>IXP:互联网交换点。作用是允许两个网络直接相连并交换分组，而不用通过它们的上层 ISP 来转发分组。（可以少给上一层交钱）</p><h3 id="3-3-互联网的标准化工作"><a href="#3-3-互联网的标准化工作" class="headerlink" title="3.3 互联网的标准化工作"></a>3.3 互联网的标准化工作</h3><p>互联网的标准化工作对互联网的发展起到了非常重要的作用</p><p>所有的互联网标准都以 RFC 的形式在互联网上发表。</p><p>之前要经过三个阶段：</p><ol><li>互联网草案：有效期只有六个月。还不是 RFC 文档</li><li>建议标准：开始成为 RFC 文档</li><li>互联网标准：达到正式标准后，每个标准分配一个编号 STD xxxx。一个标准可以和多个 RFC 文档关联。</li></ol><p>现在没有互联网草案阶段，只需要建议标准、互联网标准两个阶段即可。</p><h2 id="4-互联网的组成"><a href="#4-互联网的组成" class="headerlink" title="4. 互联网的组成"></a>4. 互联网的组成</h2><p>可以划分为两大块（按互联网的工作方式来分）：</p><ul><li><strong>边缘部分</strong>：由所有连接在互联网上的主机组成，这部分是用户直接使用的。</li><li><strong>核心部分</strong>：由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供连通性和交换等服务的。</li></ul><h3 id="4-1-互联网的边缘部分"><a href="#4-1-互联网的边缘部分" class="headerlink" title="4.1 互联网的边缘部分"></a>4.1 互联网的边缘部分</h3><p>处在互联网边缘的部分是连接在互联网上的所有主机（不只是电脑，可以是智能手机、网络摄像头等）。这些主机也被称为<strong>端系统</strong>。</p><p><strong>端系统之间的通信</strong>：运行在主机 A 上的某个程序和运行在主机 B 上的某个程序进行通信。</p><p>端系统之间的通信方式可划分为两类：</p><h4 id="客户-服务器方式（C-S-方式）"><a href="#客户-服务器方式（C-S-方式）" class="headerlink" title="客户-服务器方式（C/S 方式）"></a>客户-服务器方式（C/S 方式）</h4><p>即 Client/Server 方式。</p><ul><li><strong>客户</strong>和<strong>服务器</strong>都是指通信中的两个应用进程。</li><li>客户-服务器方式描述的是进程之间服务和被服务的关系</li><li>客户是<strong>服务的请求方</strong>，服务器是<strong>服务的提供方</strong>。</li></ul><p><b style="color: red">服务请求方和服务提供方都需要使用网络核心部分所提供的服务</b>。</p><p><img src="https://pic.imgdb.cn/item/6146e7b32ab3f51d919ec153.jpg"></p><p><strong>客户软件的特点</strong>：</p><ul><li><p>被用户调用后运行，通信前主动向服务器发起通信（请求服务）。所以，<b style="color: red">客户程序需要知道服务器的地址</b></p></li><li><p>不需要很复杂的操作系统，也不需要特别强大的硬件</p></li></ul><p><strong>服务器软件的特点</strong>：</p><ul><li>一种专门用来提供服务的程序，可同时处理多个请求</li><li>系统启动后会一直持续运行，等待并接受客户的通信请求。<b style="color: red">服务器程序不需要知道客户程序的地址</b></li><li>需要高级的操作系统和强大的硬件支持</li></ul><p><b style="color: red">客户和服务器的通信关系建立后，客户和服务器都可以发送和接收数据</b></p><h4 id="对等方式（P2P-方式）"><a href="#对等方式（P2P-方式）" class="headerlink" title="对等方式（P2P 方式）"></a>对等方式（P2P 方式）</h4><p>即 Peer-to-Peer 方式。</p><ul><li><p><strong>对等连接</strong>是指两个主机在通信时不会区分谁是服务请求方和谁是服务提供方</p></li><li><p>只要两个主机都运行了对等连接软件，他们就可以进行**平等的、对等连接通信</p></li><li><p>双方都可以下载对方存储在硬盘中的共享文档</p><p><img src="https://pic.imgdb.cn/item/6147eeb92ab3f51d9161f825.jpg"></p></li></ul><p><strong>对等连接方式的特点</strong>：</p><ul><li>对等连接中的<b style="color: red">每一个主机既是客户，又是服务器</b></li><li>主机 C 请求 D 的服务时，C 是客户，D 是服务器。C 同时向 F 提供服务时，C 同时又起着服务器的作用</li></ul><p><b style="color: red">对等连接工作方式可支持大量对等用户（如上百万个）同时工作</b></p><h3 id="4-2-互联网的核心部分"><a href="#4-2-互联网的核心部分" class="headerlink" title="4.2 互联网的核心部分"></a>4.2 互联网的核心部分</h3><ul><li>网络核心部分是互联网最复杂的部分</li><li>网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分中的任何主机都能和其他主机通信</li><li><strong>路由器</strong>在网络核心部分起着特殊作用</li><li>路由器是实现<strong>分组交换</strong>的关键构件，任务是<b style="color: red">转发收到的分组</b>，这是网络核心部分最重要的功能。</li></ul><p>典型的交换技术包括：</p><ol><li>电路交换</li><li>分组交换</li><li>报文交换</li></ol><p><b style="color: red">互联网的核心部分采用了分组交换技术</b></p><ol><li><p><b style="color: red">电路交换</b><strong>：每一部电话都直接连接到交换机上，而交换机通过</strong>交换**的方法，让电话用户彼此之间可以很方便地通信。</p><ul><li><p>主要特点：需要互相通话的 2 部电话机需要一对电线直接连接</p><p>N 部电话机需要实现两两互相通话，需要<strong>N(N-1)/2</strong>对电线</p><p>当电话机的数量增多时，要使用<strong>交换机</strong>来完成全网的交换任务。</p><p><img src="https://pic.imgdb.cn/item/6147f4a32ab3f51d916b66e8.jpg"></p></li><li><p>交换机的<strong>交换</strong>：把一条电话线转接到另一条，使它们连通起来。（交换机知道那两个电话机需要通话后，把它们的线配对）。按照某种方式<strong>动态地分配</strong>传输线路的资源</p></li><li><p><strong>电路交换特点</strong>：</p><ul><li><p>电路交换是<strong>面向连接</strong>的</p></li><li><p>电路交换分为三个阶段</p><ol><li><strong>建立连接</strong>：建立一条专用的物理通路，保证通话时的通信资源在通信时不会被占用</li><li><strong>通信</strong></li><li><strong>释放连接</strong>：使用通信的时候占用的所有通信资源</li></ol><p><img src="https://pic.imgdb.cn/item/6147f56f2ab3f51d916ca838.jpg"></p></li><li><p>计算机数据具有突发性，导致在传送计算机数据时，通信线路的利用率很低（传数据的时间不到 10%，甚至不到 1%）</p></li></ul></li></ul></li><li><p><b style="color: red">分组交换</b></p><p>主要特点：</p><ul><li><p>采用<strong>存储转发</strong>技术</p></li><li><p>在发送端，先把长报文<strong>划分成短的、固定长度的数据段</strong></p><ul><li><p>在一个数据段前面添加上<strong>首部</strong>构成<strong>分组</strong>。</p><p><img src="https://pic.imgdb.cn/item/6147f7462ab3f51d916f7f8a.jpg"></p></li><li><p>分组交换以<strong>分组</strong>作为数据传输单元，依次把各分组发送到接收端</p></li></ul></li><li><p>接收端收到分组后，把分组的首部剥去，把收到的数据还原成报文</p></li></ul><p>分组交换的传输单元：</p><ul><li>每一个分组的首部都含有地址（目的地址和源地址）等控制信息</li><li>分组交换网中的节点交换机根据收到的分组首部中的地址信息，把分组<strong>转发</strong>到下一个节点转换机</li><li>每个分组在互联网中<strong>独立选择传输路径</strong></li><li>用这样的存储转发的方式，最后分组就能到达最终目的地</li></ul><p><img src="https://pic.imgdb.cn/item/6148a87f2ab3f51d9192bd75.jpg"></p><p><img src="C:\Users\CZH0318\AppData\Roaming\Typora\typora-user-images\image-20210920233318396.png" alt="image-20210920233318396"></p><p>假如上图 b 中的主机要向主机 5 发送数据：</p><ol><li>主机 H1 先将分组逐个地发往与它直接相连的路由器 A，当分组正在 H1–A 链路上传送时，链路 H1–A 会被占用，其他空闲时间，链路 H1–A 也可以为其他主机发送的分组使用</li><li>路由器把主机 H1 发来的分组放入缓存。在路由表 A 的转发表中查找下一个转发点，假如是 C,所以会把分组转发到链路 A–C。分组传送给路由器 C。当分组在链路 A–C 传送时，该分组不占用网络其他部分的资源。</li><li>路由器 C 继续按上面的方式查找转发表，假设要转发给路由器 E。当分组到达 E 后，E 会把分组直接交给主机 H5。</li></ol><p><b style="color: red">分组传送过程中，如果出现链路 A–C 的通信量太大，路由器 A 可以换路走（先转发到路由器 B，再到 E，再到 H5）</b></p><p>在网络中可以同时有多台主机进行通信。</p><p>上面路由器处理分组的过程精简化：</p><p><img src="https://pic.imgdb.cn/item/6148ad502ab3f51d919badf7.jpg"></p><p><strong>主机和路由器的作用不同</strong>：</p><ul><li>主机是<strong>为用户进行信息处理的</strong>，并向网络发送分组，从网络接受分组</li><li>路由器对分组进行<strong>存储转发</strong>，最后把分组交给目的主机</li></ul><p><img src="https://pic.imgdb.cn/item/6148adf82ab3f51d919d1005.jpg"></p><p><strong>分组交换带来的问题</strong>：</p><ul><li>分组在各节点存储转发时需要排队，会造成一定的时延</li><li>分组必须携带的首部也会造成一定的开销</li></ul><p><img src="https://pic.imgdb.cn/item/6148aea22ab3f51d919ee664.jpg"></p><p><strong>三种交换的比较</strong>：</p><ul><li>要连续传输大量的数据，而且传送时间远远大于连接建立时间的话，电路交换的传输速率较快</li><li>报文转换和分组转换不需要预先分配传输带宽，在传送突发数据时可以提高整个网络的信道利用率</li><li>y 因为一个分组的长度往往小于整个报文的长度，所以分组交换比报文交换的时延小，同时还具有更好的灵活性</li></ul></li></ol><h2 id="5-几种不同类别计算机网络"><a href="#5-几种不同类别计算机网络" class="headerlink" title="5. 几种不同类别计算机网络"></a>5. 几种不同类别计算机网络</h2><h3 id="5-1-按照网络的作用范围分类"><a href="#5-1-按照网络的作用范围分类" class="headerlink" title="5.1 按照网络的作用范围分类"></a>5.1 按照网络的作用范围分类</h3><ul><li><strong>广域网 WAN</strong>(Wide Area Network)：作用范围通常是几十到几千公里</li><li><strong>城域网 MAN</strong>(Metropolitan Area Network)：作用范围 5 到 50 公里</li><li><strong>局域网 LAN</strong>(Local Area Network)：作用范围 1 公里左右</li><li><strong>个人局域网 PAN</strong>(Personal Area Network)：作用范围 10 米左右</li></ul><p><strong>多处理机系统</strong>：中央处理机之间的距离非常小（如 1 米的数量级及以下），不称为计算机网络</p><h3 id="5-2-按照网络的使用者分类"><a href="#5-2-按照网络的使用者分类" class="headerlink" title="5.2 按照网络的使用者分类"></a>5.2 按照网络的使用者分类</h3><ul><li>公用网：按规定交纳费用的人可以使用的网络，也称公众网</li><li>专用网：为特殊业务工作的需要而建的网络</li></ul><h3 id="5-3-用来把用户接入到互联网的网络"><a href="#5-3-用来把用户接入到互联网的网络" class="headerlink" title="5.3 用来把用户接入到互联网的网络"></a>5.3 用来把用户接入到互联网的网络</h3><ul><li><strong>接入网 AN</strong>(Access Network)：又称本地接入网或居民接入网</li><li>接入网是一类特殊的计算机网络，用于将用户接入互联网</li><li>接入网既不属于互联网的核心部分。也不属于互联网的边缘部分</li><li>接入网是从某个用户端系统到互联网中的<strong>第一个路由器</strong>（也称边缘路由器）之间的一种网络</li></ul><h2 id="6-计算机网络的性能"><a href="#6-计算机网络的性能" class="headerlink" title="6. 计算机网络的性能"></a>6. 计算机网络的性能</h2><h3 id="6-1-计算机网络的性能指标"><a href="#6-1-计算机网络的性能指标" class="headerlink" title="6.1 计算机网络的性能指标"></a>6.1 计算机网络的性能指标</h3><ol><li><p><strong>速率</strong></p><ul><li>比特(bit)是计算机中数据量的单位</li><li>速率是计算机网络中最重要的一个性能指标，指的是<strong>数据的传输速率</strong>，也称为<strong>数据率</strong>或<strong>比特率</strong></li><li>速率的单位是 bit / s、kbit / s、Mbit / s、Gbit / s 等</li><li>速率往往是指额定速率或标称速率，非实际运行速率</li></ul></li><li><p><strong>带宽</strong></p><p>两种意义：</p><ul><li>带宽本来是指信号具有的<strong>频带宽度</strong>，单位是赫</li><li>在计算机网络中，带宽用来表示网络中某通道传送数据的能力，表示在单位时间内网络中的某信道所能通过的”最高数据率”。单位是 bit / s</li></ul></li><li><p><strong>吞吐量</strong></p><ul><li>吞吐量表示在单位时间内通过某个网络(或信道、接口)的数据量</li><li>根据吞吐量可以知道<strong>实际上有多少数据量可以通过网络</strong></li><li><strong>吞吐量受网络的带宽或网络的额定功率的限制</strong></li></ul></li><li><p><strong>时延</strong></p><ul><li><p>时延是指数据从网络的一段到另一端所需的时间</p></li><li><p>网络中的时延由以下几个部分组成</p><ol><li><p>发送时延</p><ul><li>也称<strong>传输时延</strong></li><li>发送数据时，数据帧从节点进入到传输媒体所需要的时间</li><li><img src="https://pic.imgdb.cn/item/6148b71a2ab3f51d91c2f7bf.jpg"></li></ul></li><li><p>传播时延</p><ul><li>电磁波在信道中传输一定距离而花费的时间</li><li>信号的<strong>发送速率</strong>和信号在信道上的<strong>传播速率</strong>是<strong>完全不同</strong>的概念</li><li><img src="https://pic.imgdb.cn/item/6148b7a22ab3f51d91c59dd2.jpg"></li></ul></li><li><p>处理时延</p><ul><li>主机或路由器在收到分组时，为处理分组（如分析首部、提取数据、差错检验、查找路由）所花费的时间</li></ul></li><li><p>排队时延</p><ul><li>分组在路由器输入输出队列中<strong>排队等待处理</strong>所经历的时延</li><li><strong>排队时延的长短取决于网络中当时的通信量</strong></li></ul></li></ol></li></ul></li></ol><p><b style="color: red">总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延</b></p><p>四种时延产生的地方：</p><p><img src="https://pic.imgdb.cn/item/6148b8d62ab3f51d91cb13d8.jpg"></p><p>对于高速网络链路，提高的只是数据的发送速率而不是数据在链路上的传播速率</p><p>提高链路带宽减小了数据的发送时延</p><ol start="5"><li><p><strong>时延带宽积</strong></p><p>链路的时延带宽积又称为<strong>以比特为单位的链路长度</strong></p><p><img src="https://pic.imgdb.cn/item/6148b9db2ab3f51d91cfba7d.jpg"></p></li><li><p><strong>往返时间</strong></p><ul><li><strong>往返时间 RTT</strong>(round-trip time)表示从发送方发送数据开始，到发送方收到来自接收方的确认，经历的时间</li><li>在互联网中，往返时间还包括个中间节点的处理时延、排队时延以及转发数据是的发送时延</li><li>在使用卫星通信是，RTT 相对较长，是很重要的一个性能指标</li></ul></li><li><p><strong>利用率</strong></p><ul><li>分为<strong>信道利用率</strong>和<strong>网络利用率</strong></li><li>信道利用率是指某一信道有百分之几的时间是被利用的(有数据通过)</li><li>网络利用率是全网络的信道利用率的加权平均值 3</li><li>信道利用率不是越高越好。当信道的利用率增大时，引起的时延也会随之增加</li></ul><p>时延与利用率的关系</p><p><img src="https://pic.imgdb.cn/item/6148bbea2ab3f51d91d5a8b1.jpg"></p></li></ol><h3 id="6-2-计算机网络的非性能指标"><a href="#6-2-计算机网络的非性能指标" class="headerlink" title="6.2 计算机网络的非性能指标"></a>6.2 计算机网络的非性能指标</h3><ul><li>费用</li><li>质量</li><li>标准化</li><li>可靠性</li><li>可扩展性和可升级性</li><li>易于管理与维护</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式布局</title>
      <link href="/2021/09/25/Responsive-Layout/"/>
      <url>/2021/09/25/Responsive-Layout/</url>
      
        <content type="html"><![CDATA[<h1 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备。</p><table><thead><tr><th>设备</th><th align="center">尺寸区间</th></tr></thead><tbody><tr><td>手机</td><td align="center">&lt;768px</td></tr><tr><td>平板</td><td align="center">[768px, 992px)</td></tr><tr><td>桌面显示器</td><td align="center">[992px, 1200px)</td></tr><tr><td>大桌面显示器(电脑)</td><td align="center">&gt;=1200px</td></tr></tbody></table><h2 id="响应式布局容器"><a href="#响应式布局容器" class="headerlink" title="响应式布局容器"></a>响应式布局容器</h2><p>响应式布局需要一个父级作为布局容器，让子级元素实现变化效果</p><p><b style="color: red">原理</b>：在不同屏幕下，通过媒体查询来改变布局容器的大小，再改变里面子元素的排列方式和大小，从而实现在不同大小的屏幕下，看到不同的页面布局和样式。</p><p>常用的响应式尺寸划分：</p><table><thead><tr><th>设备</th><th align="center">尺寸区间</th><th align="center">宽度设置</th></tr></thead><tbody><tr><td>手机</td><td align="center">&lt;768px</td><td align="center">100%</td></tr><tr><td>平板</td><td align="center">[768px, 992px)</td><td align="center">750px</td></tr><tr><td>桌面显示器</td><td align="center">[992px, 1200px)</td><td align="center">970px</td></tr><tr><td>大桌面显示器(电脑)</td><td align="center">&gt;=1200px</td><td align="center">1170px</td></tr></tbody></table><p>除了手机的宽度设置是 100%外，其他设备的宽度设置都会比设备的尺寸区间最小值小一点，原因是留空一点，不占满屏幕，然后容器可以居中显示。</p><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Myself<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-comment">/*媒体查询，根据设备的宽度设置容器的宽度*/</span></span><br><span class="css">      <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">767px</span>) &#123;</span><br><span class="css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        &#125;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) &#123;</span><br><span class="css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">width</span>: <span class="hljs-number">750px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">992px</span>) &#123;</span><br><span class="css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">width</span>: <span class="hljs-number">970px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1200px</span>) &#123;</span><br><span class="css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">width</span>: <span class="hljs-number">1170px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><p>Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li><p><a href="https://v3.bootcss.com/">下载 Bootstrap</a></p></li><li><p>把会用到的文件夹放到要用的站点文件夹下</p><p><img src="https://pic.imgdb.cn/item/614451aa2ab3f51d91d17745.jpg"></p><p>另外，要防止低版本 ie 没办法用 h5、css3 的新东西，导致出问题，html 骨架需要加点料。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 要求当前网页使用IE浏览器最高版本的内核来渲染 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 视口标签的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, user-scalable=0&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br><br><span class="hljs-comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="hljs-comment">  &lt;script src=&quot;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">  &lt;script src=&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">&lt;![endif]--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Myself<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br></code></pre></td></tr></table></figure><p><b style="color: red">注意！这里 if 这一段是注释，但是，注释的部分只是说浏览器不渲染，不显示被注释的代码，但是，浏览器还是回去读注释的代码的（刷新想法）</b></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 解决ie9以下浏览器对html5新增标签的不识别，并导致CSS不起作用的问题 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 解决ie9以下浏览器对css3 Media Query的不识别 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>引入要用的 css 文件等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span></span><br><span class="hljs-tag">  <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../bootstrap-3.4.1-dist/css/bootstrap.min.css&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<a href="https://v3.bootcss.com/css/">全局 CSS 样式</a>中选要用的东西，复制对应标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span>&gt;</span>（危险）Danger<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>根据自己需要修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">750px</span>;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.blue</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: skyblue <span class="hljs-meta">!important</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger blue&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>组件使用例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 字体图标 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-ok&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 巨幕 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;jumbotron&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>One plus one equals two!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Learn more<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Bootstrap-布局容器"><a href="#Bootstrap-布局容器" class="headerlink" title="Bootstrap 布局容器"></a>Bootstrap 布局容器</h3><p>Bootstrap 预定义了两个 container 容器</p><ol><li><strong>container 类</strong><ul><li>响应式布局的容器，固定宽度</li><li>大屏(电脑)(&gt;=1200px)：宽度固定为 1170px</li><li>中屏(桌面显示器)(&gt;=992px)：宽度固定为 970px</li><li>小屏(平板)(&gt;=768px)：宽度固定为 750px</li><li>超小屏(手机)(&lt;768px)：宽度固定为 100%</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 要求当前网页使用IE浏览器最高版本的内核来渲染 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视口标签的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">      <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, user-scalable=0&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="hljs-comment">      &lt;script src=&quot;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">      &lt;script src=&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">    &lt;![endif]--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Myself<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span></span><br><span class="hljs-tag">      <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../bootstrap-3.4.1-dist/css/bootstrap.min.css&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子等价于响应式布局容器的例子，简单来说就是，有大佬已经把它封装好了，可以直接用</p><ol start="2"><li><strong>container-fluid 类</strong><ul><li>流式布局容器，100%宽度</li><li>占据全部视口(viewport)的容器</li><li>适合于单独做移动端开发</li></ul></li></ol><h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><p>栅格系统是将页面布局划分为等宽的列，然后通过列数的定义来模块化页面布局。</p><p>Bootstrap 提供了一套响应式、移动设备优先的流动栅格系统，会把 container 分为 12 列。</p><p>栅格系统通过一系列的行(row)和列(column)的组合来创建页面布局。</p><p>规则：</p><ul><li><p>行(row)必须要放在 container 布局容器里面</p></li><li><p>要实现列的平均划分，需要给类添加<b style="color: red">类前缀</b></p></li></ul><table><thead><tr><th>设备</th><th align="center">尺寸区间</th><th align="center">宽度设置</th><th align="center">类前缀</th></tr></thead><tbody><tr><td>手机</td><td align="center">&lt;768px</td><td align="center">100%</td><td align="center">.col-xs-</td></tr><tr><td>平板</td><td align="center">[768px, 992px)</td><td align="center">750px</td><td align="center">.col-sm-</td></tr><tr><td>桌面显示器</td><td align="center">[992px, 1200px)</td><td align="center">970px</td><td align="center">.col-md-</td></tr><tr><td>大桌面显示器(电脑)</td><td align="center">&gt;=1200px</td><td align="center">1170px</td><td align="center">.col-lg-</td></tr></tbody></table><ul><li>xs(extra small)：超小；sm(small)：小；md(medium)：中等；lg(large)：大</li><li>列的总和大于 12 的话，多余的列会另起一行排列</li><li>每一列默认有左右 15 像素的 padding</li><li>可以同时为一列指定多个设备的类名，例如<code>class=&quot;col-md-4 col-sm-6&quot;</code></li></ul><p>例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 要求当前网页使用IE浏览器最高版本的内核来渲染 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视口标签的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">      <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, user-scalable=0&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="hljs-comment">      &lt;script src=&quot;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">      &lt;script src=&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">    &lt;![endif]--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Myself<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;col&quot;</span>]</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.container</span> &gt; <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span></span><br><span class="hljs-tag">      <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../bootstrap-3.4.1-dist/css/bootstrap.min.css&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3 col-md-4 col-sm-6 col-xs-12&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3 col-md-4 col-sm-6 col-xs-12&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3 col-md-4 col-sm-6 col-xs-12&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3 col-md-4 col-sm-6 col-xs-12&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-6&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-1&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-1&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-4&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- 总份数小于12 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-1&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- 总份数大于12 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-5&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-5&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="列嵌套"><a href="#列嵌套" class="headerlink" title="列嵌套"></a>列嵌套</h3><p>栅格系统可以将一个列再分成若干个小列。</p><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 要求当前网页使用IE浏览器最高版本的内核来渲染 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视口标签的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">      <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, user-scalable=0&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="hljs-comment">      &lt;script src=&quot;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">      &lt;script src=&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">    &lt;![endif]--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Myself<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;col&quot;</span>]</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.row</span> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span></span><br><span class="hljs-tag">      <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../bootstrap-3.4.1-dist/css/bootstrap.min.css&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3&quot;</span>&gt;</span><br>          <span class="hljs-comment">&lt;!-- 直接把列分成小列，会出现小列无法铺满原来的列，因为小列的父元素会有padding值 --&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: red&quot;</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: red&quot;</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3&quot;</span>&gt;</span><br>          <span class="hljs-comment">&lt;!-- 把列分成行后，再把行分成小列，可以实现取消父元素的padding值 --&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: red&quot;</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: red&quot;</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h3><p>使用<code>类前缀-offset-*类</code>可以将列向右侧偏移，这些类实际是通过*选择器为当前元素增加了左边距（margin）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 要求当前网页使用IE浏览器最高版本的内核来渲染 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视口标签的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">      <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, user-scalable=0&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="hljs-comment">      &lt;script src=&quot;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">      &lt;script src=&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">    &lt;![endif]--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Myself<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;col&quot;</span>]</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.row</span> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span></span><br><span class="hljs-tag">      <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../bootstrap-3.4.1-dist/css/bootstrap.min.css&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 两个div，空出中间一块，只需要右边的盒子偏移 12 - 左盒子占的份数 - 右盒子占的份数即可 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span>左<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4 col-md-offset-4&quot;</span>&gt;</span>右<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 一个盒子占中间位置，只需给这个盒子偏移 (12 - 盒子占的份数) / 2即可 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6 col-md-offset-3&quot;</span>&gt;</span>中<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="列排序"><a href="#列排序" class="headerlink" title="列排序"></a>列排序</h3><p>使用<code>类前缀-push-*和类前缀-pull-*</code>可以改变列的顺序（<b style="color: red">往左边是 pull，往右边是 push,写错的话得不到预期的结果</b>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 要求当前网页使用IE浏览器最高版本的内核来渲染 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视口标签的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">      <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, user-scalable=0&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="hljs-comment">      &lt;script src=&quot;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">      &lt;script src=&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">    &lt;![endif]--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Myself<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;col&quot;</span>]</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.row</span> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span></span><br><span class="hljs-tag">      <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../bootstrap-3.4.1-dist/css/bootstrap.min.css&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 两个div，空出中间一块，只需要右边的盒子偏移 12 - 左盒子占的份数 - 右盒子占的份数即可 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4 &quot;</span>&gt;</span>左<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-5 col-md-offset-3&quot;</span>&gt;</span>右<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 想要把左右盒子互换位置，可以pull(拉)右边的盒子过来，拉的份数为左盒子的份数 + 右盒子的偏移份数</span><br><span class="hljs-comment">            push(推)左边的盒子过去，推的份数为右盒子的份数 + 右盒子的偏移份数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4 col-md-push-8&quot;</span>&gt;</span>左<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-5 col-md-offset-3 col-md-pull-7&quot;</span>&gt;</span>右<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="隐藏和显示内容"><a href="#隐藏和显示内容" class="headerlink" title="隐藏和显示内容"></a>隐藏和显示内容</h3><p><img src="https://pic.imgdb.cn/item/6145f81a2ab3f51d91fed067.jpg"></p><p>和上面相反的是 visible-xs, visible-sm, visible-md, visible-lg，显示内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 要求当前网页使用IE浏览器最高版本的内核来渲染 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视口标签的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">      <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, user-scalable=0&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="hljs-comment">      &lt;script src=&quot;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">      &lt;script src=&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">    &lt;![endif]--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Myself<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;col&quot;</span>]</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.row</span> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span></span><br><span class="hljs-tag">      <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../bootstrap-3.4.1-dist/css/bootstrap.min.css&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-4&quot;</span>&gt;</span><br>          1<br>          <span class="hljs-comment">&lt;!-- 超小屏（手机）才会显示 --&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;visible-xs&quot;</span>&gt;</span>Hello! 手机<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 小屏和大屏会隐藏 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-4 hidden-sm hidden-lg&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-4&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>参考：<br>pink 老师前端入门教程</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件</title>
      <link href="/2021/09/09/javascript-Event/"/>
      <url>/2021/09/09/javascript-Event/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-事件"><a href="#JavaScript-事件" class="headerlink" title="JavaScript 事件"></a>JavaScript 事件</h1><h2 id="注册事件（绑定事件）"><a href="#注册事件（绑定事件）" class="headerlink" title="注册事件（绑定事件）"></a>注册事件（绑定事件）</h2><p>给元素添加事件，称为注册事件或者绑定事件。</p><p>有传统方式和方法监听方式</p><h3 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h3><p>利用 on 开头的事件，如 onclick, 同一个元素同一个事件只能设置一个处理函数，出现多个处理函数的话，后面的会覆盖前面的。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;script&gt;<br>       var btn = document.querySelector(&quot;button&quot;);<br>       btn.onclick = function () &#123;<br>           console.log(1);<br>       &#125;;<br>       btn.onclick = function () &#123;<br>           console.log(2);<br>       &#125;<br>       //结果是2<br>   &lt;/script&gt;<br><br><br></code></pre></td></tr></table></figure><h3 id="方法监听注册方式"><a href="#方法监听注册方式" class="headerlink" title="方法监听注册方式"></a>方法监听注册方式</h3><h4 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener():"></a>addEventListener():</h4><p><code>eventTarget.addEventListener(type, listener[, useCapture])</code></p><p>type: 事件类型字符串，如 click、mouseover 等，不带 on</p><p>listener: 事件处理函数，事件发生会调用该监听函数</p><p>useCapture: 可选参数，是一个布尔值，默认是 false。决定监听器的触发阶段是捕获阶段还是冒泡阶段<a href="#anchor">详见</a>。</p><p>addEventListener() 是 W3C DOM 规范中提供的注册事件监听器的方法。</p><p>优点：</p><ol><li>允许给一个事件注册多个监听器</li></ol><p>例子：</p><p>addEventListener:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">      const btn = document.getElementById(&quot;btn&quot;);<br><br>      btn.addEventListener(&quot;click&quot;, function () &#123;<br>          console.log(1);<br>      &#125;);<br>      btn.addEventListener(&quot;click&quot;, function () &#123;<br>          console.log(1);<br>      &#125;);<br><br>//结果：1, 1<br><br></code></pre></td></tr></table></figure><p>此处是个人见解：</p><p>当两个监听函数一样时，由上可发现会输出两次 1,这个其实是因为上面两个匿名函数看似一样，实际它们所开辟的内存空间不一样。</p><p>把相同的方法抽出来后会发现，无法实现多个监听，就是因为两个方法变成完全一样了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>   const btn = document.getElementById(&quot;btn&quot;);<br><br>   btn.addEventListener(&quot;click&quot;, fn)<br>   btn.addEventListener(&quot;click&quot;, fn)<br><br>   function fn() &#123;<br>     console.log(1);<br>   &#125;<br><br>//结果：1<br><br></code></pre></td></tr></table></figure><ol start="2"><li>可以控制监听器的触发阶段（可选捕获或冒泡）</li><li>对任何 DOM 元素都是有效的，而不仅仅只对 HTML 元素有效。(<b style="color:red">未找到合适案例</b>)</li></ol><p>参数是匿名函数和是箭头函数区别：</p><p>它们绑定不同的 this 对象。匿名函数和传统方式一样会创建独有的 this 对象（即触发事件的元素），而箭头函数是继承绑定它所在函数的 this 对象。</p><p>例子：</p><p>匿名函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;div id=&quot;div&quot;&gt;<br>       &lt;button id=&quot;btn&quot;&gt;点击&lt;/button&gt;<br>   &lt;/div&gt;<br><br>   &lt;script&gt;<br>       const div = document.getElementById(&quot;div&quot;);<br><br>       const btn = document.getElementById(&quot;btn&quot;);<br>       div.addEventListener(&quot;mouseenter&quot;, function () &#123;<br>           console.log(this);<br>           btn.addEventListener(&quot;click&quot;, function () &#123;<br>               console.log(this);<br>           &#125;)<br>       &#125;);<br>   &lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://pic.imgdb.cn/item/612c38f844eaada739293bc3.jpg"></p><p>箭头函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;div id=&quot;div&quot;&gt;<br>       &lt;button id=&quot;btn&quot;&gt;点击&lt;/button&gt;<br>   &lt;/div&gt;<br><br>   &lt;script&gt;<br>       const div = document.getElementById(&quot;div&quot;);<br><br>       const btn = document.getElementById(&quot;btn&quot;);<br>       div.addEventListener(&quot;mouseenter&quot;, function () &#123;<br>           console.log(this);<br>           btn.addEventListener(&quot;click&quot;, () =&gt; &#123;<br>               console.log(this);<br>           &#125;)<br>       &#125;);<br>   &lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://pic.imgdb.cn/item/612c398044eaada7392a354b.jpg"></p><h4 id="attachEvent"><a href="#attachEvent" class="headerlink" title="attachEvent():"></a>attachEvent():</h4><p><code>eventTarget.attachEvent(eventNameWithOn, callback)</code></p><p>eventNameWithOn: 事件类型字符串。如 onclick、onmouseover，要带 on</p><p>callback: 事件处理函数，事件发生会调用该回调函数</p><p>IE9 之前的 IE 不支持，对应有 attachEvent()，用法和 addEventListener 近似，不过事件需要变回传统方式的 on 系列。</p><p>attachEvent 缺点：this 的值会变成 window 对象的引用而不是触发事件的元素。</p><h2 id="删除事件（解绑事件）"><a href="#删除事件（解绑事件）" class="headerlink" title="删除事件（解绑事件）"></a>删除事件（解绑事件）</h2><h3 id="传统方式-1"><a href="#传统方式-1" class="headerlink" title="传统方式"></a>传统方式</h3><p>eventTarget.onclick = null;</p><p>例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>const btn = document.getElementById(&quot;btn&quot;);<br>      btn.onclick = function () &#123;<br>          console.log(1);<br>      &#125;;<br><br>      btn.onclick = null;<br><br></code></pre></td></tr></table></figure><h3 id="方法监听注册方式-1"><a href="#方法监听注册方式-1" class="headerlink" title="方法监听注册方式"></a>方法监听注册方式</h3><h4 id="对应-addEventListener"><a href="#对应-addEventListener" class="headerlink" title="对应 addEventListener"></a>对应 addEventListener</h4><p><code>eventTarget.removeEventListener(type, listener[, useCapture]);</code></p><p>移除完全匹配的监听，只有事件处理函数完全一样，包括开辟的内存空间。</p><p>完全匹配例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>const btn = document.getElementById(&quot;btn&quot;);<br>      btn.addEventListener(&quot;click&quot;, fn); //第二个参数只要函数名就可以，不需要调用<br>      btn.removeEventListener(&quot;click&quot;, fn);<br><br>      function fn() &#123;<br>          console.log(1);<br>      &#125;<br><br></code></pre></td></tr></table></figure><p>不完全匹配例子（开辟的内存空间不一样）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>const btn = document.getElementById(&quot;btn&quot;);<br>      btn.addEventListener(&quot;click&quot;, function () &#123;<br>          console.log(1);<br>      &#125;);<br>      btn.removeEventListener(&quot;click&quot;, function () &#123;<br>          console.log(1);<br>      &#125;);<br><br></code></pre></td></tr></table></figure><h2 id="DOM-事件流"><a href="#DOM-事件流" class="headerlink" title="DOM 事件流"></a>DOM 事件流</h2><p id="anchor">事件流描述的是从页面中接收事件的顺序。</p><p>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程就是 DOM 事件流。</p><p>例如给一个 div 注册了事件：</p><p>DOM 事件流分为 3 个阶段：</p><ol><li>捕获阶段</li><li>当前目标阶段</li><li>冒泡阶段</li></ol><p>事件捕获：网景最早提出，由 DOM 最顶层节点开始，然后逐级向下传播到绑定事件的元素接受的过程。</p><p>事件冒泡：IE 最早提出，事件逐级向上传播到 DOM 最顶层节点的过程。</p><p><img src="https://pic.imgdb.cn/item/612c5ace44eaada7396858fb.jpg"></p><p>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即 DOM 事件流。</p><p>注意：</p><ol><li>JS 代码只能执行捕获或者冒泡其中一个阶段</li><li>onclick 和 attachEvent 只能得到冒泡阶段</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>const btn = document.getElementById(&quot;btn&quot;);<br>      btn.onclick = () =&gt; alert(1);<br>      document.body.onclick = () =&gt; alert(2);<br>      document.documentElement.onclick = () =&gt; alert(3);<br>      document.onclick = () =&gt; alert(4);<br>//点击按钮后，弹出顺序1、2、3、4<br><br></code></pre></td></tr></table></figure><ol start="3"><li>addEventListener(type, listener[, useCapture])第三个参数默认是 false，表示在冒泡阶段调用事件处理程序，如果是 true，则表示在事件捕获阶段调用事件处理程序。</li></ol><p>为 false:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>const btn = document.getElementById(&quot;btn&quot;);<br>      btn.addEventListener(&quot;click&quot;, () =&gt; alert(1), false);<br>      document.body.addEventListener(&quot;click&quot;, () =&gt; alert(2), false);<br>      document.documentElement.addEventListener(&quot;click&quot;, () =&gt; alert(3));<br>      document.addEventListener(&quot;click&quot;, () =&gt; alert(4));<br>//点击按钮后，弹出顺序1、2、3、4<br><br></code></pre></td></tr></table></figure><p>为 true:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>const btn = document.getElementById(&quot;btn&quot;);<br>      btn.addEventListener(&quot;click&quot;, () =&gt; alert(1), true);<br>      document.body.addEventListener(&quot;click&quot;, () =&gt; alert(2), true);<br>      document.documentElement.addEventListener(&quot;click&quot;, () =&gt; alert(3), true);<br>      document.addEventListener(&quot;click&quot;, () =&gt; alert(4), true);<br>//点击按钮后，弹出顺序4、3、2、1<br><br></code></pre></td></tr></table></figure><ol start="4"><li>有些事件是没有冒泡的，如 blur, focus, mouseenter, onmouseleave</li></ol><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>const btn = document.getElementById(&quot;btn&quot;);<br>      btn.addEventListener(&quot;mouseleave&quot;, () =&gt; alert(1));<br>      document.body.addEventListener(&quot;mouseleave&quot;, () =&gt; alert(2));<br>      document.documentElement.addEventListener(&quot;mouseleave&quot;, () =&gt; alert(3));<br>      document.addEventListener(&quot;mouseleave&quot;, () =&gt; alert(4));<br>//当鼠标放在按钮里后，离开按钮，只会弹出1<br><br></code></pre></td></tr></table></figure><ol start="5"><li>事件冒泡有时候会带来麻烦，可以通过 e.stopPropagation()方法阻止事件冒泡</li></ol><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>事件处理函数可以带参数，带的参数就是事件对象。</p><p><code> eventTarget.onclick = function(event) &#123;&#125;</code></p><p><code>eventTarget.addEventListener(&quot;click&quot;, function(event)&#123;&#125;)</code></p><p>如上式所示，event 就是事件对象，，它代表事件的状态，如键盘按键的状态、鼠标的位置、鼠标按钮的状态等。事件发生后，跟事件相关的一系列信息的集合都在这个对象里面。</p><p style="color:red">不需要传递实参</P><p>注册事件时，event 对象会被系统自动创建，并依次传递给事件监听器（事件处理函数）。</p><p>在 IE6~8 中，浏览器不会给方法传递参数，需要的话，要到 window.event 中获取。</p><p>e = e || window.event;</p><h3 id="事件对象的常见属性和方法"><a href="#事件对象的常见属性和方法" class="headerlink" title="事件对象的常见属性和方法"></a>事件对象的常见属性和方法</h3><p><img src="https://pic.imgdb.cn/item/612cc0a644eaada7392c26d3.jpg"></p><p>e.target 和 this 的区别：</p><p>this 是事件绑定的元素（匿名函数形式），函数的调用者。</p><p>e.target 是事件触发的元素。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>const ul = document.querySelector(&quot;ul&quot;);<br>      ul.addEventListener(&quot;click&quot;, function (e) &#123;<br>          console.log(this);<br>          console.log(e.target);<br>      &#125;);<br>//点击li里面的文字，依次打印出的是ul和li<br><br></code></pre></td></tr></table></figure><h4 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h4><p><code>e.preventDefault()</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>const a = document.querySelector(&quot;a&quot;);<br>      a.addEventListener(&quot;click&quot;, (e) =&gt; e.preventDefault());<br><br></code></pre></td></tr></table></figure><h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><p><code>e.stopPropagation()</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>const btn = document.getElementById(&quot;btn&quot;);<br>      btn.addEventListener(&quot;click&quot;, (e) =&gt; &#123;<br>          alert(1);<br>          e.stopPropagation();  //只要在事件处理函数里使用就会执行完这个函数，才阻止冒泡。<br>  //不过建议放在最后面，更有逻辑性的感觉<br>      &#125;);<br>      document.body.addEventListener(&quot;click&quot;, () =&gt; alert(2));<br>      document.documentElement.addEventListener(&quot;click&quot;, () =&gt; alert(3));<br>      document.addEventListener(&quot;click&quot;, () =&gt; alert(4));<br><br></code></pre></td></tr></table></figure><p>没加 e.stopPropagation()之前会依次弹出 1、2、3、4，在按钮绑定的事件中,加上之后只会弹出 1</p><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>事件委托也被称为事件代理，在 jQuery 里面称为事件委派。</p><h4 id="事件委托原理"><a href="#事件委托原理" class="headerlink" title="事件委托原理"></a>事件委托原理</h4><p>不需要给每个子结点单独设置事件监听器，而是把事件监听器设置在其父节点上，然后利用冒泡原理去影响子节点。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>const ul = document.querySelector(&quot;ul&quot;);<br>      ul.addEventListener(&quot;click&quot;, (e) =&gt; e.target.style.color = &quot;red&quot;);<br><br></code></pre></td></tr></table></figure><p>上面例子：直接给 li 的父节点绑定监听器，然后利用 e.target 找到当前点击的 li，点击 li，事件会冒泡到 ul 上，而 ul 上有注册事件，就会触发事件监听器。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>只需要操作一次 DOM，提高了程序性能。</p><h3 id="常用的鼠标事件"><a href="#常用的鼠标事件" class="headerlink" title="常用的鼠标事件"></a>常用的鼠标事件</h3><p><img src="https://pic.imgdb.cn/item/612d849544eaada7399433ab.jpg"></p><p>ontextmenu：鼠标右键菜单，可用于取消默认的菜单</p><p>selectstart：开始选中，可用于禁止选中文字</p><h4 id="常用鼠标事件对象属性"><a href="#常用鼠标事件对象属性" class="headerlink" title="常用鼠标事件对象属性"></a>常用鼠标事件对象属性</h4><p><img src="https://pic.imgdb.cn/item/612d85bf44eaada7399611a9.jpg"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>跟随鼠标的天使</p><h3 id="常用的键盘事件"><a href="#常用的键盘事件" class="headerlink" title="常用的键盘事件"></a>常用的键盘事件</h3><p><img src="https://pic.imgdb.cn/item/612d863444eaada73996cc24.jpg"></p><p style="color:red">onkeypress不识别功能键，如ctrl、shift等<br>执行顺序是： keydown-->keypress-->keyup</p><p>首先，keyup 是弹起时才会触发的，所以顺序是最后的，所以只需要记得 keydown 优先级更高就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>document.addEventListener(&quot;keyup&quot;, () =&gt; console.log(&quot;up&quot;));<br>      document.addEventListener(&quot;keydown&quot;, () =&gt; console.log(&quot;down&quot;));<br>      document.addEventListener(&quot;keypress&quot;, () =&gt; console.log(&quot;press&quot;));<br>//按非功能键，依次输出顺序down、press、up<br>//按功能键，则依次输出down、up<br><br></code></pre></td></tr></table></figure><h4 id="常用键盘事件对象属性"><a href="#常用键盘事件对象属性" class="headerlink" title="常用键盘事件对象属性"></a>常用键盘事件对象属性</h4><p>keyCode:返回该键的 ASCII 值（数字）</p><p style="color:red">onkeydown和onkeyup不区分字母大小写，onkeypress区分字母大小写</p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p>模拟京东快递单号查询案例</p><p>参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener#why_use_addeventlistener.3f">EventTarget.addEventListener()</a></p><p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha">pink 老师前端入门</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript DOM（二）</title>
      <link href="/2021/09/02/Javascript-DOM-2/"/>
      <url>/2021/09/02/Javascript-DOM-2/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-DOM（二）"><a href="#JavaScript-DOM（二）" class="headerlink" title="JavaScript DOM（二）"></a>JavaScript DOM（二）</h1><p>案例只留下案例名称，需复习的话，<a href="https://gitee.com/xiaoqiang001/java-script">下载素材</a>，按名字搜索后可找到文件</p><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><p>通过上文可知获取元素可以来利用 DOM 提供的方法来获取元素，如 getElementById、querySelector 等方法，但是也可以利用节点关系来获取元素</p><h3 id="节点概述"><a href="#节点概述" class="headerlink" title="节点概述"></a>节点概述</h3><p><img src="https://pic.imgdb.cn/item/611f0cf54907e2d39ca04cce.jpg"></p><h3 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h3><p>利用 DOM 树可以把节点划分为不同的层级关系，如父子层级、兄弟层级</p><h4 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h4><p>node.parentNode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>//node.parentNode<br>var son = document.querySelector(&quot;.son&quot;);<br>console.log(son.parentNode);<br><br></code></pre></td></tr></table></figure><ol><li>parentNode 属性可返回最近的一个父节点</li><li>指定的节点没有父节点则返回 null（测试只有 document.parentNode 会返回 null，body 里的节点的父节点可以是 body）</li></ol><h4 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h4><ol><li>parentNode.childNodes</li></ol><p>返回包含指定节点的子节点的集合，包含元素节点、文本节点等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;div class=&quot;father&quot;&gt;<br>&lt;div class=&quot;son&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>var father = document.querySelector(&quot;.father&quot;);<br>console.log(father.childNodes);<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://pic.imgdb.cn/item/611f120d4907e2d39cabddd5.jpg"></p><p>这种方法要获取元素节点，可以遍历所有节点，利用元素节点的 nodeType 为 1 的性质选出来。但是很麻烦。 2. parentNode.children</p><p>返回包含指定节点的子元素节点的集合，只返回元素节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;div class=&quot;father&quot;&gt;<br>&lt;div class=&quot;son1&quot;&gt;&lt;/div&gt;<br>&lt;div class=&quot;son2&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>var father = document.querySelector(&quot;.father&quot;);<br>console.log(father.children);<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://pic.imgdb.cn/item/611f13c84907e2d39cafcdad.jpg"> 3. parentNode.firstChild</p><p>返回第一个子节点，也是所有的子节点中的第一个节点 4. parentNode.lastChild</p><p>返回最后一个子节点，也是所有的子节点中的最后一个节点 5. parentNode.firstElementChild</p><p>返回第一个子元素节点 6. parentNode.lastElementChild</p><p>返回最后一个子元素节点</p><p>也可以：parentNode.children[0]获取第一个子元素节点；parentNode.children[parentNode.children.length -1]获取最后一个子元素节点</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>新浪下拉菜单</p><h4 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h4><p>两种方式，分别是所有的节点和元素节点。和获取子节点相似。</p><ol><li>node.nextSibling</li></ol><p>返回下一个兄弟节点，包含所有的节点。 2. node.previousSibling</p><p>返回下一个兄弟节点，包含所有的节点。 3. node.nextElementSibling</p><p>返回下一个兄弟元素节点 4. node.previousElementSibling</p><p>返回下一个兄弟元素节点</p><p>其中，3、4 有兼容性问题，IE9 以上才支持，可以封装兼容性函数</p><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>document.createElement(‘tagName’)<br>创建的元素原本不存在，是动态生成的，又被称为动态创建元素节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>var div = document.createElement(&quot;div&quot;);<br><br></code></pre></td></tr></table></figure><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><p>创建节点后，创建的节点并不会出现，而需要把节点添加上去才可以。添加节点主要是先找到要添加的位置的父节点，然后才添加进去。有两种方法</p><ol><li>node.appendChild(child)</li></ol><p>将节点 child 添加到指定的父节点 node 的子节点末尾。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;body&gt;<br>&lt;div class=&quot;box&quot;&gt;<br>&lt;div class=&quot;one&quot;&gt;&lt;/div&gt;<br>&lt;div class=&quot;two&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>var div = document.createElement(&quot;div&quot;);<br>div.className = &quot;three&quot;;<br><br>var box = document.querySelector(&quot;.box&quot;);<br>box.appendChild(div);<br><br>&lt;/script&gt;<br>&lt;/body&gt;<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://i.loli.net/2021/08/23/wvRsMI43JqlcCzg.png"> 2. node.insertBefore(child, 指定元素);</p><p>将节点 child 添加到父节点 node 的指定子节点前面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;body&gt;<br>&lt;div class=&quot;box&quot;&gt;<br>&lt;div class=&quot;one&quot;&gt;&lt;/div&gt;<br>&lt;div class=&quot;two&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>var div = document.createElement(&quot;div&quot;);<br>div.className = &quot;three&quot;;<br><br>var box = document.querySelector(&quot;.box&quot;);<br>var one = document.querySelector(&quot;.one&quot;);<br>box.insertBefore(div, one);<br><br>&lt;/script&gt;<br>&lt;/body&gt;<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://i.loli.net/2021/08/23/KGhHNEVASTIpCue.png"></p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p>简单版发布留言案例</p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>node.removeChild(child)</p><p>从父节点 node 的子结点中删除指定子节点。，返回删除的节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;div class=&quot;box&quot;&gt;<br>&lt;div class=&quot;one&quot;&gt;&lt;/div&gt;<br>&lt;div class=&quot;two&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>var box = document.querySelector(&quot;.box&quot;);<br>console.log(box.removeChild(box.children[0]));<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>结果:</p><p><img src="https://i.loli.net/2021/08/23/o3mu1E7GzAtxjSf.png"></p><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><p>删除留言案例</p><h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><p>node.cloneNode()</p><p>返回调用该方法的节点的一个副本。</p><ol><li>参数为空或者 false，则是浅拷贝，只克隆节点自身，不克隆里面的子节点，包括文本节点</li><li>参数为 true，则是深拷贝，克隆节点本身以及里面所有子节点。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;div class=&quot;box&quot;&gt;<br>111<br>&lt;div class=&quot;one&quot;&gt;123&lt;/div&gt;<br>&lt;div class=&quot;two&quot;&gt;456&lt;/div&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>var box = document.querySelector(&quot;.box&quot;);<br>console.log(box.cloneNode());<br>console.log(box.cloneNode(true));<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://i.loli.net/2021/08/23/JgSYLnz2ci1kdCm.png"></p><h3 id="节点操作综合案例"><a href="#节点操作综合案例" class="headerlink" title="节点操作综合案例"></a>节点操作综合案例</h3><p>动态生成表格案例</p><h3 id="三种动态创建元素方法"><a href="#三种动态创建元素方法" class="headerlink" title="三种动态创建元素方法"></a>三种动态创建元素方法</h3><ol><li>document.write()</li></ol><p>会导致页面全部重绘</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;body&gt;<br>&lt;button class=&quot;write&quot;&gt;write方法&lt;/button&gt;<br>&lt;script&gt;<br>let write = document.querySelector(&quot;.write&quot;);<br>write.onclick = () =&gt; &#123;<br>console.log(document.write(&quot;&lt;h1&gt;123&lt;/h1&gt;&quot;));<br>&#125;<br>&lt;/script&gt;<br>&lt;/body&gt;<br><br></code></pre></td></tr></table></figure><p>点击前：</p><p><img src="https://pic.imgdb.cn/item/6129f92844eaada739a03bef.jpg"></p><p>点击后:</p><p><img src="https://pic.imgdb.cn/item/6129f94d44eaada739a075d2.jpg"> 2. element.innerHTML</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;body&gt;<br>&lt;div&gt;&lt;/div&gt;<br>&lt;script&gt;<br>let div = document.querySelector(&quot;div&quot;);<br>div.innerHTML = &quot;&lt;h1&gt;123&lt;/h1&gt;&quot;;<br>&lt;/script&gt;<br>&lt;/body&gt;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>document.createElement()</li></ol><p>只能根据参数的标签名创建对应元素节点，无内容，也无类名、id 等。</p><p>例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;div&gt;&lt;/div&gt;<br>   &lt;script&gt;<br>       let div = document.querySelector(&quot;div&quot;);<br>       let h1 = document.createElement(&quot;h1&quot;);<br>       h1.innerHTML = &quot;123&quot;;<br>       div.appendChild(h1);<br>   &lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>效率测试：</p><ol><li>innerHTML（拼接字符串）(1000 个 div)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>const t1 = +new Date();<br>      for (let j = 0; j &lt; 1000; j++) &#123;<br>          document.body.innerHTML += &#x27;&lt;div&gt;&lt;/div&gt;&#x27;;<br>      &#125;<br>      const t2 = +new Date();<br>      console.log(t2 - t1);<br>      //505ms<br><br></code></pre></td></tr></table></figure><ol start="2"><li>innerHTML（数组形式拼接）（10000 个 div）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">const t1 = +new Date();<br>      let arr = [];<br>      for (let j = 0; j &lt; 10000; j++) &#123;<br>          arr.push(&#x27;&lt;div&gt;&lt;/div&gt;&#x27;);<br>      &#125;<br><br>      document.body.innerHTML = arr.join(&#x27;&#x27;);<br>      const t2 = +new Date();<br>      console.log(t2 - t1);<br>      //15、14、13、11、9(ms)<br><br></code></pre></td></tr></table></figure><ol start="3"><li>createElement(10000 个 div)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>const t1 = +new Date();<br>      for (let j = 0; j &lt; 10000; j++) &#123;<br>          let div = document.createElement(&quot;div&quot;);<br>          document.body.appendChild(div);<br>      &#125;<br><br>      const t2 = +new Date();<br>      console.log(t2 - t1);<br>      //14、16、19、13、11<br><br></code></pre></td></tr></table></figure><p>innerHTML（数组形式拼接）的效率在测试中比 createElement 的稍微快一点，但只是一点点，一开始用 1000 个测试时，没办法分出区别，加大到 10000 个可以看出前者比后者稍快一点。</p><p>innerHTML（数组形式拼接）结构较复杂，需要另外用数组接，后面还得转成字符串，再塞给父节点。</p><p>createElement 结构较清晰，创建后直接使用 appendChild 就可以添加到父节点中。</p><p>学习链接：<a href="https://www.bilibili.com/video/BV1Sy4y1C7ha">pink 老师前端入门</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript DOM(一)</title>
      <link href="/2021/08/26/Javascript-DOM-1/"/>
      <url>/2021/08/26/Javascript-DOM-1/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-DOM（一）"><a href="#JavaScript-DOM（一）" class="headerlink" title="JavaScript DOM（一）"></a>JavaScript DOM（一）</h1><p>整理一下学习的 DOM 部分知识，首先小复习一下知识点”预解析”。.</p><p>案例只留下案例名称，需复习的话，<a href="https://gitee.com/xiaoqiang001/java-script">下载素材</a>，按名字搜索后可找到文件</p><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><p>运行 js 会分为两步。</p><ol><li>预解析</li><li>代码执行</li></ol><p>预解析：js 引擎会把 js 里面所有的 var 和 function 提升到当前作用域的最前面</p><p>预解析分为：</p><ol><li>变量预解析(变量提升）</li></ol><p>把所有的变量声明提升到当前的最前面。<b style = "color:red;">只提升声明，不提升赋值，函数同理，不提升调用</b> 2. 函数预解析(函数提升）</p><p>把所有的函数声明提升到当前的最前面。</p><p style="color:red">实际上，变量提升，可能会引发很多问题，会导致变量可以先使用后申明。函数提升暂时没有遇到什么问题。</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>fn();<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(num);<br>  <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;<br>&#125;<br><br><span class="hljs-comment">// 执行代码之前预解析，预解析后的代码如下所示，上面和下面的代码不同，但执行是一样的</span><br><br><span class="hljs-keyword">var</span> num;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> num;<br>  <span class="hljs-built_in">console</span>.log(num);<br>  num = <span class="hljs-number">20</span>;<br>&#125;<br>num = <span class="hljs-number">10</span>;<br>fn();<br></code></pre></td></tr></table></figure><h2 id="DOM-简介"><a href="#DOM-简介" class="headerlink" title="DOM 简介"></a>DOM 简介</h2><p>文档对象模型(Document Object Model，简称 DOM), ，是 W3C 推荐的处理可扩展标记语言（HTML 和 XML）的标准编程接口。</p><p>DOM:对节点结构化表诉，并定义了一种方式可以使程序对该结构进行访问，将 web 页面和脚本语言连接起来。</p><p>通过 DOM 接口可以改变网页的内容、结构和样式。</p><p><img src="https://pic.imgdb.cn/item/61162a995132923bf8ee7848.jpg"></p><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><p>用 console.dir() 可以打印我们获取的元素对象，更好的查看对象里面的属性和方法</p><h3 id="根据-id-获取"><a href="#根据-id-获取" class="headerlink" title="根据 id 获取"></a>根据 id 获取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-built_in">document</span>.getElementById(id名字符串形式);<br><span class="hljs-built_in">document</span>可以换成已经得到的元素，相应的获取的元素就只能是它的子元素<br><br></code></pre></td></tr></table></figure><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> my = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;my&quot;</span>);</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(my);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="根据标签名获取"><a href="#根据标签名获取" class="headerlink" title="根据标签名获取"></a>根据标签名获取</h3><p><code>document.getElementsByTagName(标签名，字符串形式);</code></p><p>得到的是一个对象的集合</p><h3 id="通过-HTML5-新增的方法获取"><a href="#通过-HTML5-新增的方法获取" class="headerlink" title="通过 HTML5 新增的方法获取"></a>通过 HTML5 新增的方法获取</h3><h4 id="根据类名获取"><a href="#根据类名获取" class="headerlink" title="根据类名获取"></a>根据类名获取</h4><p><code>document.getElementsByClassName(类名，字符串形式);</code></p><p>得到的是一个对象的集合</p><h4 id="根据选择器获取"><a href="#根据选择器获取" class="headerlink" title="根据选择器获取"></a>根据选择器获取</h4><ol><li>document.querySelector(‘选择器’)，返回第一个元素对象</li></ol><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> id = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#id&quot;</span>);<br><span class="hljs-keyword">var</span> tagName = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;div&quot;</span>);<br><span class="hljs-keyword">var</span> className = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.className&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li>document.querySelectorAll(‘选择器’)，返回一个对象的集合</li></ol><h3 id="获取特殊元素-body-html"><a href="#获取特殊元素-body-html" class="headerlink" title="获取特殊元素(body, html)"></a>获取特殊元素(body, html)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> body = <span class="hljs-built_in">document</span>.body;<br><span class="hljs-keyword">var</span> html = <span class="hljs-built_in">document</span>.documentElement;<br></code></pre></td></tr></table></figure><h2 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h2><h3 id="事件概述"><a href="#事件概述" class="headerlink" title="事件概述"></a>事件概述</h3><p>事件是指可以被 Javas 侦测到的行为。例如，点击按钮，鼠标移动等。</p><h3 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h3><ol><li>事件源</li><li>事件类型</li><li>事件处理程序</li></ol><p>实例： 点击按钮弹出窗口</p><p>其中，事件源是按钮，事件类型则是点击，事件处理程序是弹出窗口</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>获取事件源</li><li>注册事件（绑定事件）</li><li>添加事件处理程序</li></ol><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;button&quot;</span>);<br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  alert(<span class="hljs-string">&quot;Hello!&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h2><h3 id="改变元素内容"><a href="#改变元素内容" class="headerlink" title="改变元素内容"></a>改变元素内容</h3><ol><li>element.innerText</li></ol><p>不识别 html 标签，空格和换行也会去掉 2. element.innerHTML</p><p>识别 html 标签，保留空格和换行</p><h3 id="常见元素的属性操作"><a href="#常见元素的属性操作" class="headerlink" title="常见元素的属性操作"></a>常见元素的属性操作</h3><p>src、href、id、alt、title 等</p><p>element.src</p><h3 id="表单元素的属性操作"><a href="#表单元素的属性操作" class="headerlink" title="表单元素的属性操作"></a>表单元素的属性操作</h3><p>type、value、checked、disabled、selected 等</p><p>element.value</p><h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><p>仿京东显示隐藏密码</p><p><img src="https://pic.imgdb.cn/item/61163eee5132923bf814e9a5.jpg"></p><h3 id="样式属性操作"><a href="#样式属性操作" class="headerlink" title="样式属性操作"></a>样式属性操作</h3><h4 id="element-style"><a href="#element-style" class="headerlink" title="element.style"></a>element.style</h4><ol><li>样式采用驼峰命名法，如 fontSize，backgroundColor;</li><li>产生的是行内样式，CSS 权重比较高</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;div&quot;</span>);<br>div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  div.style.backgroundColor = <span class="hljs-string">&quot;purple&quot;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>点击前：</p><p><img src="https://pic.imgdb.cn/item/611638e75132923bf80a3008.jpg"></p><p>点击后：</p><p><img src="https://pic.imgdb.cn/item/611639035132923bf80a66df.jpg"></p><h5 id="案例：-1"><a href="#案例：-1" class="headerlink" title="案例："></a>案例：</h5><ol><li>关闭淘宝二维码案例</li></ol><p><img src="https://pic.imgdb.cn/item/61163f0d5132923bf8152175.jpg"> 2. 循环精灵图</p><p><img src="https://pic.imgdb.cn/item/61163f225132923bf8154542.jpg"> 3. 显示隐藏文本框内容</p><p><img src="https://pic.imgdb.cn/item/61163f355132923bf81566c6.jpg"></p><h4 id="element-className"><a href="#element-className" class="headerlink" title="element.className"></a>element.className</h4><p>通过另外写 CSS，然后通过 className 来更改类名</p><ol><li>适合用于样式修改过多，通过行内样式操作会很复杂</li><li>class 是保留字，所以通过使用 className 来操作元素类名属性</li><li>会直接更改元素的类名，即覆盖原来的类名。想要保留原来的类名的基础上改的话，则通过 element.className = ‘原来的类名 新的类名’来保留。</li></ol><h5 id="案例：-2"><a href="#案例：-2" class="headerlink" title="案例："></a>案例：</h5><p>仿新浪注册页面</p><p><img src="https://pic.imgdb.cn/item/61163f595132923bf815ab5f.jpg"></p><p><img src="https://pic.imgdb.cn/item/61163bc15132923bf80f520e.jpg"></p><h3 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h3><p>情境：</p><p>有一组元素，我们只想要一个元素实现某种样式。</p><p>方法：</p><ol><li>所有元素全部清除样式</li><li>给当前元素设置样式</li></ol><p>实例:</p><p>三个按钮，点击按钮，对应的按钮变色，其他的原来的默认色。相当于多选一。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;button&quot;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="javascript">      btns[i].addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; btns.length; j++) &#123;</span><br><span class="javascript">          btns[j].style.backgroundColor = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.style.backgroundColor = <span class="hljs-string">&quot;pink&quot;</span>;</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="案例：-3"><a href="#案例：-3" class="headerlink" title="案例："></a>案例：</h4><ol><li>百度换肤效果</li><li>表格隔行变色</li><li>全选反选</li></ol><p><img src="https://pic.imgdb.cn/item/61163f9a5132923bf81623b1.jpg"></p><h3 id="元素属性操作"><a href="#元素属性操作" class="headerlink" title="元素属性操作"></a>元素属性操作</h3><h4 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h4><ol><li>element.属性</li></ol><p style="color: red">只能获取内置属性值，无法获取自定义属性值，如index、data-index等，其中data-*是H5的自定义属性</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#demo&quot;</span>);<br><span class="hljs-built_in">console</span>.log(div.id);<br></code></pre></td></tr></table></figure><ol start="2"><li>element.getAttribute(‘属性’);</li></ol><p>可以获取自定义属性</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#demo&quot;</span>);<br><span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">&quot;id&quot;</span>));<br><span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">&quot;index&quot;</span>));<br></code></pre></td></tr></table></figure><h4 id="设置属性值"><a href="#设置属性值" class="headerlink" title="设置属性值"></a>设置属性值</h4><p>和获取一样，第一种方法也无法设置自定义属性值</p><ol><li>element.属性 = ‘值’</li></ol><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#demo&quot;</span>);<br>div.id = <span class="hljs-string">&quot;box&quot;</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li>element.setAttribute(‘属性’, ‘值’);</li></ol><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#demo&quot;</span>);<br>div.setAttribute(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;box&quot;</span>);<br>div.setAttribute(<span class="hljs-string">&quot;index&quot;</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h4 id="移除属性"><a href="#移除属性" class="headerlink" title="移除属性"></a>移除属性</h4><p>只有一种方法，element.属性 = ‘’；只能令属性值为空，而不会移除属性</p><p>element.removeAttribute(‘属性’);</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#demo&quot;</span>);<br>div.removeAttribute(<span class="hljs-string">&quot;id&quot;</span>);<br>div.removeAttribute(<span class="hljs-string">&quot;index&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>tab 栏切换</p><h3 id="H5-自定义属性"><a href="#H5-自定义属性" class="headerlink" title="H5 自定义属性"></a>H5 自定义属性</h3><p>自定义属性目的：为了保存和使用数据。有些数据可以保存到页面中而不用保存到数据库中。<b style="color: red">未解：保存到数据库：怎么存？存在哪里怎么看？怎么用？</b></p><p>由上面的元素属性操作可知，Attribute 系列函数(get、set、remove)可以对自定义属性进行操作。</p><p>出现问题：不容易判断是内置属性还是自定义属性</p><h4 id="设置-H5-自定义属性"><a href="#设置-H5-自定义属性" class="headerlink" title="设置 H5 自定义属性"></a>设置 H5 自定义属性</h4><p>H5 规定自定义属性 data-开头作为属性名</p><ol><li>直接在标签后给属性赋值</li></ol><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>element.setAttribute(‘属性’, ‘值’);</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#demo&quot;</span>);<br>div.setAttribute(<span class="hljs-string">&quot;data-index&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br></code></pre></td></tr></table></figure><p>这里设置为数值时可以不用字符串形式</p><h4 id="获取-H5-自定义属性"><a href="#获取-H5-自定义属性" class="headerlink" title="获取 H5 自定义属性"></a>获取 H5 自定义属性</h4><ol><li>element.getAttribute(‘属性’);和上面用法一样，不同的只是自定义属性以 data-开头</li><li>H5 新增 element.dataset.’data-后面部分’或者<br>element.dataset[‘data-后面部分’（字符串形式）]</li></ol><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#demo&quot;</span>);<br><span class="hljs-built_in">console</span>.log(div.dataset.index);<br><span class="hljs-built_in">console</span>.log(div.dataset[<span class="hljs-string">&quot;index&quot;</span>]);<br></code></pre></td></tr></table></figure><p>dataset 这个方法有兼容性问题，只有 ie11 才开始支持。（不用 ie，现在一般也不去考虑兼容性，而且用 Attribute 系列就行了）</p><h4 id="移除-H5-自定义属性"><a href="#移除-H5-自定义属性" class="headerlink" title="移除 H5 自定义属性"></a>移除 H5 自定义属性</h4><p>element.removeAttribute(‘属性’);用法类似</p><p>学习链接：<a href="https://www.bilibili.com/video/BV1Sy4y1C7ha">pink 老师前端入门</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础</title>
      <link href="/2021/08/19/HTML-yuyihuaTag/"/>
      <url>/2021/08/19/HTML-yuyihuaTag/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-基础"><a href="#HTML-基础" class="headerlink" title="HTML 基础"></a>HTML 基础</h2><p>HTML 小复习(主要是自己不常用的知识点，语义化标签)</p><p>网页三大元素：</p><p>HTML：网页的基本结构</p><p>CSS:网页的展示效果</p><p>JS：网页的功能与行为</p><h3 id="HTML-简介"><a href="#HTML-简介" class="headerlink" title="HTML 简介"></a>HTML 简介</h3><p>HTML(HyperText Markup Language, 超文本标记语言)，用于构建网页基本结构及其内容的标记语言</p><p>超文本：文本中包含指向其他文本的链接</p><p>标记语言：将文本以及文本相关的其他信息结合起来，展现出关于文档结构和数据处理细节的电脑文字编码。如 HTML、XML、KML、Markdown 等。</p><h3 id="HTML-结构"><a href="#HTML-结构" class="headerlink" title="HTML 结构"></a>HTML 结构</h3><ol><li>HTML 文档包含多个 HTML 元素,元素具备不同的特性</li><li>HTML 元素 = 开始标签 + 结束标签 + 元素内容</li></ol><p><code>&lt;p&gt;test&lt;/p&gt; </code> 3. 部分元素是单标签元素。如 img、input、br</p><p><code>&lt;img src=&quot;images/angel.gif&quot; alt=&quot;小天使&quot;&gt;</code> 4. HTML 元素标签不区分大小写,即 <code>&lt;p&gt;&lt;/p&gt; 和&lt;P&gt;&lt;/P&gt;等价</code>,但是建议小写 5. 元素可以嵌套在其他元素中间 6. 元素可以拥有属性，属性包含有元素的额外信息，如 img 标签的 alt 属性可以用于指定图片的替换文字，即当无法正常显示图片时会显示出来的文字。</p><h4 id="HTML-固定结构"><a href="#HTML-固定结构" class="headerlink" title="HTML 固定结构"></a>HTML 固定结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>&lt;div&gt;<br>&lt;p class=&quot;test&quot;&gt;123&lt;/p&gt;<br>&lt;img src=&quot;images/angel.gif&quot; alt=&quot;小天使&quot;&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br><br>1. &lt;!DOCTYPE html&gt;:HTML文档最前面的位置，加上后会按W3C的HTML5标准来解析渲染页面<br>2. &lt;html&gt;:根元素，包含整个页面的内容<br>3. &lt;head&gt;:对用户不可见，包含面向搜索引擎的关键字、页面描述、字符编码声明、CSS样式等。<br>4. &lt;body&gt;：包含能够被用户访问到的内容，包含文本、图像、视频等。<br><br></code></pre></td></tr></table></figure><h4 id="HTML-页面结构"><a href="#HTML-页面结构" class="headerlink" title="HTML 页面结构"></a>HTML 页面结构</h4><pre><code>1. &lt;meta charset=&quot;UTF-8&quot;&gt;:定义文档字符编码2. &lt;meta name=&quot;keywords&quot; content=&quot;HTML&quot;&gt;：关键字，即用搜索引擎搜索时可凭借关键字搜索到3. &lt;meta name=&quot;description&quot; content = &quot;HTML基础&quot;&gt;：页面描述</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/b7429bf908fac3ce7d6d7f42d75eb2b0.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a16f920ce9adb604a38cc097cb86dc31.png"></p><pre><code>4. &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;:视口标签，主要用于移动端5. &lt;title&gt;Document&lt;/title&gt;:页面的标题，显示在浏览器标签页上6. &lt;style&gt;:CSS样式7. &lt;meta &quot;http-equiv=&quot;expires&quot; content=&quot;31 Dec 2021&quot;&gt;：http头部，可以向浏览器发送一些信息，如网页到期时间8. &lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot; /&gt;：标签页上的图标</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/1bba743aefa9643f812700f732f1a70d.png"></p><pre><code>9. &lt;link rel=&quot;stylesheet&quot; href=&quot;css/menu.css&quot;&gt;链接到样式表10. &lt;script src=&quot;js/index.js&quot;&gt;&lt;/script&gt;可执行脚本，链接到js文件，也可直接在标签里写</code></pre><h3 id="常用元素"><a href="#常用元素" class="headerlink" title="常用元素"></a>常用元素</h3><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><ol><li>占据父元素的整行，块级元素独占一行</li><li>能容纳其他块级元素和行内元素（内联元素）</li><li>可以控制宽高、行高、边距、边框等改变尺寸</li><li>常见块级元素：div、p、h1-h6、ul、ol、dl、table、form、blockquote、address</li></ol><h4 id="行内元素（内联元素）"><a href="#行内元素（内联元素）" class="headerlink" title="行内元素（内联元素）"></a>行内元素（内联元素）</h4><ol><li>只占据对应标签边框所占据的空间，不独占一行</li><li>只能容纳文本或其他内联元素</li><li>只能通过修改水平边距、边框或行高来改变尺寸</li><li>常见行内元素有：a、span、br(br 会让后面的元素从另一行开始，但它还是属于上一行)、i、em、strong、label、code、cite</li></ol><h4 id="行内块级元素"><a href="#行内块级元素" class="headerlink" title="行内块级元素"></a>行内块级元素</h4><ol><li>元素在行内排列，不会独占一行</li><li>可以控制宽高、垂直边距、边框来改变尺寸</li><li>常见行内块级元素有：img、input、td</li></ol><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><p>根据内容的结构，选择合适的标签构建出便于开发者阅读的可维护性更高的代码结构，同时能够让机器更好地解析。</p><p>样例展示：</p><p><img src="https://pic.imgdb.cn/item/611ccd864907e2d39c689b47.jpg"></p><p>图片出处：<a href="https://blog.csdn.net/weixin_32496547/article/details/117719327">html 语义化标签 例子,HTML5 语义化</a></p><h4 id="header-标签"><a href="#header-标签" class="headerlink" title="header 标签"></a>header 标签</h4><ol><li>展示介绍性信息</li><li>通常包含一组介绍性或辅助导航的元素，如标题、Logo、搜索框、作者名称等</li><li>不能放在 footer 标签、address 标签和另一个 header 标签内部</li></ol><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;header&gt;<br>&lt;h1&gt;HTML&lt;/h1&gt;<br>&lt;p&gt; &lt;time datetime=&quot;2021-08-15&quot;&gt;&lt;/time&gt; &lt;/p&gt;<br>&lt;/header&gt;<br><br></code></pre></td></tr></table></figure><h4 id="nav-标签"><a href="#nav-标签" class="headerlink" title="nav 标签"></a>nav 标签</h4><ol><li>在当前文档中提供导航链接，如菜单、目录、索引等</li><li>用来放一些热门的链接，不常用的链接一般放在 footer 标签里，而 footer 标签放在底部</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;nav&gt;<br>&lt;ol&gt;<br>&lt;li&gt;&lt;a href=&quot;#&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;<br>&lt;li&gt;&lt;a href=&quot;#&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;<br>&lt;li&gt;&lt;a href=&quot;#&quot;&gt;JS&lt;/a&gt;&lt;/li&gt;<br>&lt;/ol&gt;<br>&lt;/nav&gt;<br><br></code></pre></td></tr></table></figure><h4 id="article-标签"><a href="#article-标签" class="headerlink" title="article 标签"></a>article 标签</h4><ol><li>定义独立的内容</li><li>内容本身必须是有意义的且必须是独立于文档的其余部分，如论坛帖子、新闻文章、博客、用户提交的评论、交互式组件等</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;article&gt;<br>  &lt;h1&gt;Internet Explorer 9&lt;/h1&gt;<br>  &lt;p&gt; Windows Internet Explorer 9(缩写为 IE9 )在2011年3月14日21:00 发布。&lt;/p&gt;<br>&lt;/article&gt;<br><br></code></pre></td></tr></table></figure><h4 id="section-标签"><a href="#section-标签" class="headerlink" title="section 标签"></a>section 标签</h4><ol><li>按主题将内容</li><li>分组，通常会有标题</li><li>section 标签通常出现在文档的大纲中</li><li>不要把 section 作为普通容器使用，例如，用来梅花片段样式时，用 div 更合适</li><li>如果元素里面是独立的内容，可以单独存在，更适合用 article</li></ol><p>如果只是针对一个块内容做样式化，article 和 section 二者并无区别。</p><p>section 元素用于对网站或应用程序中页面上的内容进行分块，section 元素的作用是对页面上的内容进行分块，或者说对文章进行分段；一个 section 元素通常由内容及其标题组成，通常不推荐为那些没有标题的内容使用 section 元素。<b style = "color: red">引用自下面的链接</b></p><p><a href="https://blog.csdn.net/qq_22855325/article/details/72877285">H5 中 section 和 article 和 div 的区别</a></p><h4 id="aside-标签"><a href="#aside-标签" class="headerlink" title="aside 标签"></a>aside 标签</h4><p>主要有两种用法</p><ol><li>包含在 article 元素中作为主要内容的附属部分，其中的内容可以是与文章有关的相关资料、名词解释等。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br><br>&lt;article&gt;<br>&lt;h1&gt;...&lt;/h1&gt;<br>&lt;p&gt;...&lt;/p&gt;<br>&lt;aside&gt;...&lt;/aside&gt;<br>&lt;/article&gt;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>在 article 元素之外作为页面或站点的附属信息部分。如侧边栏，其中的内容可以是友情链接、博客中的其他文章列表、广告等。</li></ol><h4 id="footer-标签"><a href="#footer-标签" class="headerlink" title="footer 标签"></a>footer 标签</h4><ol><li>描述了文档的底部区域</li><li>通常包含文档的作者，著作权信息，链接的使用条款，联系信息等</li></ol><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;footer&gt;<br>  &lt;p&gt;Posted by: Hege Refsnes&lt;/p&gt;<br>  &lt;p&gt;&lt;time pubdate datetime=&quot;2012-03-01&quot;&gt;&lt;/time&gt;&lt;/p&gt;<br>&lt;/footer&gt;<br><br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611ccd194907e2d39c66d6cb.jpg"></p><h3 id="picture-元素"><a href="#picture-元素" class="headerlink" title="picture 元素"></a>picture 元素</h3><p>picture 元素允许我们在不同设备上显示不同的图片，一般用于响应式</p><p>picture 元素有多个 source 元素和一个 img 元素，每个 source 元素匹配不同的设备并引用不同的图像源，如果没有匹配的，就选择 img 元素中的图像。</p><p>img 是放在最后一个 source 元素之后的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;picture&gt;<br>  &lt;source media=&quot;(min-width: 650px)&quot; srcset=&quot;demo1.jpg&quot;&gt;<br>  &lt;source media=&quot;(min-width: 465px)&quot; srcset=&quot;demo2.jpg&quot;&gt;<br>  &lt;img src=&quot;img_girl.jpg&quot;&gt;<br>&lt;/picture&gt;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome调试</title>
      <link href="/2021/08/19/Chrome-Debug/"/>
      <url>/2021/08/19/Chrome-Debug/</url>
      
        <content type="html"><![CDATA[<h1 id="Chrome-调试"><a href="#Chrome-调试" class="headerlink" title="Chrome 调试"></a>Chrome 调试</h1><h2 id="Elements-面板"><a href="#Elements-面板" class="headerlink" title="Elements 面板"></a>Elements 面板</h2><p>步骤：</p><ol><li>打开 DevTools，有多种方式可以打开，F12 快捷键，右键检查等</li><li>查看要检查的元素的样式，点击下图红框框，再点击页面元素，或者鼠标放在要检查的元素上面，右键检查</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/4df1e370963a48cd14e2cf393bcea7ce.png"> 3. 在 DevTools 下的 Styles 中增删改查样式<br><img src="https://img-blog.csdnimg.cn/img_convert/777a54a2cedae3fc23d2230d726ee09e.png"> 4. 类名操作</p><ol><li>，直接双击 Elements 下的类名，就可以进行修改类名</li><li>点击”Styles”下的”.cls”进行操作</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/ae9a435f7997e9f7fc3d8b0ab3150407.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a1e2c8ff34b23fe66c0d8aac87db6452.png"> 5. 伪类选择器样式修改： 1. 在 Elements 中找到对应元素，右键选择 Force state，再选择伪类，如:hover,即可强制变样式，而伪类样式也可在 Styles 下进行修改</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b1f6aa872015b3d5cad54bdbe382cd0f.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/bb597773891e7fe233bb48757e93924b.png"> 2. 点击”Styles”下的”:hover”进行操作</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2e98d41882aecfe32881f8223e9e95c6.png"></p><ol start="6"><li>元素样式过多时，点击”Computed”，下面会有该元素的所有样式，点击”Filter”，输入要查看的样式即可</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/8fcc8e36ddac89b59c1be509707375bc.png"></p><h2 id="Console-面板"><a href="#Console-面板" class="headerlink" title="Console 面板"></a>Console 面板</h2><p>可以通过程序在控制台中输出东西，来检查程序是否正确运行</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;script&gt;<br>var a = 10;<br>console.log(a);<br>var b = 15;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6717f32476055938b737ffb9eebbedce.png"></p><p>左侧可以选择日志等级，可以灵活运用日志等级</p><p><img src="https://img-blog.csdnimg.cn/img_convert/339bbea3bdbd0d79839a035a935f5fee.png"></p><p>console.table()用法：可以用打印对象数组，方便</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;script&gt;<br>var student = [<br>&#123;<br>name: &quot;ttt&quot;,<br>code: 111,<br>price: 11<br>&#125;,<br>&#123;<br>name: &quot;xxx&quot;,<br>code: 333,<br>price: 11<br>&#125;,<br>&#123;<br>name: &quot;yyy&quot;,<br>code: 333,<br>price: 33<br>&#125;,<br>]<br>console.log(student);<br>console.table(student);<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a7e687d571e4bbe9f47bae68c9c850ea.png"></p><p>红框部分是 console.table()，而红框上面的是 console.log()</p><p>占位符：</p><table><thead><tr><th>占位符</th><th align="center">功能</th></tr></thead><tbody><tr><td>%s</td><td align="center">字符串</td></tr><tr><td>%d</td><td align="center">整数</td></tr><tr><td>%f</td><td align="center">浮点数</td></tr><tr><td>%c</td><td align="center">css 格式字符串</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/img_convert/2493831c35c4c8f8ee85fd0c1debe9f7.png"></p><h2 id="Sources-面板"><a href="#Sources-面板" class="headerlink" title="Sources 面板"></a>Sources 面板</h2><p>主要用来调试页面中的 JavaScript</p><p>步骤：</p><ol><li>打开 Sources 面板，找到要调试的 js 代码</li><li>点击要调试部分代码左边的数字，添加断点</li><li>刷新页面</li><li>开始调试</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/dbf743b32021771b7ea0422512e7fdc7.png"></p><p>调试常用部分：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/30fb7d53b50c746b6d634b3e279eaf9a.png"></p><p>截图来源：<a href="https://blog.csdn.net/weixin_45621649/article/details/105740165">谷歌浏览器调试–Sources</a></p><p>有点点特别的：</p><ol><li>鼠标悬浮变量可以查看变量值</li><li>在程序中添加 debugger;相当于在这里设置断点</li><li>特殊断点（事件断点）添加方法和上面的不同，是在 Event Listener Breakpoints 中添加</li></ol><p><img src="https://pic.imgdb.cn/item/611c6fcc4907e2d39cccfc22.jpg"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/8bfe87e7909ee0b5643d167a6e51b86e.png"></p><h2 id="Network-面板"><a href="#Network-面板" class="headerlink" title="Network 面板"></a>Network 面板</h2><p>可以用来模拟弱网环境</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2a236c81f21ffbb64292a251b7c96327.png"></p><h2 id="Application-面板"><a href="#Application-面板" class="headerlink" title="Application 面板"></a>Application 面板</h2><p>该面板主要是记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等。</p><h2 id="小技能"><a href="#小技能" class="headerlink" title="小技能"></a>小技能</h2><p>用上诉方法选中元素（节点），在 Elements 面板右键，选择下图红框即可截图</p><p><img src="https://pic.imgdb.cn/item/611ccc5d4907e2d39c645eea.jpg"></p><p>截图效果：</p><p><img src="https://pic.imgdb.cn/item/611ccca74907e2d39c655065.jpg"></p><p>拓展：<a href="https://blog.csdn.net/qianyu6200430/article/details/107679089">脱离 996，Chrome DevTools 面板全攻略！！！（收藏）</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小试Python(二)</title>
      <link href="/2021/08/13/Python2/"/>
      <url>/2021/08/13/Python2/</url>
      
        <content type="html"><![CDATA[<h1 id="小试-Python-二"><a href="#小试-Python-二" class="headerlink" title="小试 Python(二)"></a>小试 Python(二)</h1><h2 id="if-x-in-y"><a href="#if-x-in-y" class="headerlink" title="if x in y"></a>if x in y</h2><p>统计两个数组的相同元素个数示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>num1 = [1, 2, 3, 4, 5, 6]<br>num2 = [4, 5, 6, 7, 8, 9]<br><br>count = 0<br>for i in num1:<br>if i in num2:<br>count += 1<br><br>print(count)<br><br></code></pre></td></tr></table></figure><p>上面的 if i in num2，i 是遍历 num1 数组的每一次值，通过 if i in num2 来判断 i 是否在 num2 数组中。</p><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>不要求每一行的元素个数相同</p><p>二维数组定义及遍历：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>number_grid = [<br>[1, 2, 3],<br>[4, 5, 6],<br>[1, 2],<br>[1]<br>]<br>for row in number_grid:<br>for col in row:<br>print(col)<br><br></code></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符**"></a>运算符**</h2><p>这个运算符，我目前学过的语言中并没有遇到过，它是指数运算符，它的优先级和数学上一样，是最高的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>print(3 ** 3)<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://pic.imgdb.cn/item/610774cf5132923bf8ba1c79.jpg"></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>单行注释：&nbsp;&nbsp;<code># 注释内容</code></p><p>多行注释：三个单引号包住注释部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&#x27;&#x27;&#x27;<br>注释内容<br>注释内容<br>注释内容<br>&#x27;&#x27;&#x27;<br><br></code></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>和 Java 的异常处理机制一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>try:<br>会出异常代码<br>except 监听异常类型:<br>提示出异常的代码<br><br></code></pre></td></tr></table></figure><p>可以直接在异常类型后加<code>as 变量名</code>,之后直接 print(变量名)，打印出提示信息。</p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>try:<br>value = 10 / 0<br>except ZeroDivisionError as err:<br>print(&quot;Divided by Zero&quot;)<br>print(err)<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://pic.imgdb.cn/item/6107e4d85132923bf86dab14.jpg"></p><h2 id="文件方法"><a href="#文件方法" class="headerlink" title="文件方法"></a>文件方法</h2><p>open(参数 a, 参数 b)函数,参数 a 和参数 b 都是字符串形式，参数 a 是要打开的文件的相对路径或绝对路径，参数 b 是文件打开模式。后面需要关闭文件。</p><p>参数 b:</p><ol><li>“r”:以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</li><li>“w”:打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</li><li>“r+”:打开一个文件用于读写。文件指针将会放在文件的开头。</li><li>“w+”:打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</li><li>“a”:打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</li></ol><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>readable():查看文件是否可读</p><p>read():读整个文件</p><p>readline():读一行</p><p>readlines():返回一个数组，数组的每一个元素分别是<br>文件的一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>file = open(&quot;test.txt&quot;, &quot;r&quot;)<br><br>print(file.readable())<br>print(file.read())<br><br>file.close()<br><br></code></pre></td></tr></table></figure><p>read()这里的代码会空两行，一行是 print()的一行，还有一行是 read()每打印出一行的换行。</p><p style = "color: red">read()在当前指针处开始读，而执行完一次后，指针在文件尾部，其后为空，所以之后的read()每次运行均为空。readline()、readlines()同理</p><p>readlines()</p><p>要打开的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>123<br>456<br>789<br><br></code></pre></td></tr></table></figure><p>readlines()打印出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>[&#x27;123\n&#x27;, &#x27;456\n&#x27;, &#x27;789\n&#x27;]<br><br></code></pre></td></tr></table></figure><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><ol><li>open()函数的第二个参数为”a”,在后面添加新内容，具体如参数 b 中所示。</li></ol><p>这里需要注意：没有换行符号的话会出现写的东西非常混乱。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>file = open(&quot;test.txt&quot;, &quot;a&quot;)<br><br>file.write(&quot;123&quot;)<br>file.write(&quot;123&quot;)<br><br>file.close()<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>没执行程序前：<br>123<br>456<br>789<br>执行后：<br>123<br>456<br>789123123<br><br></code></pre></td></tr></table></figure><p>应该改为<code>file.write(&quot;\n123&quot;)</code>,才可以实现每一次增加的都是单独一行而不会混乱。 2. open()函数的第二个参数为”w”。和上面的相似，不同的是：不是在文件后添加新内容，而是重写文件内容。</p><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><p>open()函数的第二个参数为”r+”或”w+”。</p><p>“r+”和”w+”相同点：</p><ol><li>文件权限都是可读可写</li><li>文件的指针放在文件的开头</li></ol><p>不同点：</p><p>“r+”不是重写文件，而是覆盖，即当原来的文件内容比写的文件内容少时，后面的内容还在，而”w+”是重写文件。</p><p>例子：</p><p>原来的内容：</p><p>123456789</p><p>写”abc”:</p><p>“r+”:变为”abc456789”</p><p>“w+”:变为”abc”</p><p>自己尝试后出现的问题:</p><ol><li>打印不出东西:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>file = open(&quot;test.txt&quot;, &quot;r+&quot;)<br><br>file.write(&quot;\n123\n456\n789&quot;)<br>print(file.read())<br><br>file.close()<br><br></code></pre></td></tr></table></figure><ol start="2"><li>每次打印的都是文件打开前的内容，且从重写文件变化成了在文件后添加内容，即和参数为”a”时一样。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>file = open(&quot;test.txt&quot;, &quot;r+&quot;)<br><br>file.write(&quot;\n123\n456\n789&quot;)<br>print(file.readlines())<br><br>file.close()<br><br></code></pre></td></tr></table></figure><p>原因：</p><p>文件指针在文件的开头，经过 write()方法对文件进行写操作后，这时候的文件指针已经来到了文件的尾部。</p><p>read()在当前指针处开始读，而当前指针在文件尾部，其后为空，所以打印文件为空（两行空行）。</p><p>readlines()时回到文件开头处开始读。而刚刚写入的还没有保存，所以只能读出写入操作之前的内容。写的时候在文件尾部写。<b style = "color:red">未解决疑问：为什么 write()搭配 readlines()后，写文件时是在文件尾部写，而搭配 read()时是在文件开头写。</b></p><p>上面问题解决方案：使用 seek()函数，让文件指针指向需要的位置。seek(0)即指向文件开头。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>file = open(&quot;test.txt&quot;, &quot;r+&quot;)<br><br>file.write(&quot;\n123\n456\n789&quot;)<br>file.seek(0)<br>print(file.read())  //print(file.readlines())<br><br>file.close()<br><br></code></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>def __init__(self, 参数a): # 注意下划线都是两条,第一个参数不需要传参，相当于其它语言的&quot;this&quot;<br><br></code></pre></td></tr></table></figure><p>例子：</p><p>其中，类单独放在了另一个 py 文件中。</p><p>Student 类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>class Student:<br><br>def __init__(self, name, major, gpa):<br>self.name = name<br>self.major = major<br>self.gpa = gpa<br><br>def on_honor_roll(self):<br>if self.gpa &gt;= 3.5:<br>return True<br>else:<br>return False<br><br></code></pre></td></tr></table></figure><p>main 类:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>from Student import Student<br><br>student1 = Student(&quot;Jim&quot;, &quot;Business&quot;, 3.1)<br>student2 = Student(&quot;Pam&quot;, &quot;Business&quot;, 3.8)<br><br>print(student1.on_honor_roll())<br>print(student2.gpa)<br><br></code></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>class 子类(父类):<br>子类方法，可以重写覆盖父类的方法，也可以增添方法<br><br></code></pre></td></tr></table></figure><p>实例：</p><p>Chef 类(父类):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">class Chef:<br><br>def make_chicken(self):<br>print(&quot;The chef makes a chicken&quot;)<br><br>def make_salad(self):<br>print(&quot;The chef makes salad&quot;)<br><br>def make_special_dish(self):<br>print(&quot;The chef makes bbq ribs&quot;)<br><br></code></pre></td></tr></table></figure><p>ChineseChef（子类）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>from Chef import Chef<br><br>class ChineseChef(Chef):<br><br>def make_special_dish(self):<br>print(&quot;The chef makes orange chicken&quot;)<br><br>def make_fried_rice(self):<br>print(&quot;The chef makes fried rice&quot;)<br><br></code></pre></td></tr></table></figure><p>main 类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>from Chef import Chef<br>from ChineseChef import ChineseChef<br><br>chef = Chef()<br>chef.make_chicken()<br>chef.make_special_dish()<br><br>print()<br><br>chinesechef = ChineseChef()<br>chinesechef.make_chicken()<br>chinesechef.make_special_dish()<br>chinesechef.make_fried_rice()<br><br><br></code></pre></td></tr></table></figure><h2 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h2><h3 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h3><ol><li>右键点击”计算机”，然后点击”属性”</li><li>点击”高级系统设置”</li></ol><p><img src="https://pic.imgdb.cn/item/610f67525132923bf8ee2b60.jpg"> 3. 点击”环境变量”</p><p><img src="https://pic.imgdb.cn/item/610f67dc5132923bf8ef0326.jpg"> 4. 选中”用户变量的 Path”,点击”编辑”</p><p><img src="https://pic.imgdb.cn/item/610f68ca5132923bf8f04bda.jpg"> 5. 点击”新建”,添加 python 安装路径</p><p><img src="https://pic.imgdb.cn/item/610f69a15132923bf8f17825.jpg"> 6. 之后一直点击”确定”即可</p><h3 id="cmd-写-Python"><a href="#cmd-写-Python" class="headerlink" title="cmd 写 Python"></a>cmd 写 Python</h3><ol><li>win + r, 输入”cmd”</li><li>输入”python”, 变成下图所示</li></ol><p><img src="https://pic.imgdb.cn/item/610f6a4e5132923bf8f270ec.jpg"> 3. 写 python 代码，如下图所示</p><p><img src="https://pic.imgdb.cn/item/610f66855132923bf8ed19c6.jpg"></p><p>学习:Youtube：Mike Dane</p><p>文件读写部分参考：<a href="https://blog.csdn.net/qq_38106472/article/details/86305846">Python 文件进行写操作后立即读出的结果、原因分析、解决方法</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小试Python(一)</title>
      <link href="/2021/08/04/Python1/"/>
      <url>/2021/08/04/Python1/</url>
      
        <content type="html"><![CDATA[<h1 id="小试-Python-一"><a href="#小试-Python-一" class="headerlink" title="小试 Python(一)"></a>小试 Python(一)</h1><p>初步学习一下 Python。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Python 是一种解释型、面向对象、动态数据类型的高级程序语言。</p><p>官方宣布，2020 年 1 月 1 日，停止 Python2 的更新。</p><p>Python2.7 是最后一个 Python2.x 版本。</p><h2 id="第一个-Python-程序"><a href="#第一个-Python-程序" class="headerlink" title="第一个 Python 程序"></a>第一个 Python 程序</h2><p>Python 不像 C++、Java 一样，需要有主函数,语句后也不需要分号，函数、条件控制、类等不需要有”{}”包住，但需要有缩进，有缩进相当于加上”{}”，赋值语句缩进会出错。</p><p><code>print(&quot;Hello World!&quot;)</code><br><img src="https://img-blog.csdnimg.cn/img_convert/667c9c7a38af5c81e762945c00848b4c.png"></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>和其他语言相似，定义时不需要强调类型，直接赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>name = &quot;John&quot;<br>num1 = 10<br>num2 = 20<br>print(name + &quot;:&quot; + str(num1 + num2))<br><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/e1fbc4554af2acc8b5efddfed08689b0.png"></p><p>另外，Python 中没有自增”i++”和自减”i–”,但存在”i += 1”</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入的默认都是字符串，需要整型、浮点型需转换，<br>字符串可直接用”+”连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">num1 = input(&quot;Enter first number: &quot;)<br>num2 = input(&quot;Enter second number: &quot;)<br>result = int(num1) + int(num2)<br>print(&quot;Result is: &quot; + str(result))<br><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d059987cff8a4e5c95d95705bbce9a9c.png"></p><h2 id="数组-列表"><a href="#数组-列表" class="headerlink" title="数组(列表)"></a>数组(列表)</h2><p>下标可以是负数，-1 代表最后一个元素，-2 代表倒数第二个…，正数和负数都不可以超出数组范围</p><p>取部分：<br>num[1:]:输出下标 1 及下标比 1 大的所有数组元素<br>num[1:4]:输出下标范围为[1, 4)的元素，注意：不包括 4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">num = [1, 2, 3, 4, 5, 6]<br>print(num)<br>print(num[1])<br>print(num[-2])<br>print(num[1:])<br>print(num[1:4])<br>print(len(num))<br><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/eac7ea7a580a0494b258e92039c7a6e3.png"></p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>和数组类似，元组的元素不能修改，使用小括号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tuples = (1, 2, 3, 4, 5, 6)<br>print(tuples)<br>print(tuples[1])<br>print(tuples[1:])<br>print(tuples[1:4])<br><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2b5359646b9644e34ea781f311441d91.png"></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>关键字 def 开头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>def add(num1, num2):<br>result = num1 + num2<br>return result<br>def display():<br>print(&quot;Hello World!&quot;)<br>print(add(1, 1))<br>display()<br><br></code></pre></td></tr></table></figure><h2 id="条件控制（if）"><a href="#条件控制（if）" class="headerlink" title="条件控制（if）"></a>条件控制（if）</h2><p>Python 中没有”&amp;&amp;”和”||”，也没有”if(!0)”这种用法，分别有类似的逻辑运算符”and”，”or”，”not”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>test = True<br>if test and False:<br>   print(1)<br>elif False or 0:<br>   print(2)<br>elif not(0):<br>   print(3)<br>else:<br>   print(4)<br><br></code></pre></td></tr></table></figure><p>结果：细品</p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典的每个键值对 key=&gt;value 用冒号分割，整个字典包括在花括号中，可存储热恩义类型对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>dictionary = &#123;<br>1: &quot;one&quot;,<br>2: &quot;two&quot;,<br>&quot;o&quot;: 1,<br>&quot;t&quot;:&quot;test&quot;<br>&#125;<br>print(dictionary[1])<br>print(dictionary[&quot;t&quot;])<br>print(dictionary.get(&quot;o&quot;))<br>print()<br><br>print(dictionary.get(5))  # 用get()找不到不会报错，只有一个参数时，找不到返回&quot;None&quot;<br>print(dictionary.get(5, &quot;You can&#x27;t find it&quot;)) # 两个参数时，找不到返回第二个参数<br><br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60fcece85132923bf8ddc485.jpg"></p><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><p>和其他语言基本相同原理</p><p>示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>i = 1<br>while i &lt;= 10:<br>print(i)<br>i += 1<br><br></code></pre></td></tr></table></figure><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p>相当于 Java 的增强 for 循环。</p><h3 id="遍历数组示例："><a href="#遍历数组示例：" class="headerlink" title="遍历数组示例："></a>遍历数组示例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>number = [1, 2, 3, 4, 5, 7]<br>for n in number:<br>print(n)<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://pic.imgdb.cn/item/610771125132923bf8aebc5b.jpg"></p><h3 id="搭配-range-函数"><a href="#搭配-range-函数" class="headerlink" title="搭配 range()函数"></a>搭配 range()函数</h3><ol><li>只有一个参数 n：遍历[0,n)，不包括 n</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>for index in range(6):<br>print(index)<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://pic.imgdb.cn/item/610772165132923bf8b1b40d.jpg"> 2. 有两个参数，第一个参数为 m,第二个参数为 n:遍历[m,n)。</p><p>使用 range()函数遍历数组：先用 len()函数得到数组长度，然后用以上方法可以得到数组下标[0,n)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>number = [1, 2, 3, 4, 5, 7]<br>for index in range(len(number)):<br>print(number[index])<br><br></code></pre></td></tr></table></figure><p>结果和上面遍历数组的方法一样。</p><p>学习:Youtube<br>Mike Dane</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex布局</title>
      <link href="/2021/07/29/Flex-Layout/"/>
      <url>/2021/07/29/Flex-Layout/</url>
      
        <content type="html"><![CDATA[<h1 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Flex 是 Flexible Box 的缩写， 用来为盒状模型提供最大的灵活性，也被称为”伸缩布局”，”弹性布局”，”伸缩盒布局”，”弹性盒布局”。</p><p>任何容器都可以指定为 Flex 布局（包括行内元素）<br>设为 Flex 布局后，子元素的 float、clear 和 vertical-align 属性将失效，Flex 布局可以实现垂直居中</p><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目(flex item), 简称”项目”。</p><h2 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h2><h3 id="flex-direction-属性"><a href="#flex-direction-属性" class="headerlink" title="flex-direction 属性"></a>flex-direction 属性</h3><p>flex-direction 属性决定主轴的方向，即项目的排列方向。</p><ol><li>row（默认值）：主轴为水平方向，起点在左边</li><li>row-reverse: 主轴为水平方向，起点在右边</li><li>column：主轴为垂直方向，起点在上面</li><li>column-reverse: 主轴为垂直方向，起点在下面<br><img src="https://img-blog.csdnimg.cn/img_convert/58e1e22a275d792c9e8d15c45f48169c.png"></li></ol><p>例子：<br>row:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;zh-CN&quot;&gt;<br><br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>&lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;style&gt;<br>div &#123;<br>display: flex;<br>/*设置为flex布局*/<br>width: 60%;<br>height: 300px;<br>background-color: pink;<br>margin: 20px auto;<br>flex-direction: row;<br>/*设置主轴为水平方向，起点在左边*/<br>&#125;<br><br>span &#123;<br>width: 20%;<br>height: 150px;<br>background-color: purple;<br>margin-right: 5px;<br>color: #fff;<br>&#125;<br>&lt;/style&gt;<br><br>&lt;body&gt;<br>&lt;div&gt;<br>&lt;span&gt;1&lt;/span&gt;<br>&lt;span&gt;2&lt;/span&gt;<br>&lt;span&gt;3&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/img_convert/3c5a1ad064ff2032197d0028b5146ab9.png"><br>row-reverse:</p><p><code>flex-direction: row-reverse;</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5782ba455662414b5213b2b244c1d9fe.png"></p><p>column：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;zh-CN&quot;&gt;<br><br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>&lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;style&gt;<br>div &#123;<br>display: flex;<br>/*设置为flex布局*/<br>width: 60%;<br>height: 300px;<br>background-color: pink;<br>margin: 20px auto;<br>flex-direction: column;<br>/*设置主轴为垂直方向，起点在上面*/<br>&#125;<br><br>span &#123;<br>width: 20%;<br>height: 150px; /*这里3个span的高度总和大于父元素的300px，但结果会和100px相同*/<br>background-color: purple;<br>margin-right: 5px;<br>color: #fff;<br>&#125;<br>&lt;/style&gt;<br><br>&lt;body&gt;<br>&lt;div&gt;<br>&lt;span&gt;1&lt;/span&gt;<br>&lt;span&gt;2&lt;/span&gt;<br>&lt;span&gt;3&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/img_convert/f86caf03dd32db1af42dd66e86d414cb.png"></p><h3 id="justify-content-属性"><a href="#justify-content-属性" class="headerlink" title="justify-content 属性"></a>justify-content 属性</h3><p>justify-content 属性定义了项目在主轴上的排列方式</p><ol><li>flex-start(默认值)：左对齐</li><li>flex-end：右对齐</li><li>center：居中</li><li>space-between：先两端对齐，之后剩下的项目平分剩余空间。项目之间的间隔相等</li><li>space-around：所有项目平分剩余空间。每个项目两侧的距离相等。项目之间的距离比项目与边框的间隔大一倍。<br><img src="https://img-blog.csdnimg.cn/img_convert/3c225d5d577c61e784e5bfe873c8a97e.png"></li></ol><h3 id="flex-wrap-属性"><a href="#flex-wrap-属性" class="headerlink" title="flex-wrap 属性"></a>flex-wrap 属性</h3><p>flex-wrap 属性定义如果一条轴线排不下所有项目，是否换行</p><ol><li>nowrap(默认)：不换行</li><li>wrap：换行</li></ol><p>nowrap:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br> &lt;!DOCTYPE html&gt;<br> &lt;html lang=&quot;zh-CN&quot;&gt;<br><br> &lt;head&gt;<br> &lt;meta charset=&quot;UTF-8&quot;&gt;<br> &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br> &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br> &lt;title&gt;Document&lt;/title&gt;<br> &lt;/head&gt;<br> &lt;style&gt;<br> div &#123;<br> display: flex;<br> width: 60%;<br> height: 400px;<br> background-color: pink;<br> margin: 20px auto;<br> flex-wrap: nowrap;<br>/*设置为不换行，默认也是不换行*/<br> &#125;<br><br> span &#123;<br> width: 20%;<br> height: 150px;<br> background-color: purple;<br> margin-right: 5px;<br> color: #fff;<br> &#125;<br><br>     div span:nth-child(2n) &#123;<br> width: 30%;<br> &#125;<br> &lt;/style&gt;<br><br> &lt;body&gt;<br> &lt;div&gt;<br> &lt;span&gt;1&lt;/span&gt;<br> &lt;span&gt;2&lt;/span&gt;<br> &lt;span&gt;3&lt;/span&gt;<br> &lt;span&gt;4&lt;/span&gt;<br> &lt;span&gt;5&lt;/span&gt;<br> &lt;span&gt;6&lt;/span&gt;<br> &lt;/div&gt;<br> &lt;/body&gt;<br><br> &lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/img_convert/5c9b13a07030945ad7261b8e322d88cb.png"></p><p>wrap:</p><p>把上面的代码带注释部分变成<code>flex-wrap: wrap;</code></p><p>结果：<br><img src="https://img-blog.csdnimg.cn/img_convert/015f30241ea5753cec65f703f4a6761e.png"></p><h3 id="align-items-属性"><a href="#align-items-属性" class="headerlink" title="align-items 属性"></a>align-items 属性</h3><p>align-items 属性定义侧轴上的子元素排列方式（单行）</p><ol><li>flex-start: 侧轴起点对齐</li></ol><p><font color = "red">当主轴为水平方向时，侧轴为垂直方向，起点为上边，终点为下边；当主轴为垂直方向时，侧轴为水平方向，起点为左边，终点为右边</font> 2. flex-end:侧轴终点对齐 3. center:侧轴中点对齐（垂直居中） 4. stretch(默认值):如果项目没有设置高度或者高度设置为 auto，则占满整个容器的高度，主轴为垂直方向时，则换宽度 5. baseline:项目的第一行文字的基线对齐</p><p><img src="https://img-blog.csdnimg.cn/img_convert/80dd46979fd8c1b508fea98b988067d3.png"></p><h3 id="align-content-属性"><a href="#align-content-属性" class="headerlink" title="align-content 属性"></a>align-content 属性</h3><p>align-content 属性定义侧轴上的子元素排列方式（多行）</p><p>只能用于项目出现换行的情况，<font color = "red">在单行下没有效果</font></p><ol><li>flex-start: 侧轴起点对齐</li><li>flex-end:侧轴终点对齐</li><li>center:侧轴中点对齐（垂直居中）</li><li>space-between:子项在侧轴先分布在两头，再平分剩余空间。</li><li>space-around:子项在侧轴平分剩余空间。</li><li>stretch(默认值)：设置子项元素平分父元素高度</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/697fc83fd36dc4c834925369dd8e852f.png"></p><p>space-between:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;zh-CN&quot;&gt;<br><br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>&lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;style&gt;<br>div &#123;<br>display: flex;<br>width: 60%;<br>height: 500px;<br>background-color: pink;<br>margin: 20px auto;<br>flex-direction: row;<br>align-content: space-between;<br>flex-wrap: wrap;<br>&#125;<br><br>span &#123;<br>width: 20%;<br>height: 100px;<br>background-color: purple;<br>margin: 10px;<br>color: #fff;<br>&#125;<br><br>div span:nth-child(2n) &#123;<br>width: 40%;<br>&#125;<br>&lt;/style&gt;<br><br>&lt;body&gt;<br>&lt;div&gt;<br>&lt;span&gt;1&lt;/span&gt;<br>&lt;span&gt;2&lt;/span&gt;<br>&lt;span&gt;3&lt;/span&gt;<br>&lt;span&gt;4&lt;/span&gt;<br>&lt;span&gt;5&lt;/span&gt;<br>&lt;span&gt;6&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/img_convert/a290505b6b083e25085735ec1407cd82.png"></p><p>space-around:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;zh-CN&quot;&gt;<br><br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>&lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;style&gt;<br>div &#123;<br>display: flex;<br>width: 60%;<br>height: 500px;<br>background-color: pink;<br>margin: 20px auto;<br>flex-direction: row;<br>align-content: space-around;<br>flex-wrap: wrap;<br>&#125;<br><br>span &#123;<br>width: 20%;<br>height: 100px;<br>background-color: purple;<br>margin: 10px;<br>color: #fff;<br>&#125;<br><br>div span:nth-child(2n) &#123;<br>width: 40%;<br>&#125;<br>&lt;/style&gt;<br><br>&lt;body&gt;<br>&lt;div&gt;<br>&lt;span&gt;1&lt;/span&gt;<br>&lt;span&gt;2&lt;/span&gt;<br>&lt;span&gt;3&lt;/span&gt;<br>&lt;span&gt;4&lt;/span&gt;<br>&lt;span&gt;5&lt;/span&gt;<br>&lt;span&gt;6&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/img_convert/81517b72bf167f6617c9025f6b658781.png"></p><h3 id="flex-flow-属性"><a href="#flex-flow-属性" class="headerlink" title="flex-flow 属性"></a>flex-flow 属性</h3><p>flex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap。<code>flex-flow: row nowrap;</code></p><h2 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h2><h3 id="flex-属性"><a href="#flex-属性" class="headerlink" title="flex 属性"></a>flex 属性</h3><p>flex 属性定义子项目分配剩余空间，用 flex 来表示占多少份数，可以是百分比形式，其中百分比是相对与容器（即父级）来说的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;zh-CN&quot;&gt;<br><br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>&lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;style&gt;<br>div &#123;<br>display: flex;<br>width: 60%;<br>height: 130px;<br>background-color: pink;<br>margin: 20px auto;<br>flex-wrap: wrap;<br>&#125;<br><br>div p &#123;<br>color: #fff;<br>&#125;<br><br>div p:nth-child(2n+1) &#123;<br>width: 100px;<br>height: 100px;<br>background-color: purple;<br>&#125;<br><br>div p:nth-child(2) &#123;<br>flex: 1;<br>background-color: skyblue;<br>&#125;<br>&lt;/style&gt;<br><br>&lt;body&gt;<br>&lt;div&gt;<br>&lt;p&gt;1&lt;/p&gt;<br>&lt;p&gt;2&lt;/p&gt;<br>&lt;p&gt;3&lt;/p&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/img_convert/a89d9465690e76e640a6e4cf33fe34ec.png"></p><p>上图分析：紫色项目有宽度，蓝色项目没有宽度，蓝色项目添加了<code>flex:1</code>,所以蓝色项目占满剩余空间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;zh-CN&quot;&gt;<br><br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>&lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;style&gt;<br>div &#123;<br>display: flex;<br>width: 60%;<br>height: 120px;<br>background-color: pink;<br>margin: 20px auto;<br>flex-wrap: wrap;<br>&#125;<br><br>span &#123;<br>height: 100px;<br>background-color: purple;<br>margin: 10px;<br>color: #fff;<br>flex: 1;<br>&#125;<br><br>div span:nth-child(2n) &#123;<br>flex: 2;<br>background-color: skyblue;<br>&#125;<br>&lt;/style&gt;<br><br>&lt;body&gt;<br>&lt;div&gt;<br>&lt;span&gt;1&lt;/span&gt;<br>&lt;span&gt;2&lt;/span&gt;<br>&lt;span&gt;3&lt;/span&gt;<br>&lt;span&gt;4&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/img_convert/536af386fda8e82d53264ee11873cfbf.png"></p><p>分析：</p><p>子项目都没有宽度，最后按 flex 的占比分配剩余空间，如第一个紫色项目占剩余空间 1/（1 + 2 + 1 + 2） = 1 /6</p><h3 id="align-self-属性"><a href="#align-self-属性" class="headerlink" title="align-self 属性"></a>align-self 属性</h3><p>align-self 属性控制子项自己在侧轴上的排列方式，允许单个项目有与其他项目不一样的排列方式，可覆盖 align-items 属性。默认值为 auto,表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;zh-CN&quot;&gt;<br><br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>&lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;style&gt;<br>div &#123;<br>display: flex;<br>width: 60%;<br>height: 300px;<br>background-color: pink;<br>margin: 20px auto;<br>align-items: flex-start;<br>&#125;<br><br>span &#123;<br>width: 20%;<br>height: 100px;<br>background-color: purple;<br>margin: 10px;<br>color: #fff;<br>&#125;<br><br>div span:nth-child(2n) &#123;<br>align-self: flex-end;<br>&#125;<br>&lt;/style&gt;<br><br>&lt;body&gt;<br>&lt;div&gt;<br>&lt;span&gt;1&lt;/span&gt;<br>&lt;span&gt;2&lt;/span&gt;<br>&lt;span&gt;3&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/img_convert/75646d1194776e1936373798a0a36ea5.png"></p><h3 id="order-属性"><a href="#order-属性" class="headerlink" title="order 属性"></a>order 属性</h3><p>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认值为 0，可以为负数。<code>order: -1;</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a7f50531354de0d62e94d476fbcd4803.png"></p><h3 id="flex-shrink-属性"><a href="#flex-shrink-属性" class="headerlink" title="flex-shrink 属性"></a>flex-shrink 属性</h3><p>flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空间不足时，该项目将缩小。<code>flex-shrink: 1;</code></p><p>如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的 flex-shrink 属性为 0， 其他项目都为 1，则当空间不足时，前者不缩小。</p><p>flex-shrink 属性是导致当容器的 flex-wrap 属性为 nowrap 时，所有项目不会换行的原因。</p><p>参考链接：<a><a href="https://www.runoob.com/w3cnote/flex-grammar.html">https://www.runoob.com/w3cnote/flex-grammar.html</a></a></p><p>pink 老师前端入门教程</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github.io出现的问题及解决方案</title>
      <link href="/2021/07/21/Blog-problem/"/>
      <url>/2021/07/21/Blog-problem/</url>
      
        <content type="html"><![CDATA[<h1 id="github-io-遇到的问题"><a href="#github-io-遇到的问题" class="headerlink" title="github.io 遇到的问题"></a>github.io 遇到的问题</h1><h2 id="1-你的连接不是专用连接"><a href="#1-你的连接不是专用连接" class="headerlink" title="1. 你的连接不是专用连接"></a>1. 你的连接不是专用连接</h2><p>放假回家后打开自己的博客，发现无法打开博客，一开始以为是调样式时不小心搞坏了，打开别人的 githunb.io 博客发现都会出问题，并且用手机不连接 wifi 可以正常打开<br>解决办法：</p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><ol><li>首先调整键盘为英文；</li><li>鼠标点击当前页面任意位置，然后输入 thisisunsafe<br>输入完成后页面会自动刷新<br>注意是直接输入，不要地址栏输入<br>这个方法和输入的暗示一样，是方便但不安全的，而且也会定期更改，从 badidea 更改为 thisisunsafe</li></ol><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><ol><li>进入<a>chrome://net-internals/#hsts</a>页面</li><li>点击 Domain Security Policy</li><li>在下图区域输入域名，点击”Delete”按钮<br><img src="https://img-blog.csdnimg.cn/img_convert/83bcac2264e44f0a7a69b89f7d9ebc3d.png"></li><li>在下图区域输入域名，点击”Query”按钮，结果应为”Not found”.<br><img src="https://img-blog.csdnimg.cn/img_convert/900c6ee399ec5bb42f9cb6f6f67920aa.png"></li></ol><h2 id="2-访问-xxx-github-io-被拒绝"><a href="#2-访问-xxx-github-io-被拒绝" class="headerlink" title="2. 访问 xxx.github.io 被拒绝"></a>2. 访问 xxx.github.io 被拒绝</h2><p>原因：国内运营商 DNS 污染，域名指向不正确的 ip 地址<br>拓展：DNS(Domain Name System) 域名系统<br>在网络上访问网站，通过 DNS 服务器，把域名转换成 ip 地址<br>（1）系统会先查找本地的 hosts 文件，确认是否有与域名对应的 ip 地址，若有，则直接访问 ip 地址对应的域名服务器<br>（2）本地 hosts 文件没有与域名对应的 ip 地址，向已知的 DNS 服务器提出域名解析<br><a href="https://www.cnblogs.com/yihr/p/9720715.html">更多</a></p><h3 id="方法-1："><a href="#方法-1：" class="headerlink" title="方法 1："></a>方法 1：</h3><ol><li>查找 ip 地址，通过<a><a href="http://tool.chinaz.com/dns">http://tool.chinaz.com/dns</a></a>,复制 ip 地址<br><img src="https://img-blog.csdnimg.cn/img_convert/cdb1543eb19b805bb91d38356fd8a713.png"></li><li>打开 hosts 文件，路径：C:\Windows\System32\drivers\etc<br>按下图示例把 ip 地址和域名输入后保存，需要管理员权限<br><img src="https://img-blog.csdnimg.cn/img_convert/04229be8d57810ba531f3072bd6650cb.png"><br><img src="https://img-blog.csdnimg.cn/img_convert/a8d3540d896b6427d57061d8d088b2f1.png"></li><li>重新访问，正常<br>注意：该方法只能使对应的域名可以正常访问，其他没有添加进去 hosts 文件的域名还是会出现问题</li></ol><h3 id="方法-2："><a href="#方法-2：" class="headerlink" title="方法 2："></a>方法 2：</h3><p>使用<a href="https://gitee.com/docmirror/dev-sidecar">dev-sidecar 工具</a><br>功能：</p><ol><li>dns 优选</li><li>github 加速</li><li>npm 加速<br>等等<br>可以实现解决所有的访问 github.io 被拒绝的问题，非常好用的工具</li></ol><h3 id="方法-3："><a href="#方法-3：" class="headerlink" title="方法 3："></a>方法 3：</h3><p>手动修改 DNS，尝试过很多个 DNS 解析服务，只有首选 DNS 服务器设置为 114.114.114.114，备用设置为 208.67.222.222 成功了一个下午，之后莫名打回原形， 使用<a href="https://www.sordum.org/7952/dns-jumper-v2-2/">DNS jupmper</a>一键设置也没有成功，猜测：DNS 服务器不稳定，未找到解决方案。</p><p>参考链接：<a><a href="https://www.itranslater.com/qa/details/2582179179139695616">https://www.itranslater.com/qa/details/2582179179139695616</a></a><br><a><a href="https://blog.csdn.net/milk_aquarium/article/details/113766559">https://blog.csdn.net/milk_aquarium/article/details/113766559</a></a></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Pages + Hexo - 搭建博客</title>
      <link href="/2021/07/14/Blog/"/>
      <url>/2021/07/14/Blog/</url>
      
        <content type="html"><![CDATA[<h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><p>安装<a href="http://git-scm.com/">git</a><br>安装<a href="https://nodejs.org/en/">Node.js</a></p><h2 id="2-GitHub-Pages"><a href="#2-GitHub-Pages" class="headerlink" title="2. GitHub Pages"></a>2. GitHub Pages</h2><pre><code>1. 注册GitHub2. 登录GitHub3. 新建仓库</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/c12733a9a85d5898fd728ddc77b792bb.png" alt="Snipaste_2021-06-21_12-08-29.png"> 4. 配置 SSH-Key<br><a href="https://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html">参考步骤</a><br><a href="https://blog.csdn.net/qq_36992688/article/details/102665783">扩展：git 配置多个 ssh-key</a></p><h2 id="3-安装-Hexo"><a href="#3-安装-Hexo" class="headerlink" title="3. 安装 Hexo"></a>3. 安装 Hexo</h2><pre><code>1. 创建文件夹并进入2. git Bash3. 执行命令</code></pre><p><code>npm install -g hexo-cli</code> 4. 初始化框架<br><code>hexo init blog</code><br>blog 是装博客的文件夹 5. 进入 blog 文件夹<br><code>cd blog</code> 6. 执行<br><code>npm install</code> 7. 执行<br><code>hexo server</code> 或者 <code>hexo s</code><br>成功的话，能在 <a href="http://localhost:4000，">http://localhost:4000，</a> 能看到下图页面<br><img src="https://img-blog.csdnimg.cn/img_convert/949b947b54217805f7289c28f243f565.png" alt="blog.png"></p><h2 id="4-关联-GitHub"><a href="#4-关联-GitHub" class="headerlink" title="4. 关联 GitHub"></a>4. 关联 GitHub</h2><ol><li>修改配置文件<br>找到本地 blog 文件夹下_config.yml，打开后滑到最后， 修改成下图样子, 冒号后都要有空格</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/1502530d461a1980f83689f85658853d.png" alt="1.png"><br><br><font color = "#dd001b">注意：2020 年 10 月 1 日起，所有”master”分支都改名为”main”，而网上的教程大部分是”master”</font><br>题外话：原因：使这家公司摆脱任何提及奴隶制的印象，换成不会有误解的包容性术语 2. blog 目录下执行<br><code>npm install hexo-deployer-git --save</code> 3. 执行<code>hexo generate</code> 和 <code>hexo deploy</code>指令或者<br><code>hexo g -d</code>指令<br>其中，<code>hexo generate</code> 作用是生成静态文件<br><code>hexo deploy</code> 作用是实现部署到远程站点 4. 发布新帖子<br><code>hexo new &quot;My New Post</code><br>会在 blog\source_posts 下创建新文件 My-New-Post.md 5. 执行<code>hexo g</code><br>可以在 blog\source_posts\日期文件夹中发现生成了新文件夹 My-New-Post 6. 执行<code>hexo d</code><br><img src="https://img-blog.csdnimg.cn/img_convert/f5c543454c7ee0c674e5334a1cf162ba.png" alt="image.png"></p><h2 id="5-主题"><a href="#5-主题" class="headerlink" title="5. 主题"></a>5. 主题</h2><ol><li>下载主题<a href="https://hexo.io/themes/">hexo 主题</a></li><li>安装教程可查看对应主题的安装教程</li><li>修改主题文件夹的配置文件（_config.yml）添加想要的功能和取消不想要的功能</li><li>修改样式<br>① 电脑端浏览器打开博客，右键选择检查<br>② 点击下图红框框，记录好想修改的部分的 class 名、id 名，用 vscode 打开 theme 文件夹中的 css 文件夹的 css 文件，ctrl+f 查找 class 名、id 名，修改；<br><img src="https://img-blog.csdnimg.cn/img_convert/a7f6be8ce7c7197b161716832cde7c7f.png" alt="hexo_theme.png"><br>③ 搜索不到：打开空 css 文件或者直接在原 css 文件最下面添加，修改后可能没有变化，可以在后面添加!important 覆盖原本的样式（这个方法有可能会有问题，暂未遇到）</li></ol><p>参考链接：<a href="https://blog.csdn.net/guoxiaorui666/article/details/99623023">https://blog.csdn.net/guoxiaorui666/article/details/99623023</a></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
