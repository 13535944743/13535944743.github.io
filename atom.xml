<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赤蓝紫</title>
  
  <subtitle>赤蓝紫</subtitle>
  <link href="https://www.clzczh.top/atom.xml" rel="self"/>
  
  <link href="https://www.clzczh.top/"/>
  <updated>2022-04-12T00:48:39.947Z</updated>
  <id>https://www.clzczh.top/</id>
  
  <author>
    <name>赤蓝紫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一道问题引起的重学预编译</title>
    <link href="https://www.clzczh.top/2022/04/12/js-precompile/"/>
    <id>https://www.clzczh.top/2022/04/12/js-precompile/</id>
    <published>2022-04-12T00:47:43.000Z</published>
    <updated>2022-04-12T00:48:39.947Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一道问题引起的重学预编译"><a href="#一道问题引起的重学预编译" class="headerlink" title="一道问题引起的重学预编译"></a>一道问题引起的重学预编译</h1><blockquote><p>前言：变量提升与函数提升本来是我个人觉得没必要写笔记来复习的知识。因为这部分看的面试题都能做对，就是说确实学的挺扎实的。直到遇到了下面这道题。</p></blockquote><h2 id="前情回顾"><a href="#前情回顾" class="headerlink" title="前情回顾"></a>前情回顾</h2><p>参加掘金日新计划时，在群里看到的问题(改造了下)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-built_in">console</span>.log(a)<br>  a = <span class="hljs-number">111</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123; &#125;<br>  a = <span class="hljs-number">222</span><br>  <span class="hljs-built_in">console</span>.log(a)<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(a)<br></code></pre></td></tr></table></figure><h2 id="基础知识回顾"><a href="#基础知识回顾" class="headerlink" title="基础知识回顾"></a>基础知识回顾</h2><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>实际上，变量的提升其实算是JS的诟病了，所以es6出来了<code> let</code>和<code> const</code>之后，都是推荐使用<code> let</code>和<code> const</code>了。</p><p>在执行函数前，会先预编译，把<b style="color: red">用<code> var</code>声明的变量的声明提升到前面</b>。</p><p>首先，假如我们只有一个语句<code> console.log(a)</code>，这样子会直接报错<code> a is not defined</code>。</p><p>如果只声明变量，但是不赋值，则会得到<code> undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a;<br><span class="hljs-built_in">console</span>.log(a)<br></code></pre></td></tr></table></figure><p>那么，如果先打印<code> a</code>，之后再定义<code> a</code>呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(a)<br><span class="hljs-keyword">var</span> a<br></code></pre></td></tr></table></figure><p>首先呢？JS是单线程的，所以JS理论上是从上到下执行代码的，所以按理来说会报错<code> a is not defined</code>。</p><p>但是，实际上在执行代码前，会先进行一次预编译，把<code> var变量</code>的声明提升到前面。</p><p>所以上面的代码实际上也相当于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a<br><span class="hljs-built_in">console</span>.log(a)<br></code></pre></td></tr></table></figure><p><b style="color: red">变量提升只会把变量的声明提升到前面，赋值则不会提升到前面。</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(a)<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span><br><span class="hljs-built_in">console</span>.log(a)<br></code></pre></td></tr></table></figure><p>会先输出<code> undefined</code>，然后输出<code> 123</code></p><p>预编译后的代码如下，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a<br><span class="hljs-built_in">console</span>.log(a)<br>a = <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><p><b style="color: red">函数声明整体提升，函数调用不提升</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(mytest)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">111</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mytest</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">222</span>)<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(mytest)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">333</span>)<br><br>mytest()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">444</span>)<br></code></pre></td></tr></table></figure><p>预编译后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mytest</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">222</span>)<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(test)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">111</span>)<br><br><span class="hljs-built_in">console</span>.log(mytest)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">333</span>)<br><br>mytest()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">444</span>)<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/clzczh/picgo/raw/master/images/202204120848048.png" alt="image-20220407234205587"></p><p>使用<strong>使用变量声明函数</strong>，则走的是变量提升路线，而不是函数声明路线</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(mytest)   <span class="hljs-comment">// undefined</span><br>mytest()    <span class="hljs-comment">// mytest is not a function</span><br><br><span class="hljs-keyword">var</span> mytest = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>函数内部也会有变量提升，这时候会先预处理全局的，再预处理函数的，且函数内的变量、函数提升不能提升到函数外。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mytest1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(a)    <span class="hljs-comment">// undefined</span><br>  b()   <span class="hljs-comment">// 456</span><br><br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">456</span>)<br>  &#125;<br>&#125;<br><br>mytest1()<br><span class="hljs-built_in">console</span>.log(a)<span class="hljs-comment">//  a is not defined</span><br></code></pre></td></tr></table></figure><p>预编译后的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mytest1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">456</span>)<br>    &#125;<br>    <span class="hljs-keyword">var</span> a<br>    <br>    <span class="hljs-built_in">console</span>.log(a)<br>    b()<br>    <br>    a = <span class="hljs-number">123</span><br>&#125;<br><br>mytest1()<br><span class="hljs-built_in">console</span>.log(a)<br></code></pre></td></tr></table></figure><p><strong>如果函数内部的变量没有定义，直接赋值，则会直接变成全局变量</strong>(应该算是遗留bug，<strong>不要这样用</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mytest1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  b()   <span class="hljs-comment">// 456</span><br><br>  a = <span class="hljs-number">123</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">456</span>)<br>  &#125;<br>&#125;<br><br>mytest1()<br><span class="hljs-built_in">console</span>.log(a)    <span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure><p>那么，是先变量提升，还是先函数提升呢？</p><p>有不同意见的欢迎评论。</p><p><b style="color: red">从结果上看是函数优先，但从过程来看是变量优先</b></p><h3 id="预编译步骤"><a href="#预编译步骤" class="headerlink" title="预编译步骤"></a>预编译步骤</h3><p>这是怎么回事呢？</p><h4 id="全局预编译"><a href="#全局预编译" class="headerlink" title="全局预编译"></a>全局预编译</h4><p>首先先来看一下全局预编译的3个步骤：</p><ol><li>创建<code> GO对象(Global Object)</code></li><li>找变量声明，将变量作为<code>GO属性</code>(在浏览器中的话，实际上就是挂载到<code> window</code>对象上)，值为<code> undefined</code></li><li>找函数声明，作为<code> GO属性</code>值为函数体</li></ol><p>案例分析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">111</span>)<br><span class="hljs-built_in">console</span>.log(a)<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">222</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">333</span><br><br><span class="hljs-built_in">console</span>.log(a)<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">444</span>)<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(b)<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">555</span>)<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(b)<br></code></pre></td></tr></table></figure><ol><li><p>创建<code> GO对象</code>，找变量声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">GO: &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>找函数声明(会覆盖掉重名的)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">GO: &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">222</span>)<br>    &#125;,<br>    <span class="hljs-attr">b</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">555</span>)<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>全局预编译过程结束，开始真正的编译过程(把提升的给去掉先)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">111</span>)<br><span class="hljs-built_in">console</span>.log(a)<br><br>a = <span class="hljs-number">333</span><br><br><span class="hljs-built_in">console</span>.log(a)<br><br><span class="hljs-built_in">console</span>.log(b)<br><br><span class="hljs-built_in">console</span>.log(b)<br></code></pre></td></tr></table></figure></li><li><p>结合<code> GO对象</code>的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">111</span>)<br><span class="hljs-built_in">console</span>.log(a)<span class="hljs-comment">// f a() &#123; console.log(222) &#125;</span><br><br>a = <span class="hljs-number">333</span><br><br><span class="hljs-built_in">console</span>.log(a)<span class="hljs-comment">// 333</span><br><br><span class="hljs-built_in">console</span>.log(b)<span class="hljs-comment">// f b() &#123; console.log(555) &#125;</span><br><br><span class="hljs-built_in">console</span>.log(b)<span class="hljs-comment">// f b() &#123; console.log(555) &#125;</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="局部-函数-预编译"><a href="#局部-函数-预编译" class="headerlink" title="局部(函数)预编译"></a>局部(函数)预编译</h4><blockquote><p><strong>GO对象是全局预编译，所以它优先于AO对象所创建和执行。</strong></p></blockquote><p>首先先来看一下局部预编译的4个步骤：</p><ol><li>创建<code> AO对象(Activation Object)</code></li><li>找形参和变量声明，将变量和形参作为<code> AO属性</code>，值为<code> undefined</code></li><li>实参和形参统一(将实参的值赋值给形参)</li><li>找函数声明，值赋予函数体</li></ol><p>案例分析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mytest</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(a)<br>  <span class="hljs-built_in">console</span>.log(b)<br>  <span class="hljs-built_in">console</span>.log(c)<br><br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">111</span><br>  <span class="hljs-built_in">console</span>.log(a)<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">222</span>)<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(a)<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">333</span>)<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(a)<br><br>  <span class="hljs-keyword">var</span> b = <span class="hljs-number">444</span><br>  <span class="hljs-built_in">console</span>.log(b)<br>    <br>  <span class="hljs-keyword">var</span> c = <span class="hljs-number">555</span><br>  <span class="hljs-built_in">console</span>.log(c)<br>&#125;<br><br>mytest(<span class="hljs-number">123</span>, <span class="hljs-number">456</span>)<br></code></pre></td></tr></table></figure><ol><li><p>创建<code> AO对象</code></p></li><li><p>找形参和变量声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">AO: &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-literal">undefined</span>,<br>    <span class="hljs-attr">c</span>: <span class="hljs-literal">undefined</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实参与形参统一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">AO: &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">456</span>,<br>    <span class="hljs-attr">c</span>: <span class="hljs-literal">undefined</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>找函数声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">AO: &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">333</span>)<br>    &#125;,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">456</span>,<br>    <span class="hljs-attr">c</span>: <span class="hljs-literal">undefined</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>局部预编译过程结束，开始真正的编译过程(把提升的给去掉先)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mytest</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(a)<br>  <span class="hljs-built_in">console</span>.log(b)<br>  <span class="hljs-built_in">console</span>.log(c)<br><br>  a = <span class="hljs-number">111</span><br>  <span class="hljs-built_in">console</span>.log(a)<br><br>  <span class="hljs-built_in">console</span>.log(a)<br><br>  <span class="hljs-built_in">console</span>.log(a)<br><br>  b = <span class="hljs-number">444</span><br>  <span class="hljs-built_in">console</span>.log(b)<br>    <br>  c = <span class="hljs-number">555</span><br>  <span class="hljs-built_in">console</span>.log(c)<br>&#125;<br><br>mytest(<span class="hljs-number">123</span>, <span class="hljs-number">456</span>)<br></code></pre></td></tr></table></figure></li><li><p>结合<code> AO对象</code>的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mytest</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(a)<span class="hljs-comment">// f a() &#123; console.log(333) &#125;</span><br>  <span class="hljs-built_in">console</span>.log(b)<span class="hljs-comment">// 456</span><br>  <span class="hljs-built_in">console</span>.log(c)<span class="hljs-comment">// undefined</span><br><br>  a = <span class="hljs-number">111</span><br>  <span class="hljs-built_in">console</span>.log(a)<span class="hljs-comment">// 111</span><br><br>  <span class="hljs-built_in">console</span>.log(a)<span class="hljs-comment">/// 111</span><br><br>  <span class="hljs-built_in">console</span>.log(a)<span class="hljs-comment">// 111</span><br><br>  b = <span class="hljs-number">444</span><br>  <span class="hljs-built_in">console</span>.log(b)<span class="hljs-comment">// 444</span><br>    <br>  c = <span class="hljs-number">555</span><br>  <span class="hljs-built_in">console</span>.log(c)<span class="hljs-comment">// 456</span><br>&#125;<br><br>mytest(<span class="hljs-number">123</span>, <span class="hljs-number">456</span>)<br></code></pre></td></tr></table></figure></li></ol><p><b style="color: red">从结果上看是函数优先，但从过程来看是变量优先，因为变量提升后被之后的函数提升给覆盖掉了。</b></p><h2 id="回归正题"><a href="#回归正题" class="headerlink" title="回归正题"></a>回归正题</h2><p>准备好基础知识后，自然就是<strong>不忘初心，开始解决最开始的问题</strong></p><p>参考：<a href="https://stackoverflow.com/questions/58619924/function-declaration-in-block-moving-temporary-value-outside-of-block">Function declaration in block moving temporary value outside of block?</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-built_in">console</span>.log(a)<br>  a = <span class="hljs-number">111</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123; &#125;<br>  a = <span class="hljs-number">222</span><br>  <span class="hljs-built_in">console</span>.log(a)<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(a)<br></code></pre></td></tr></table></figure><p>分析：</p><ol><li><p>会有两个变量声明<code> a</code>，一个在块内，一个在块外</p></li><li><p>函数声明被提升，并<strong>被绑定到内部的块变量上</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">var</span> a¹;<br> <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>²(<span class="hljs-params"></span>) </span>&#123;&#125; <br>   <span class="hljs-built_in">console</span>.log(a²)<br>   a² = <span class="hljs-number">111</span><br>   a² = <span class="hljs-number">222</span><br>   <span class="hljs-built_in">console</span>.log(a²)<br>&#125;<br><span class="hljs-built_in">console</span>.log(a¹);<br></code></pre></td></tr></table></figure></li><li><p>这么一看，这不是和局部变量提升差不多。但是，<b style="color: red">当到达原来的函数声明处，会把块变量赋值给外部变量</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">var</span> a¹;<br> <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>²(<span class="hljs-params"></span>) </span>&#123;&#125; <br>   <span class="hljs-built_in">console</span>.log(a²)<br>   a² = <span class="hljs-number">111</span><br>   a¹ = a²<span class="hljs-comment">// 当到达原来的函数声明处，会把块变量赋值给外部变量</span><br>   a² = <span class="hljs-number">222</span><br>   <span class="hljs-built_in">console</span>.log(a²)<br>&#125;<br><span class="hljs-built_in">console</span>.log(a¹);<br></code></pre></td></tr></table></figure></li><li><p>之后，块变量和外部变量不再有联系，即块变量变化不会导致外部变量的变化。</p></li><li><p>依次输出<code> f a() &#123;&#125;</code>、<code> 222</code>、<code> 111</code> </p></li></ol><p>为什么<b style="color: red">当到达原来的函数声明处，会把块变量赋值给外部变量</b>？</p><blockquote><p>the spec says so. I have no idea why. – <a href="https://stackoverflow.com/users/5260024/jonas-wilms">Jonas Wilms</a></p></blockquote><p><b style="color: red">不要用块级声明式函数</b></p><p><b style="color: red">不要用块级声明式函数</b></p><p><b style="color: red">不要用块级声明式函数</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">111</span>)<br>  &#125;<br><br>  <span class="hljs-built_in">console</span>.log(b)<span class="hljs-comment">// f b() &#123; console.log(111) &#125;</span><br>&#125;<br><br><br><span class="hljs-built_in">console</span>.log(b)<span class="hljs-comment">// f b() &#123; console.log(111) &#125;</span><br></code></pre></td></tr></table></figure><p>根据上面的分析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>²(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">111</span>)<br>  &#125;<br>    <br>  b¹ = b²<span class="hljs-comment">// 没有定义，直接赋值，变为全局变量</span><br><br>  <span class="hljs-built_in">console</span>.log(b²)<span class="hljs-comment">// f b() &#123; console.log(111) &#125;</span><br>&#125;<br><br><br><span class="hljs-built_in">console</span>.log(b¹)<span class="hljs-comment">// f b() &#123; console.log(111) &#125;</span><br></code></pre></td></tr></table></figure><p>我们把<code>if语句</code>的条件变为<code>false</code>后：</p><ul><li><code> if语句</code>的内容不再执行，合理</li><li>函数没有被提升到外面<ul><li>但是考虑到<code> if条件</code>为<code> false</code>的话，可能不会预编译内容</li><li>但是外边的<code> b</code>却不是报错<code> b is not defined</code>，而是输出<code> undefined</code></li></ul></li></ul><p>为什么？不知道，想不到原因，有人知道的话，评论告诉一下。(不会这样用，纯好奇为什么)</p><p>实际上，想要根据条件切换函数，可以用以下形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> fn<br><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  fn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">111</span>)<br>  &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  fn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">222</span>)<br>  &#125;<br>&#125;<br><br>fn()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一道问题引起的重学预编译&quot;&gt;&lt;a href=&quot;#一道问题引起的重学预编译&quot; class=&quot;headerlink&quot; title=&quot;一道问题引起的重学预编译&quot;&gt;&lt;/a&gt;一道问题引起的重学预编译&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;前言：变量提升与函数提升本来是我个</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码之虚拟DOM和diff算法(二)    手写diff算法</title>
    <link href="https://www.clzczh.top/2022/04/04/vue-virtualDOM-diff-2/"/>
    <id>https://www.clzczh.top/2022/04/04/vue-virtualDOM-diff-2/</id>
    <published>2022-04-04T06:22:41.000Z</published>
    <updated>2022-04-04T06:23:03.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue源码之虚拟DOM和diff算法-二-手写diff算法"><a href="#Vue源码之虚拟DOM和diff算法-二-手写diff算法" class="headerlink" title="Vue源码之虚拟DOM和diff算法(二)    手写diff算法"></a>Vue源码之虚拟DOM和diff算法(二)    手写diff算法</h1><p>个人练习结果仓库(持续更新)：<a href="https://github.com/13535944743/Vue_Source_Code_Practise">Vue源码解析</a></p><h2 id="patch函数简要流程"><a href="#patch函数简要流程" class="headerlink" title="patch函数简要流程"></a>patch函数简要流程</h2><p><img src="https://s2.loli.net/2022/04/04/2LdWKQmf5BCbnkF.png" alt="image-20220318114622291"></p><br><h2 id="新旧节点不是同一个虚拟节点-新节点内容是-text"><a href="#新旧节点不是同一个虚拟节点-新节点内容是-text" class="headerlink" title="新旧节点不是同一个虚拟节点(新节点内容是 text)"></a>新旧节点不是同一个虚拟节点(新节点内容是<code> text</code>)</h2><p>不做过多解释了，代码中已经把每一步都解释了</p><p>src \ mysnabbdom \ patch.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> vnode <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./vnode.js&#x27;</span><br><span class="hljs-keyword">import</span> createElement <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./createElement.js&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">oldVnode, newVnode</span>) </span>&#123;<br>  <span class="hljs-comment">// 表示是真实DOM，真实DOM需要先转换成虚拟DOM后才进行下面的操作。因为真实DOM是没有sel这个属性的</span><br>  <span class="hljs-keyword">if</span> (oldVnode.sel === <span class="hljs-string">&#x27;&#x27;</span> || oldVnode.sel === <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-comment">// 转换成虚拟DOM</span><br>    oldVnode = vnode(oldVnode.tagName.toLowerCase(), &#123;&#125;, [], <span class="hljs-string">&#x27;&#x27;</span>, oldVnode)<br>  &#125;<br><br>  <span class="hljs-comment">// 判断oldVnode和newVnode是不是同一个节点</span><br>  <span class="hljs-keyword">if</span> (oldVnode.sel === newVnode.sel &amp;&amp; oldVnode.key === newVnode.key) &#123;<br>    <span class="hljs-comment">// 是同一个虚拟节点，需要进行精细化比对，最小化更新</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;需要精细化比对&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 不是同一个虚拟节点，暴力删除旧的，插入新的</span><br><br>    <span class="hljs-keyword">const</span> newDomNode = createElement(newVnode)     <span class="hljs-comment">// 把新虚拟节点变成真实DOM</span><br><br>    <span class="hljs-keyword">const</span> pivot = oldVnode.elm<br><br>    <span class="hljs-comment">// 将新创建的孤儿节点上树</span><br>    pivot.parentNode.insertBefore(newDomNode, pivot)<br>    <span class="hljs-comment">// 删除旧的</span><br>    pivot.parentNode.removeChild(pivot)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>如果<code> oldVnode</code>和<code> newVnode</code>不是同一个虚拟节点，那么就直接暴力删除旧的，插入新的。</p><p>所以需要一个函数<code> createElement</code>，它的功能是将新虚拟节点创建为DOM节点并返回。</p><br><p>src \ mysnabbdom \  createElement.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 真正创建节点，将vnode创建为DOM</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">vnode</span>) </span>&#123;<br>  <span class="hljs-comment">// 创建一个DOM节点，此时还是孤儿节点</span><br>  <span class="hljs-keyword">const</span> domNode = <span class="hljs-built_in">document</span>.createElement(vnode.sel)<br><br>  <span class="hljs-keyword">if</span> (vnode.text !== <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; (vnode.children === <span class="hljs-literal">undefined</span> || vnode.children.length === <span class="hljs-number">0</span>)) &#123;<br>    <span class="hljs-comment">// 内部是文字</span><br>    domNode.innerText = vnode.text<br>    vnode.elm = domNode<br>  &#125;<br><br>  <span class="hljs-comment">// 返回真实DOM对象</span><br>  <span class="hljs-keyword">return</span> vnode.elm<br>&#125;<br></code></pre></td></tr></table></figure><br><p>测试</p><p>src \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> h <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mysnabbdom/h.js&#x27;</span><br><span class="hljs-keyword">import</span> patch <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mysnabbdom/patch.js&#x27;</span><br><br><span class="hljs-keyword">const</span> myVnode1 = h(<span class="hljs-string">&#x27;h2&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;文字&#x27;</span>)<br><br><span class="hljs-comment">// container只是占位符，上树后会消失</span><br><span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>)<br><br>patch(container, myVnode1)     <span class="hljs-comment">// 上树</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/04/hs9Knb345AB6MES.png" alt="image-20220318145123182"></p><br><p><strong>新旧虚拟节点不是同一个节点，都能实现上树(不只是第一次)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> h <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mysnabbdom/h.js&#x27;</span><br><span class="hljs-keyword">import</span> patch <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mysnabbdom/patch.js&#x27;</span><br><br><br><span class="hljs-keyword">const</span> myVnode1 = h(<span class="hljs-string">&#x27;h2&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;hello&#x27;</span>)<br><br><span class="hljs-comment">// container只是占位符，上树后会消失</span><br><span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>)<br><br>patch(container, myVnode1)     <span class="hljs-comment">// 上树</span><br><br><span class="hljs-keyword">const</span> myVnode2 = h(<span class="hljs-string">&#x27;h3&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;hi&#x27;</span>)<br><br>patch(myVnode1, myVnode2)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/04/tgNlzY5FqxAS8Up.png" alt="image-20220320152958956"></p><br><h2 id="新旧节点不是同一个虚拟节点-新节点内容是子节点"><a href="#新旧节点不是同一个虚拟节点-新节点内容是子节点" class="headerlink" title="新旧节点不是同一个虚拟节点(新节点内容是子节点)"></a>新旧节点不是同一个虚拟节点(新节点内容是子节点)</h2><p>src \ mysnabbdom \  createElement.js(部分)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(vnode.children) &amp;&amp; vnode.children.length &gt;= <span class="hljs-number">0</span>) &#123;<br>  <span class="hljs-comment">// 内部是子节点,需要递归创建子节点</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; vnode.children.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> childDomNode = createElement(vnode.children[i])   <span class="hljs-comment">// 递归创建子节点</span><br><br>    <span class="hljs-comment">// 创建的子节点需要添加到DOM节点里</span><br>    domNode.appendChild(childDomNode)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>测试</p><p>src \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> h <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mysnabbdom/h.js&#x27;</span><br><span class="hljs-keyword">import</span> patch <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mysnabbdom/patch.js&#x27;</span><br><br><br><span class="hljs-keyword">const</span> myVnode1 = h(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123;&#125;, h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, [<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;赤&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;蓝&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;紫&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, [<br>    h(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;&#125;, [<br>      h(<span class="hljs-string">&#x27;ol&#x27;</span>, &#123;&#125;, [<br>        h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;白&#x27;</span>),<br>        h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;黑&#x27;</span>)<br>      ])<br>    ])<br>  ]),<br>]<br>))<br><br><span class="hljs-comment">// container只是占位符，上树后会消失</span><br><span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>)<br><br>patch(container, myVnode1)     <span class="hljs-comment">// 上树</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/04/bDWmUx3TZsJR84c.png" alt="image-20220318160421847"></p><br><h2 id="patch函数精细化比对流程"><a href="#patch函数精细化比对流程" class="headerlink" title="patch函数精细化比对流程"></a>patch函数精细化比对流程</h2><p><img src="https://s2.loli.net/2022/04/04/3gsT4NoezujpiaD.png" alt="image-20220404140651575"></p><br><h2 id="patch函数"><a href="#patch函数" class="headerlink" title="patch函数"></a>patch函数</h2><p><strong>实现简单部分的精细化比对，即不包括流程图中星星部分</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 判断oldVnode和newVnode是不是同一个节点</span><br><span class="hljs-keyword">if</span> (oldVnode.sel === newVnode.sel &amp;&amp; oldVnode.key === newVnode.key) &#123;<br>  <span class="hljs-comment">// 是同一个虚拟节点，需要进行精细化比对，最小化更新</span><br>  patchVnode(oldVnode, newVnode)<br>  <span class="hljs-keyword">if</span> (oldVnode === newVnode) &#123;<br>    <span class="hljs-comment">// oldVnode和newVnode是内存上的同一对象，即完全相同，不做任何处理</span><br>    <span class="hljs-keyword">return</span><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (newVnode.text !== <span class="hljs-literal">undefined</span> &amp;&amp; (newVnode.children === <span class="hljs-literal">undefined</span> || newVnode.children.length === <span class="hljs-number">0</span>)) &#123;<br>    <span class="hljs-comment">// newVnode的内容是text，而不是子节点</span><br>    <span class="hljs-keyword">if</span> (newVnode.text === oldVnode.text) &#123;<br>      <span class="hljs-keyword">return</span><br>    &#125;<br><br>    oldVnode.elm.innerText = newVnode.text<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// newVnode的内容是子节点</span><br>    <span class="hljs-keyword">if</span> (oldVnode.children !== <span class="hljs-literal">undefined</span> &amp;&amp; oldVnode.children.length &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// newVnode的内容是子节点，oldVnode的内容也是子节点</span><br><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;最复杂的情况&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// newVnode的内容是子节点，而oldVnode的内容是text：需要清空oldVnode，然后再把newVnode的children添加DOM上</span><br>      oldVnode.elm.innerText = <span class="hljs-string">&#x27;&#x27;</span><br><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; newVnode.children.length; i++) &#123;<br>        <span class="hljs-keyword">let</span> domNode = createElement(newVnode.children[i])<br>        oldVnode.elm.append(domNode)<br>      &#125;<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><br><p><strong>测试</strong></p><p>oldVnode和newVnode是内存中同一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myVnode1 = h(<span class="hljs-string">&#x27;h2&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;hello&#x27;</span>)<br><br><span class="hljs-comment">// container只是占位符，上树后会消失</span><br><span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>)<br><br>patch(container, myVnode1)     <span class="hljs-comment">// 上树</span><br><br><span class="hljs-keyword">const</span> myVnode2 = myVnode1<br><br>patch(myVnode1, myVnode2)<br></code></pre></td></tr></table></figure><br><p><code> newVnode</code>的内容是<code> text</code>，<code> oldVnode</code>的内容是子节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myVnode1 = h(<span class="hljs-string">&#x27;h2&#x27;</span>, &#123;&#125;, h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;hello&#x27;</span>))<br><br><span class="hljs-comment">// container只是占位符，上树后会消失</span><br><span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>)<br><br>patch(container, myVnode1)     <span class="hljs-comment">// 上树</span><br><br><span class="hljs-keyword">const</span> myVnode2 = h(<span class="hljs-string">&#x27;h2&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;hi&#x27;</span>)<br><br>patch(myVnode1, myVnode2)<br></code></pre></td></tr></table></figure><br><p><code>newVnode</code>和<code> oldVnode</code>的内容都是<code> text</code>(只写不同的，相同的自测)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myVnode1 = h(<span class="hljs-string">&#x27;h2&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;hello&#x27;</span>)<br><br><span class="hljs-comment">// container只是占位符，上树后会消失</span><br><span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>)<br><br>patch(container, myVnode1)     <span class="hljs-comment">// 上树</span><br><br><span class="hljs-keyword">const</span> myVnode2 = h(<span class="hljs-string">&#x27;h2&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;hi&#x27;</span>)<br><br>patch(myVnode1, myVnode2)<br></code></pre></td></tr></table></figure><br><p><code> newVnode</code>的内容是子节点，<code> oldVnode</code>的内容是<code> text</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myVnode1 = h(<span class="hljs-string">&#x27;section&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;hello&#x27;</span>)<br><br><span class="hljs-comment">// container只是占位符，上树后会消失</span><br><span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>)<br><br>patch(container, myVnode1)     <span class="hljs-comment">// 上树</span><br><br><span class="hljs-keyword">const</span> myVnode2 = h(<span class="hljs-string">&#x27;section&#x27;</span>, &#123;&#125;, [<br>  h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;赤&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;蓝&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;紫&#x27;</span>)<br>])<br>patch(myVnode1, myVnode2)<br></code></pre></td></tr></table></figure><br><h2 id="diff的子节点更新策略"><a href="#diff的子节点更新策略" class="headerlink" title="diff的子节点更新策略"></a>diff的子节点更新策略</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li><p>将精细化比对，最小化更新部分代码封装成函数<code> patchVnode</code></p></li><li><p>修改<code> vnode.js</code>文件，将data中的<code>key</code>取出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sel, data, children, text, elm</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    sel,<br>    data,<br>    children,<br>    text,<br>    elm,<br>    <span class="hljs-attr">key</span>: data.key<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><br><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="https://s2.loli.net/2022/04/04/tQLGAk5iPlr1Ocj.png" alt="image-20220321093329463"></p><br><p>如上图所示，一共有四个指针，其中，旧前、旧后指向旧子节点的首尾，新前、新后指向新子节点的首尾。</p><p><strong>有四种命中查找：命中一种就不会再进行命中判断了。没有命中的话，则按箭头方向换一种命中查找方式</strong></p><p><img src="https://s2.loli.net/2022/04/04/pyjT7KADSEGwCb8.png" alt="image-20220321093851898"></p><p><strong>规则：</strong></p><ul><li><code>前指针</code>只能向下移动，<code>后指针</code>只能向上移动</li><li>当<code>前指针</code>在<code>后指针</code>下面时，循环完毕、(不包括在相同位置的情况)</li></ul><br><h4 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h4><p><b style="color: red">为了简便，直接把子节点用一个字母来表示</b></p><p>简单版本：</p><p><img src="https://s2.loli.net/2022/03/21/VvKgDAT4fwesByR.png" alt="image-20220321115109525"></p><blockquote><p><strong>如果旧节点先循环完毕，则此时新前指针、新后指针范围内的节点是新增节点</strong>(包括新前指针、新后指针指向的节点)</p></blockquote><br><p>复杂版本：</p><p><img src="https://s2.loli.net/2022/03/21/s1Vzk8ptXr2wRUN.png" alt="image-20220321150325730"></p><br><blockquote><p><strong>如果四种方式的查找都无法命中，则直接在旧子节点中寻找相同key的元素，不存在的话，新增并将该元素追加到<code>旧前指针</code>之前，<code>新前指针</code>下移</strong></p></blockquote><br><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><img src="https://s2.loli.net/2022/03/21/OyIpN57q8h2QYLJ.png" alt="image-20220321150243560"></p><br><h4 id="位置变换"><a href="#位置变换" class="headerlink" title="位置变换"></a>位置变换</h4><p><img src="https://s2.loli.net/2022/03/21/alzrCRy84DJLpSZ.png" alt="image-20220321155833724"></p><br><h4 id="增-删-位置变化"><a href="#增-删-位置变化" class="headerlink" title="增 + 删 + 位置变化"></a>增 + 删 + 位置变化</h4><p><img src="https://s2.loli.net/2022/03/21/fTLxJsXcowZriDu.png" alt="image-20220321162253189"></p><br><h4 id="key一样，节点内容却不同的情况"><a href="#key一样，节点内容却不同的情况" class="headerlink" title="key一样，节点内容却不同的情况"></a>key一样，节点内容却不同的情况</h4><p><a href="https://zhuanlan.zhihu.com/p/408728265">详解Vue的Diff算法(例6)</a></p><br><h3 id="原理总结"><a href="#原理总结" class="headerlink" title="原理总结"></a>原理总结</h3><ol><li><strong>新前旧前</strong>：<ul><li>命中，<code>新前指针</code>、<code>旧前指针</code>下移，回到1，继续看有没有命中</li><li>未命中，继续向下尝试命中</li></ul></li><li><strong>新后旧后</strong>：<ul><li>命中，<code>新后指针</code>、<code>旧后指针</code>上移，回到1，继续看有没有命中</li><li>未命中，继续向下尝试命中</li></ul></li><li><strong>新后旧前</strong>：<ul><li>命中，移动<code>旧前指针</code>指向的节点到<code>旧后指针</code>的后面，并将原位置设置为<code> undefined</code>，<code>旧前指针</code>下移，<code>新后指针</code>上移</li><li>未命中，继续向下尝试命中</li></ul></li><li><strong>新前旧后</strong>：<ul><li>命中，移动<code>旧后指针</code>指向的节点到<code>旧前指针</code>的前面，并将原位置设置为<code> undefined</code>，<code>旧后指针</code>上移，<code>新前指针</code>下移</li><li>未命中<ul><li>在旧节点中寻找相同<code>key</code>的节点<ul><li>存在<ul><li>在旧节点中找到的和<code>新前指针</code>指向的节点是同一个节点的话，将该节点追加到<code> 旧前</code>之前，并将原位置设置为<code> undefined</code>，<code> 新前指针</code>下移一位</li><li>在旧节点中找到的和<code>新前指针</code>指向的节点不是同一个节点的话，新增<code> 新前指针</code>指向的节点，将该节点追加到<code> 旧前指针</code>之前，<code> 新前指针</code>下移一位</li></ul></li><li>不存在<ul><li>新增并将该节点追加到<code> 旧前指针</code>之前，<code> 新前指针</code>下移一位</li></ul></li></ul></li></ul></li></ul></li><li>循环结束<ul><li>新节点先循环完毕：删除<code>旧前指针</code>、<code>旧后指针</code>之间的节点，包括<code> 旧前</code>、<code> 旧后</code>指向的节点</li><li>旧节点先循环完毕：新增<code>新前指针</code>、<code>新后指针</code>之间的节点到<code> 旧前指针</code>前，包括<code> 新前</code>、<code> 新后</code>指向的节点</li></ul></li></ol><br><h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><p>src \ patchVnode.js(最复杂的情况，单独抽出来，在updateChildren中操作)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (oldVnode.children !== <span class="hljs-literal">undefined</span> &amp;&amp; oldVnode.children.length &gt; <span class="hljs-number">0</span>) &#123;<br>  <span class="hljs-comment">// newVnode的内容是子节点，oldVnode的内容也是子节点</span><br>  updateChildren(oldVnode.elm, oldVnode.children, newVnode.children)<br>&#125;<br></code></pre></td></tr></table></figure><br><p>src \ updateChildren.js</p><p>没什么难度，看原理总结慢慢写就行了(<strong>谨慎点</strong>)</p><p>阉割版本，只需要<code> sel</code>和<code> key</code>相同就认为是同一个虚拟节点。(即不需要判断内容是否相同)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 精细化比对，最小化更新的，其中新旧节点的内容都是节点的情况</span><br><br><span class="hljs-keyword">import</span> createElement <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./createElement.js&quot;</span><br><span class="hljs-keyword">import</span> patchVnode <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./patchVnode.js&quot;</span><br><br><span class="hljs-comment">// parentElm：oldVnode对应的真实DOM，用于更新DOM</span><br><span class="hljs-comment">// oldCh：旧节点的子节点</span><br><span class="hljs-comment">// newCh：新节点的子节点</span><br><br><span class="hljs-comment">// 判断是不是同一个虚拟节点</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkSamVnode</span>(<span class="hljs-params">v1, v2</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> v1.sel === v2.sel &amp;&amp; v1.key === v2.key<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateChildren</span>(<span class="hljs-params">parentElm, oldCh, newCh</span>) </span>&#123;<br>  <span class="hljs-comment">// 旧前指针</span><br>  <span class="hljs-keyword">let</span> oldStartIdx = <span class="hljs-number">0</span><br>  <span class="hljs-comment">// 旧后指针</span><br>  <span class="hljs-keyword">let</span> oldEndIdx = oldCh.length - <span class="hljs-number">1</span><br>  <span class="hljs-comment">// 旧前节点</span><br>  <span class="hljs-keyword">let</span> oldStartVnode = oldCh[<span class="hljs-number">0</span>]<br>  <span class="hljs-comment">// 旧后节点</span><br>  <span class="hljs-keyword">let</span> oldEndVnode = oldCh[oldEndIdx]<br><br>  <span class="hljs-comment">// 新前指针</span><br>  <span class="hljs-keyword">let</span> newStartIdx = <span class="hljs-number">0</span><br>  <span class="hljs-comment">// 新后指针</span><br>  <span class="hljs-keyword">let</span> newEndIdx = newCh.length - <span class="hljs-number">1</span><br>  <span class="hljs-comment">// 新前节点</span><br>  <span class="hljs-keyword">let</span> newStartVnode = newCh[<span class="hljs-number">0</span>]<br>  <span class="hljs-comment">// 新后节点</span><br>  <span class="hljs-keyword">let</span> newEndVnode = newCh[newEndIdx]<br><br>  <span class="hljs-keyword">let</span> map = &#123;&#125;;<br><br>  <span class="hljs-keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp; newStartIdx &lt;= newEndIdx) &#123;<br>    <span class="hljs-keyword">if</span> (oldStartVnode === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 跳过undefined</span><br>      oldStartVnode = oldCh[++oldStartIdx]<br>    &#125;<br>    <span class="hljs-keyword">if</span> (oldEndVnode === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 跳过undefined</span><br>      oldEndVnode = oldCh[--oldEndIdx]<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (checkSamVnode(newStartVnode, oldStartVnode)) &#123;<br>      <span class="hljs-comment">// 新前旧前命中</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;新前旧前命中&#x27;</span>)<br><br>      patchVnode(oldStartVnode, newStartVnode)<br>      oldStartVnode = oldCh[++oldStartIdx]<br>      newStartVnode = newCh[++newStartIdx]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (checkSamVnode(newEndVnode, oldEndVnode)) &#123;<br>      <span class="hljs-comment">// 新后旧后命中</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;新后旧后命中&#x27;</span>)<br><br>      <span class="hljs-comment">// 继续精细化比较两个节点</span><br>      patchVnode(oldEndVnode, newEndVnode)<br>      oldEndVnode = oldCh[--oldEndIdx]<br>      newEndVnode = newCh[--newEndIdx]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (checkSamVnode(newEndVnode, oldStartVnode)) &#123;<br>      <span class="hljs-comment">// 新后旧前命中</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;新后旧前命中&#x27;</span>)<br><br>      <span class="hljs-comment">// 继续精细化比较两个节点</span><br>      patchVnode(oldStartVnode, newEndVnode)<br><br>      parentElm.insertBefore(oldStartVnode.elm, oldEndVnode.elm.nextSibiling)<br>      oldStartVnode = <span class="hljs-literal">undefined</span><br><br>      newEndVnode = newCh[--newEndIdx]<br>      oldStartVnode = oldCh[++oldStartIdx]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (checkSamVnode(newStartVnode, oldEndVnode)) &#123;<br>      <span class="hljs-comment">// 新前旧后命中</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;新前旧后命中&#x27;</span>)<br><br>      <span class="hljs-comment">// 继续精细化比较两个节点</span><br>      patchVnode(oldEndVnode, newStartVnode)<br><br>      parentElm.insertBefore(oldEndVnode.elm, oldStartVnode.elm)<br>      oldEndVnode = <span class="hljs-literal">undefined</span><br><br>      newStartVnode = newCh[++newStartIdx]<br>      oldEndVnode = oldCh[--oldEndIdx]<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 四种情况都没命中</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = oldStartIdx; i &lt;= oldEndIdx; i++) &#123;<br>        <span class="hljs-keyword">const</span> item = oldCh[i]<br>        <span class="hljs-keyword">if</span> (item === <span class="hljs-literal">undefined</span>) &#123;<br>          <span class="hljs-comment">// 跳过undefined</span><br>          <span class="hljs-keyword">continue</span><br>        &#125;<br>        <span class="hljs-keyword">const</span> key = item.key<br>        map[key] = i<br>      &#125;<br><br>      <span class="hljs-comment">// 看一下map中有没有和新前指向的节点相同的</span><br>      <span class="hljs-keyword">const</span> indexOld = map[newStartVnode.key]<br>      <span class="hljs-keyword">if</span> (indexOld) &#123;<br>        <span class="hljs-comment">// 存在，则是移动</span><br>        <span class="hljs-keyword">const</span> elmToMove = oldCh[indexOld]<br>        <span class="hljs-comment">// 继续精细化比较</span><br>        patchVnode(elmToMove, newStartVnode)<br><br>        parentElm.insertBefore(elmToMove.elm, oldStartVnode.elm)<br>        oldCh[indexOld] = <span class="hljs-literal">undefined</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 不存在，需要新增节点</span><br>        <span class="hljs-keyword">const</span> newDomNode = createElement(newStartVnode)<br>        parentElm.insertBefore(newDomNode, oldStartVnode.elm)<br>      &#125;<br><br>      newStartVnode = newCh[++newStartIdx]<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (newStartIdx &lt;= newEndIdx) &#123;<br>    <span class="hljs-comment">// 旧节点先循环完毕，需要新增`新前指针`、` 新后指针`之间节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = newStartIdx; i &lt;= newEndIdx; i++) &#123;<br>      <span class="hljs-keyword">const</span> item = newCh[i]<br>      <span class="hljs-keyword">if</span> (item === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">const</span> newDomNode = createElement(item)<br><br>      <span class="hljs-keyword">if</span> (!oldStartVnode) &#123;<br>        <span class="hljs-comment">// 如果此时旧前指针指向的是undefined，则直接在最后插入</span><br>        parentElm.appendChild(newDomNode)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        parentElm.insertBefore(newDomNode, oldStartVnode.elm)<br>      &#125;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldStartIdx &lt;= oldEndIdx) &#123;<br>    <span class="hljs-comment">// 新节点先循环完毕，需要删除`旧前指针`、` 旧后指针`之间节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = oldStartIdx; i &lt;= oldEndIdx; i++) &#123;<br>      <span class="hljs-keyword">const</span> item = oldCh[i]<br>      <span class="hljs-keyword">if</span> (item === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      parentElm.removeChild(item.elm)<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><br><p>参考资料：</p><p><a href="https://zhuanlan.zhihu.com/p/408728265">详解Vue的Diff算法 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue源码之虚拟DOM和diff算法-二-手写diff算法&quot;&gt;&lt;a href=&quot;#Vue源码之虚拟DOM和diff算法-二-手写diff算法&quot; class=&quot;headerlink&quot; title=&quot;Vue源码之虚拟DOM和diff算法(二)    手写diff算法&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue源码" scheme="https://www.clzczh.top/tags/Vue%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码之数据响应式原理</title>
    <link href="https://www.clzczh.top/2022/04/04/vue-dataReactive/"/>
    <id>https://www.clzczh.top/2022/04/04/vue-dataReactive/</id>
    <published>2022-04-04T06:20:45.000Z</published>
    <updated>2022-04-04T11:30:50.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue源码之数据响应式原理"><a href="#Vue源码之数据响应式原理" class="headerlink" title="Vue源码之数据响应式原理"></a>Vue源码之数据响应式原理</h1><p>本文写了好久(个人菜+没时间)，看了很多博客，才写完这篇博客。如果对你有所帮助，希望点赞一波。</p><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><ul><li>**M( Model )**：视图渲染时依赖的数据</li><li>**V( View )**：视图(页面渲染的DOM结构)</li><li>**VM( ViewModel )**：Vue的实例，MVVM的核心</li></ul><hr><p><img src="https://s2.loli.net/2022/03/27/ZXd3PB9fOKN2xTL.jpg" alt="img"></p><br><ul><li><strong>数据驱动视图</strong>：数据变化，会被<code> ViewModel</code>监听到，然后就会自动更新视图</li><li><strong>双向数据绑定</strong>：表单元素的值变化时，也会被<code> ViewModel</code>监听到，然后更新数据</li></ul><hr><p><strong>数据响应式其实也就是数据驱动视图(不同说法)</strong></p><br><p>简单例子：</p><p><img src="https://s2.loli.net/2022/03/27/Ke8g1aujfEiLU4H.png" alt="image-20220327091241111"></p><br><h2 id="Vue与React的小差别"><a href="#Vue与React的小差别" class="headerlink" title="Vue与React的小差别"></a>Vue与React的小差别</h2><p><b style="color: red">Vue可以直接对数据进行修改，而React需要<code> setState</code>来修改</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Vue数据变化</span><br><span class="hljs-built_in">this</span>.a ++;<br><br><span class="hljs-comment">// React数据变化</span><br><span class="hljs-built_in">this</span>.setState(&#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-built_in">this</span>.state.a + <span class="hljs-number">1</span><br>&#125;);<br></code></pre></td></tr></table></figure><br><p>这就是因为<code> React</code>不是响应式更新，无法做到检测属性的变化，去驱动<code> render</code>函数的执行，所以需要使用<code> setState</code>，也就是说<code> setState</code>不只是更新数据，还会根据数据的变化去更新视图。而<code> Vue</code>是响应式的，所以可以做到检测属性的变化。</p><blockquote><p>二者各有各的优缺点。<code> Vue</code>的响应式比较方便，但<code> React</code>的则是更规范，可以避免不小心改掉数据的问题，实际上<code> Vue3</code>有点看齐的意思，修改数据是必须要<code> 数据.value</code>才能修改(Vue3还没有用很多，可能有错误理解)</p></blockquote><h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h2><p>开始数据响应式的原理讲解之前，先来一下前置知识</p><blockquote><p><strong><code>Object.defineProperty()</code></strong> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p></blockquote><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;&#125;<br><br><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&#x27;name&#x27;</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;clz&#x27;</span><br>&#125;)<br><br><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&#x27;age&#x27;</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">21</span><br>&#125;)<br><br><br><span class="hljs-built_in">console</span>.log(obj)<span class="hljs-comment">// &#123;name: &#x27;clz&#x27;, age: 21&#125;</span><br><span class="hljs-built_in">console</span>.log(obj.name, obj.age)<span class="hljs-comment">// clz 21</span><br></code></pre></td></tr></table></figure><br><p>这么一看，**<code>Object.defineProperty()</code>**不是没啥用吗?下面的代码也能实现效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;&#125;<br><br>obj.name = <span class="hljs-string">&#x27;clz&#x27;</span><br><br>obj.age = <span class="hljs-number">21</span><br><br><span class="hljs-built_in">console</span>.log(obj)<br><span class="hljs-built_in">console</span>.log(obj.name, obj.age)<br></code></pre></td></tr></table></figure><br><h3 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h3><p>可以通过第三个参数，设置是都可以枚举、是否可写等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;&#125;<br><br><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&#x27;name&#x27;</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,<br>  <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span><br>&#125;)<br><br><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&#x27;age&#x27;</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">21</span>,<br>  <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,     <span class="hljs-comment">// 不可写</span><br>  <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span><br>&#125;)<br><br><br><span class="hljs-built_in">console</span>.log(obj)         <span class="hljs-comment">// &#123;name: &#x27;clz&#x27;, age: 21&#125;</span><br><span class="hljs-built_in">console</span>.log(obj.name, obj.age)    <span class="hljs-comment">// clz 21</span><br><br>obj.age++             <span class="hljs-comment">// 不报错，但也不会被修改</span><br><span class="hljs-built_in">console</span>.log(obj)   <span class="hljs-comment">// &#123;name: &#x27;clz&#x27;, age: 21&#125;。writable若为true，则age为22</span><br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">in</span> obj) &#123;<br>  <span class="hljs-built_in">console</span>.log(item)   <span class="hljs-comment">// age。因为name属性设置了不可枚举，所以只能打印出age</span><br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="数据劫持原理"><a href="#数据劫持原理" class="headerlink" title="数据劫持原理"></a>数据劫持原理</h3><p><strong>数据劫持就是当访问数据或修改数据时，然后执行我们想做的事(即通过自定义的<code> get</code>和<code> set</code>方法来重写原来的行为)</strong></p><p><b style="color: red">注意：如果已经设置<code>set</code>或<code>get</code>, 就不能设置<code>writable</code>和<code>value</code>中的任何一个了,不然会报错</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;&#125;<br><br><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&#x27;name&#x27;</span>, &#123;<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;试图访问obj的name属性&#x27;</span>)<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;试图改变obj的name属性&#x27;</span>)<br>  &#125;<br>&#125;)<br><br><br><span class="hljs-built_in">console</span>.log(obj)<br><span class="hljs-built_in">console</span>.log(obj.name)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;%c%s&#x27;</span>, <span class="hljs-string">&#x27;font-size: 28px;color: red&#x27;</span>, <span class="hljs-string">&#x27;----------------------&#x27;</span>)<br><br>obj.name = <span class="hljs-string">&#x27;czh&#x27;</span><br><span class="hljs-built_in">console</span>.log(obj)<br><span class="hljs-built_in">console</span>.log(obj.name)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/04/RNszBvL342rKPqD.png" alt="image-20220327125438377"></p><br><p><code>get</code>方法<code>return</code>的值就是访问该属性时的值，<code> set</code>方法的参数就是该属性的新值</p><br><h2 id="实现数据劫持"><a href="#实现数据劫持" class="headerlink" title="实现数据劫持"></a>实现数据劫持</h2><h3 id="临时变量实现"><a href="#临时变量实现" class="headerlink" title="临时变量实现"></a>临时变量实现</h3><p>使用临时变量<code> temp</code>，修改数据时，<code> temp</code>储存新值；获取数据时, 返回<code> temp</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;&#125;<br><br><span class="hljs-keyword">let</span> temp<br><br><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&#x27;name&#x27;</span>, &#123;<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;试图访问obj的name属性&#x27;</span>)<br>    <span class="hljs-keyword">return</span> temp<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newVal</span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;试图改变obj的name属性&#x27;</span>, newVal)<br>    temp = newVal<br>  &#125;<br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(obj.name)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;%c%s&#x27;</span>, <span class="hljs-string">&#x27;font-size: 28px;color: red&#x27;</span>, <span class="hljs-string">&#x27;----------------------&#x27;</span>)<br><br>obj.name = <span class="hljs-string">&#x27;czh&#x27;</span><br><span class="hljs-built_in">console</span>.log(obj.name)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/04/Ldf95HnAYuzQ3cx.png" alt="image-20220327145335132"></p><br><h3 id="闭包实现"><a href="#闭包实现" class="headerlink" title="闭包实现"></a>闭包实现</h3><p>通过闭包实现，减少临时变量的使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineReactive</span>(<span class="hljs-params">data, key, val</span>) </span>&#123;<br>  <span class="hljs-built_in">Object</span>.defineProperty(data, key, &#123;<br>    <span class="hljs-comment">// 可被枚举</span><br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 可被配置，如被delete</span><br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// getter</span><br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`试图访问obj的<span class="hljs-subst">$&#123;key&#125;</span>属性`</span>)<br>      <span class="hljs-keyword">return</span> val<br>    &#125;,<br>    <span class="hljs-comment">// setter</span><br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newVal</span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`试图改变obj的<span class="hljs-subst">$&#123;key&#125;</span>属性`</span>, newVal)<br>      val = newVal<br>    &#125;<br>  &#125;)<br>&#125;<br><br>defineReactive(obj, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;clz&#x27;</span>)<br><br><span class="hljs-built_in">console</span>.log(obj.name)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;%c%s&#x27;</span>, <span class="hljs-string">&#x27;font-size: 28px;color: red&#x27;</span>, <span class="hljs-string">&#x27;----------------------&#x27;</span>)<br><br>obj.name = <span class="hljs-string">&#x27;czh&#x27;</span><br><span class="hljs-built_in">console</span>.log(obj.name)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/04/fqtRTc5ZlxnH1Y9.png" alt="image-20220327160734232"></p><p>效果也比临时变量版本好一点，因为调用<code> defineReactive</code>的时候可以传第三个参数(可以添加属性的同时添加值)</p><br><p>有趣的事：直接打印<code> obj</code>，无法直接看到属性和属性值，展开后才能看到，并且也还是会触发<code> get</code>方法</p><p><img src="https://s2.loli.net/2022/04/04/7lOueB18IT9NExq.gif" alt="reactive"></p><h3 id="对象深层属性全部劫持"><a href="#对象深层属性全部劫持" class="headerlink" title="对象深层属性全部劫持"></a>对象深层属性全部劫持</h3><p>首先,对<code> defineReactive</code>函数进行小修改，看一下对象情况时的问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">job</span>: &#123;<br>    <span class="hljs-attr">salary</span>: <span class="hljs-number">1111</span><br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineReactive</span>(<span class="hljs-params">data, key, val</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">arguments</span>.length === <span class="hljs-number">2</span>) &#123;<br>    val = data[key]<br>  &#125;<br><br>  <span class="hljs-built_in">Object</span>.defineProperty(data, key, &#123;<br>    <span class="hljs-comment">// 可被枚举</span><br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 可被配置，如被delete</span><br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// getter</span><br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`试图访问obj的<span class="hljs-subst">$&#123;key&#125;</span>属性`</span>)<br>      <span class="hljs-keyword">return</span> val<br>    &#125;,<br>    <span class="hljs-comment">// setter</span><br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newVal</span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`试图改变obj的<span class="hljs-subst">$&#123;key&#125;</span>属性`</span>, newVal)<br>      val = newVal<br>    &#125;<br>  &#125;)<br>&#125;<br><br>defineReactive(obj, <span class="hljs-string">&#x27;job&#x27;</span>)<br><br><span class="hljs-built_in">console</span>.log(obj.job.salary)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;%c%s&#x27;</span>, <span class="hljs-string">&#x27;font-size: 28px;color: red&#x27;</span>, <span class="hljs-string">&#x27;----------------------&#x27;</span>)<br><br>obj.job.salary += <span class="hljs-number">1111</span><br><span class="hljs-built_in">console</span>.log(obj.job.salary)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/27/fMmd8WPz1tgic6V.png" alt="image-20220327170516140"></p><p>可以看到,当访问<code> salary</code>属性,只能劫持到<code> job</code>属性,无法劫持到更深一层的<code> salary</code>,修改时更离谱,应为没有修改到<code> job</code>属性(即只是把<code> job</code>属性下的<code> salary</code>属性修改了, <code>job</code>对应的地址并没有发生变化)</p><br><h4 id="如何实现思路及流程"><a href="#如何实现思路及流程" class="headerlink" title="如何实现思路及流程"></a>如何实现思路及流程</h4><p>既然正常的对象不能被劫持所有的属性,那么就定义一个<code> Observer</code>类,用于把一个正常的对象转换为每一层的属性都是响应式的对象(即深层的属性也能被侦测到)</p><br><p>但是呢,如果属性值已经是响应式的了,那就没有必要再创建<code> Observer</code>实例了。</p><p>所以还需要有一个函数<code> observe</code>。</p><p><img src="https://s2.loli.net/2022/03/26/PnE89l4zW12qpKO.png" alt="image-20220326111642691"></p><br><h4 id="observe-js"><a href="#observe-js" class="headerlink" title="observe.js"></a>observe.js</h4><blockquote><p>监听value。如果value已经是响应式的对象了，那么就直接返回已经创建的<code> Observer</code>实例即可，否则创建<code> Observer</code>实例。</p><p>那么怎么判断对象是不是响应式的对象呢？通过实例是否存在<code> __ob__</code>属性来判断，如果已经是响应式的，那么该对象的<code> __ob__</code>属性的值就是<code> Observer</code>的实例。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Observer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Observer.js&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observe</span>(<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-comment">// 如果value不是对象，就什么都不做</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value !== <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br><br>  <span class="hljs-keyword">let</span> ob<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value.__ob__ !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>    ob = value.__ob__<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    ob = <span class="hljs-keyword">new</span> Observer(value)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ob<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="def-js"><a href="#def-js" class="headerlink" title="def.js"></a>def.js</h4><blockquote><p>工具方法。用于定义对象的属性，可传参控制是否可以枚举。</p><p>上面说到，<code> Observer</code>实例要有<code> __ob__</code>属性，但是呢，这个属性应该是不可枚举的，所以需要一个工具方法来定义<code> __ob__</code>属性。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> def = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj, key, value, enumerable</span>) </span>&#123;<br>  <span class="hljs-built_in">Object</span>.defineProperty(obj, key, &#123;<br>    value,<br>    enumerable,<br>    <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,   <span class="hljs-comment">// 可被配置，如被delete</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="Observer-js"><a href="#Observer-js" class="headerlink" title="Observer.js"></a>Observer.js</h4><blockquote><p>把一个正常的对象转换为每一层的属性都是响应式的对象(即深层的属性也能被侦测到)。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 将一个正常的对象转换为每个层级的属性都是响应式的object(可以被侦测到的object)</span><br><br><span class="hljs-keyword">import</span> &#123; def &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./def.js&#x27;</span><br><span class="hljs-keyword">import</span> defineReactive <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./defineReactive.js&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Observer</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">value</span>)</span> &#123;<br>    <span class="hljs-comment">// 给value添加__ob__属性，值是实例，且__ob__属性不可枚举</span><br>    <span class="hljs-comment">// ` __ob__`属性用于标记是否已经被转换成响应式数据了，并且值是Observer的实例</span><br>    def(value, <span class="hljs-string">&#x27;__ob__&#x27;</span>, <span class="hljs-built_in">this</span>, <span class="hljs-literal">false</span>)<br>    <span class="hljs-built_in">this</span>.walk(value)<br>  &#125;<br><br><br>  <span class="hljs-comment">// 遍历对象的属性，并让它们都变成响应式的</span><br>  <span class="hljs-function"><span class="hljs-title">walk</span>(<span class="hljs-params">value</span>)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> value) &#123;<br>      defineReactive(value, k)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="defineReactive-js"><a href="#defineReactive-js" class="headerlink" title="defineReactive.js"></a>defineReactive.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> observe <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./observe.js&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineReactive</span>(<span class="hljs-params">data, key, val</span>) </span>&#123;<br>  <span class="hljs-comment">// console.log(data, key)</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">arguments</span>.length === <span class="hljs-number">2</span>) &#123;<br>    val = data[key]<br>  &#125;<br><br>  <span class="hljs-comment">// 对子属性进行侦测。避免子属性是对象，且还不是响应式的情况</span><br>  <span class="hljs-keyword">let</span> childOb = observe(val)<br><br>  <span class="hljs-built_in">Object</span>.defineProperty(data, key, &#123;<br>    <span class="hljs-comment">// 可被枚举</span><br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 可被配置，如被delete</span><br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br><br>    <span class="hljs-comment">// getter</span><br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`试图访问<span class="hljs-subst">$&#123;key&#125;</span>属性`</span>)<br>      <span class="hljs-keyword">return</span> val<br>    &#125;,<br>    <span class="hljs-comment">// setter</span><br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newValue</span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`试图改变<span class="hljs-subst">$&#123;key&#125;</span>属性`</span>, newValue)<br><br>      <span class="hljs-keyword">if</span> (val === newValue) &#123;<br>        <span class="hljs-keyword">return</span><br>      &#125;<br><br>      val = newValue<br>      <span class="hljs-comment">// 设置的新值同样需要observe(防止赋值的新值是对象，同样需要侦测)</span><br>      childOb = observe(newValue)<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><p>测试代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> observe <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./observe.js&#x27;</span><br><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">job</span>: &#123;<br>    <span class="hljs-attr">salary</span>: <span class="hljs-number">1111</span><br>  &#125;,<br>  <span class="hljs-attr">color</span>: [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;purple&#x27;</span>]<br>&#125;<br><br><br>observe(obj)<br><br><span class="hljs-built_in">console</span>.log(obj.job.salary)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;%c%s&#x27;</span>, <span class="hljs-string">&#x27;font-size: 28px;color: red&#x27;</span>, <span class="hljs-string">&#x27;----------------------&#x27;</span>)<br><br>obj.job.salary += <span class="hljs-number">1111</span><br><span class="hljs-built_in">console</span>.log(obj.job.salary)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/27/Pv6yjTKG7ip84Bs.png" alt="image-20220327213314578"></p><p>可以看到，当访问<code> salary</code>属性时，会先访问<code>job</code>属性，然后也访问<code> salary</code>属性。当然，修改<code> salary</code>属性值时，并不会修改<code> job</code>属性，应为<code> job</code>是对象，是引用类型，它指向的地址没有变化,自然触发不了对应的<code> set</code>方法。</p><h4 id="简单流程图"><a href="#简单流程图" class="headerlink" title="简单流程图"></a>简单流程图</h4><p><img src="https://s2.loli.net/2022/03/27/4XnvyC9EiVApOkb.png" alt="image-20220327225344833"></p><p><strong>这不就是真正的三角恋吗？(偷笑)</strong></p><ul><li><code>observe</code>依赖<code> Observer</code>(男A喜欢女A)</li><li><code> Observer</code>依赖<code> defineReactive</code>(女A喜欢男B)</li><li><code>defineReactive</code>依赖<code> observe</code>(男B喜欢男A，瑟瑟发抖)</li></ul><br><h3 id="劫持数组方法的调用"><a href="#劫持数组方法的调用" class="headerlink" title="劫持数组方法的调用"></a>劫持数组方法的调用</h3><p>首先，让我们看下数组的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> observe <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./observe.js&#x27;</span><br><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">color</span>: [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;purple&#x27;</span>]<br>&#125;<br><br><br>observe(obj)<br><br><span class="hljs-built_in">console</span>.log(obj.color[<span class="hljs-number">2</span>])<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;%c%s&#x27;</span>, <span class="hljs-string">&#x27;font-size: 28px;color: red&#x27;</span>, <span class="hljs-string">&#x27;----------------------&#x27;</span>)<br><br>obj.color[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;Purple&#x27;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;%c%s&#x27;</span>, <span class="hljs-string">&#x27;font-size: 28px;color: red&#x27;</span>, <span class="hljs-string">&#x27;----------------------&#x27;</span>)<br><br>obj.color.push(<span class="hljs-string">&#x27;white&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(obj.color)<br><span class="hljs-built_in">console</span>.log(obj.color[<span class="hljs-number">3</span>])<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;%c%s&#x27;</span>, <span class="hljs-string">&#x27;font-size: 28px;color: red&#x27;</span>, <span class="hljs-string">&#x27;----------------------&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/27/vanqOXsRfYAypgF.png" alt="image-20220327230501029"></p><p><strong>数组新增数据不是响应式的，且数组内的普通数据不应该是对象形式的(即属性名为索引值)</strong></p><br><p><strong>所以我们需要改写七个数组方法，微操一下</strong></p><ul><li><code>push</code></li><li><code>pop</code></li><li><code> shift</code></li><li><code> unshift</code></li><li><code> splice</code></li><li><code> sort</code></li><li><code> reverse</code></li></ul><blockquote><p>为什么只要改写这七个方法呢?</p><p><b style="color: red">因为只有这七个方法会改变原数组</b></p></blockquote><p>怎么改写呢？就是利用原型链的知识，在<code> Array</code>与<code> Array.prototype</code>中间插一个<code> arrayMethods</code>，在<code> arrayMethods</code>上改写数组方法</p><p><img src="https://gitee.com/clzczh/picgo/raw/master/images/bu4lkTjvAdJ2qLc.png" alt="image-20220328131543234"></p><br><h4 id="array-js"><a href="#array-js" class="headerlink" title="array.js"></a>array.js</h4><ol><li><p>备份原来的方法</p></li><li><p>定义新的方法</p><p>2.1 调用备份的方法(需要通过<code> apply</code>变更<code> this</code>指向)</p><p>2.2 对新增项进行<code> objectArray</code>，将新增项响应式化</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 重写7个数组方法</span><br><br><span class="hljs-keyword">import</span> &#123; def &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./def.js&#x27;</span><br><br><span class="hljs-keyword">const</span> ArrayPrototype = <span class="hljs-built_in">Array</span>.prototype<br><br><span class="hljs-comment">// 以Array.prototype为原型创建arrayMethods对象(其实就是arrayMethods对象就能继承Array.prototype的方法)</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> arrayMethods = <span class="hljs-built_in">Object</span>.create(ArrayPrototype)<br><br><span class="hljs-comment">// 要被改写的7个数组方法</span><br><span class="hljs-keyword">const</span> methodsNeedChange = [<br>  <span class="hljs-string">&#x27;push&#x27;</span>,<br>  <span class="hljs-string">&#x27;pop&#x27;</span>,<br>  <span class="hljs-string">&#x27;shift&#x27;</span>,<br>  <span class="hljs-string">&#x27;unshift&#x27;</span>,<br>  <span class="hljs-string">&#x27;splice&#x27;</span>,<br>  <span class="hljs-string">&#x27;sort&#x27;</span>,<br>  <span class="hljs-string">&#x27;reverse&#x27;</span><br>]<br><br>methodsNeedChange.forEach(<span class="hljs-function"><span class="hljs-params">methodName</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 备份原来的方法</span><br>  <span class="hljs-keyword">const</span> original = ArrayPrototype[methodName]<br><br>  <span class="hljs-comment">// 定义新的方法</span><br>  def(arrayMethods,<br>    methodName,<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-comment">// 这里不能使用箭头函数，因为apply调用需要this来绑定调用此方法的数组</span><br><br>      <span class="hljs-comment">// 恢复数组方法原有的功能</span><br>      <span class="hljs-keyword">const</span> result = original.apply(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">arguments</span>)<br><br>      <span class="hljs-comment">// 把类数组变成数组</span><br>      <span class="hljs-keyword">const</span> args = [...arguments]<br><br>      <span class="hljs-comment">// 把数组的__ob__属性取出来。用于把数组的每一项都变成响应式</span><br>      <span class="hljs-keyword">const</span> ob = <span class="hljs-built_in">this</span>.__ob__<br><br>      <span class="hljs-comment">// 新增数据也要变成响应式</span><br>      <span class="hljs-keyword">let</span> inserted = []<br>      <span class="hljs-keyword">switch</span> (methodName) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;push&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;unshift&#x27;</span>:<br>          inserted = <span class="hljs-built_in">arguments</span><br>          <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;splice&#x27;</span>:<br>          inserted = args.slice(<span class="hljs-number">2</span>)<br>          <span class="hljs-keyword">break</span><br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (inserted) &#123;<br>        <span class="hljs-comment">// 有新增的项，需要变为响应式</span><br>        <span class="hljs-built_in">this</span>.__ob__.observeArray(inserted)<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> result<br>    &#125;, <span class="hljs-literal">false</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><br><h4 id="Observer-js-1"><a href="#Observer-js-1" class="headerlink" title="Observer.js"></a>Observer.js</h4><p>因为数组和普通的对象不一样，所以<code> Observer</code>类也需要修改一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 将一个正常的object对象转换为每个层级的属性都是响应式(可以被侦测到的object)</span><br><br><span class="hljs-keyword">import</span> &#123; def &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./def.js&#x27;</span><br><span class="hljs-keyword">import</span> defineReactive <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./defineReactive.js&#x27;</span><br><span class="hljs-keyword">import</span> &#123; arrayMethods &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./array.js&#x27;</span><br><span class="hljs-keyword">import</span> observe <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./observe.js&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Observer</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">value</span>)</span> &#123;<br>    <span class="hljs-comment">// 给value添加__ob__属性，值是实例，且__ob__属性不可枚举</span><br>    <span class="hljs-comment">// ` __ob__`属性用于标记是否已经被转换成响应式数据了，并且值是Observer的实例</span><br>    def(value, <span class="hljs-string">&#x27;__ob__&#x27;</span>, <span class="hljs-built_in">this</span>, <span class="hljs-literal">false</span>)<br><br>    <span class="hljs-comment">// 判断是不是数组</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(value)) &#123;<br>      <span class="hljs-comment">// 设置数组的原型，这样子才可以调用自己改写后的数组方法</span><br>      <span class="hljs-built_in">Object</span>.setPrototypeOf(value, arrayMethods)<br><br>      <span class="hljs-built_in">this</span>.observeArray(value)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.walk(value)<br>    &#125;<br>  &#125;<br><br><br>  <span class="hljs-comment">// 遍历对象的属性，并让它们都变成响应式的</span><br>  <span class="hljs-function"><span class="hljs-title">walk</span>(<span class="hljs-params">value</span>)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> value) &#123;<br>      defineReactive(value, k)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 遍历数组。因为数组是特殊的对象，属性名是索引值，所以不适合用和普通对象的遍历方式</span><br>  <span class="hljs-function"><span class="hljs-title">observeArray</span>(<span class="hljs-params">arr</span>)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, len = arr.length; i &lt; len; i++) &#123;<br>      <span class="hljs-comment">// 判断数组的每一项是否已经是响应式的了。</span><br>      observe(arr[i])<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="index-js-1"><a href="#index-js-1" class="headerlink" title="index.js"></a>index.js</h4><p>测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> observe <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./observe.js&#x27;</span><br><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">color</span>: [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;purple&#x27;</span>]<br>&#125;<br><br><br>observe(obj)<br><br><span class="hljs-built_in">console</span>.log(obj.color[<span class="hljs-number">2</span>])<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;%c%s&#x27;</span>, <span class="hljs-string">&#x27;font-size: 28px;color: red&#x27;</span>, <span class="hljs-string">&#x27;----------------------&#x27;</span>)<br><br>obj.color[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;Purple&#x27;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;%c%s&#x27;</span>, <span class="hljs-string">&#x27;font-size: 28px;color: red&#x27;</span>, <span class="hljs-string">&#x27;----------------------&#x27;</span>)<br><br>obj.color.push(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;white&#x27;</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(obj.color)<br><span class="hljs-built_in">console</span>.log(obj.color[<span class="hljs-number">3</span>].name)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/28/JyDontshHEZLSwd.png" alt="image-20220328195821834"></p><br><h2 id="收集依赖与派发更新"><a href="#收集依赖与派发更新" class="headerlink" title="收集依赖与派发更新"></a>收集依赖与派发更新</h2><p><img src="https://s2.loli.net/2022/04/03/xp31PRDMLO8ZWUi.png" alt="image-20220326131006787"></p><p>这部分学习自<a href="https://juejin.cn/post/6932659815424458760">0年前端的Vue响应式原理学习总结1：基本原理</a>。因为视频讲的太迷了。</p><h3 id="什么是依赖"><a href="#什么是依赖" class="headerlink" title="什么是依赖"></a>什么是依赖</h3><p>首先，要实现数据响应式，那就得先订阅数据，然后才能在数据发生变化后接收到数据发生变化的消息，订阅的数据就是<strong>依赖</strong>，。当依赖发生变化后，订阅者就会接收到数据发生变化的消息，然后执行回调函数，如更新页面。<strong>在Vue的响应式中的订阅者就是<code> Watcher</code>实例</strong>。</p><p>实际上，这种例子在现实中也比比皆是。比如关注一个歌手。关注就是订阅这个歌手，然后歌手发生变化后(即发布新歌)，关注者就会收到数据发生变化的消息(歌手发布新歌)。</p><hr><p>初始化Watcher实例时，需要订阅数据，在下面就是调用get方法，get方法后面再实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Watcher</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">data, expression, callback</span>)</span> &#123;<br>    <span class="hljs-comment">// data: 数据对象。</span><br>    <span class="hljs-comment">// expression: 表达式。如通过点语法访问深层属性。a.b.c</span><br>    <span class="hljs-comment">// callback: 依赖发生变化后，执行的回调函数</span><br>    <span class="hljs-built_in">this</span>.data = data<br>    <span class="hljs-built_in">this</span>.expression = expression<br>    <span class="hljs-built_in">this</span>.callback = callback<br><br>    <span class="hljs-comment">// 订阅数据</span><br>    <span class="hljs-built_in">this</span>.value = <span class="hljs-built_in">this</span>.get()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>订阅数据呢，首先因为我们的表达式是点语法，所以需要<code> parsePath</code>方法去一步一步地获取深层属性，因为JS不支持<code>data[a.b.c]</code>的形式，需要变为<code> data[a][b][c]</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parsePath</span>(<span class="hljs-params">obj, expression</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!obj) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br><br>  <span class="hljs-keyword">const</span> segments = expression.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">of</span> segments) &#123;<br>    obj = obj[key]<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> obj<br>&#125;<br></code></pre></td></tr></table></figure><br><p>然后添加<code> get</code>方法和<code> update</code>方法，功能分别是初始化时订阅数据，数据变化后更新数据以及执行回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> value = <span class="hljs-built_in">this</span>.parsePath(<span class="hljs-built_in">this</span>.data, <span class="hljs-built_in">this</span>.expression)<br>  <span class="hljs-keyword">return</span> value<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-comment">// 数据变化时，调用此方法</span><br>  <span class="hljs-built_in">this</span>.value = parsePath(<span class="hljs-built_in">this</span>.data, <span class="hljs-built_in">this</span>.expression) <span class="hljs-comment">//更新数据</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;派发更新, 更新后的数据&#x27;</span>, <span class="hljs-built_in">this</span>.value)<br>  <span class="hljs-built_in">this</span>.callback(<span class="hljs-built_in">this</span>.value) <span class="hljs-comment">// 执行回调</span><br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="收集依赖"><a href="#收集依赖" class="headerlink" title="收集依赖"></a>收集依赖</h3><p>一个<code> Watcher</code>实例不只是能订阅一个数据，就像一个人能关注很多个歌手一样。既然如此，那就需要用一个数组来收集依赖了。</p><p>那么，我们什么时候收集依赖呢？</p><p>首先，<code>watcher</code>初始化的时候，会调用<code> get</code>方法去获取它依赖的数据，但是，上面我们已经实现了数据劫持，重写了数据的访问行为，所以会执行<code> getter</code>函数(即<code> Object.defineProperty</code>中的<code> get</code>)，那么就在<code> getter</code>函数中把当前的<code> watcher</code>添加到<code> dep</code>数组中，就能完成收集依赖了。</p><p>这里需要获取<code> watcher</code>实例，所以应该要在<code> Watcher</code>的<code> get</code>方法中，先把<code> watcher</code>实例挂载到<code> window</code>对象中，这样子就变成全局的了。</p><hr><p>Watcher.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">window</span>.target = <span class="hljs-built_in">this</span>    <span class="hljs-comment">// 挂载实例到window对象上</span><br>  <span class="hljs-keyword">const</span> value = parsePath(<span class="hljs-built_in">this</span>.data, <span class="hljs-built_in">this</span>.expression)<br>  <span class="hljs-keyword">return</span> value<br>&#125;<br></code></pre></td></tr></table></figure><br><p>defineReactive.js</p><p>下面为了篇幅不太长，只弄了部分，前面还应该有收集依赖的数组<code> const dep = []</code>才对。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// getter</span><br><span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>  dep.push(<span class="hljs-built_in">window</span>.target)<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;收集依赖&#x27;</span>)<br>  <span class="hljs-keyword">return</span> val<br>&#125;,<br></code></pre></td></tr></table></figure><br><h3 id="派发更新"><a href="#派发更新" class="headerlink" title="派发更新"></a>派发更新</h3><p>数据发生变化后，调用<code> watcher</code>的<code> update</code>方法，更新数据，并执行回调。</p><blockquote><p>在使用数据时收集依赖，在改变数据时派发更新。</p><p><b style="color: red">在<code> getter</code>中收集依赖，在<code> setter</code>中派发更新</b></p></blockquote><br><p>defineReactive.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newValue</span>)</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`试图改变<span class="hljs-subst">$&#123;key&#125;</span>属性`</span>, newValue)<br><br>  <span class="hljs-keyword">if</span> (val === newValue) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br><br>  val = newValue<br>  <span class="hljs-comment">// 设置的新值同样需要observe(防止赋值的新值是对象，同样需要侦测)</span><br>  childOb = observe(newValue)<br><br>  dep.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.update())    <span class="hljs-comment">// 派发更新</span><br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> observe <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./observe.js&#x27;</span><br><span class="hljs-keyword">import</span> Watcher <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Watcher.js&#x27;</span><br><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">job</span>: &#123;<br>    <span class="hljs-attr">salary</span>: <span class="hljs-number">1111</span><br>  &#125;<br>&#125;<br><br>observe(obj)<br><br><span class="hljs-keyword">new</span> Watcher(obj, <span class="hljs-string">&quot;job.salary&quot;</span>, <span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;watcher监听&quot;</span>, val)<br>&#125;)<br><br>obj.job.salary = &#123;<br>  <span class="hljs-attr">rank1</span>: <span class="hljs-number">1111</span>,<br>  <span class="hljs-attr">rank2</span>: <span class="hljs-number">2222</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/03/YRJKlZwgmri49eb.gif" alt="reactive"></p><br><p>分析：</p><ul><li>watcher初始化，订阅数据时，会一层一层地去拿到深层的数据，所以依次访问<code> obj.job</code>、<code> obj.job.salary</code>，因此会触发两次<code> getter</code>函数，所以会有两次收集依赖</li><li>修改<code> obj.job.salary</code>时，会先触发<code> getter</code>，再触发<code> setter</code>。所以还会收集一次依赖</li><li>修改数据后，派发更新，要更新数据，又要调用<code> parsePath</code>，所以又会有两次收集依赖</li><li>之后打印测试信息后，会执行回调</li><li>最后就是，因为前面实现的对象深层属性全部劫持，所以即使是新增属性，访问时也会触发<code> getter</code>，即也会收集依赖。</li></ul><p><strong>这里疯狂收集依赖，下面再来优化代码</strong></p><br><h3 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h3><h4 id="Dep类"><a href="#Dep类" class="headerlink" title="Dep类"></a>Dep类</h4><p>将<code> dep</code>数组抽象成一个类</p><p>Dep.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dep</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// dep数组。储存依赖的订阅者，即watcher的实例</span><br>    <span class="hljs-built_in">this</span>.subs = []<br>  &#125;<br><br>  <span class="hljs-comment">// 添加依赖</span><br>  <span class="hljs-function"><span class="hljs-title">depend</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// 之前是添加到window对象上，但是实际上只要是全局的都可以</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;添加依赖&#x27;</span>)<br>    <span class="hljs-built_in">this</span>.addSub(Dep.target)<br>  &#125;<br><br>  <span class="hljs-comment">// 派发更新</span><br>  <span class="hljs-function"><span class="hljs-title">notify</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> subs = [...this.subs]<br>    subs.forEach(<span class="hljs-function"><span class="hljs-params">s</span> =&gt;</span> s.update())<br>  &#125;<br><br>  <span class="hljs-comment">// 添加订阅</span><br>  <span class="hljs-function"><span class="hljs-title">addSub</span>(<span class="hljs-params">sub</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.subs.push(sub)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="重置Dep-target"><a href="#重置Dep-target" class="headerlink" title="重置Dep.target"></a>重置Dep.target</h4><p>从上面的测试例子分析中，可以发现，我们派发更新时，会触发<code> parsePath</code>去取值，这个时候也会添加依赖，所以需要重置<code>Dep.target</code>为<code>null</code>，并根据<code> Dep.target</code>是否是<code>null</code>，来判断是不是要收集依赖</p><br><p>Watcher.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>  Dep.target = <span class="hljs-built_in">this</span>    <span class="hljs-comment">// 挂载实例到window对象上</span><br>  <span class="hljs-keyword">const</span> value = parsePath(<span class="hljs-built_in">this</span>.data, <span class="hljs-built_in">this</span>.expression)<br><br>  Dep.target = <span class="hljs-literal">null</span>   <span class="hljs-comment">// 重置Dep.target</span><br>  <span class="hljs-keyword">return</span> value<br>&#125;<br></code></pre></td></tr></table></figure><br><p>defineReactive.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// getter</span><br><span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">if</span> (Dep.target) &#123;<br>    <span class="hljs-comment">// 条件符合才收集依赖</span><br>    dep.depend()<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> val<br>&#125;,<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/04/hd7gwFl1yqW8o5E.png" alt="image-20220403202742315"></p><br><h4 id="实现数组版本"><a href="#实现数组版本" class="headerlink" title="实现数组版本"></a>实现数组版本</h4><p>因为数组和普通对象不太一样</p><hr><p>首先，需要为每一个<code>Observer</code>实例添加<code> dep</code>，然后数组才能够调用</p><p>Observer.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.dep = <span class="hljs-keyword">new</span> Dep()<br></code></pre></td></tr></table></figure><br><p>然后，如果有子元素，也需要收集依赖(数组收集依赖)。<strong>依赖了数组，就等价于依赖了数组中的所有元素</strong></p><p>defineReactive.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// getter</span><br><span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">if</span> (Dep.target) &#123;<br>    <span class="hljs-comment">// 条件符合才收集依赖</span><br>    dep.depend()<br><br>    <span class="hljs-keyword">if</span> (childOb) &#123;<br>      <span class="hljs-comment">// 如果有子元素</span><br>      childOb.dep.depend()<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> val<br>&#125;,<br></code></pre></td></tr></table></figure><br><p>最后，触发改写的7个数组方法时，需要派发更新。</p><p>array.js</p><p>所以，<strong>改写后的数组方法最后需要加上下面的语句</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">ob.dep.notify()<br></code></pre></td></tr></table></figure><br><p>测试代码。</p><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Watcher <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Watcher.js&#x27;</span><br><span class="hljs-keyword">import</span> observe <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./observe.js&#x27;</span><br><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">color</span>: [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;purple&#x27;</span>]<br>&#125;<br><br><br>observe(obj)<br><br><span class="hljs-keyword">new</span> Watcher(obj, <span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(val)<br>&#125;)<br><br>obj.color.push(<span class="hljs-string">&#x27;white&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/03/kv6TXRNocGZd134.png" alt="image-20220403220551493"></p><br><p>暂时收工，看了视频教程+很多博客，才初略看懂，好菜啊(哭)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue源码之数据响应式原理&quot;&gt;&lt;a href=&quot;#Vue源码之数据响应式原理&quot; class=&quot;headerlink&quot; title=&quot;Vue源码之数据响应式原理&quot;&gt;&lt;/a&gt;Vue源码之数据响应式原理&lt;/h1&gt;&lt;p&gt;本文写了好久(个人菜+没时间)，看了很多博客，才写完</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue源码" scheme="https://www.clzczh.top/tags/Vue%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码之虚拟DOM和diff算法(一)    使用snabbdom</title>
    <link href="https://www.clzczh.top/2022/04/04/vue-virtualDOM-diff-1/"/>
    <id>https://www.clzczh.top/2022/04/04/vue-virtualDOM-diff-1/</id>
    <published>2022-04-04T06:20:15.000Z</published>
    <updated>2022-04-04T06:22:19.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue源码之虚拟DOM和diff算法-一-使用snabbdom"><a href="#Vue源码之虚拟DOM和diff算法-一-使用snabbdom" class="headerlink" title="Vue源码之虚拟DOM和diff算法(一)    使用snabbdom"></a>Vue源码之虚拟DOM和diff算法(一)    使用snabbdom</h1><h2 id="什么是虚拟DOM和diff算法"><a href="#什么是虚拟DOM和diff算法" class="headerlink" title="什么是虚拟DOM和diff算法"></a>什么是虚拟DOM和diff算法</h2><h3 id="diff算法简介"><a href="#diff算法简介" class="headerlink" title="diff算法简介"></a>diff算法简介</h3><p><img src="https://s2.loli.net/2022/04/04/TP8AxVESywIU1WK.png" alt="image-20220317115218615"></p><p>要把左图装修成右图的样子。(哪里不同？仔细找)</p><p>有两种方案。</p><p>方案一：拆掉重建(效率低，代价大)</p><p>方案二：diff(精细化比对，最小量更新)</p><br><p>怎么看都应该会选择方案二。</p><br><p>那么在Vue中使用<code> diff</code>的情景呢?</p><p><img src="https://s2.loli.net/2022/04/04/hJZGpIsD7AWLb8C.png" alt="image-20220317121207880"></p><p>上图就是在Vue中使用<code> diff</code>的情景(比如左图中，有一些元素的<code> v-if</code>为<code>false</code>，所以不显示，而右图中，<code> v-if</code>为<code> true</code>)</p><br><h3 id="虚拟DOM简介"><a href="#虚拟DOM简介" class="headerlink" title="虚拟DOM简介"></a>虚拟DOM简介</h3><p> <strong>虚拟DOM：用来描述DOM的层次结构的js对象。真实DOM中的一切属性在虚拟DOM中都存在。</strong></p><p><img src="https://s2.loli.net/2022/04/04/C6zu4QEKBUxIikg.png" alt="image-20220317121849612"></p><hr><p><strong>diff是发生在虚拟DOM上的</strong></p><p><img src="https://s2.loli.net/2022/04/04/7ihfAjSg4EaNLI6.png" alt="image-20220317154226660"></p><hr><p><strong>优点：</strong></p><ul><li>减少对真实DOM的操作</li><li>虚拟 DOM 本质上是 JavaScript 对象，可以跨平台，比如服务器渲染等</li></ul><br><h2 id="snabbdom"><a href="#snabbdom" class="headerlink" title="snabbdom"></a>snabbdom</h2><p><a href="https://github.com/snabbdom/snabbdom">snabbdom仓库</a></p><p>snabbdom是著名的虚拟DOM库，是<code>diff</code>算法的鼻祖。(Vue源码也借鉴了<code> snabbdom</code>)</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code> npm install snabbdom</code></p><h3 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h3><p>上一篇中，有<code> webpack</code>配置可查看Vue源码系列的上一篇文章。</p><p><strong>webpack.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">&#x27;src&#x27;</span>, <span class="hljs-string">&#x27;index.js&#x27;</span>),<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>    <span class="hljs-comment">// 虚拟打包路径，bundle.js文件没有真正的生成</span><br>    <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&quot;/virtual/&quot;</span><br>  &#125;,<br><br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-comment">// 静态文件根目录</span><br>    <span class="hljs-attr">static</span>: path.join(__dirname, <span class="hljs-string">&#x27;www&#x27;</span>),<br>    <span class="hljs-comment">// 不压缩</span><br>    <span class="hljs-attr">compress</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="h函数使用"><a href="#h函数使用" class="headerlink" title="h函数使用"></a>h函数使用</h2><p><strong>h函数用来创建虚拟节点(vnode)</strong></p><p><img src="https://s2.loli.net/2022/04/04/5UikzM3OL9n1GH6.png" alt="image-20220317154552800"></p><hr><p>参数介绍：</p><ul><li>第一个参数：是生成的虚拟节点对应DOM节点的标签名</li><li>第二个参数：一个对象，虚拟节点的属性(可选)</li><li>第三个参数：标签中的内容</li></ul><hr><h3 id="h函数体验"><a href="#h函数体验" class="headerlink" title="h函数体验"></a>h函数体验</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;<br>  init,<br>  classModule,<br>  propsModule,<br>  styleModule,<br>  eventListenersModule,<br>  h,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;snabbdom&quot;</span>;<br><br><br><span class="hljs-keyword">const</span> myVnode = h(<span class="hljs-string">&#x27;a&#x27;</span>, &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">href</span>: <span class="hljs-string">&#x27;https://clz.vercel.app&#x27;</span><br>  &#125;<br>&#125;, <span class="hljs-string">&#x27;赤蓝紫&#x27;</span>)<br><br><span class="hljs-built_in">console</span>.log(myVnode)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/04/y7Dh4Fm3ujp6wHO.png" alt="image-20220317155922806"></p><br><p><strong>虚拟DOM节点属性介绍</strong>：</p><ul><li>children: 子元素，没有则为<code> undefined</code></li><li>data(对象形式): 类名、属性、样式、事件(对象形式)</li><li>elm: 对应的真实DOM节点(如果没有对应的，则为<code>undefined</code> )</li><li>key：唯一标识</li><li>sel：选择器</li><li>text：文字</li></ul><br><h3 id="搭配-patch函数生成真实DOM节点"><a href="#搭配-patch函数生成真实DOM节点" class="headerlink" title="搭配 patch函数生成真实DOM节点"></a>搭配<code> patch</code>函数生成真实DOM节点</h3><p>通过引入的<code> init</code>函数把所有的模块(类名模块、属性模块、样式模块、事件监听模块)作为参数(少的话，则上树后也会少，比如少事件监听模块，上树后，事件将不再生效)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> patch = init([classModule, propsModule, styleModule, eventListenersModule])<br></code></pre></td></tr></table></figure><br><p><strong><code>container</code>只是占位符，上树后会消失</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// container只是占位符，上树后会消失</span><br><span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>)<br>patch(container, myVnode)<span class="hljs-comment">// 上树(第一个参数如果不是虚拟节点，则是执行上树操作，否则是diff算法，第一个参数是旧虚拟节点，第二个参数是新虚拟节点)</span><br></code></pre></td></tr></table></figure><br><p><strong>完整版</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;<br>  init,<br>  classModule,<br>  propsModule,<br>  styleModule,<br>  eventListenersModule,<br>  h,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;snabbdom&quot;</span>;<br><br><span class="hljs-comment">// 加载模块，，创建出patch函数。没有对应模块的话，上树后，也对应没有。比如少事件监听模块，上树后，事件将不再生效</span><br><span class="hljs-comment">// 类名模块、属性模块、样式模块、事件监听模块</span><br><span class="hljs-keyword">const</span> patch = init([classModule, propsModule, styleModule, eventListenersModule])<br><br><br><span class="hljs-keyword">const</span> myVnode = h(<span class="hljs-string">&#x27;button&#x27;</span>, &#123;<br>  <span class="hljs-attr">class</span>: &#123;            <span class="hljs-comment">// 类名</span><br>    <span class="hljs-string">&quot;btn&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">props</span>: &#123;            <span class="hljs-comment">// 属性, id也在这里面</span><br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;btn&#x27;</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;赤蓝紫&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">style</span>: &#123;          <span class="hljs-comment">// 样式</span><br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>    <span class="hljs-attr">border</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#fff&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">on</span>: &#123;             <span class="hljs-comment">// 事件监听</span><br>    <span class="hljs-attr">click</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      location.assign(<span class="hljs-string">&#x27;https://clz.vercel.app&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;, <span class="hljs-string">&#x27;赤蓝紫&#x27;</span>)<br><br><span class="hljs-built_in">console</span>.log(myVnode)<br><br><span class="hljs-comment">// container只是占位符，上树后会消失</span><br><span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>)<br>patch(container, myVnode)     <span class="hljs-comment">// 上树</span><br></code></pre></td></tr></table></figure><br><h3 id="h函数嵌套使用"><a href="#h函数嵌套使用" class="headerlink" title="h函数嵌套使用"></a>h函数嵌套使用</h3><p>h函数可以嵌套使用，从而得到虚拟DOM树</p><p><img src="https://s2.loli.net/2022/03/17/pTQr1R8MBdLHCPG.png" alt="image-20220317174152025"></p><br><p><strong>动手实践</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;<br>  init,<br>  classModule,<br>  propsModule,<br>  styleModule,<br>  eventListenersModule,<br>  h,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;snabbdom&quot;</span>;<br><br><br><span class="hljs-keyword">const</span> patch = init([classModule, propsModule, styleModule, eventListenersModule])<br><br><br><span class="hljs-keyword">const</span> myVnode = h(<span class="hljs-string">&#x27;ul&#x27;</span>, [     <span class="hljs-comment">// 没有数据参数</span><br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-string">&#x27;赤&#x27;</span>),        <span class="hljs-comment">// 可以没有数据参数</span><br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;蓝&#x27;</span>),    <span class="hljs-comment">// 数据参数可为空</span><br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, h(<span class="hljs-string">&#x27;span&#x27;</span>, <span class="hljs-string">&#x27;紫&#x27;</span>))     <span class="hljs-comment">// 内容参数为调用h函数且只有一个时，可以不是数组形式</span><br>])<br><br><span class="hljs-built_in">console</span>.log(myVnode)<br><br><br><span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>)<br>patch(container, myVnode)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/H5K9Crs8dzv6Ryx.png" alt="image-20220317174911551"></p><br><h2 id="手写h函数"><a href="#手写h函数" class="headerlink" title="手写h函数"></a>手写h函数</h2><h3 id="编写vnode函数"><a href="#编写vnode函数" class="headerlink" title="编写vnode函数"></a>编写vnode函数</h3><p><code> vnode</code>功能：把传入的参数组合成对象后返回</p><p>src \ mysnabbdom \ vnode.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sel, data, children, text, elm</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    sel,<br>    data,<br>    children,<br>    text,<br>    elm<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p> 本次手写的是低配版本的h函数，必须接收3个参数</p><p>调用可以有以下三种形式</p><ol><li><p>h(‘div’, {}, ‘文字’)</p></li><li><p>h(‘div’, {}, [])</p></li><li><p>h(‘div’, {}, h())</p></li></ol><br><h3 id="实现第一种形式"><a href="#实现第一种形式" class="headerlink" title="实现第一种形式"></a>实现第一种形式</h3><p>直接调用<code> vnode</code>函数，返回即可</p><p>src \ mysnabbdom \ h.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> vnode <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./vnode.js&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sel, data, content</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">arguments</span>.length !== <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;这是低配版h函数, 必须接收3个参数&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content === <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> content === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 形式1</span><br>    <span class="hljs-keyword">return</span> vnode(sel, data, <span class="hljs-literal">undefined</span>, content, <span class="hljs-literal">undefined</span>)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(content)) &#123;<br>    <span class="hljs-comment">// 形式2</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> c === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; c.hasOwnProperty(<span class="hljs-string">&#x27;sel&#x27;</span>)) &#123;<br>    <span class="hljs-comment">// 形式3：因为h函数最终会返回一个一定会有`sel`属性的对象</span><br><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;传入的第三个参数类型不对&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>测试</p><p>src \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> h <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mysnabbdom/h.js&#x27;</span><br><br><span class="hljs-built_in">console</span>.log(h(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;文字&#x27;</span>))<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/KM3PFd8Ea69R1rZ.png" alt="image-20220317230452293"></p><br><h3 id="实现第二种形式"><a href="#实现第二种形式" class="headerlink" title="实现第二种形式"></a>实现第二种形式</h3><p>src \ mysnabbdom \ h.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> vnode <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./vnode.js&#x27;</span><br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sel, data, content</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">arguments</span>.length !== <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;这是低配版h函数, 必须接收3个参数&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content === <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> content === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 形式1</span><br>    <span class="hljs-keyword">return</span> vnode(sel, data, <span class="hljs-literal">undefined</span>, content, <span class="hljs-literal">undefined</span>)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(content)) &#123;<br>    <span class="hljs-comment">// 形式2</span><br>    <span class="hljs-keyword">const</span> children = []<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; content.length; i++) &#123;<br>      <span class="hljs-keyword">if</span> (!(<span class="hljs-keyword">typeof</span> content[i] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; content[i].hasOwnProperty(<span class="hljs-string">&#x27;sel&#x27;</span>))) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;传入的数组中又有不是调用h函数的&#x27;</span>)<br>      &#125;<br><br>      children.push(content[i])      <span class="hljs-comment">// 因为传的数组里的元素就是调用h函数的，即得到的已经是处理过后返回的对象了</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> vnode(sel, data, children, <span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; content.hasOwnProperty(<span class="hljs-string">&#x27;sel&#x27;</span>)) &#123;<br>    <span class="hljs-comment">// 形式3：因为h函数最终会返回一个一定会有`sel`属性的对象</span><br><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;传入的第三个参数类型不对&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>测试</p><p>src \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> h <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mysnabbdom/h.js&#x27;</span><br><br><span class="hljs-built_in">console</span>.log(h(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;&#125;, [<br>  h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;赤&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;蓝&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;紫&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123;&#125;, [<br>    h(<span class="hljs-string">&#x27;span&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;黑&#x27;</span>),<br>    h(<span class="hljs-string">&#x27;span&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;白&#x27;</span>)<br>  ])<br>])) <br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/TX2K8VIrhmfz4uG.png" alt="image-20220317230809710">  </p><h3 id="第三种形式"><a href="#第三种形式" class="headerlink" title="第三种形式"></a>第三种形式</h3><p>src \ mysnabbdom \ h.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 低配版本的h函数，必须接收3个参数</span><br><span class="hljs-comment"> * 调用可以有以下三种形式</span><br><span class="hljs-comment"> * 1. h(&#x27;div&#x27;, &#123;&#125;, &#x27;文字&#x27;)</span><br><span class="hljs-comment"> * 2. h(&#x27;div&#x27;, &#123;&#125;, [])</span><br><span class="hljs-comment"> * 3. h(&#x27;div&#x27;, &#123;&#125;, h())</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">import</span> &#123; h &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;snabbdom&#x27;</span><br><span class="hljs-keyword">import</span> vnode <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./vnode.js&#x27;</span><br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sel, data, content</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">arguments</span>.length !== <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;这是低配版h函数, 必须接收3个参数&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content === <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> content === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 形式1</span><br>    <span class="hljs-keyword">return</span> vnode(sel, data, <span class="hljs-literal">undefined</span>, content, <span class="hljs-literal">undefined</span>)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(content)) &#123;<br>    <span class="hljs-comment">// 形式2</span><br>    <span class="hljs-keyword">const</span> children = []<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; content.length; i++) &#123;<br>      <span class="hljs-keyword">if</span> (!(<span class="hljs-keyword">typeof</span> content[i] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; content[i].hasOwnProperty(<span class="hljs-string">&#x27;sel&#x27;</span>))) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;传入的数组中又有不是调用h函数的&#x27;</span>)<br>      &#125;<br><br>      children.push(content[i])      <span class="hljs-comment">// 因为传的数组里的元素就是调用h函数的，即得到的已经是处理过后返回的对象了</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> vnode(sel, data, children, <span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> content === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; content.hasOwnProperty(<span class="hljs-string">&#x27;sel&#x27;</span>)) &#123;<br>    <span class="hljs-comment">// 形式3：因为h函数最终会返回一个一定会有`sel`属性的对象</span><br><br>    <span class="hljs-keyword">return</span> vnode(sel, data, [content], <span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>)    <span class="hljs-comment">//把它当成只有一个元素的数组来处理</span><br><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;传入的第三个参数类型不对&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><p>src \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> h <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mysnabbdom/h.js&#x27;</span><br><br><span class="hljs-built_in">console</span>.log(h(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;&#125;, h(<span class="hljs-string">&#x27;span&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;赤蓝紫&#x27;</span>)))<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/DG3LTSUI5rY2fnx.png" alt="image-20220317232336683">  </p><h2 id="diff算法初体验"><a href="#diff算法初体验" class="headerlink" title="diff算法初体验"></a>diff算法初体验</h2><h3 id="在后面插入"><a href="#在后面插入" class="headerlink" title="在后面插入"></a>在后面插入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;<br>  init,<br>  classModule,<br>  propsModule,<br>  styleModule,<br>  eventListenersModule,<br>  h,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;snabbdom&quot;</span>;<br><br><span class="hljs-comment">// 加载模块，创建出patch函数。没有对应模块的话，上树后，也对应没有。比如少事件监听模块，上树后，事件将不再生效</span><br><span class="hljs-comment">// 类名模块、属性模块、样式模块、事件监听模块</span><br><span class="hljs-keyword">const</span> patch = init([classModule, propsModule, styleModule, eventListenersModule])<br><br><br><span class="hljs-keyword">const</span> myVnode1 = h(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123;&#125;, [<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;a&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;b&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;c&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;d&#x27;</span>),<br>])<br><span class="hljs-keyword">const</span> myVnode2 = h(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123;&#125;, [<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;a&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;b&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;c&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;d&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;e&#x27;</span>)<br>])<br><br><span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>)<br>patch(container, myVnode1)     <span class="hljs-comment">// 上树</span><br><span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;btn&#x27;</span>)<br>btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  patch(myVnode1, myVnode2)     <span class="hljs-comment">// 点击后，从myVnode1变为myVnode2</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/18/AkMaWPzLBOCnTYg.gif" alt="diff"></p><br><p>怎么知道是不是真的是最小量更新呢?</p><p>可以用老师用的巧妙法：在<code> DevTools</code>的<code> Elements</code>面板修改内容，查看有没有变化</p><p><img src="https://s2.loli.net/2022/03/18/DN6x41u3nfImF8y.gif" alt="diff"></p><p>可以发现，确确实实是最小量更新。仔细看上面的图，发现不需要修改<code> Elements</code>面板，有更新的话，会变紫，闪烁一下</p><br><h3 id="在前面插入"><a href="#在前面插入" class="headerlink" title="在前面插入"></a>在前面插入</h3><p>那么，接下来就试一下在开头加入新节点的情况咯</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myVnode2 = h(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123;&#125;, [<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;e&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;a&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;b&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;c&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;d&#x27;</span>)<br>])<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/18/U8oeIQZSaEKYgb6.gif" alt="diff"></p><p>可以说是，上面的情况压根就不是最小量更新。</p><p>这是为什么呢？这时候就需要<code> key</code>的闪亮登场了</p><p><strong>没有key的时候</strong>：会先把节点插到最后，再把插入的节点移动到要去的位置，其他节点也需要移动到要去的位置</p><br><h3 id="在中间插入"><a href="#在中间插入" class="headerlink" title="在中间插入"></a>在中间插入</h3><p>可以再来测试一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myVnode2 = h(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123;&#125;, [<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;a&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;e&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;b&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;c&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;d&#x27;</span>)<br>])<br></code></pre></td></tr></table></figure><p>这时候，只有a不会变化，因为e插入的位置不会影响到a</p><br><hr><h3 id="使用key，真正实现最小量更新"><a href="#使用key，真正实现最小量更新" class="headerlink" title="使用key，真正实现最小量更新"></a>使用key，真正实现最小量更新</h3><p>有<code> key</code>的时候，就不一样了，每一个虚拟节点都有一个唯一标识，所以能够精准定位，真正实现最小化更新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myVnode1 = h(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123;&#125;, [<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;a&#x27;</span> &#125;, <span class="hljs-string">&#x27;a&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;b&#x27;</span> &#125;, <span class="hljs-string">&#x27;b&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;, <span class="hljs-string">&#x27;c&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;d&#x27;</span> &#125;, <span class="hljs-string">&#x27;d&#x27;</span>),<br>])<br><span class="hljs-keyword">const</span> myVnode2 = h(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123;&#125;, [<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;e&#x27;</span> &#125;, <span class="hljs-string">&#x27;e&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;a&#x27;</span> &#125;, <span class="hljs-string">&#x27;a&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;b&#x27;</span> &#125;, <span class="hljs-string">&#x27;b&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;, <span class="hljs-string">&#x27;c&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;d&#x27;</span> &#125;, <span class="hljs-string">&#x27;d&#x27;</span>)<br>])<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/18/bwVOU5AZWy9CEa8.gif" alt="diff"></p><br><h3 id="使用key，并完全调换位置"><a href="#使用key，并完全调换位置" class="headerlink" title="使用key，并完全调换位置"></a>使用key，并完全调换位置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myVnode1 = h(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123;&#125;, [<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;a&#x27;</span> &#125;, <span class="hljs-string">&#x27;a&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;b&#x27;</span> &#125;, <span class="hljs-string">&#x27;b&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;, <span class="hljs-string">&#x27;c&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;d&#x27;</span> &#125;, <span class="hljs-string">&#x27;d&#x27;</span>),<br>])<br><span class="hljs-keyword">const</span> myVnode2 = h(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123;&#125;, [<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;d&#x27;</span> &#125;, <span class="hljs-string">&#x27;d&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;a&#x27;</span> &#125;, <span class="hljs-string">&#x27;a&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;e&#x27;</span> &#125;, <span class="hljs-string">&#x27;e&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;b&#x27;</span> &#125;, <span class="hljs-string">&#x27;b&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;, <span class="hljs-string">&#x27;c&#x27;</span>),<br>])<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/18/I4ucHBbE25iGv8A.gif" alt="diff"></p><p>还是最小量更新。另外，闪烁法还是不太可靠，建议还是修改Element法</p><br><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p><strong>最小量更新</strong>：需要<code>key</code>，<code> key</code>是节点的唯一标识，用于告诉<code> diff</code>算法，在更改前后是同一个DOM节点</p></li><li><p><strong>只有是同一个虚拟节点，才会进行精细化比较</strong>，否则就是暴力删除旧的、插入新的。如上面的例子中，从<code> ul</code>变为<code> ol</code></p><p><strong>同一个虚拟节点</strong>：选择器相同且<code> key</code>相同</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 供测试用：可以使用回上面说的修改Elemens面板法(不过，下面的例子实际开发遇到的可能性很小)</span><br><br><span class="hljs-keyword">const</span> myVnode1 = h(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;ul1&#x27;</span> &#125;, [<br>h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;a&#x27;</span> &#125;, <span class="hljs-string">&#x27;a&#x27;</span>),<br>h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;b&#x27;</span> &#125;, <span class="hljs-string">&#x27;b&#x27;</span>),<br>h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;, <span class="hljs-string">&#x27;c&#x27;</span>),<br>h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;d&#x27;</span> &#125;, <span class="hljs-string">&#x27;d&#x27;</span>),<br>])<br><span class="hljs-keyword">const</span> myVnode2 = h(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;ul2&#x27;</span> &#125;, [<br>h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;e&#x27;</span> &#125;, <span class="hljs-string">&#x27;e&#x27;</span>),<br>h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;a&#x27;</span> &#125;, <span class="hljs-string">&#x27;a&#x27;</span>),<br>h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;b&#x27;</span> &#125;, <span class="hljs-string">&#x27;b&#x27;</span>),<br>h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;, <span class="hljs-string">&#x27;c&#x27;</span>),<br>h(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;d&#x27;</span> &#125;, <span class="hljs-string">&#x27;d&#x27;</span>)<br>])<br></code></pre></td></tr></table></figure></blockquote></li><li><p><strong>只进行同层比较，不进行跨层比较</strong>。如果跨层了，则依然是暴力删除旧的，然后插入新的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 下面的例子实际开发遇到的可能性很小</span><br><span class="hljs-keyword">const</span> myVnode1 = h(<span class="hljs-string">&#x27;div&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;box&#x27;</span> &#125;, [<br>  h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;a&#x27;</span> &#125;, <span class="hljs-string">&#x27;a&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;b&#x27;</span> &#125;, <span class="hljs-string">&#x27;b&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;, <span class="hljs-string">&#x27;c&#x27;</span>),<br>  h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;d&#x27;</span> &#125;, <span class="hljs-string">&#x27;d&#x27;</span>),<br>])<br><span class="hljs-keyword">const</span> myVnode2 = h(<span class="hljs-string">&#x27;div&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;box&#x27;</span> &#125;,<br>  h(<span class="hljs-string">&#x27;section&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;section&#x27;</span> &#125;, [<br>    h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;e&#x27;</span> &#125;, <span class="hljs-string">&#x27;e&#x27;</span>),<br>    h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;a&#x27;</span> &#125;, <span class="hljs-string">&#x27;a&#x27;</span>),<br>    h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;b&#x27;</span> &#125;, <span class="hljs-string">&#x27;b&#x27;</span>),<br>    h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;, <span class="hljs-string">&#x27;c&#x27;</span>),<br>    h(<span class="hljs-string">&#x27;p&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;d&#x27;</span> &#125;, <span class="hljs-string">&#x27;d&#x27;</span>)<br>  ])<br>)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/18/4QUgJWP5nlZwrcb.gif" alt="diff"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue源码之虚拟DOM和diff算法-一-使用snabbdom&quot;&gt;&lt;a href=&quot;#Vue源码之虚拟DOM和diff算法-一-使用snabbdom&quot; class=&quot;headerlink&quot; title=&quot;Vue源码之虚拟DOM和diff算法(一)    使用sna</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue源码" scheme="https://www.clzczh.top/tags/Vue%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>CSS画圆、三角形、品字、骰子</title>
    <link href="https://www.clzczh.top/2022/04/04/css-paint/"/>
    <id>https://www.clzczh.top/2022/04/04/css-paint/</id>
    <published>2022-04-04T06:17:28.000Z</published>
    <updated>2022-04-04T06:18:25.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS画圆、三角形、品字、骰子"><a href="#CSS画圆、三角形、品字、骰子" class="headerlink" title="CSS画圆、三角形、品字、骰子"></a>CSS画圆、三角形、品字、骰子</h1><h2 id="圆"><a href="#圆" class="headerlink" title="圆"></a>圆</h2><p>让<code> border-radius</code>属性的值等于盒子高度的一半就行(当然，盒子得是正方形才能得到圆，否则便不是圆)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.circle</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;circle&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/04/PVKjdXqZuM3lhwf.png" alt="image-20220331231836859"></p><h2 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h2><p>原理：<strong>相邻边框均分</strong></p><p>这是什么意思呢？</p><p>看下例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.triangle1</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">border-left-width</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">    <span class="hljs-attribute">border-left-style</span>: solid;</span><br><span class="css">    <span class="hljs-attribute">border-left-color</span>: blue;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.triangle2</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">    <span class="hljs-attribute">border-style</span>: solid;</span><br><span class="css">    <span class="hljs-attribute">border-left-color</span>: blue;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;triangle1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;triangle2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/04/mMYZN5iqgsjGBnF.png" alt="image-20220331220603126"></p><p>可以知道，边框实际上应该是长方形或正方形的，但是第二个例子中，出现了梯形的边框，这就是因为有左边框，同时还有上下边框，但是位置是有限的，所以它们互相体谅，最后，每人拿一半。</p><br><p>那么，怎样才能用纯CSS画三角形呢？</p><p>首先，中间粉色的区域是一定要去掉的，所以让盒子没有宽高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.triangle</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">border-style</span>: solid;<br>  <span class="hljs-attribute">border-left-color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/31/2DNTQSmGKwACYUX.png" alt="image-20220331221302109"></p><p>可以看到，三角形已经出来了，那么，设置边框的颜色为透明，然后，只让一边的边框有颜色，就能画出三角形</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.triangle</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">border-style</span>: solid;<br>  <span class="hljs-attribute">border-color</span>: transparent;<br>  <span class="hljs-attribute">border-left-color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/04/c17gGQzO93m6qjK.png" alt="image-20220331221500139"></p><br><h2 id="满屏品字"><a href="#满屏品字" class="headerlink" title="满屏品字"></a>满屏品字</h2><p>上面一块使用<code> margin: 0 auto</code>居中，下面两块要用<code> float</code>或<code> inline-block</code>控制不换行(<code> inline-block</code>可能还是会导致换行，因为可能会出现滚动条)</p><p><strong>另外，需要满屏，所以上下应该各占50%，但是呢，默认的<code> html</code>和<code> body</code>高度为0，所以需要设置高度为<code> 100%</code></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">html</span>,</span><br><span class="css">  <span class="hljs-selector-tag">body</span>,</span><br><span class="css">  <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">html</span>,</span><br><span class="css">  <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">    <span class="hljs-comment">/* 让div盒子高度能使用百分比形式 */</span></span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.top</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.bottom</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.left</span>,</span><br><span class="css">  <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">float</span>: left;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: blue;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/31/Orq6cNvFWDJiRX5.png" alt="image-20220331230500566"></p><br><h2 id="骰子"><a href="#骰子" class="headerlink" title="骰子"></a>骰子</h2><p>主要是通过flex布局实现，flex布局的主要语法可查看本人写的另一篇(原本在个人博客上的，发到掘金上了)</p><br><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>一的情况比较简单，设置flex布局后，同时设置水平垂直居中即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">        <span class="hljs-attribute">justify-content</span>: center;<span class="hljs-comment">/* 实现水平居中 */</span></span><br><span class="css">        <span class="hljs-attribute">align-items</span>: center;<span class="hljs-comment">/* 实现垂直居中 */</span></span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">90px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">90px</span>;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.item</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/01/PvzdcRtfELM2XZj.png" alt="image-20220401210154269"></p><br><h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p>首先，通过<code> justify-content: space-between;</code>，实现首元素在起点，尾元素在终点。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">90px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">90px</span>;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">        <span class="hljs-comment">/* 均匀排列每个元素。首个元素放置于起点，末尾元素放置于终点 */</span></span><br><span class="css">        <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.item</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">30%</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30%</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>然后，通过<code> align-self: flex-end;</code>把尾元素单独拖下来</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-attribute">align-self</span>: flex-end;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/04/PpeqUaYkjOg8msl.png" alt="image-20220401211517836"></p><br><h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>三的做法和二类似，不同的是，三需要把第三个元素拖下来，而第二个元素应该在中间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">90px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">90px</span>;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">        <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.item</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="css">        <span class="hljs-comment">/* 单独控制子元素在侧轴上的排列方式 */</span></span><br><span class="css">        <span class="hljs-attribute">align-self</span>: center;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">align-self</span>: flex-end;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/04/jwZsOXcSWMPnUKi.png" alt="image-20220401211948993"></p><br><h3 id="四"><a href="#四" class="headerlink" title="四"></a>四</h3><p>四的情况麻烦一点点。</p><p>首先，html的结构需要增加上下两个中盒子。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>然后，上下两个中盒子，分别要在大盒子的上下，所以大盒子需要设置主轴为垂直方向，并设置<code> justify-content: space-between;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">90px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">90px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>    <span class="hljs-comment">/* 设置主轴为垂直方向 */</span><br>    <span class="hljs-attribute">flex-direction</span>: column;<br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>最后，两个中盒子也得设置为<code> flex</code>，因为它们的子元素也需要<code> justify-content: space-between;</code>来实现，一人在左，一人在右。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.top</span>,<br><span class="hljs-selector-class">.bottom</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>item盒子的样式直接拿上面的即可</p><p><img src="https://s2.loli.net/2022/04/04/cFUE2Rtkrf1Ga5e.png" alt="image-20220401212824132"></p><br><h3 id="五"><a href="#五" class="headerlink" title="五"></a>五</h3><p>五和四类似，需要再来一个中盒子，然后让这个中盒子单独居中局可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;middle&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.middle</span> &#123;<br>    <span class="hljs-attribute">align-self</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/04/ICuYaEKrOAtGgFS.png" alt="image-20220401213326677"></p><br><h3 id="六"><a href="#六" class="headerlink" title="六"></a>六</h3><p>六和四一摸一样做法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>     <span class="hljs-attribute">display</span>: flex;<br>     <span class="hljs-attribute">width</span>: <span class="hljs-number">90px</span>;<br>     <span class="hljs-attribute">height</span>: <span class="hljs-number">90px</span>;<br>     <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;<br>     <span class="hljs-attribute">background-color</span>: pink;<br>     <span class="hljs-attribute">flex-direction</span>: column;<br>     <span class="hljs-attribute">justify-content</span>: space-between;<br> &#125;<br><br> <span class="hljs-selector-class">.top</span>,<br> <span class="hljs-selector-class">.bottom</span> &#123;<br>     <span class="hljs-attribute">display</span>: flex;<br>     <span class="hljs-attribute">justify-content</span>: space-between;<br> &#125;<br><br> <span class="hljs-selector-class">.item</span> &#123;<br>     <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;<br>     <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>     <span class="hljs-attribute">background-color</span>: purple;<br>     <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br> &#125;<br><br> <span class="hljs-selector-class">.top</span>&gt;<span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>),<br> <span class="hljs-selector-class">.bottom</span>&gt;<span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>     <span class="hljs-comment">/* 产生点间距，好看点 */</span><br>     <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">1px</span>;<br> &#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/04/qDKCIL5clQTAdsz.png" alt="image-20220401213738860"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS画圆、三角形、品字、骰子&quot;&gt;&lt;a href=&quot;#CSS画圆、三角形、品字、骰子&quot; class=&quot;headerlink&quot; title=&quot;CSS画圆、三角形、品字、骰子&quot;&gt;&lt;/a&gt;CSS画圆、三角形、品字、骰子&lt;/h1&gt;&lt;h2 id=&quot;圆&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://www.clzczh.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>清除浮动的四种方式</title>
    <link href="https://www.clzczh.top/2022/03/30/css-float/"/>
    <id>https://www.clzczh.top/2022/03/30/css-float/</id>
    <published>2022-03-30T13:11:42.000Z</published>
    <updated>2022-04-10T03:59:56.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="清除浮动的四种方式"><a href="#清除浮动的四种方式" class="headerlink" title="清除浮动的四种方式"></a>清除浮动的四种方式</h1><h2 id="浮动是什么"><a href="#浮动是什么" class="headerlink" title="浮动是什么"></a>浮动是什么</h2><p>CSS 的 Float（浮动），会使元素向左或向右移动，直到外边缘碰到包含框或另一个浮动元素位置。</p><br><p><strong>浮动元素的特征</strong>：</p><ul><li>浮动的元素会脱离文档流</li><li>浮动的元素会紧挨在一起</li><li>浮动元素具有类似行内块元素的特性。所以行内元素有了浮动，不再需要转换为块级或行内块级元素元素</li><li>收缩。浮动的元素，如果没有设置width，会自动收缩为内容的宽度。比如块级盒子，如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，会收缩成内容的宽度</li></ul><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;box&quot;</span>]</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;box&quot;</span>]</span>&gt;<span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;box&quot;</span>]</span>&gt;<span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.box1</span>&gt;<span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">float</span>: left;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.box1</span>&gt;<span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">float</span>: left;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>浮动div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>浮动span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>不浮动div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>不浮动span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/24/8XHOLg5cTheqoaJ.png" alt="image-20220324192531879"></p><br><h2 id="浮动导致的问题1"><a href="#浮动导致的问题1" class="headerlink" title="浮动导致的问题1"></a>浮动导致的问题1</h2><p>浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。</p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1 float&quot;</span>&gt;</span>box1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2 float&quot;</span>&gt;</span>box2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span>box3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[class^=<span class="hljs-string">&#x27;box&#x27;</span>]</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">160</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">133</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">85</span>, <span class="hljs-number">7</span>, <span class="hljs-number">85</span>);<br>&#125;<br><br><span class="hljs-selector-class">.float</span> &#123;<br>  <span class="hljs-attribute">float</span>: left;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/clzczh/picgo/raw/master/images/202204101159592.png" alt="image-20220310151022141"></p><p>实际上box3确实有300px，只是box1浮起来了，所以，box3有200px在box1下，设置box1的<code> opacity</code>为0即可看出来。</p><p><img src="https://gitee.com/clzczh/picgo/raw/master/images/202204101159002.png" alt="image-20220310151222520"></p><br><h2 id="浮动导致的问题2"><a href="#浮动导致的问题2" class="headerlink" title="浮动导致的问题2"></a>浮动导致的问题2</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">float</span>: left;</span><br><span class="css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">      <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">2px</span> solid purple;</span><br><span class="css">      <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>想要的效果：</p><p><img src="https://s2.loli.net/2022/03/24/BVLHE1lpuTGysfP.png" alt="image-20220324195050428"></p><br><p>实际效果：</p><p><img src="https://s2.loli.net/2022/03/24/GacKEHTUoqwmMh6.png" alt="image-20220324195120085"></p><p>**原因：<code> div</code>没有高度，不能给浮动的子元素一个容器，所以第二个<code> div</code>的<code>li</code>就紧贴到第一个<code> div</code>中最后的一个<code> li</code>去了 **</p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p><strong>清除浮动是为了清除使用浮动产生的影响。</strong></p><h3 id="1-浮动元素的祖先元素添加高度"><a href="#1-浮动元素的祖先元素添加高度" class="headerlink" title="1. 浮动元素的祖先元素添加高度"></a>1. 浮动元素的祖先元素添加高度</h3><p><strong>很少用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">.container &#123;<br>  <span class="hljs-attr">height</span>: 200px;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/24/6pVklvaxe5OyDNZ.png" alt="image-20220310152509811"></p><br><h3 id="2-额外标签法"><a href="#2-额外标签法" class="headerlink" title="2. 额外标签法"></a>2. 额外标签法</h3><p>在浮动元素后使用一个空元素，并携带<code> clear: both</code>属性。(当然，也可以是<code> left</code>、<code> right</code>值)，就是<code>both</code>，会把所有情况的浮动都清掉。</p><p>问题：</p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 初级版：外墙板。第一个div(container)的margin-bottom失效了 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1 float&quot;</span>&gt;</span>box1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2 float&quot;</span>&gt;</span>box2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span>box3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 升级版：内墙版 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1 float&quot;</span>&gt;</span>box1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2 float&quot;</span>&gt;</span>box2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span>box3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clear</span> &#123;<br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果同上</p><br><h3 id="3-overflow法"><a href="#3-overflow法" class="headerlink" title="3. overflow法"></a>3. overflow法</h3><p>给浮动元素的元素添加<code> overflow: hidden</code>或<code> overflow: auto</code>清除浮动。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果如上图所示。</p><h3 id="4-after伪元素法"><a href="#4-after伪元素法" class="headerlink" title="4. after伪元素法"></a>4. after伪元素法</h3><p>IE8以上和非IE浏览器才支持:after，zoom(IE专有属性)可解决ie6,ie7浮动问题(个人倒是感觉没啥意义，IE6版本也太老了吧，这都得兼容的话，更何况这年头，还真不知道谁还用IE)</p><p>给浮动元素的容器添加一个clearfix的class，然后给这个class添加一个:after伪元素清除浮动。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container clearfix&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1 float&quot;</span>&gt;</span>box1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2 float&quot;</span>&gt;</span>box2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span>box3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span> &#123;<br>  <span class="hljs-comment">/* 兼容IE6、7，个人觉得大可不必(乱说的) */</span><br>  zoom: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-comment">/*因为clear对块级元素有效，伪元素:before和:after添加的内容默认是inline元素*/</span><br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-comment">/* 清除浮动 */</span><br>  <span class="hljs-attribute">clear</span>: both;<br>  <span class="hljs-comment">/*不显示该区域，content为空，实际可省略*/</span><br>  <span class="hljs-attribute">visibility</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果如上图所示。</p><p>实际上，下面的代码就足够了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span>:before &#123;<br>  content: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="5-双伪元素法"><a href="#5-双伪元素法" class="headerlink" title="5. 双伪元素法"></a>5. 双伪元素法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span>:after,<br>.clearfix:before &#123;<br>  content: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></td></tr></table></figure><p>原理就和上面一样</p><br><p>参考链接：<a href="https://www.jb51.net/css/502268.html[">关于清除浮动塌陷的几种方法总结</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;清除浮动的四种方式&quot;&gt;&lt;a href=&quot;#清除浮动的四种方式&quot; class=&quot;headerlink&quot; title=&quot;清除浮动的四种方式&quot;&gt;&lt;/a&gt;清除浮动的四种方式&lt;/h1&gt;&lt;h2 id=&quot;浮动是什么&quot;&gt;&lt;a href=&quot;#浮动是什么&quot; class=&quot;header</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://www.clzczh.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码之mustache模板引擎(二)	手写实现mustache</title>
    <link href="https://www.clzczh.top/2022/03/28/vue-mustache-2/"/>
    <id>https://www.clzczh.top/2022/03/28/vue-mustache-2/</id>
    <published>2022-03-28T10:31:20.000Z</published>
    <updated>2022-03-28T10:32:52.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue源码之mustache模板引擎-二-手写实现mustache"><a href="#Vue源码之mustache模板引擎-二-手写实现mustache" class="headerlink" title="Vue源码之mustache模板引擎(二)    手写实现mustache"></a>Vue源码之mustache模板引擎(二)    手写实现mustache</h1><blockquote><p><a href="https://unpkg.com/mustache@4.2.0/mustache.js">mustache.js</a></p></blockquote><p>个人练习结果仓库(持续更新)：<a href="https://github.com/13535944743/Vue_Source_Code_Practise">Vue源码解析</a></p><h2 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h2><p>可以参考之前的笔记<a href="https://clz.vercel.app/2022/02/06/yc-webpack/">Webpack笔记</a></p><p>安装：<code> npm i -D webpack webpack-cli webpack-dev-server</code></p><p><strong>webpack.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">&#x27;src&#x27;</span>, <span class="hljs-string">&#x27;index.js&#x27;</span>),<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>    <span class="hljs-comment">// 虚拟打包路径，bundle.js文件没有真正的生成</span><br>    <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&quot;/virtual/&quot;</span><br>  &#125;,<br><br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-comment">// 静态文件根目录</span><br>    <span class="hljs-attr">static</span>: path.join(__dirname, <span class="hljs-string">&#x27;www&#x27;</span>),<br>    <span class="hljs-comment">// 不压缩</span><br>    <span class="hljs-attr">compress</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>修改<code> package.json</code>，更方便地使用指令</p><p><img src="https://s2.loli.net/2022/03/28/2T3b4o5zwlVB8kj.png" alt="image-20220313161823530"></p><hr><p>编写示例代码</p><p>src \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mytest &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./test.js&#x27;</span><br><br>mytest()<br></code></pre></td></tr></table></figure><br><p>src \ test.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mytest = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1+1=2&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><br><p>www \ index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/virtual/bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>**<code> npm run dev</code>**，到<a href="http://localhost:8080/%E6%9F%A5%E7%9C%8B">http://localhost:8080/查看</a></p><p><img src="https://s2.loli.net/2022/03/28/2fd8xU6Pnza3bMR.png" alt="image-20220313161924306"></p><br><h2 id="实现Scanner类"><a href="#实现Scanner类" class="headerlink" title="实现Scanner类"></a>实现Scanner类</h2><p>Scanner类功能：将模板字符串根据指定字符串(如<code> &#123;&#123;` 和` &#125;&#125;</code>)切成多部分</p><p>有两个主要方法<strong>scan</strong>和<strong>scanUtil</strong></p><ul><li><strong>scan</strong>： 跳过指定内容，无返回值</li><li><strong>scanUtil</strong>：让指针进行扫描，遇到指定内容才结束，还会返回结束之前遍历过的字符</li></ul><p><img src="https://s2.loli.net/2022/03/28/4ixWmzltFCwhGMe.png" alt="image-20220314000348836"></p><h3 id="scanUtil方法"><a href="#scanUtil方法" class="headerlink" title="scanUtil方法"></a>scanUtil方法</h3><p>先来一下构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">templateStr</span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.templateStr = templateStr<br>  <span class="hljs-comment">// 指针</span><br>  <span class="hljs-built_in">this</span>.pos = <span class="hljs-number">0</span><br>  <span class="hljs-comment">// 尾巴，用于获取除指定符号外的内容(即`&#123;&#123;`和`&#125;&#125;`)</span><br>  <span class="hljs-built_in">this</span>.tail = <span class="hljs-built_in">this</span>.templateStr<br>&#125;<br></code></pre></td></tr></table></figure><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 让指针进行扫描，遇到指定内容才结束，还会返回结束之前遍历过的字符</span><br><span class="hljs-function"><span class="hljs-title">scanUtil</span>(<span class="hljs-params">stopTag</span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> start = <span class="hljs-built_in">this</span>.pos  <span class="hljs-comment">// 存放开始位置，用于返回结束前遍历过的字符</span><br><br>  <span class="hljs-comment">// 没到指定内容时，都一直循环，尾巴也跟着变化</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.tail.indexOf(stopTag) !== <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">this</span>.pos &lt; <span class="hljs-built_in">this</span>.templateStr.length) &#123;    <span class="hljs-comment">// 后面的另一个条件必须，因为最后需要跳出循环</span><br>    <span class="hljs-built_in">this</span>.pos++<br>    <span class="hljs-built_in">this</span>.tail = <span class="hljs-built_in">this</span>.templateStr.substring(<span class="hljs-built_in">this</span>.pos)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.templateStr.substring(start, <span class="hljs-built_in">this</span>.pos)      <span class="hljs-comment">// 返回结束前遍历过的字符</span><br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="scan方法"><a href="#scan方法" class="headerlink" title="scan方法"></a>scan方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 跳过指定内容，无返回值</span><br><span class="hljs-function"><span class="hljs-title">scan</span>(<span class="hljs-params">tag</span>)</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.tail.indexOf(tag) === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">this</span>.pos += tag.length<br>    <span class="hljs-built_in">this</span>.tail = <span class="hljs-built_in">this</span>.templateStr.substring(<span class="hljs-built_in">this</span>.pos)<br>    <span class="hljs-comment">// console.log(this.tail)</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="eos方法"><a href="#eos方法" class="headerlink" title="eos方法"></a>eos方法</h3><p>因为模板字符串中需要反复使用<strong>scan</strong>和<strong>scanUtil</strong>方法去把模板字符串完全切成多部份，所以需要循环，而循环结束的条件就是已经遍历完模板字符串了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// end of string：判断模板字符串是否已经走到尽头了</span><br><span class="hljs-function"><span class="hljs-title">eos</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.pos === <span class="hljs-built_in">this</span>.templateStr.length<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完整类"><a href="#完整类" class="headerlink" title="完整类"></a>完整类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 扫描器类</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Scanner</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">templateStr</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.templateStr = templateStr<br>    <span class="hljs-comment">// 指针</span><br>    <span class="hljs-built_in">this</span>.pos = <span class="hljs-number">0</span><br>    <span class="hljs-comment">// 尾巴，用于获取除指定符号外的内容(即`&#123;&#123;`和`&#125;&#125;`)</span><br>    <span class="hljs-built_in">this</span>.tail = <span class="hljs-built_in">this</span>.templateStr<br>  &#125;<br><br>  <span class="hljs-comment">// 跳过指定内容，无返回值</span><br>  <span class="hljs-function"><span class="hljs-title">scan</span>(<span class="hljs-params">tag</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.tail.indexOf(tag) === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">this</span>.pos += tag.length<br>      <span class="hljs-built_in">this</span>.tail = <span class="hljs-built_in">this</span>.templateStr.substring(<span class="hljs-built_in">this</span>.pos)<br>      <span class="hljs-comment">// console.log(this.tail)</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 让指针进行扫描，遇到指定内容才结束，还会返回结束之前遍历过的字符</span><br>  <span class="hljs-function"><span class="hljs-title">scanUtil</span>(<span class="hljs-params">stopTag</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> start = <span class="hljs-built_in">this</span>.pos  <span class="hljs-comment">// 存放开始位置，用于返回结束前遍历过的字符</span><br><br>    <span class="hljs-comment">// 没到指定内容时，都一直循环，尾巴也跟着变化</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.tail.indexOf(stopTag) !== <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">this</span>.pos &lt; <span class="hljs-built_in">this</span>.templateStr.length) &#123;    <span class="hljs-comment">// 后面的另一个条件必须，因为最后需要跳出循环</span><br>      <span class="hljs-built_in">this</span>.pos++<br>      <span class="hljs-built_in">this</span>.tail = <span class="hljs-built_in">this</span>.templateStr.substring(<span class="hljs-built_in">this</span>.pos)<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.templateStr.substring(start, <span class="hljs-built_in">this</span>.pos)      <span class="hljs-comment">// 返回结束前遍历过的字符</span><br>  &#125;<br><br>  <span class="hljs-comment">// end of string：判断模板字符串是否已经走到尽头了</span><br>  <span class="hljs-function"><span class="hljs-title">eos</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.pos === <span class="hljs-built_in">this</span>.templateStr.length<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h3><p>src / index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Scanner <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Scanner.js&#x27;</span><br><br><span class="hljs-built_in">window</span>.TemplateEngine = &#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params">templateStr, data</span>)</span> &#123;<br>    <span class="hljs-comment">// 实例化一个扫描器</span><br>    <span class="hljs-keyword">const</span> scanner = <span class="hljs-keyword">new</span> Scanner(templateStr)<br><br>    <span class="hljs-keyword">while</span> (!scanner.eos()) &#123;<br>      <span class="hljs-keyword">let</span> words = scanner.scanUtil(<span class="hljs-string">&#x27;&#123;&#123;&#x27;</span>)<br>      <span class="hljs-built_in">console</span>.log(words)<br>      scanner.scan(<span class="hljs-string">&#x27;&#123;&#123;&#x27;</span>)<br><br>      words = scanner.scanUtil(<span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>)<br>      <span class="hljs-built_in">console</span>.log(words)<br>      scanner.scan(<span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>www / index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/virtual/bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">    const templateStr = `</span></span><br><span class="xml"><span class="handlebars">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="xml">, 年龄为</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">age</span>&#125;&#125;</span><span class="xml">岁<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">    `</span></span><br><span class="xml"><span class="handlebars">    const data = &#123;</span></span><br><span class="xml"><span class="handlebars">      name: &#x27;clz&#x27;,</span></span><br><span class="xml"><span class="handlebars">      age: 21</span></span><br><span class="xml"><span class="handlebars">    &#125;</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">    const domStr = TemplateEngine.render(templateStr, data)</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">  </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/28/ZthsIen7zu5NdFf.png" alt="image-20220314002049092"></p><br><h2 id="封装并实现将模板字符串编译成tokens数组"><a href="#封装并实现将模板字符串编译成tokens数组" class="headerlink" title="封装并实现将模板字符串编译成tokens数组"></a>封装并实现将模板字符串编译成tokens数组</h2><p>首先，把<code> src / index.js</code>的代码修改一下，封装成<code> parseTemplateToTokens</code>方法</p><p><strong>src \ index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> parseTemplateToTokens <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./parseTemplateToTokens.js&#x27;</span><br><br><span class="hljs-built_in">window</span>.TemplateEngine = &#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params">templateStr, data</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> tokens = parseTemplateToTokens(templateStr)<br>    <span class="hljs-built_in">console</span>.log(tokens)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="实现简单版本"><a href="#实现简单版本" class="headerlink" title="实现简单版本"></a>实现简单版本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 把模板字符串编译成tokens数组</span><br><span class="hljs-keyword">import</span> Scanner <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Scanner.js&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseTemplateToTokens</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> tokens = []<br><br>  <span class="hljs-comment">// 实例化一个扫描器</span><br>  <span class="hljs-keyword">const</span> scanner = <span class="hljs-keyword">new</span> Scanner(templateStr)<br><br>  <span class="hljs-keyword">while</span> (!scanner.eos()) &#123;<br>    <span class="hljs-keyword">let</span> words = scanner.scanUtil(<span class="hljs-string">&#x27;&#123;&#123;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (words !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>      tokens.push([<span class="hljs-string">&#x27;text&#x27;</span>, words])  <span class="hljs-comment">// 把text部分存好：：左括号之前的是text</span><br>    &#125;<br><br>    scanner.scan(<span class="hljs-string">&#x27;&#123;&#123;&#x27;</span>)<br><br>    words = scanner.scanUtil(<span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (words !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>      tokens.push([<span class="hljs-string">&#x27;name&#x27;</span>, words])    <span class="hljs-comment">// 把name部分存好：：右括号之前的是name</span><br>    &#125;<br><br>    scanner.scan(<span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> tokens<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/28/mtdPsIF2oiG5UyZ.png" alt="image-20220314142032812"></p><br><h3 id="提取特殊符号"><a href="#提取特殊符号" class="headerlink" title="提取特殊符号"></a>提取特殊符号</h3><p>用上一个版本的试一下，嵌套数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;ul&gt;</span><br><span class="hljs-string">    &#123;&#123;#arr&#125;&#125;</span><br><span class="hljs-string">      &lt;li&gt;</span><br><span class="hljs-string">        &#123;&#123;name&#125;&#125;喜欢的颜色是:</span><br><span class="hljs-string">        &lt;ol&gt;</span><br><span class="hljs-string">          &#123;&#123;#colors&#125;&#125;</span><br><span class="hljs-string">            &lt;li&gt;&#123;&#123;.&#125;&#125;&lt;/li&gt;</span><br><span class="hljs-string">          &#123;&#123;/colors&#125;&#125;</span><br><span class="hljs-string">        &lt;/ol&gt;</span><br><span class="hljs-string">      &lt;/li&gt;</span><br><span class="hljs-string">    &#123;&#123;/arr&#125;&#125;</span><br><span class="hljs-string">  &lt;/ul&gt;</span><br><span class="hljs-string">`</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/28/Rnf1vePQil6hjw2.png" alt="image-20220314142439828"></p><p>发现存在点问题，所以需要提取特殊符号<code> #</code>和<code> /</code></p><br><p><strong>取到words时，判断一下第一位符号是不是特殊字符，对特殊字符进行提取</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (words !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (words[<span class="hljs-number">0</span>]) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;#&#x27;</span>:<br>      tokens.push([<span class="hljs-string">&#x27;#&#x27;</span>, words.substring(<span class="hljs-number">1</span>)])<br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>      tokens.push([<span class="hljs-string">&#x27;/&#x27;</span>, words.substring(<span class="hljs-number">1</span>)])<br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-attr">default</span>:<br>      tokens.push([<span class="hljs-string">&#x27;text&#x27;</span>, words])<span class="hljs-comment">// 把text部分存好</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/HxSjc9GKiFX1n6w.png" alt="image-20220315184648878"></p><p>又发现，还是没有实现，框框部分应该是tokens里的嵌套tokens才对</p><br><h3 id="实现嵌套tokens"><a href="#实现嵌套tokens" class="headerlink" title="实现嵌套tokens"></a>实现嵌套tokens</h3><p>关键：定义一个收集器<code>collector </code>，一开始指向要返回的<code> nestTokens</code>数组，每当遇到<code> #</code>，则把它指向新的位置，遇到<code> /</code>，时，又回到上一阶，且数组是引用变量，所以给<code> colleator</code> <code> push</code>数据时，对应指向的位置也会跟着增加数据。</p><p>为了实现收集器<code> colleator</code>能顺利回到上一阶，那么就需要增加一个栈<code> sections</code>，每当遇到<code> #</code>时，token入栈；而当遇到<code> /</code>时，出栈，并判断<code> sections</code>是否为空，为空的话，则重新指向<code> nestTokens</code>，不空的话，则指向<code> 栈顶</code>下标为2的元素。</p><hr><p>src \ nestTokens.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 把#和/之间的tokens整合起来，作为#所在数组的下标为2的项</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nestTokens</span>(<span class="hljs-params">tokens</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> nestTokens = []<br>  <span class="hljs-keyword">const</span> sections = []   <span class="hljs-comment">// 栈结构</span><br>  <span class="hljs-keyword">let</span> collector = nestTokens<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; tokens.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> token = tokens[i]<br><br>    <span class="hljs-keyword">switch</span> (token[<span class="hljs-number">0</span>]) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;#&#x27;</span>:<br>        collector.push(token)<br>        <span class="hljs-built_in">console</span>.log(token)<br>        sections.push(token)    <span class="hljs-comment">// 入栈</span><br><br>        token[<span class="hljs-number">2</span>] = []<br>        collector = token[<span class="hljs-number">2</span>]<br>        <span class="hljs-keyword">break</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>        sections.pop()<br>        collector = sections.length &gt; <span class="hljs-number">0</span> ? sections[sections.length - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>] : nestTokens<br>        <span class="hljs-keyword">break</span><br>      <span class="hljs-attr">default</span>:<br>        collector.push(token)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> nestTokens<br>&#125;<br></code></pre></td></tr></table></figure><br><p>另外，<code>parseTemplateToTokens</code>函数中返回的不再是<code> tokens</code>，而是<code>nestTokens(tokens)</code>。</p><p><img src="https://s2.loli.net/2022/03/15/fjVaqD6GJREiP9M.png" alt="image-20220315184914505"></p><br><h2 id="将tokens数组结合数据解析成dom字符串"><a href="#将tokens数组结合数据解析成dom字符串" class="headerlink" title="将tokens数组结合数据解析成dom字符串"></a>将tokens数组结合数据解析成dom字符串</h2><h3 id="实现简单版本-1"><a href="#实现简单版本-1" class="headerlink" title="实现简单版本"></a>实现简单版本</h3><p>直接遍历tokens数组，如果遍历的元素的第一个标记是<code> text</code>，则直接与要返回的字符串相加，如果是<code> name</code>，则需要数据<code> data</code>中把对应属性加入到要返回的字符串中。</p><p>src \ renderTemplate.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderTemplate</span>(<span class="hljs-params">tokens, data</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span><br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; tokens.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> token = tokens[i]<br><br>    <span class="hljs-keyword">if</span> (token[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;text&#x27;</span>) &#123;<br>      result += token[<span class="hljs-number">1</span>]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (token[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;name&#x27;</span>) &#123;<br>      result += data[token[<span class="hljs-number">1</span>]]<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><br><p>src \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> parseTemplateToTokens <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./parseTemplateToTokens.js&#x27;</span><br><span class="hljs-keyword">import</span> renderTemplate <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./renderTemplate.js&#x27;</span><br><br><span class="hljs-built_in">window</span>.TemplateEngine = &#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params">templateStr, data</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> tokens = parseTemplateToTokens(templateStr)<br><br>    <span class="hljs-keyword">const</span> domStr = renderTemplate(tokens, data)<br>    <span class="hljs-built_in">console</span>.log(domStr)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/16/OtDYH2TmaMoqnJb.png" alt="image-20220316110816619"></p><p>快成功了，开心</p><hr><p>问题：当数据中有对象类型的数据时，会出问题。</p><p>如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁, 工资为&#123;&#123;job.salary&#125;&#125;元&lt;/h2&gt;</span><br><span class="hljs-string">`</span><br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>  <span class="hljs-attr">job</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;programmer&#x27;</span>,<br>    <span class="hljs-attr">salary</span>: <span class="hljs-number">1</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/16/N2XoUAx3YhdzvBW.png" alt="image-20220316110854642"></p><br><p>为什么会出现这个问题呢？</p><p>我们再看一下上面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (token[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;text&#x27;</span>) &#123;<br>  result += token[<span class="hljs-number">1</span>]<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (token[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;name&#x27;</span>) &#123;<br>  result += data[token[<span class="hljs-number">1</span>]]<br>&#125;<br></code></pre></td></tr></table></figure><p>把出问题的部分代进去，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">result += data[<span class="hljs-string">&#x27;job.salary&#x27;</span>]<br></code></pre></td></tr></table></figure><br><p>但是这样是不行的，JavaScript不支持对象使用数组形式时，下标为<code> x.y</code>的形式</p><p><img src="https://s2.loli.net/2022/03/16/ozh8RSZcvr1mDk2.png" alt="image-20220316111512509"></p><p>那么该怎么办呢？</p><p>其实只需要把<code> obj[x.y]</code>的形式变为<code>obj[x][y] </code>的形式即可</p><p>src \ lookup.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 把` obj[x.y]`的形式变为`obj[x][y] `的形式</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lookup</span>(<span class="hljs-params">dataObj, keysStr</span>) </span>&#123;<br><br>  <span class="hljs-keyword">const</span> keys = keysStr.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>  <span class="hljs-keyword">let</span> temp = dataObj<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; keys.length; i++) &#123;<br>    temp = temp[keys[i]]<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> temp<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/16/LbJFqUzDG2yrv9c.png" alt="image-20220316112721171"></p><br><p>再优化一下，如果<code> keysStr</code>没有<code> .</code>的话，那么可以直接返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 把` obj[x.y]`的形式变为`obj[x][y] `的形式</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lookup</span>(<span class="hljs-params">dataObj, keysStr</span>) </span>&#123;<br><br>  <span class="hljs-keyword">if</span> (keysStr.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>) === -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> dataObj[keysStr]<br>  &#125;<br><br><br>  <span class="hljs-keyword">const</span> keys = keysStr.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>  <span class="hljs-keyword">let</span> temp = dataObj<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; keys.length; i++) &#123;<br>    temp = temp[keys[i]]<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> temp<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="通过递归实现嵌套数组版本"><a href="#通过递归实现嵌套数组版本" class="headerlink" title="通过递归实现嵌套数组版本"></a>通过递归实现嵌套数组版本</h3><p>数据以及模板字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">      &lt;ul&gt;</span><br><span class="hljs-string">        &#123;&#123;#arr&#125;&#125;</span><br><span class="hljs-string">          &lt;li&gt;</span><br><span class="hljs-string">            &#123;&#123;name&#125;&#125;喜欢的颜色是:</span><br><span class="hljs-string">            &lt;ol&gt;</span><br><span class="hljs-string">              &#123;&#123;#colors&#125;&#125;</span><br><span class="hljs-string">                &lt;li&gt;&#123;&#123;name&#125;&#125;&lt;/li&gt;</span><br><span class="hljs-string">              &#123;&#123;/colors&#125;&#125;</span><br><span class="hljs-string">            &lt;/ol&gt;</span><br><span class="hljs-string">          &lt;/li&gt;</span><br><span class="hljs-string">        &#123;&#123;/arr&#125;&#125;</span><br><span class="hljs-string">      &lt;/ul&gt;</span><br><span class="hljs-string">    `</span><br>    <span class="hljs-keyword">const</span> data = &#123;<br>      <span class="hljs-attr">arr</span>: [<br>        &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,<br>          <span class="hljs-attr">colors</span>: [&#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>          &#125;, &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;blue&#x27;</span><br>          &#125;, &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;purple&#x27;</span><br>          &#125;]<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;cc&#x27;</span>,<br>          <span class="hljs-attr">colors</span>: [&#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>          &#125;, &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;blue&#x27;</span><br>          &#125;, &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;purple&#x27;</span><br>          &#125;]<br>        &#125;<br>      ]<br>    &#125;<br></code></pre></td></tr></table></figure><br><p>src \ renderTemplate(增加实现嵌套数组版本)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 将tokens数组结合数据解析成dom字符串</span><br><br><span class="hljs-keyword">import</span> lookup <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./lookup.js&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderTemplate</span>(<span class="hljs-params">tokens, data</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span><br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; tokens.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> token = tokens[i]<br><br>    <span class="hljs-keyword">if</span> (token[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;text&#x27;</span>) &#123;<br>      result += token[<span class="hljs-number">1</span>]<br><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (token[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;name&#x27;</span>) &#123;<br>      result += lookup(data, token[<span class="hljs-number">1</span>])<br><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (token[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>      <span class="hljs-keyword">let</span> datas = data[token[<span class="hljs-number">1</span>]]  <span class="hljs-comment">// 拿到所有的数据数组</span><br><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; datas.length; i++) &#123;   <span class="hljs-comment">// 遍历数据数组，实现循环</span><br>        result += renderTemplate(token[<span class="hljs-number">2</span>], datas[i])    <span class="hljs-comment">// 递归调用</span><br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/16/8d1FsWNzgmCH9ah.png" alt="image-20220316141222936"></p><br><p>实现简单数组的那个<code> .</code>，因为数据中没有属性<code> .</code>，所以需要把该属性给加上</p><p>下面的代码只拿了改的一小段</p><p>src \ renderTemplate(增加实现嵌套数组版本)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (token[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>  <span class="hljs-keyword">let</span> datas = data[token[<span class="hljs-number">1</span>]]  <span class="hljs-comment">// 拿到所有的数据数组</span><br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; datas.length; i++) &#123;   <span class="hljs-comment">// 遍历数据数组，实现循环</span><br>    result += renderTemplate(token[<span class="hljs-number">2</span>], &#123;<span class="hljs-comment">// 递归调用</span><br>      ...datas[i],     <span class="hljs-comment">// 使用扩展字符串...，把对象展开，再添加.属性为对象本身</span><br>      <span class="hljs-string">&#x27;.&#x27;</span>: datas[i]<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是，还是有问题</p><p><img src="https://s2.loli.net/2022/03/16/6RNh5KeJTvMncx1.png" alt="image-20220316142004937"></p><br><p>回到<code> lookup</code>中查看</p><p><img src="https://s2.loli.net/2022/03/16/9XvaqIdtHmsCUPD.png" alt="image-20220316142324569"></p><p>微操一手：</p><p>src \ lookup.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 把` obj[x.y]`的形式变为`obj[x][y] `的形式</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lookup</span>(<span class="hljs-params">dataObj, keysStr</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (keysStr.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>) === -<span class="hljs-number">1</span> || keysStr === <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> dataObj[keysStr]<br>  &#125;<br><br><br>  <span class="hljs-keyword">const</span> keys = keysStr.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>  <span class="hljs-keyword">let</span> temp = dataObj<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; keys.length; i++) &#123;<br>    temp = temp[keys[i]]<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> temp<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/16/EQ5M49xkdV6jPZF.png" alt="image-20220316142456833"></p><p>成功。</p><br><p>最后把它挂到DOM树上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> domStr = TemplateEngine.render(templateStr, data)<br><span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;container&#x27;</span>)[<span class="hljs-number">0</span>].innerHTML = domStr<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/16/42uIH5bKxpGcFU9.png" alt="image-20220316143056922"></p><br><p>学习视频：<a href="https://www.bilibili.com/video/BV1EV411h79m">【尚硅谷】Vue源码解析之mustache模板引擎_哔哩哔哩_bilibili</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue源码之mustache模板引擎-二-手写实现mustache&quot;&gt;&lt;a href=&quot;#Vue源码之mustache模板引擎-二-手写实现mustache&quot; class=&quot;headerlink&quot; title=&quot;Vue源码之mustache模板引擎(二)    手</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://www.clzczh.top/tags/Vue/"/>
    
    <category term="Vue源码" scheme="https://www.clzczh.top/tags/Vue%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>居中对齐的几种方法</title>
    <link href="https://www.clzczh.top/2022/03/25/css-center/"/>
    <id>https://www.clzczh.top/2022/03/25/css-center/</id>
    <published>2022-03-25T10:40:18.000Z</published>
    <updated>2022-03-25T17:14:08.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="居中对齐的几种方法"><a href="#居中对齐的几种方法" class="headerlink" title="居中对齐的几种方法"></a>居中对齐的几种方法</h1><p>看面试题，自己总结了下，顺便写了对应例子，加深印象。</p><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="给-div设置一个宽度，再添加-margin-0-auto"><a href="#给-div设置一个宽度，再添加-margin-0-auto" class="headerlink" title="给 div设置一个宽度，再添加 margin: 0 auto"></a>给<code> div</code>设置一个宽度，再添加<code> margin: 0 auto</code></h3><p><b style="color: red">必须要添加宽度，只对块级元素有效</b></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.inline-block-box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>块级元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inline-block-box&quot;</span>&gt;</span>行内块元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>行内元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/24/d3PXbaQ47yeNMcB.png" alt="image-20220324213321588"></p><br><h3 id="给父元素添加-text-aligin-center"><a href="#给父元素添加-text-aligin-center" class="headerlink" title="给父元素添加 text-aligin: center"></a>给父元素添加<code> text-aligin: center</code></h3><p><b style="color: red">只对行内块元素、行内元素有效</b></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: purple;<br>&#125;<br><br><span class="hljs-selector-class">.inline-block-box</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: purple;<br>&#125;<br><br><span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: skyblue;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/24/34np6EksUagW8X5.png" alt="image-20220324214157484"></p><br><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><h3 id="计算法"><a href="#计算法" class="headerlink" title="计算法"></a>计算法</h3><h4 id="父元素跟着子元素-margin-top-移动问题"><a href="#父元素跟着子元素-margin-top-移动问题" class="headerlink" title="父元素跟着子元素 margin-top 移动问题"></a>父元素跟着子元素 margin-top 移动问题</h4><p>开始之前，先看下一个小问题</p><p>下面的例子中，我们想要让子元素离父元素有距离</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">150px</span> auto;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/24/Lwy6iaJDdVrYnKm.png" alt="image-20220324220516244"></p><br><p>结果，子元素并没有外边距效果，反而是父元素出现了外边距的效果。</p><p>这是因为，根据规范，父元素的子元素的上边距(<code> margin-top</code>)，如果碰不到有效的<code> border</code>或者<code> padding</code>，就会一层一层的找自己的祖先元素，直到找到祖先元素有有效的<code> border</code>或<code>border</code>为止</p><br><p>解决方案：</p><ol><li>给父元素添加<code> padding-top</code></li><li>给父元素添加<code> border-top</code></li><li><strong>给父元素添加<code> overflow: hidden</code></strong>(<b style="color: red">推荐</b>)</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br><br>  <span class="hljs-comment">/* padding-top: 1px; */</span><br>  <span class="hljs-comment">/* border-top: 1px solid transparent; */</span><br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>首先<code> margin</code>左右可以直接设置<code> auto</code>实现居中，但是的上下不行。</p><p>计算法：<code>margin上下值 = (父元素高度-子元素高度)/2</code></p><p>在这个例子中，父元素的高度为<code> 400px</code>，子元素的高度为<code> 100px</code>，所以<code> margin上下值</code>设置为<code> 150px</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: purple;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">150px</span> auto;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/24/zV8YmsNHEGtWyXP.png" alt="image-20220324222200326"></p><br><h3 id="绝对定位四-0-法"><a href="#绝对定位四-0-法" class="headerlink" title="绝对定位四 0 法"></a>绝对定位四 0 法</h3><p><strong>设置四个方向都为 0，然后设置<code> margin</code>为<code> auto</code>，因为宽高固定，所以对应方向平分，可以实现水平垂直居中</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">.container &#123;<br>  <span class="hljs-attr">position</span>: relative;<br>  width: 600px;<br>  height: 400px;<br>  background-color: pink;<br>  color: #fff;<br>&#125;<br><br>.box &#123;<br>  <span class="hljs-attr">position</span>: absolute;<br>  width: 200px;<br>  height: 100px;<br>  top: <span class="hljs-number">0</span>;<br>  right: <span class="hljs-number">0</span>;<br>  bottom: <span class="hljs-number">0</span>;<br>  left: <span class="hljs-number">0</span>;<br>  margin: auto;<br>  background-color: purple;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="绝对定位-计算法-margin负值"><a href="#绝对定位-计算法-margin负值" class="headerlink" title="绝对定位 + 计算法( margin负值)"></a>绝对定位 + 计算法(<code> margin</code>负值)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">margin</span>: -<span class="hljs-number">50px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> -<span class="hljs-number">100px</span>;<br>  <span class="hljs-comment">/* margin-top、margin-left 分别是该子元素高宽的一半(负值)*/</span><br>  <span class="hljs-attribute">background-color</span>: purple;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="绝对定位-transform"><a href="#绝对定位-transform" class="headerlink" title="绝对定位 +  transform"></a>绝对定位 + <code> transform</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>  <span class="hljs-attribute">background-color</span>: purple;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="flex-布局法"><a href="#flex-布局法" class="headerlink" title="flex 布局法"></a>flex 布局法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-comment">/* 垂直居中 */</span><br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-comment">/* 水平居中 */</span><br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: purple;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>对于<strong>宽高不定</strong>的元素，后面两种方法(<b style="color: red">绝对定位+<code> transform</code>、<code> flex</code>布局法</b>)，可以实现元素的水平垂直居中。</p><br><p>参考资料：</p><ul><li><p><a href="https://segmentfault.com/a/1190000022021557">104 道 CSS 面试题，助你查漏补缺</a></p></li><li><p><a href="https://blog.csdn.net/weixin_45786214/article/details/106297864">父盒子跟随子盒子 margin-top 移动问题</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;居中对齐的几种方法&quot;&gt;&lt;a href=&quot;#居中对齐的几种方法&quot; class=&quot;headerlink&quot; title=&quot;居中对齐的几种方法&quot;&gt;&lt;/a&gt;居中对齐的几种方法&lt;/h1&gt;&lt;p&gt;看面试题，自己总结了下，顺便写了对应例子，加深印象。&lt;/p&gt;
&lt;h2 id=&quot;水平居</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://www.clzczh.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码之mustache模板引擎(一)</title>
    <link href="https://www.clzczh.top/2022/03/24/vue-mustache-1/"/>
    <id>https://www.clzczh.top/2022/03/24/vue-mustache-1/</id>
    <published>2022-03-24T10:38:00.000Z</published>
    <updated>2022-03-25T17:16:19.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-源码之-mustache-模板引擎-一"><a href="#Vue-源码之-mustache-模板引擎-一" class="headerlink" title="Vue 源码之 mustache 模板引擎(一)"></a>Vue 源码之 mustache 模板引擎(一)</h1><p>个人练习结果仓库(持续更新)：<a href="https://github.com/13535944743/Vue_Source_Code_Practise">Vue 源码解析</a></p><br><p>抽空把之前学的东西写成笔记。</p><p>学习视频链接：<a href="https://www.bilibili.com/video/BV1EV411h79m">【尚硅谷】Vue 源码解析之 mustache 模板引擎</a></p><h2 id="模板引擎是什么"><a href="#模板引擎是什么" class="headerlink" title="模板引擎是什么"></a>模板引擎是什么</h2><p><strong>模板引擎是将数据变为视图最优雅的解决方案。</strong></p><p><img src="https://s2.loli.net/2022/03/12/wQJFumIdge6ZzbT.png" alt="image-20220312180129318"></p><p>其中，Vue 中的列表渲染指令<code> v-for</code>就是一种模板引擎。而**插值表达式<code>&#123;&#123;&#125;&#125;`**便是本次要研究的` mustache模板引擎`的语法<br>## 将数据变为视图的方法### 纯 DOM 法很笨拙。需要频繁创建节点，添加数据，添加节点。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cc&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;女&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> list = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;list&quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>  <span class="hljs-keyword">const</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;li&quot;</span>); <span class="hljs-comment">// 新建li元素</span><br><br>  <span class="hljs-keyword">const</span> bd = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;div&quot;</span>);<br>  bd.className = <span class="hljs-string">&quot;bd&quot;</span>;<br>  bd.innerText = arr[i].name + <span class="hljs-string">&quot;的基本信息&quot;</span>;<br>  li.appendChild(bd);<br><br>  <span class="hljs-keyword">const</span> hd = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;div&quot;</span>);<br>  hd.className = <span class="hljs-string">&quot;hd&quot;</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">in</span> arr[i]) &#123;<br>    <span class="hljs-keyword">const</span> p = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;p&quot;</span>);<br>    p.innerText = item + <span class="hljs-string">&quot;: &quot;</span> + arr[i][item];<br>    hd.appendChild(p);<br>  &#125;<br><br>  li.appendChild(hd);<br>  list.appendChild(li);<br>&#125;<br></code></pre></td></tr></table></figure>![image-20220312182355046](https://s2.loli.net/2022/03/12/chJLPs9TlfwmSey.png)<br>### 数组 join 法本质上就是字符串拼接，只是用过数组 join 法，可以让结构变得更清晰<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cc&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;女&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>  list.innerHTML += [<br>    <span class="hljs-string">&quot;&lt;li&gt;&quot;</span>,<br>    <span class="hljs-string">&#x27;  &lt;div class=&quot;hd&quot;&gt;&#x27;</span> + arr[i].name + <span class="hljs-string">&quot;的基本信息&lt;/div&gt;&quot;</span>,<br>    <span class="hljs-string">&#x27;  &lt;div class=&quot;bd&quot;&gt;&#x27;</span>,<br>    <span class="hljs-string">&quot;    &lt;p&gt;name: &quot;</span> + arr[i].name + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;    &lt;p&gt;age: &quot;</span> + arr[i].age + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;    &lt;p&gt;sex&quot;</span> + arr[i].sex + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;  &lt;/div&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;&lt;/li&gt;&quot;</span>,<br>  ].join(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>### ES6 的模板字符串法- 反引号中，文本可以直接换行- 反引号中的$&#123;expression&#125;占位符中 expression 可以为任意的 JavaScript 表达式，甚至为模板字符串<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cc&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;女&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>  list.innerHTML += <span class="hljs-string">`</span><br><span class="hljs-string">      &lt;li&gt;</span><br><span class="hljs-string">          &lt;div class=&quot;hd&quot;&gt;<span class="hljs-subst">$&#123;arr[i].name&#125;</span> 的基本信息&lt;/div&gt;</span><br><span class="hljs-string">          &lt;div class=&quot;bd&quot;&gt;</span><br><span class="hljs-string">            &lt;p&gt;name: <span class="hljs-subst">$&#123;arr[i].name&#125;</span> &lt;/p&gt;</span><br><span class="hljs-string">            &lt;p&gt;age: <span class="hljs-subst">$&#123;arr[i].age&#125;</span> &lt;/p&gt;</span><br><span class="hljs-string">            &lt;p&gt;sex: <span class="hljs-subst">$&#123;arr[i].sex&#125;</span> &lt;/p&gt;</span><br><span class="hljs-string">          &lt;/div&gt;</span><br><span class="hljs-string">        &lt;/li&gt;</span><br><span class="hljs-string">      `</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br>### 模板引擎 mustache[mustache 仓库](https://github.com/janl/mustache.js)mustache 是**最早的模板引擎库**。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/mustache.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">  // console.log(Mustache)</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">  const templateStr = `</span></span><br><span class="xml"><span class="handlebars">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">      </span><span class="hljs-template-variable">&#123;&#123; #<span class="hljs-name">arr</span> &#125;&#125;</span><span class="xml"></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hd&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">name</span> &#125;&#125;</span><span class="xml">的基本信息<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bd&quot;</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">name</span> &#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>age: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">age</span> &#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>sex: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">sex</span> &#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">      </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">/arr</span> &#125;&#125;</span><span class="xml"></span></span><br><span class="xml"><span class="handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">  `;</span></span><br><span class="xml"><span class="handlebars">  const data = &#123;</span></span><br><span class="xml"><span class="handlebars">    arr: [</span></span><br><span class="xml"><span class="handlebars">      &#123;</span></span><br><span class="xml"><span class="handlebars">        name: &quot;clz&quot;,</span></span><br><span class="xml"><span class="handlebars">        age: 21,</span></span><br><span class="xml"><span class="handlebars">        sex: &quot;男&quot;,</span></span><br><span class="xml"><span class="handlebars">      &#125;,</span></span><br><span class="xml"><span class="handlebars">      &#123;</span></span><br><span class="xml"><span class="handlebars">        name: &quot;cc&quot;,</span></span><br><span class="xml"><span class="handlebars">        age: 21,</span></span><br><span class="xml"><span class="handlebars">        sex: &quot;女&quot;,</span></span><br><span class="xml"><span class="handlebars">      &#125;,</span></span><br><span class="xml"><span class="handlebars">      &#123;</span></span><br><span class="xml"><span class="handlebars">        name: &quot;赤蓝紫&quot;,</span></span><br><span class="xml"><span class="handlebars">        age: 21,</span></span><br><span class="xml"><span class="handlebars">        sex: &quot;男&quot;,</span></span><br><span class="xml"><span class="handlebars">      &#125;,</span></span><br><span class="xml"><span class="handlebars">    ],</span></span><br><span class="xml"><span class="handlebars">  &#125;;</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">  const domStr = Mustache.render(templateStr, data);</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">  document.getElementsByClassName(&quot;container&quot;)[0].innerHTML = domStr;</span></span><br><span class="xml"><span class="handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>引入` mustache`后，就会后一个` Mustache`对象，其中有一个方法` render`就可以用来实现将数据变为视图。- render 的第一个参数是模板字符串，第二个参数是数据- 如果需要使用数据，直接通过` &#123;&#123; &#125;&#125;</code>使用即可</p><ul><li>要实现循环的话，则需要用<code> &#123;&#123; #arr &#125;&#125;</code>,<code> &#123;&#123; /arr &#125;&#125;</code>包住要循环的内容</li></ul><h2 id="mustache-的基本使用"><a href="#mustache-的基本使用" class="headerlink" title="mustache 的基本使用"></a><span id="jump">mustache 的基本使用</span></h2><p><a href="https://unpkg.com/mustache@4.2.0/mustache.js">mustache.js</a></p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁&lt;/h2&gt;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> domStr = Mustache.render(templateStr, data);<br><br><span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;container&quot;</span>)[<span class="hljs-number">0</span>].innerHTML = domStr;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/I9EnyTRuYc1ibga.png" alt="image-20220312211938118"></p><h3 id="循环简单数组"><a href="#循环简单数组" class="headerlink" title="循环简单数组"></a>循环简单数组</h3><p>循环的不是对象数组，而是简单数组时，使用<code> .</code>即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &#123;&#123;#arr&#125;&#125;</span><br><span class="hljs-string">    &lt;h2 style=&quot;color: &#123;&#123;.&#125;&#125;&quot;&gt;&#123;&#123;.&#125;&#125;&lt;/h2&gt;</span><br><span class="hljs-string">  &#123;&#123;/arr&#125;&#125;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">arr</span>: [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;purple&quot;</span>],<br>&#125;;<br><br><span class="hljs-keyword">const</span> domStr = Mustache.render(templateStr, data);<br><br><span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;container&quot;</span>)[<span class="hljs-number">0</span>].innerHTML = domStr;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/t5acM2UO3xPIDAB.png" alt="image-20220312212348808"></p><br><h3 id="数组嵌套"><a href="#数组嵌套" class="headerlink" title="数组嵌套"></a>数组嵌套</h3><p>就是上面两部分的结合版本。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;ul&gt;</span><br><span class="hljs-string">    &#123;&#123;#arr&#125;&#125;</span><br><span class="hljs-string">      &lt;li&gt;</span><br><span class="hljs-string">        &#123;&#123;name&#125;&#125;喜欢的颜色是:</span><br><span class="hljs-string">        &lt;ol&gt;</span><br><span class="hljs-string">          &#123;&#123;#colors&#125;&#125;</span><br><span class="hljs-string">            &lt;li&gt;&#123;&#123;.&#125;&#125;&lt;/li&gt;</span><br><span class="hljs-string">          &#123;&#123;/colors&#125;&#125;</span><br><span class="hljs-string">        &lt;/ol&gt;</span><br><span class="hljs-string">      &lt;/li&gt;</span><br><span class="hljs-string">    &#123;&#123;/arr&#125;&#125;</span><br><span class="hljs-string">  &lt;/ul&gt;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">arr</span>: [<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>      <span class="hljs-attr">colors</span>: [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;purple&quot;</span>],<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cc&quot;</span>,<br>      <span class="hljs-attr">colors</span>: [<span class="hljs-string">&quot;white&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;black&quot;</span>],<br>    &#125;,<br>  ],<br>&#125;;<br><br><span class="hljs-keyword">const</span> domStr = Mustache.render(templateStr, data);<br><br><span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;container&quot;</span>)[<span class="hljs-number">0</span>].innerHTML = domStr;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/zHboe6pFn8cBfyq.png" alt="image-20220312214124863"></p><br><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>和循环类似，通过使用<code> &#123;&#123;#布尔值属性&#125;&#125;</code>,<code>&#123;&#123;/布尔值属性&#125;&#125;</code>，包住要条件渲染的内容即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &#123;&#123;#arr&#125;&#125;</span><br><span class="hljs-string">    &#123;&#123;#show&#125;&#125;</span><br><span class="hljs-string">      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="hljs-string">    &#123;&#123;/show&#125;&#125;</span><br><span class="hljs-string">  &#123;&#123;/arr&#125;&#125;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">arr</span>: [<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>      <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;czh&quot;</span>,<br>      <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>    &#125;,<br>  ],<br>&#125;;<br><br><span class="hljs-keyword">const</span> domStr = Mustache.render(templateStr, data);<br><br><span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;container&quot;</span>)[<span class="hljs-number">0</span>].innerHTML = domStr;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/Vxk2CwiaAsbRHcM.png" alt="image-20220312214938151"></p><br><p>通过查看 DOM 树，可以发现和 Vue 中的<code> v-if</code>指令类似，是压根就没有上 DOM 树。另外，Vue 中的<code> v-show</code>指令则是动态为元素添加或移除<code> display: none;</code>来控制元素的显示与隐藏。</p><br><h3 id="es6-之前使用-mustache"><a href="#es6-之前使用-mustache" class="headerlink" title="es6 之前使用 mustache"></a>es6 之前使用 mustache</h3><p>众所周知，es6 之前是没有模板字符串(反引号)的。那么方便的使用 mustache 呢？</p><p>当然，可以使用上面的数组 join 法，不过，还有一个更方便的方法。</p><p>通过使用<code> script</code>标签，只要添加<code>type</code>为<code> text/template</code>，然后在里面填模板字符串即可(实际上，只要不被浏览器识别即可)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/template&quot;</span> id=<span class="hljs-string">&quot;templateStr&quot;</span>&gt;<br>  &#123;&#123;#arr&#125;&#125;<br>    &#123;&#123;#show&#125;&#125;<br>      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>    &#123;&#123;/show&#125;&#125;<br>  &#123;&#123;/arr&#125;&#125;<br>&lt;/script&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/mustache.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">const</span> templateStr = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;templateStr&#x27;</span>).innerHTML</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">const</span> data = &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">arr</span>: [</span></span><br><span class="javascript"><span class="xml">      &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span></span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">      &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;czh&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span></span></span><br><span class="javascript"><span class="xml">      &#125;</span></span><br><span class="javascript"><span class="xml">    ]</span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">const</span> domStr = Mustache.render(templateStr, data)</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;container&#x27;</span>)[<span class="hljs-number">0</span>].innerHTML = domStr</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>只能说<strong>想到这个方法的人太优秀了</strong></p><br><h2 id="mustache-底层原理"><a href="#mustache-底层原理" class="headerlink" title="mustache 底层原理"></a>mustache 底层原理</h2><br><h3 id="正则表达式实现最简单的-mustache"><a href="#正则表达式实现最简单的-mustache" class="headerlink" title="正则表达式实现最简单的 mustache"></a>正则表达式实现最简单的 mustache</h3><br><h4 id="String-prototype-replace"><a href="#String-prototype-replace" class="headerlink" title="String.prototype.replace()"></a>String.prototype.replace()</h4><p>在开始之前，首先需要了解一下字符串的<code> replace</code>方法</p><blockquote><p><strong>语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">str.replace(regexp|substr, newSubStr|<span class="hljs-function"><span class="hljs-keyword">function</span>)</span><br></code></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><p><code>regexp </code>(pattern)：一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp"><code>RegExp</code></a> 对象或者其字面量。该正则所匹配的内容会被第二个参数的返回值替换掉。</p></li><li><p><code>substr </code>(pattern)：一个将被 <code>newSubStr</code> 替换的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String"><code>字符串</code></a>。其被视为一整个字符串，而不是一个正则表达式。仅第一个匹配项会被替换。</p></li><li><p><code>newSubStr</code> (replacement)：用于替换掉第一个参数在原字符串中的匹配部分的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String"><code>字符串</code></a>。该字符串中可以内插一些特殊的变量名。参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E4%BD%BF%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0">使用字符串作为参数</a>。</p></li><li><p><code>function</code> (replacement)：一个用来创建新子字符串的函数，该函数的返回值将替换掉第一个参数匹配到的结果。参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E6%8C%87%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0">指定一个函数作为参数</a>。</p></li></ul><p><strong>返回值</strong></p><p>一个部分或全部匹配由替代模式所取代的新的字符串。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁&lt;/h2&gt;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(templateStr.replace(<span class="hljs-regexp">/\&#123;\&#123;\w+\&#125;\&#125;/g</span>, <span class="hljs-string">&quot;123&quot;</span>));<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/rRUxDw2Gg9IYu1e.png" alt="image-20220313091349829"></p><br><p>可以发现，上面的做法还无法实现，所以研究一下，第二个参数为函数的情况</p><blockquote><table><thead><tr><th align="left">变量名</th><th align="left">代表的值</th></tr></thead><tbody><tr><td align="left"><code>match</code></td><td align="left">匹配的子串。（对应于上述的$&amp;。）</td></tr><tr><td align="left"><code>p1,p2, ...</code></td><td align="left">假如 replace()方法的第一个参数是一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp"><code>RegExp</code></a> 对象，则代表第 n 个括号匹配的字符串。（对应于上述的$1，$2 等。）例如，如果是用 <code>/(\a+)(\b+)/</code> 这个来匹配，<code>p1</code> 就是匹配的 <code>\a+</code>，<code>p2</code> 就是匹配的 <code>\b+</code>。</td></tr><tr><td align="left"><code>offset</code></td><td align="left">匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是 <code>&#39;abcd&#39;</code>，匹配到的子字符串是 <code>&#39;bc&#39;</code>，那么这个参数将会是 1）</td></tr><tr><td align="left"><code>string</code></td><td align="left">被匹配的原字符串。</td></tr><tr><td align="left">NamedCaptureGroup</td><td align="left">命名捕获组匹配的对象</td></tr></tbody></table></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁&lt;/h2&gt;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>&#125;;<br><br>templateStr.replace(<span class="hljs-regexp">/\&#123;\&#123;(\w+)\&#125;\&#125;/g</span>, <span class="hljs-function">(<span class="hljs-params">match, p1, offset, string</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(match);<br>  <span class="hljs-built_in">console</span>.log(p1);<br>  <span class="hljs-built_in">console</span>.log(offset);<br>  <span class="hljs-built_in">console</span>.log(string);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/7AVX6LyhJfCvual.png" alt="image-20220313092139759"></p><p>可以发现，只需要在正则表达式中使用<code> ()</code>把要捕获的内容包起来，然后通过<code> replace</code>方法的函数参数中的 p1 参数获取捕获内容，既然如此，那就可以开始使用正则表达式实现简单的 mustache 了。</p><br><h4 id="实现简单的-mustache"><a href="#实现简单的-mustache" class="headerlink" title="实现简单的 mustache"></a>实现简单的 mustache</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁&lt;/h2&gt;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> render = <span class="hljs-function">(<span class="hljs-params">templateStr, data</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> templateStr.replace(<br>    <span class="hljs-regexp">/\&#123;\&#123;(\w+)\&#125;\&#125;/g</span>,<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">match, p1, offset, string</span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> data[p1]; <span class="hljs-comment">// 把正则所匹配的内容替换成return的内容</span><br>    &#125;<br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> domStr = render(templateStr, data);<br><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.container&quot;</span>).innerHTML = domStr;<br></code></pre></td></tr></table></figure><br><h3 id="mustache-底层-tokens-原理"><a href="#mustache-底层-tokens-原理" class="headerlink" title="mustache 底层 tokens 原理"></a>mustache 底层 tokens 原理</h3><p><img src="https://s2.loli.net/2022/03/13/mF5Bg6EGYriKyVz.png" alt="image-20220313094603475"></p><p><strong>mustache 底层主要干两件事</strong>：</p><ul><li>将模板字符串编译为 tokens 形式</li><li>tokens 结合数据，解析为 dom 字符串</li></ul><br><h4 id="tokens-是什么"><a href="#tokens-是什么" class="headerlink" title="tokens 是什么"></a>tokens 是什么</h4><ul><li>tokens 是一个嵌套数组，也可以说是<strong>模板字符串的 JS 表示</strong>。</li><li><strong>tokens</strong>是<strong>抽象语法树</strong>(AST)、<strong>虚拟节点</strong>的开山鼻祖</li></ul><br><p>看下下面的例子，就能明白了</p><hr><p>简单 tokens</p><p><strong>模板字符串</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>tokens</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;h2&gt;我是&quot;</span>],<br>  [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>],<br>  [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;, 年龄为&quot;</span>],<br>  [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>],<br>  [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;岁&lt;/h2&gt;&quot;</span>],<br>];<br></code></pre></td></tr></table></figure><hr><p>简单数组情况下的 tokens</p><p><strong>模板字符串</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;&#123;#arr&#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: &#123;&#123;.&#125;&#125;&quot;</span>&gt;</span>&#123;&#123;.&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>&#123;&#123;/arr&#125;&#125;<br></code></pre></td></tr></table></figure><br><p><strong>tokens</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>    [<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;arr&quot;</span>, [<br>        [<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;&lt;h2 style=&#x27;color: &quot;</span>],<br>        [<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;.&quot;</span>],<br>        [<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;&#x27;&gt;&quot;</span>],<br>        [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>        [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;/h2&gt;&quot;</span>]<br>    ]]<br>]<br></code></pre></td></tr></table></figure><hr><p>嵌套数组情况下的 tokens</p><p><strong>模板字符串</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  &#123;&#123;#arr&#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    &#123;&#123;name&#125;&#125;喜欢的颜色是:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>      &#123;&#123;#colors&#125;&#125;<br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;.&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      &#123;&#123;/colors&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  &#123;&#123;/arr&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>tokens</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>    [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;ul&gt;&quot;</span>],<br>    [<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;arr&quot;</span>, [<br>        [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;li&quot;</span>],<br>        [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>],<br>        [<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;喜欢的颜色是:&lt;ol&gt;&quot;</span>],<br>        [<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;colors&quot;</span>, [<br>            [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;li&gt;&quot;</span>],<br>            [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>            [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;/li&gt;&quot;</span>]<br>        ]],<br>        [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;/ol&gt;&lt;/li&gt;&quot;</span>]<br>    ]],<br>    [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;/ul&gt;&quot;</span>]<br>]<br></code></pre></td></tr></table></figure><br><h4 id="查看-mustache-的-tokens"><a href="#查看-mustache-的-tokens" class="headerlink" title="查看 mustache 的 tokens"></a>查看 mustache 的 tokens</h4><p>进入之前下载的源码文件中，<code> ctrl+f</code>，搜索<code> parseTemplate</code>，到该方法最后把返回值存好并打印</p><p><img src="https://s2.loli.net/2022/03/13/KRfBS2sopDuvXYg.png" alt="image-20220313122831330"></p><br><p>重新去跑<a href="#jump">mustache 的基本使用</a>的代码，就可以在控制台中看到<code> tokens</code></p><p>如循环简单数组</p><p><img src="https://s2.loli.net/2022/03/13/IslPNEDt2xLywkp.png" alt="image-20220313123423702"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-源码之-mustache-模板引擎-一&quot;&gt;&lt;a href=&quot;#Vue-源码之-mustache-模板引擎-一&quot; class=&quot;headerlink&quot; title=&quot;Vue 源码之 mustache 模板引擎(一)&quot;&gt;&lt;/a&gt;Vue 源码之 mustache</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://www.clzczh.top/tags/Vue/"/>
    
    <category term="Vue源码" scheme="https://www.clzczh.top/tags/Vue%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>自定义工具函数库(三)</title>
    <link href="https://www.clzczh.top/2022/03/22/javascript-toolFunction-3/"/>
    <id>https://www.clzczh.top/2022/03/22/javascript-toolFunction-3/</id>
    <published>2022-03-22T05:38:47.000Z</published>
    <updated>2022-03-25T17:15:06.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义工具函数库-三"><a href="#自定义工具函数库-三" class="headerlink" title="自定义工具函数库(三)"></a>自定义工具函数库(三)</h1><p>最终仓库：<a href="https://github.com/13535944743/utils">utils: 自定义工具库</a></p><h2 id="1-自定义-instanceof"><a href="#1-自定义-instanceof" class="headerlink" title="1. 自定义 instanceof"></a>1. 自定义 instanceof</h2><blockquote><ul><li>语法: myInstanceOf(obj, Type)</li><li>功能: 判断 obj 是否是 Type 类型的实例</li><li>实现: Type 的原型对象是否是 obj 的原型链上的某个对象, 如果是返回 true, 否则返回 false</li></ul></blockquote><p>之前的笔记：<a href="https://www.clzczh.top/2022/03/16/javascript-prototype/">详解原型链</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 自定义instanceof</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myInstanceof</span>(<span class="hljs-params">obj, fn</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> prototype = fn.prototype; <span class="hljs-comment">// 获取函数的显示原型</span><br><br>  <span class="hljs-keyword">let</span> proto = obj.__proto__; <span class="hljs-comment">// 获取obj的隐式原型对象</span><br><br>  <span class="hljs-comment">// 遍历原型链</span><br>  <span class="hljs-keyword">while</span> (proto) &#123;<br>    <span class="hljs-keyword">if</span> (prototype === proto) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    proto = proto.__proto__;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>对象相关<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./myInstanceof.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;&#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> Person();</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(myInstanceof(p, Person));</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(myInstanceof(p, <span class="hljs-built_in">Object</span>));</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(myInstanceof(Person, <span class="hljs-built_in">Object</span>));</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(myInstanceof(Person, <span class="hljs-built_in">Function</span>));</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(myInstanceof(p, <span class="hljs-built_in">Function</span>));</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-对象-数组拷贝"><a href="#2-对象-数组拷贝" class="headerlink" title="2. 对象/数组拷贝"></a>2. 对象/数组拷贝</h2><h3 id="2-1-浅拷贝与深拷贝"><a href="#2-1-浅拷贝与深拷贝" class="headerlink" title="2.1 浅拷贝与深拷贝"></a>2.1 浅拷贝与深拷贝</h3><p><strong>深拷贝和浅拷贝只针对 Object 和 Array 这样的引用数据类型</strong>。</p><ul><li>浅拷贝：只复制某个对象的引用地址值，而不复制对象本身，新旧对象还是共享同一块内存(<b style="color: red">即修改旧对象引用类型也会修改到新对象</b>)</li><li>深拷贝：新建一个一摸一样的对象，新对象与旧对象不共享内存，所以修改新对象不会跟着修改原对象。</li></ul><h3 id="2-2-浅拷贝"><a href="#2-2-浅拷贝" class="headerlink" title="2.2 浅拷贝"></a>2.2 浅拷贝</h3><h4 id="2-2-1-利用扩展运算符…实现"><a href="#2-2-1-利用扩展运算符…实现" class="headerlink" title="2.2.1 利用扩展运算符…实现"></a>2.2.1 利用扩展运算符…实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 浅拷贝1：利用扩展运算符...实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shallowClone</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; target !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(target)) &#123;<br>      <span class="hljs-keyword">return</span> [...target];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123; ...target &#125;;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> target; <span class="hljs-comment">// 是null或者不是引用数据类型直接返回</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// const obj = &#123; x: &#x27;clz&#x27;, y: &#123; age: 21 &#125; &#125;</span><br><span class="hljs-comment">// const cloneObj = shallowClone(obj)</span><br><span class="hljs-comment">// console.log(cloneObj)</span><br><br><span class="hljs-comment">// obj.y.age = 111</span><br><span class="hljs-comment">// console.log(obj, cloneObj)    // 浅拷贝，修改旧对象的引用类型会同步修改新对象</span><br><br><span class="hljs-comment">// obj.x = &#x27;xxx&#x27;               // 修改的若不是引用数据类型的没有影响</span><br><span class="hljs-comment">// console.log(obj, cloneObj)</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-遍历实现"><a href="#2-2-2-遍历实现" class="headerlink" title="2.2.2 遍历实现"></a>2.2.2 遍历实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 浅拷贝2：遍历实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shallowClone</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; target !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">let</span> ret = <span class="hljs-built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> target) &#123;<br>      <span class="hljs-comment">// 遍历拷贝</span><br>      <span class="hljs-keyword">if</span> (target.hasOwnProperty(key)) &#123;<br>        <span class="hljs-comment">// 不需要考虑原型链上的属性</span><br>        ret[key] = target[key];<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> target; <span class="hljs-comment">// 是null或者不是引用数据类型直接返回</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// const obj = &#123; x: &#x27;clz&#x27;, y: &#123; age: 21 &#125; &#125;</span><br><span class="hljs-comment">// const cloneObj = shallowClone(obj)</span><br><span class="hljs-comment">// console.log(cloneObj)</span><br><br><span class="hljs-comment">// obj.y.age = 111</span><br><span class="hljs-comment">// console.log(obj, cloneObj)    // 浅拷贝，修改旧对象的引用类型会同步修改新对象</span><br><br><span class="hljs-comment">// obj.x = &#x27;xxx&#x27;               // 修改的若不是引用数据类型的没有影响</span><br><span class="hljs-comment">// console.log(obj, cloneObj)</span><br></code></pre></td></tr></table></figure><h3 id="2-3-深拷贝"><a href="#2-3-深拷贝" class="headerlink" title="2.3 深拷贝"></a>2.3 深拷贝</h3><h4 id="2-3-1-JSON-转换"><a href="#2-3-1-JSON-转换" class="headerlink" title="2.3.1 JSON 转换"></a>2.3.1 JSON 转换</h4><p><b style="color: red">不能拷贝对象方法</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 深拷贝1: 通过JSON转换</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(target); <span class="hljs-comment">// 转换为字符串</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.parse(str); <span class="hljs-comment">// 再把字符串转换为对象</span><br>&#125;<br><br><span class="hljs-comment">// const obj = &#123; x: &#x27;clz&#x27;, y: &#123; age: 21 &#125;, z: &#123; name: &#x27;clz&#x27; &#125;, f: function () &#123; &#125; &#125;</span><br><span class="hljs-comment">// const cloneObj = deepClone(obj)</span><br><span class="hljs-comment">// console.log(cloneObj)</span><br><br><span class="hljs-comment">// // obj.y.z = obj.z</span><br><span class="hljs-comment">// // obj.z.y = obj.y  // 循环引用</span><br><br><span class="hljs-comment">// obj.y.age = 111</span><br><span class="hljs-comment">// console.log(obj, cloneObj)</span><br></code></pre></td></tr></table></figure><h4 id="2-3-2-递归"><a href="#2-3-2-递归" class="headerlink" title="2.3.2 递归"></a>2.3.2 递归</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 深拷贝2: 通过递归实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; target !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">const</span> ret = <span class="hljs-built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> target) &#123;<br>      <span class="hljs-keyword">if</span> (target.hasOwnProperty(key)) &#123;<br>        ret[key] = deepClone(target[key]); <span class="hljs-comment">// 递归调用函数实现深拷贝，直接赋值的话则只是浅拷贝，因为是引用数据类型时只是复制了引用地址而已</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> target;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">x</span>: <span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-attr">y</span>: &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;, <span class="hljs-attr">z</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span> &#125;, <span class="hljs-attr">f</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125; &#125;;<br><span class="hljs-keyword">const</span> cloneObj = deepClone(obj);<br><br>obj.y.age = <span class="hljs-number">111</span>;<br><span class="hljs-built_in">console</span>.log(obj, cloneObj);<br></code></pre></td></tr></table></figure><p>开开心心收工？有点问题，如果对象中有循环引用，即”你中有我，我中有你”的话，就会导致形成死循环，会导致无法跑出结果，直到超出最大调用堆栈大小</p><p>怎么解决这个 bug 呢？使用 map 来存取拷贝过的数据，每次调用函数时判断有无拷贝过，有的话，直接返回之前拷贝的数据就行了。而且，这里还有个有意思的地方：<b style="color: red">递归调用函数需要共享变量时，可以通过添加一个参数，一直传同一个变量</b></p><p>改进后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 深拷贝2: 通过递归实现：使用map来存取拷贝过的数据，每次调用函数时判断有无拷贝过，有的话，直接返回之前拷贝的数据就行了。</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">target, map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>()</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; target !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">const</span> cache = map.get(target);<br>    <span class="hljs-keyword">if</span> (cache) &#123;<br>      <span class="hljs-keyword">return</span> cache; <span class="hljs-comment">// 有拷贝过的话，直接返回之前拷贝过的数据</span><br>    &#125;<br><br>    <span class="hljs-keyword">const</span> ret = <span class="hljs-built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;<br><br>    map.set(target, ret); <span class="hljs-comment">// 键为拷贝的目标，值为拷贝的结果</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> target) &#123;<br>      <span class="hljs-keyword">if</span> (target.hasOwnProperty(key)) &#123;<br>        ret[key] = deepClone(target[key], map); <span class="hljs-comment">// 递归调用函数实现深拷贝，直接赋值的话则只是浅拷贝，因为是引用数据类型时只是复制了引用地址而已</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> target;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// const obj = &#123; x: &#x27;clz&#x27;, y: &#123; age: 21 &#125;, z: &#123; name: &#x27;clz&#x27; &#125;, f: function () &#123; &#125; &#125;</span><br><br><span class="hljs-comment">// obj.y.z = obj.z</span><br><span class="hljs-comment">// obj.z.y = obj.y  // 循环引用可能会造成死循环</span><br><br><span class="hljs-comment">// const cloneObj = deepClone(obj)</span><br><br><span class="hljs-comment">// obj.y.age = 111</span><br><span class="hljs-comment">// console.log(obj, cloneObj)</span><br></code></pre></td></tr></table></figure><p><strong>优化遍历性能</strong>：</p><blockquote><ul><li>数组: while | for | forEach() 优于 for-in | keys()&amp;forEach()</li><li>对象: for-in 与 keys()&amp;forEach() 差不多</li></ul></blockquote><p>变更部分：分成数组和对象分别处理，使用更优的遍历方式(<strong>个人看不出有什么大的区别</strong>，先记一下)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(target)) &#123;<br>  target.forEach(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    ret[index] = deepClone(item, map);<br>  &#125;);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-built_in">Object</span>.keys(target).forEach(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>    ret[key] = deepClone(target[key], map);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-事件"><a href="#3-事件" class="headerlink" title="3. 事件"></a>3. 事件</h2><p><a href="https://clz.vercel.app/2021/09/09/javascript-Event/">JavaScript 事件回顾</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.outter</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.inner</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: auto;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: blue;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;outter&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> outter = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.outter&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> inner = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.inner&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      outter.addEventListener(</span><br><span class="javascript">        <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;捕获 outter&quot;</span>);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-literal">true</span></span><br><span class="javascript">      ); <span class="hljs-comment">// true表示在事件捕获阶段， false或不传参表示在事件冒泡阶段</span></span><br><span class="javascript"></span><br><span class="javascript">      inner.addEventListener(</span><br><span class="javascript">        <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;捕获 inner&quot;</span>);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-literal">true</span></span><br><span class="javascript">      );</span><br><span class="javascript"></span><br><span class="javascript">      outter.addEventListener(</span><br><span class="javascript">        <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;冒泡 outter&quot;</span>);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-literal">false</span></span><br><span class="javascript">      ); <span class="hljs-comment">// true表示在事件捕获阶段， false或不传参表示在事件冒泡阶段</span></span><br><span class="javascript"></span><br><span class="javascript">      inner.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;冒泡 inner&quot;</span>);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-1-自定义事件委托函数"><a href="#3-1-自定义事件委托函数" class="headerlink" title="3.1 自定义事件委托函数"></a>3.1 自定义事件委托函数</h3><p>自定义事件委托函数关键：获取真正触发事件的目标元素，若和子元素相匹配，则使用 call 调用回调函数(this 指向，变更为 target)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addEventListener</span>(<span class="hljs-params">el, type, fn, selector</span>) </span>&#123;<br>  <span class="hljs-comment">// selector是子元素</span><br>  el = <span class="hljs-built_in">document</span>.querySelector(el);<br><br>  <span class="hljs-keyword">if</span> (!selector) &#123;<br>    el.addEventListener(type, fn); <span class="hljs-comment">// 没有传递子元素的选择器，则是普通的给el元素绑定事件</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    el.addEventListener(type, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>      <span class="hljs-keyword">const</span> target = e.target; <span class="hljs-comment">// 获取真正触发事件的目标元素</span><br><br>      <span class="hljs-keyword">if</span> (target.matches(selector)) &#123;<br>        <span class="hljs-comment">// 判断选择器与目标元素是否符合</span><br>        fn.call(target, e);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;items&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>01<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>02<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>03<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>04<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>05<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>06<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  addEventListener(</span><br><span class="javascript">    <span class="hljs-string">&quot;#items&quot;</span>,</span><br><span class="javascript">    <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.style.color = <span class="hljs-string">&quot;red&quot;</span>;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-string">&quot;li&quot;</span></span><br><span class="javascript">  );</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-手写事件总线"><a href="#3-2-手写事件总线" class="headerlink" title="3.2 手写事件总线"></a>3.2 手写事件总线</h3><blockquote><p>on(eventName, listener): 绑定事件监听<br>emit(eventName, data): 分发事件<br>off(eventName): 解绑指定事件名的事件监听, 如果没有指定解绑所有</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 事件总线</span><br><span class="hljs-comment">// on(eventName, listener): 绑定事件监听</span><br><span class="hljs-comment">// emit(eventName, data): 分发事件</span><br><span class="hljs-comment">// off(eventName): 解绑指定事件名的事件监听, 如果没有指定解绑所有</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventBus</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.callbacks = &#123;&#125;;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">on</span>(<span class="hljs-params">eventName, fn</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.callbacks[eventName]) &#123;<br>      <span class="hljs-built_in">this</span>.callbacks[eventName].push(fn);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks[eventName] = [fn];<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">emit</span>(<span class="hljs-params">eventName, data</span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> callbacks = <span class="hljs-built_in">this</span>.callbacks[eventName];<br>    <span class="hljs-keyword">if</span> (callbacks &amp;&amp; <span class="hljs-built_in">this</span>.callbacks[eventName].length !== <span class="hljs-number">0</span>) &#123;<br>      callbacks.forEach(<span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> &#123;<br>        callback(data);<br>      &#125;);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">off</span>(<span class="hljs-params">eventName</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (eventName) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.callbacks[eventName]) &#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.callbacks[eventName];<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks = &#123;&#125;;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> eventBus = <span class="hljs-keyword">new</span> EventBus();<br><br>eventBus.on(<span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>登录了`</span>);<br>&#125;);<br><br>eventBus.on(<span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>又登录了`</span>);<br>&#125;);<br><br>eventBus.on(<span class="hljs-string">&quot;logout&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>退出登录了`</span>);<br>&#125;);<br><br><span class="hljs-comment">// eventBus.off(&#x27;login&#x27;)</span><br><span class="hljs-comment">// console.log(eventBus)</span><br><br>eventBus.emit(<span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-string">&quot;赤蓝紫&quot;</span>);<br>eventBus.emit(<span class="hljs-string">&quot;logout&quot;</span>, <span class="hljs-string">&quot;赤蓝紫&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="4-自定义发布订阅"><a href="#4-自定义发布订阅" class="headerlink" title="4. 自定义发布订阅"></a>4. 自定义发布订阅</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 自定义消息订阅与发布</span><br><span class="hljs-comment">// PubSub: 包含所有功能的订阅/发布消息的管理者</span><br><span class="hljs-comment">// PubSub.subscribe(msg, subscriber): 订阅消息: 指定消息名和订阅者回调函数</span><br><span class="hljs-comment">// PubSub.publish(msg, data): 发布消息: 指定消息名和数据</span><br><span class="hljs-comment">// PubSub.unsubscribe(flag): 取消订阅: 根据标识取消某个或某些消息的订阅</span><br><span class="hljs-comment">//  1).没有传值, flag为undefined：清空全部订阅</span><br><span class="hljs-comment">//  2).传入token字符串: 清除唯一订阅</span><br><span class="hljs-comment">//  3).msgName字符串: 清除指定消息的全部订阅</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PubSub</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.callbacks = &#123;&#125;;<br>    <span class="hljs-built_in">this</span>.id = <span class="hljs-number">0</span>; <span class="hljs-comment">// 订阅唯一标识</span><br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">subscribe</span>(<span class="hljs-params">msg, subscriber</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> token = <span class="hljs-string">&quot;token_&quot;</span> + ++<span class="hljs-built_in">this</span>.id;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.callbacks[msg]) &#123;<br>      <span class="hljs-comment">// 有过此消息的另一个订阅</span><br>      <span class="hljs-built_in">this</span>.callbacks[msg][token] = subscriber;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks[msg] = &#123;<br>        [token]: subscriber,<br>      &#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> token; <span class="hljs-comment">// 返回token。用于取消唯一订阅</span><br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">publish</span>(<span class="hljs-params">msg, data</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> callbacksOfmsg = <span class="hljs-built_in">this</span>.callbacks[msg];<br>    <span class="hljs-keyword">if</span> (callbacksOfmsg) &#123;<br>      <span class="hljs-comment">// 有此消息的订阅</span><br>      <span class="hljs-built_in">Object</span>.values(callbacksOfmsg).forEach(<span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> &#123;<br>        callback(data);<br>      &#125;);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">unsubscribe</span>(<span class="hljs-params">flag</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (flag === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 1. 清空全部订阅</span><br>      <span class="hljs-built_in">this</span>.callbacks = &#123;&#125;;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> flag === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>      <span class="hljs-keyword">if</span> (flag.indexOf(<span class="hljs-string">&quot;token&quot;</span>) === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 2. 取消唯一订阅</span><br>        <span class="hljs-keyword">const</span> callbacks = <span class="hljs-built_in">Object</span>.values(<span class="hljs-built_in">this</span>.callbacks).find(<span class="hljs-function">(<span class="hljs-params">callbacksOfmsg</span>) =&gt;</span><br>          callbacksOfmsg.hasOwnProperty(flag)<br>        ); <span class="hljs-comment">// 找到flag对应的callbacks：callbacks: &#123;pay: &#123;token_1: f1, token_2: f2&#125;&#125;</span><br>        <span class="hljs-keyword">delete</span> callbacks[flag];<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 3. 取消指定消息的全部订阅</span><br>        <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.callbacks[flag];<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;如果传入参数, 必须是字符串类型&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> pubsub = <span class="hljs-keyword">new</span> PubSub();<br><br><span class="hljs-keyword">let</span> pid1 = pubsub.subscribe(<span class="hljs-string">&quot;pay&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;商家接单: &quot;</span>, data);<br>&#125;);<br><span class="hljs-keyword">let</span> pid2 = pubsub.subscribe(<span class="hljs-string">&quot;pay&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;骑手接单&quot;</span>);<br>&#125;);<br><span class="hljs-keyword">let</span> pid3 = pubsub.subscribe(<span class="hljs-string">&quot;feedback&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`评价: <span class="hljs-subst">$&#123;data.title&#125;</span><span class="hljs-subst">$&#123;data.feedback&#125;</span>`</span>);<br>&#125;);<br><br><span class="hljs-comment">// console.log(pubsub)</span><br><br>pubsub.publish(<span class="hljs-string">&quot;pay&quot;</span>, &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;炸鸡&quot;</span>,<br>  <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;预定11:11起送&quot;</span>,<br>&#125;);<br><br>pubsub.publish(<span class="hljs-string">&quot;feedback&quot;</span>, &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;炸鸡&quot;</span>,<br>  <span class="hljs-attr">feedback</span>: <span class="hljs-string">&quot;还好&quot;</span>,<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;%c%s&quot;</span>, <span class="hljs-string">&quot;color: blue;font-size: 20px&quot;</span>, <span class="hljs-string">&quot;取消订阅&quot;</span>);<br><br><span class="hljs-comment">// // 1. 取消全部订阅</span><br><span class="hljs-comment">// pubsub.unsubscribe()</span><br><span class="hljs-comment">// console.log(pubsub)</span><br><br><span class="hljs-comment">// // 2. 取消唯一订阅</span><br><span class="hljs-comment">// pubsub.unsubscribe(pid1)</span><br><span class="hljs-comment">// console.log(pubsub)</span><br><br><span class="hljs-comment">// 3. 取消指定消息的订阅</span><br>pubsub.unsubscribe(<span class="hljs-string">&quot;pay&quot;</span>);<br><span class="hljs-built_in">console</span>.log(pubsub);<br></code></pre></td></tr></table></figure><h2 id="5-封装-axios"><a href="#5-封装-axios" class="headerlink" title="5. 封装 axios"></a>5. 封装 axios</h2><p>详见：<a href="https://www.clzczh.top/2022/03/10/axios-1/">axios 笔记</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 封装axios</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">axios</span>(<span class="hljs-params">&#123; url, method = <span class="hljs-string">&quot;GET&quot;</span>, params = &#123;&#125;, data = &#123;&#125; &#125;</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    method = method.toUpperCase();<br><br>    <span class="hljs-keyword">let</span> queryString = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-built_in">Object</span>.keys(params).forEach(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      queryString += <span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;params[key]&#125;</span>&amp;`</span>; <span class="hljs-comment">// 查询参数以key1=value1&amp;key2=value2的形式连接起来</span><br>    &#125;);<br><br>    queryString = queryString.slice(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 去掉后面可能出现的&amp;</span><br>    url += <span class="hljs-string">`?<span class="hljs-subst">$&#123;queryString&#125;</span>`</span>;<br><br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    xhr.open(method, url);<br>    <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&quot;GET&quot;</span>) &#123;<br>      xhr.send();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      xhr.setRequestHeader(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>      xhr.send(<span class="hljs-built_in">JSON</span>.stringify(data)); <span class="hljs-comment">// 只能发送字符串形式的数据</span><br>    &#125;<br><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123; status &#125; = xhr;<br>        <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) &#123;<br>          <span class="hljs-keyword">const</span> response = &#123;<br>            status,<br>            <span class="hljs-attr">data</span>: <span class="hljs-built_in">JSON</span>.parse(xhr.response),<br>          &#125;;<br><br>          resolve(response);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          reject(<span class="hljs-string">`<span class="hljs-subst">$&#123;status&#125;</span>`</span>);<br>        &#125;<br>      &#125;<br>    &#125;;<br>  &#125;);<br>&#125;<br><br>axios.get = <span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(<span class="hljs-built_in">Object</span>.assign(options, &#123; url, <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span> &#125;)); <span class="hljs-comment">// 把methods和url合并到options中去</span><br>&#125;;<br><br>axios.post = <span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(<span class="hljs-built_in">Object</span>.assign(options, &#123; url, <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span> &#125;));<br>&#125;;<br><br>axios.put = <span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(<span class="hljs-built_in">Object</span>.assign(options, &#123; url, <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;PUT&quot;</span> &#125;));<br>&#125;;<br><br>axios.delete = <span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(<span class="hljs-built_in">Object</span>.assign(options, &#123; url, <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;DELETE&quot;</span> &#125;));<br>&#125;;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: data1 &#125; = <span class="hljs-keyword">await</span> axios(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://api.apiopen.top/getJoke&quot;</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>      <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">a</span>: <span class="hljs-number">10</span>,<br>        <span class="hljs-attr">b</span>: <span class="hljs-number">15</span>,<br>      &#125;,<br>    &#125;);<br>    <span class="hljs-built_in">console</span>.log(data1);<br><br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: data2 &#125; = <span class="hljs-keyword">await</span> axios.post(<br>      <span class="hljs-string">&quot;https://api.apiopen.top/getJoke&quot;</span>,<br>      &#123;<br>        <span class="hljs-attr">params</span>: &#123;<br>          <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>        &#125;,<br>      &#125;<br>    );<br>    <span class="hljs-built_in">console</span>.log(data2);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>  &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自定义工具函数库-三&quot;&gt;&lt;a href=&quot;#自定义工具函数库-三&quot; class=&quot;headerlink&quot; title=&quot;自定义工具函数库(三)&quot;&gt;&lt;/a&gt;自定义工具函数库(三)&lt;/h1&gt;&lt;p&gt;最终仓库：&lt;a href=&quot;https://github.com/135</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>自定义工具函数库(二)   数组相关</title>
    <link href="https://www.clzczh.top/2022/03/20/javascript-toolFunction-2/"/>
    <id>https://www.clzczh.top/2022/03/20/javascript-toolFunction-2/</id>
    <published>2022-03-20T13:04:34.000Z</published>
    <updated>2022-03-25T17:15:04.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义工具函数库-二-数组相关"><a href="#自定义工具函数库-二-数组相关" class="headerlink" title="自定义工具函数库(二) 数组相关"></a>自定义工具函数库(二) 数组相关</h1><p>最终仓库：<a href="https://github.com/13535944743/utils">utils: 自定义工具库</a></p><p>以前的笔记：<a href="https://www.clzczh.top/2021/11/14/js-array-methods/">JS 数组常用的方法</a></p><h2 id="1-数组声明式系列方法"><a href="#1-数组声明式系列方法" class="headerlink" title="1. 数组声明式系列方法"></a>1. 数组声明式系列方法</h2><h3 id="1-1-map-函数封装实现"><a href="#1-1-map-函数封装实现" class="headerlink" title="1.1 map 函数封装实现"></a>1.1 map 函数封装实现</h3><blockquote><p><code> map()</code>方法创建一个新数组，其结果是该数组中的每个元素各自调用一次提供的函数后的返回值</p></blockquote><p>循环，数组的每个元素都调用一次函数，并把每次循环得到的返回值都存好，循环结束后，把存好的数组返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// map函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">map</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = [];<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    ret.push(callback(arr[i], i));<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>map函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./map.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result = map(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(index);</span><br><span class="javascript">        <span class="hljs-keyword">return</span> item + <span class="hljs-number">1</span>;</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.map((item, index) =&gt; &#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//   console.log(index)</span></span><br><span class="javascript">      <span class="hljs-comment">//   return item + 1</span></span><br><span class="javascript">      <span class="hljs-comment">// &#125;)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-reduce-函数"><a href="#1-2-reduce-函数" class="headerlink" title="1.2 reduce 函数"></a>1.2 reduce 函数</h3><blockquote><p>对数组中的每个元素执行一个由您提供的<strong>reducer</strong>函数(升序执行)，将其结果汇总为单个返回值。</p></blockquote><p>循环遍历数组，并每次都把调用函数得到的值，重新赋值给<code> ret</code>变量，然后作为下一次调用函数时的第一个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// reduce函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduce</span>(<span class="hljs-params">arr, callback, initValue</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = initValue;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>    ret = callback(ret, item); <span class="hljs-comment">// 每次调用都把最新的值重新赋给ret</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>reduce函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./reduce.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result = reduce(</span><br><span class="javascript">        arr,</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">preValue, curValue</span>) =&gt;</span> preValue + curValue,</span><br><span class="javascript">        <span class="hljs-number">10</span></span><br><span class="javascript">      );</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.reduce(</span></span><br><span class="javascript">      <span class="hljs-comment">//   (preValue, curValue) =&gt; preValue + curValue,</span></span><br><span class="javascript">      <span class="hljs-comment">//   0)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-3-filter-函数"><a href="#1-3-filter-函数" class="headerlink" title="1.3 filter 函数"></a>1.3 filter 函数</h3><blockquote><p>创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p></blockquote><p>循环，如果以该数组元素作为参数调用函数的返回值为<code> true</code>，则存好。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// filter函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (callback(arr[i], i)) &#123;<br>      ret.push(arr[i]);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>filter函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./filter.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result = filter(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> index % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.filter(item =&gt; item &gt;= 3)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-4-find-函数"><a href="#1-4-find-函数" class="headerlink" title="1.4 find 函数"></a>1.4 find 函数</h3><blockquote><p>返回数组中满足提供的测试函数的第一个元素的值。否则返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// find函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (callback(arr[i], i)) &#123;<br>      <span class="hljs-keyword">return</span> arr[i];<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>find函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./find.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result1 = find(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt;= <span class="hljs-number">3</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result1);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result2 = find(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt;= <span class="hljs-number">10</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result2);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.find((item, index) =&gt; item &gt;= 3)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-5-findIndex-函数"><a href="#1-5-findIndex-函数" class="headerlink" title="1.5 findIndex 函数"></a>1.5 findIndex 函数</h3><blockquote><p>返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。若没有找到对应元素则返回-1。</p></blockquote><p>和 find()函数类似，只不过是返回满足条件的第一个元素的索引，以及没有满足的是返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// findIndex函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findIndex</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (callback(arr[i], i)) &#123;<br>      <span class="hljs-keyword">return</span> i;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>findIndex函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./findIndex.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result1 = findIndex(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt;= <span class="hljs-number">3</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result1);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result2 = findIndex(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt;= <span class="hljs-number">10</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result2);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.findIndex((item, index) =&gt; item &gt;= 10)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-6-every-函数"><a href="#1-6-every-函数" class="headerlink" title="1.6 every 函数"></a>1.6 every 函数</h3><blockquote><p>测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// every函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">every</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (!callback(arr[i], i)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>every函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./every.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result1 = every(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt;= <span class="hljs-number">3</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result1);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result2 = every(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &lt; <span class="hljs-number">10</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result2);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.every((item, index) =&gt; item &lt; 10)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-7-some-函数"><a href="#1-7-some-函数" class="headerlink" title="1.7 some 函数"></a>1.7 some 函数</h3><blockquote><p>测试数组中是不是至少有 1 个元素通过了被提供的函数测试。它返回的是一个 Boolean 类型的值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// some函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">some</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (callback(arr[i], i)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>some函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./some.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result1 = some(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &lt; <span class="hljs-number">3</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result1);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result2 = some(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &lt; <span class="hljs-number">0</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result2);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.some((item, index) =&gt; item &lt; 3)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-数组去重"><a href="#2-数组去重" class="headerlink" title="2. 数组去重"></a>2. 数组去重</h2><h3 id="2-1-forEach-indexOf"><a href="#2-1-forEach-indexOf" class="headerlink" title="2.1 forEach() + indexOf()"></a>2.1 forEach() + indexOf()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组去重方法1：forEach() + indexOf()</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ret = [];<br><br>  arr.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (ret.indexOf(item) === -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// 如果数组中不存在当前值，则存进去</span><br>      ret.push(item);<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-forEach-容器-对象"><a href="#2-2-forEach-容器-对象" class="headerlink" title="2.2 forEach() + 容器(对象)"></a>2.2 forEach() + 容器(对象)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组去重方法2：forEach() + 容器(对象)</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ret = [];<br>  <span class="hljs-keyword">const</span> obj = &#123;&#125;; <span class="hljs-comment">// 键是数组之前出现过的元素，值是是否有出现过。</span><br>  <span class="hljs-comment">// 出现过值是true，没出现过只是undefined</span><br><br>  arr.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (obj[item]) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    obj[item] = <span class="hljs-literal">true</span>;<br>    ret.push(item);<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-Set-Array-from-或-扩展运算符-…"><a href="#2-3-Set-Array-from-或-扩展运算符-…" class="headerlink" title="2.3 Set + Array.from() 或 扩展运算符(…)"></a>2.3 Set + Array.from() 或 扩展运算符(…)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组去重方法3：Set + Array.from() 或 扩展运算符(...)</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr);<br>  <span class="hljs-comment">// return Array.from(set)      // Array.from()可以通过可迭代对象(包括数组、Set等)创建一个新的数组</span><br><br>  <span class="hljs-keyword">return</span> [...set]; <span class="hljs-comment">// 使用ES6的扩展运算符`...`</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-concat-函数"><a href="#3-concat-函数" class="headerlink" title="3. concat 函数"></a>3. concat 函数</h2><blockquote><p>用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// concat函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">concat</span>(<span class="hljs-params">arr, ...args</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ret = [...arr];<br><br>  args.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(item)) &#123;<br>      <span class="hljs-comment">// 如果是数组，则通过扩展运算符把数组中的元素push到新数组中</span><br>      ret.push(...item);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ret.push(item);<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>concat函数实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./concat.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 自定义函数</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result = concat(arr, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>]);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 内置方法</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.concat([4, 5, 6], 7, 8)</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-slice-数组切片"><a href="#4-slice-数组切片" class="headerlink" title="4. slice 数组切片"></a>4. slice 数组切片</h2><blockquote><p>返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的<strong>浅拷贝</strong>（包括 <code>begin</code>，不包括<code>end</code>）。原始数组不会被改变。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// slice函数实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">slice</span>(<span class="hljs-params">arr, begin, end</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (arr.length === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> [];<br>  &#125;<br><br>  begin = begin || <span class="hljs-number">0</span>; <span class="hljs-comment">// 如果begin没有传，则从0开始切</span><br>  <span class="hljs-keyword">if</span> (begin &gt;= arr.length) &#123;<br>    <span class="hljs-keyword">return</span> [];<br>  &#125;<br><br>  end = end || arr.length;<br><br>  <span class="hljs-keyword">const</span> ret = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= begin &amp;&amp; i &lt; end) &#123;<br>      ret.push(arr[i]);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>slice函数实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./slice.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>];</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 自定义函数</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result1 = slice(arr, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result1);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result2 = slice(arr);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result2);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result3 = slice(arr, <span class="hljs-number">2</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result3);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result4 = slice(arr, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result4);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 内置方法</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.slice(2, 6) // 截取索引在[2， 6)范围内的元素</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-数组扁平化"><a href="#5-数组扁平化" class="headerlink" title="5. 数组扁平化"></a>5. 数组扁平化</h2><p>数组扁平化是指将一个多维数组变为一维数组</p><p><strong>内置方法 flat</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [[<span class="hljs-number">5</span>], <span class="hljs-number">6</span>], <span class="hljs-number">7</span>];<br><br><span class="hljs-keyword">const</span> result = arr.flat(<span class="hljs-literal">Infinity</span>);<br><span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">//  [1, 2, 3, 4, 5, 6, 7]</span><br></code></pre></td></tr></table></figure><h3 id="5-1-递归"><a href="#5-1-递归" class="headerlink" title="5.1 递归"></a>5.1 递归</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组扁平化(1): 通过concat和forEach实现，遇到多维数组时，通过递归调用flatten实现扁平化</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flatten</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = [];<br><br>  arr.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(item)) &#123;<br>      ret = ret.concat(flatten(item)); <span class="hljs-comment">// 如果是数组，继续打平</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ret = ret.concat(item);<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-扩展运算符…"><a href="#5-2-扩展运算符…" class="headerlink" title="5.2 扩展运算符…"></a>5.2 扩展运算符…</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组扁平化(2): 通过concat函数和扩展运算符...实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flatten</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = [...arr];<br><br>  <span class="hljs-keyword">while</span> (ret.some(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-built_in">Array</span>.isArray(item))) &#123;<br>    ret = [].concat(...ret);<br>    <span class="hljs-comment">// 举例：arr = [1, 2, 3, 4, [5, 6]]</span><br>    <span class="hljs-comment">// 则ret = [].concat(1, 2, 3, 4, [5, 6]) = [1, 2, 3, 4, 5, 6]</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="5-3-toString-join-split-map"><a href="#5-3-toString-join-split-map" class="headerlink" title="5.3 toString / join + split + map"></a>5.3 toString / join + split + map</h3><p>先通过<code> toString</code>或<code> join</code>把数组转成字符串，在通过<code> split</code>转换成数组，最后还需要通过<code> map</code>函数，把数组的每一个元素变回数字。(不考虑其他类型的数组的话)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flatten</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> arr<br>    .toString()<br>    .split(<span class="hljs-string">&quot;,&quot;</span>)<br>    .map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-built_in">Number</span>(item));<br>  <span class="hljs-comment">// return arr.join().split(&#x27;,&#x27;).map(item =&gt; Number(item))</span><br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="5-4-reduce"><a href="#5-4-reduce" class="headerlink" title="5.4 reduce"></a>5.4 reduce</h3><p>遍历数组，如果是数组，则递归遍历，否则，通过<code> concat</code>拼接起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flatten</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> arr.reduce(<span class="hljs-function">(<span class="hljs-params">pre, cur</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> pre.concat(<span class="hljs-built_in">Array</span>.isArray(cur) ? flatten(cur) : cur);<br>  &#125;, []);<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="6-数组分块"><a href="#6-数组分块" class="headerlink" title="6. 数组分块"></a>6. 数组分块</h2><blockquote><p>语法：<code> chunk(array, size)</code></p><p>功能：将数组拆分成多个 size 大小长度的区块，每个区块组成小数组，整体组成一个二维数组</p><p>例子：[1, 2, 3, 4, 5, 6]调用 chunk(arr, 4) =&gt; [[1, 2, 3, 4], [5, 6]]</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组分块：这里用了比较巧妙的方法。暂存分块好的数组为0时，把它push到ret数组中，然后通过数组的引用性质，给temp数组push值，从而也改变ret数组的值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">chunk</span>(<span class="hljs-params">arr, size = <span class="hljs-number">1</span></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = [];<br>  <span class="hljs-keyword">let</span> temp = []; <span class="hljs-comment">// 暂存分块好的数组，再push到ret中</span><br><br>  arr.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (temp.length === <span class="hljs-number">0</span>) &#123;<br>      ret.push(temp);<br>      <span class="hljs-comment">// console.log(1, ret)   // 如需测试，请在node环境测试</span><br>    &#125;<br><br>    temp.push(item);<br>    <span class="hljs-comment">// console.log(2, ret)</span><br><br>    <span class="hljs-keyword">if</span> (temp.length === size) &#123;<br>      temp = [];<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">// console.log(chunk([1, 2, 3, 4, 5, 6, 7], 3))</span><br></code></pre></td></tr></table></figure><h2 id="7-数组差集"><a href="#7-数组差集" class="headerlink" title="7. 数组差集"></a>7. 数组差集</h2><blockquote><ul><li>语法: difference(arr1, arr2)</li><li>功能: 得到当前数组中所有不在 arr 中的元素组成的数组(不改变原数组)</li><li>例子: difference([1,3,5,7], [5, 8]) ==&gt; [1, 3, 7]</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组差集</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">difference</span>(<span class="hljs-params">arr1, arr2 = []</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (arr1.length === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> [];<br>  &#125;<br>  <span class="hljs-keyword">if</span> (arr2.length === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> arr1.slice();<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> ret = arr1.filter(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> !arr2.includes(item));<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">// console.log(difference([1, 2, 3, 4], [3, 4, 5]))</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自定义工具函数库-二-数组相关&quot;&gt;&lt;a href=&quot;#自定义工具函数库-二-数组相关&quot; class=&quot;headerlink&quot; title=&quot;自定义工具函数库(二) 数组相关&quot;&gt;&lt;/a&gt;自定义工具函数库(二) 数组相关&lt;/h1&gt;&lt;p&gt;最终仓库：&lt;a href=&quot;ht</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>自定义工具函数库(一)  函数相关</title>
    <link href="https://www.clzczh.top/2022/03/19/javascript-toolFunction-1/"/>
    <id>https://www.clzczh.top/2022/03/19/javascript-toolFunction-1/</id>
    <published>2022-03-19T03:40:10.000Z</published>
    <updated>2022-03-25T17:15:02.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义工具函数库-一-函数相关"><a href="#自定义工具函数库-一-函数相关" class="headerlink" title="自定义工具函数库(一) 函数相关"></a>自定义工具函数库(一) 函数相关</h2><p>最终仓库：<a href="https://github.com/13535944743/utils">utils: 自定义工具库</a></p><p>之前在哔哩哔哩看的视频的笔记。整理了一下。</p><h3 id="1-1-call-函数封装实现"><a href="#1-1-call-函数封装实现" class="headerlink" title="1.1 call 函数封装实现"></a>1.1 call 函数封装实现</h3><p>原理：为传入的 obj 添加临时方法，然后去调用这个临时方法，这样子，这个方法的<code>this</code>就会指向调用它的对象了，最后还需要把临时方法删除掉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// call函数封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">call</span>(<span class="hljs-params">fn, obj, ...args</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (obj === <span class="hljs-literal">undefined</span> || obj === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 如果call函数的第二个参数undefined(包括不传参)或null时，让obj等于全局对象</span><br>    obj = globalThis; <span class="hljs-comment">// 浏览器下globalThis是window，而node环境下则是global</span><br>  &#125;<br><br>  <span class="hljs-comment">// 为obj添加临时方法</span><br>  obj.temp = fn;<br><br>  <span class="hljs-comment">// 调用temp方法，此时方法中的this就是指向obj</span><br>  <span class="hljs-keyword">let</span> result = obj.temp(...args);<br><br>  <span class="hljs-comment">// 删除temp方法</span><br>  <span class="hljs-keyword">delete</span> obj.temp;<br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>  <span class="hljs-keyword">return</span> a + b + <span class="hljs-built_in">this</span>.c;<br>&#125;<br><br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>,<br>&#125;;<br><br><span class="hljs-comment">// 添加全局属性</span><br><span class="hljs-built_in">window</span>.c = <span class="hljs-number">100</span>;<br><br><span class="hljs-built_in">console</span>.log(call(add, obj, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">// 6：1 + 2 + obj.c，此时add函数中的this是obj</span><br><span class="hljs-built_in">console</span>.log(obj); <span class="hljs-comment">// &#123;c: 3&#125;</span><br><br><span class="hljs-built_in">console</span>.log(call(add, <span class="hljs-literal">null</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">// 103：1 + 2 + window.c，此时add函数中的this是window</span><br></code></pre></td></tr></table></figure><br><h3 id="1-2-apply-函数"><a href="#1-2-apply-函数" class="headerlink" title="1.2 apply 函数"></a>1.2 apply 函数</h3><p>原理：和<code> call</code>函数一样，就只是第三个参数是数组，而不是多个参数而已，所以不需要使用扩展运算符<code> ...</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// apply函数封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">apply</span>(<span class="hljs-params">fn, obj, args</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (obj === <span class="hljs-literal">undefined</span> || obj === <span class="hljs-literal">null</span>) &#123;<br>    obj = globalThis;<br>  &#125;<br>  obj.temp = fn;<br><br>  <span class="hljs-keyword">let</span> result = obj.temp(...args);<br><br>  <span class="hljs-keyword">delete</span> obj.temp;<br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="1-3-bind-函数"><a href="#1-3-bind-函数" class="headerlink" title="1.3 bind 函数"></a>1.3 bind 函数</h3><p>需要依赖自定义 call 函数或内置 call 函数</p><p>这个函数功能和<code> call</code>函数一样，所以可以调用内置的<code> call</code>函数来实现，当然也可以调用自定义版本的。</p><p>不同的是，返回是一个函数，而不是立即调用。而且<strong>在调用<code> bind</code>时可以传参，调用返回的函数也可以传参，只是如果传两次参数，则只有第一次的参数会起作用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// bind函数封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bind</span>(<span class="hljs-params">fn, obj, ...args1</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args2</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> fn.call(obj, ...args1, ...args2); <span class="hljs-comment">// 如果传两次参数，则只有第一次的参数会起作用。如果只传一次，则那一次的参数就会起作用</span><br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./bind.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>);</span><br><span class="javascript">        <span class="hljs-keyword">return</span> a + b + <span class="hljs-built_in">this</span>.c;</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> obj = &#123;</span><br><span class="javascript">        <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 添加全局属性</span></span><br><span class="javascript">      <span class="hljs-built_in">window</span>.c = <span class="hljs-number">100</span>;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> fn1 = bind(add, obj, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(fn1());</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> fn2 = bind(add, obj, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(fn2(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>));</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> fn3 = bind(add, obj);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(fn3(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>));</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> fn4 = bind(add, <span class="hljs-literal">null</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(fn4());</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 内置版本</span></span><br><span class="javascript">      <span class="hljs-comment">// const fn1 = add.bind(obj, 3, 4)</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(fn1())</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// const fn2 = add.bind(obj, 3, 4)</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(fn2(5, 6))</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// const fn3 = add.bind(obj)</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(fn3(5, 6))</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// const fn4 = add.bind(null, 3, 4)</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(fn4())</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="1-4-函数节流和函数防抖"><a href="#1-4-函数节流和函数防抖" class="headerlink" title="1.4 函数节流和函数防抖"></a>1.4 函数节流和函数防抖</h3><ul><li>事件频繁触发可能造成问题<ul><li>一些浏览器事件如<code> window.onresize</code>、<code> window.mousedown</code>等，触发频率高，会造成界面卡顿</li><li>向后台发送请求，频繁触发的话，对服务器会造成不必要的麻烦</li></ul></li></ul><p>解决方案：通过函数节流和函数防抖限制事件处理函数的频繁调用</p><br><h4 id="1-4-1-函数节流-throttle"><a href="#1-4-1-函数节流-throttle" class="headerlink" title="1.4.1 函数节流(throttle)"></a>1.4.1 函数节流(throttle)</h4><ul><li><p><strong>在函数需要频繁触发时：函数执行一次后，经过设定的间隔后才可以执行第二次。</strong></p></li><li><p>适合多次时间按时间平均分配触发</p></li></ul><p>场景：</p><ul><li>resize 事件(窗口调整)</li><li>scroll 事件(页面滚动)</li><li>mousemove 事件(拖拽功能)</li><li>click 事件(疯狂点击点击)</li></ul><p>语法：<code> throttle(callback, wait)</code></p><p>功能：创建一个节流函数，在 wait 毫秒内最多执行<code> callback</code>一次</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数节流</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">callback, wait</span>) </span>&#123;<br>  <span class="hljs-comment">// 定义开始时间</span><br>  <span class="hljs-keyword">let</span> start = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">// 返回结果是一个函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>    <span class="hljs-comment">// 获取当前时间戳</span><br>    <span class="hljs-keyword">let</span> now = <span class="hljs-built_in">Date</span>.now();<br><br>    <span class="hljs-keyword">if</span> (now - start &gt;= wait) &#123;<br>      callback.call(<span class="hljs-built_in">this</span>, event); <span class="hljs-comment">// 满足条件，执行回调函数</span><br><br>      <span class="hljs-comment">// 修改开始时间</span><br>      start = now;<br>    &#125;<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">// // 之前青训营时，月影老师教的版本：通过定义一个计时器，当计时器到期时，清除之前的计时器，而清除计时器的时候才可以再次调用回调函数</span><br><span class="hljs-comment">// function throttle(fn, time = 500) &#123;</span><br><span class="hljs-comment">//   let timer;</span><br><span class="hljs-comment">//   return function (...args) &#123;</span><br><span class="hljs-comment">//     if (timer == null) &#123;</span><br><span class="hljs-comment">//       fn.apply(this, args);</span><br><span class="hljs-comment">//       timer = setTimeout(() =&gt; &#123;</span><br><span class="hljs-comment">//         timer = null;/* 到期的话，清除之前的计时器 */</span><br><span class="hljs-comment">//       &#125;, time)</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">2000px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./throttle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// window.addEventListener(&#x27;scroll&#x27;, () =&gt; &#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//   console.log(this.scrollY) // 直接绑定滚动事件，一滚动，疯狂输出</span></span><br><span class="javascript">      <span class="hljs-comment">// &#125;)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">window</span>.addEventListener(</span><br><span class="javascript">        <span class="hljs-string">&quot;scroll&quot;</span>,</span><br><span class="javascript">        throttle(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.scrollY); <span class="hljs-comment">// 成功实现节流</span></span><br><span class="javascript">        &#125;, <span class="hljs-number">500</span>)</span><br><span class="javascript">      );</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h4 id="1-4-2-函数防抖-debounce"><a href="#1-4-2-函数防抖-debounce" class="headerlink" title="1.4.2 函数防抖(debounce)"></a>1.4.2 函数防抖(debounce)</h4><ul><li>在函数需要频繁触发时：<strong>在规定时间内，只让最后一次生效，前面的不生效</strong></li><li>适合多个事件一次相应的情况</li></ul><p>场景：输入框实时搜索联想（keyup / input）</p><blockquote><p>语法：<code> debounce(callback, wait)</code></p><p>功能：创建一个防抖动函数，该函数会从上一次被触发后，延迟<code> wait</code>毫秒后调用<code> callback</code></p><p>如果触发一次，还没过<code> wait</code>毫秒，再次触发，那么又得重新计时，依此类推，直到延迟<code> wait</code>毫秒后才调用<code> callback</code>(即<b style="color: red">频繁触发时，只让最后一次生效</b>)</p></blockquote><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数防抖</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">callback, time</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 定时器变量</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">clearTimeout</span>(timer); <span class="hljs-comment">// 每一次新的触发都会把前一次的定时器给清除掉，直到没有新的触发且时间经过time毫秒后才调用callback</span><br><br>    <span class="hljs-comment">// 启动计时器</span><br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      callback.call(<span class="hljs-built_in">this</span>, e);<br>    &#125;, time);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./debounce.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;input&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      input.onkeydown = debounce(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(e.keyCode);</span><br><span class="javascript">      &#125;, <span class="hljs-number">1000</span>);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><a href="https://www.bilibili.com/video/BV1Cy4y117vt">尚硅谷 Web 前端自定义工具函数库视频教程_哔哩哔哩_bilibili</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自定义工具函数库-一-函数相关&quot;&gt;&lt;a href=&quot;#自定义工具函数库-一-函数相关&quot; class=&quot;headerlink&quot; title=&quot;自定义工具函数库(一) 函数相关&quot;&gt;&lt;/a&gt;自定义工具函数库(一) 函数相关&lt;/h2&gt;&lt;p&gt;最终仓库：&lt;a href=&quot;ht</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript实现继承的六种方式</title>
    <link href="https://www.clzczh.top/2022/03/17/javascript-inherit/"/>
    <id>https://www.clzczh.top/2022/03/17/javascript-inherit/</id>
    <published>2022-03-17T09:06:21.000Z</published>
    <updated>2022-03-25T17:14:54.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-实现继承的六种方式"><a href="#JavaScript-实现继承的六种方式" class="headerlink" title="JavaScript 实现继承的六种方式"></a>JavaScript 实现继承的六种方式</h1><hr><p><strong>父类</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;1 + 1 = 2&quot;</span>);<br>  &#125;;<br>&#125;<br><br>Person.prototype.listen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;エウテルペ&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><hr><h2 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h2><p><strong>将父类的实例作为子类的原型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;1 + 1 = 2&quot;</span>);<br>  &#125;;<br>&#125;<br><br>Person.prototype.listen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;エウテルペ&quot;</span>);<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><br>Student.prototype = <span class="hljs-keyword">new</span> Person(); <span class="hljs-comment">//关键</span><br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student();<br><br>stu.grade = <span class="hljs-number">3</span>;<br><br><span class="hljs-built_in">console</span>.log(stu.grade); <span class="hljs-comment">// 3</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br></code></pre></td></tr></table></figure><br><p><strong>优点</strong>：</p><ul><li><p>简单易实现</p></li><li><p>父类新增原型方法/原型属性，子类都能访问</p></li><li><p>实例是子类的实例也是父类的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">stu <span class="hljs-keyword">instanceof</span> Student; <span class="hljs-comment">// true</span><br>stu <span class="hljs-keyword">instanceof</span> Person; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li></ul><br><p><strong>缺点</strong>：</p><ul><li>为子类新增属性和方法，不能在构造函数中</li><li>无法实现多继承</li><li>创建子类实例时，不能向父类构造函数传参数</li><li>所有新实例都会共享父类实例的属性。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改！）</li></ul><br><p><strong>存在的问题：</strong></p><ul><li><p><code>prototype</code>里有个属性<code>constructor</code>指向构造函数本身，但是，<code> Student</code>的原型已经被父类的实例取代了，所以指向也不正确，所以需要修复构造函数指向(这里网上的教程只是对组合继承、寄生组合式继承进行了修复，不知道是不是因为这个不常用的关系)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-built_in">console</span>.log(Student.prototype.constructor);<br><br>Student.prototype = <span class="hljs-keyword">new</span> Person(); <span class="hljs-comment">//关键</span><br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student();<br><br>stu.grade = <span class="hljs-number">3</span>;<br><br><span class="hljs-built_in">console</span>.log(stu.grade); <span class="hljs-comment">// 3</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br><span class="hljs-built_in">console</span>.log(Student.prototype.constructor);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/5jp73YhObJIxtM2.png" alt="image-20220317095122520"></p></li></ul><br><p><strong>解决问题</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">Student.prototype.constructor = Student;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/4eCavAGMltys9TK.png" alt="image-20220317095215698"></p><hr><h2 id="2-借用构造函数继承"><a href="#2-借用构造函数继承" class="headerlink" title="2. 借用构造函数继承"></a>2. 借用构造函数继承</h2><p><strong>在一个类中执行另一个类的构造函数，通过<code> call</code>函数设置<code> this</code>的指向，这样就可以得到另一个类的所有属性</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">WebsiteMaster</span>(<span class="hljs-params">site</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.site = site;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, grade, site</span>) </span>&#123;<br>  Person.call(<span class="hljs-built_in">this</span>, name);<br>  WebsiteMaster.call(<span class="hljs-built_in">this</span>, site);<br>  <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;https://clz.vercel.app&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade, stu.site); <span class="hljs-comment">// clz, 3, https://clz.vercel.app</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// Uncaught TypeError: stu.listen is not a function</span><br></code></pre></td></tr></table></figure><br><p><strong>优点：</strong></p><ul><li>创建子类实例时，可以向父类传递参数</li><li>可以实现多继承(call 多个对象)</li><li>不需要修复构造函数指向</li></ul><br><p><strong>缺点：</strong></p><ul><li><p>方法在构造函数中定义，无法复用</p></li><li><p>只能继承父类的实例属性，不能继承原型属性、方法</p></li><li><p>实例并不是父类的实例，而只是子类的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">stu <span class="hljs-keyword">instanceof</span> Student; <span class="hljs-comment">// true</span><br>stu <span class="hljs-keyword">instanceof</span> Person; <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>继承继着不再是人了(笑)</p></li></ul><hr><h2 id="3-原型式继承"><a href="#3-原型式继承" class="headerlink" title="3. 原型式继承"></a>3. 原型式继承</h2><p>为父类实例添加属性、方法，作为子类实例。</p><blockquote><p>道格拉斯·克罗克福德在一篇文章中介绍了一种实现继承的方法，这种方法并没有使用严格意义上的构造函数。它的想法是借助原型可以基于已有的对象创建新对象，同时还不必因此创建自定义类型。为了达到这个目的，他给出了如下函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">object</span>(<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  F.prototype = o;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F();<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">object</span>(<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  F.prototype = o;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F();<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br><span class="hljs-keyword">const</span> stu = object(person);<br><br>stu.grade = <span class="hljs-number">3</span>;<br>stu.study = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;FrontEnd&quot;</span>);<br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade); <span class="hljs-comment">// clz, 3</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br><br>stu.study(); <span class="hljs-comment">// FrontEnd</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/HRrLnl6oKQhDiv7.png" alt="image-20220316224057344"></p><br><p><strong>优点</strong>：</p><ul><li>感觉没啥优点，不太像继承</li></ul><br><p><strong>缺点：</strong></p><ul><li>不支持多继承</li><li>实例是父类的实例</li></ul><hr><h2 id="4-寄生式继承"><a href="#4-寄生式继承" class="headerlink" title="4. 寄生式继承"></a>4. 寄生式继承</h2><p>为父类实例添加属性、方法，作为子类实例。(原理和原型式继承一样)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">object</span>(<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  F.prototype = o;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, grade</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> person = object(<span class="hljs-keyword">new</span> Person(name));<br><br>  person.grade = grade;<br>  person.study = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;FrontEnd&quot;</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> person;<br>&#125;<br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-number">3</span>);<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade); <span class="hljs-comment">// clz, 3</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br><br>stu.study(); <span class="hljs-comment">// FrontEnd</span><br></code></pre></td></tr></table></figure><p><strong>优点</strong>：</p><ul><li>有了子类的雏形，但是换汤不换药，原理和原型式继承一样</li></ul><br><p><strong>缺点：</strong></p><ul><li><p>不支持多继承</p></li><li><p>实例是父类的实例，不是子类的实例(因为只是在父类的实例上添加属性、方法而已)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">stu <span class="hljs-keyword">instanceof</span> Student; <span class="hljs-comment">// false</span><br>stu <span class="hljs-keyword">instanceof</span> Person; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="5-组合继承"><a href="#5-组合继承" class="headerlink" title="5. 组合继承"></a>5. 组合继承</h2><p>原型链继承+借用构造函数继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">WebsiteMaster</span>(<span class="hljs-params">site</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.site = site;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, grade, site</span>) </span>&#123;<br>  Person.call(<span class="hljs-built_in">this</span>, name); <span class="hljs-comment">// 继承属性</span><br>  WebsiteMaster.call(<span class="hljs-built_in">this</span>, site);<br>  <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><br>Student.prototype = <span class="hljs-keyword">new</span> Person(); <span class="hljs-comment">// 继承方法</span><br>Student.prototype.constructor = Student;<br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;https://clz.vercel.app&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade, stu.site); <span class="hljs-comment">// clz, 3, https://clz.vercel.app</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br><br><span class="hljs-built_in">console</span>.log(stu.constructor);<br></code></pre></td></tr></table></figure><br><p><strong>优点</strong>：</p><ul><li>可以继承实例属性、方法，也可以继承原型属性、方法</li><li>可传参、可复用</li><li>实例既是子类的实例，也是父类的实例</li></ul><br><p><strong>缺点</strong>：</p><ul><li>调用了两次父类构造函数，耗内存</li><li>需要修复构造函数指向</li></ul><br><h2 id="6-寄生组合式继承"><a href="#6-寄生组合式继承" class="headerlink" title="6. 寄生组合式继承"></a>6. 寄生组合式继承</h2><p>通过<code> Object.create()</code>来代替给子类原型赋值的过程，解决了两次调用父类构造函数的问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">WebsiteMaster</span>(<span class="hljs-params">site</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.site = site;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, grade, site</span>) </span>&#123;<br>  Person.call(<span class="hljs-built_in">this</span>, name); <span class="hljs-comment">// 继承属性</span><br>  WebsiteMaster.call(<span class="hljs-built_in">this</span>, site);<br>  <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><br>Student.prototype = <span class="hljs-built_in">Object</span>.create(Person.prototype); <span class="hljs-comment">// 继承方法</span><br>Student.prototype.constructor = Student; <span class="hljs-comment">// 修复构造函数指向</span><br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;https://clz.vercel.app&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade, stu.site); <span class="hljs-comment">// clz, 3, https://clz.vercel.app</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br></code></pre></td></tr></table></figure><br><p>有人可能会提出：为什么不可以直接把父类原型赋值给子类原型来实现呢？</p><p>这是因为直接赋值的话，那就是引用关系。下面就来看看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">WebsiteMaster</span>(<span class="hljs-params">site</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.site = site;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, grade, site</span>) </span>&#123;<br>  Person.call(<span class="hljs-built_in">this</span>, name); <span class="hljs-comment">// 继承属性</span><br>  WebsiteMaster.call(<span class="hljs-built_in">this</span>, site);<br>  <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><br>Student.prototype = Person.prototype; <span class="hljs-comment">// 继承方法</span><br>Student.prototype.constructor = Student; <span class="hljs-comment">// 修复实例</span><br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;https://clz.vercel.app&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade, stu.site); <span class="hljs-comment">// clz, 3, https://clz.vercel.app</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br><br>Student.prototype.listen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;EGOIST&quot;</span>);<br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(Person.prototype.listen);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/tSLzqmKE1jRk4iJ.png" alt="image-20220316234707764"></p><p>可以看到，修改<code> Student</code>原型上的方法时，<code> Person</code>的原型上的也会跟着变化。</p><blockquote><p>**<code>Object.create()</code>**方法创建一个新对象，使用现有的对象来提供新创建的对象的<code>__proto__</code>。</p><p>所以，此时修改<code> Student</code>原型上的方法时，<code> Person</code>的原型上的不会跟着变化。</p></blockquote><hr><p>es6 之前没有<code> Object.create()</code>方法，可以自己实现(实际就是原型式继承的关键函数)</p><p><strong>关键</strong>：</p><ul><li>接受一个对象 obj</li><li>返回一个新对象 newObj</li><li>让<code> newObj.__proto__ === obj</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">object</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125; <span class="hljs-comment">// 新的构造函数</span><br>  F.prototype = obj; <span class="hljs-comment">// 继承传入的参数obj</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F(); <span class="hljs-comment">// 返回新的函数对象</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><p>参考链接：</p><ul><li><p><a href="https://zhuanlan.zhihu.com/p/37735247">js 继承的几种方式 - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://www.cnblogs.com/ranyonsue/p/11201730.html">js 继承的 6 种方式 - ranyonsue - 博客园 (cnblogs.com)</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript-实现继承的六种方式&quot;&gt;&lt;a href=&quot;#JavaScript-实现继承的六种方式&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 实现继承的六种方式&quot;&gt;&lt;/a&gt;JavaScript 实现继承的六种方式&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>github添加README文件后导致的问题</title>
    <link href="https://www.clzczh.top/2022/03/17/git-readme/"/>
    <id>https://www.clzczh.top/2022/03/17/git-readme/</id>
    <published>2022-03-17T06:09:30.000Z</published>
    <updated>2022-03-25T17:14:32.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="github-添加-README-文件后导致的问题"><a href="#github-添加-README-文件后导致的问题" class="headerlink" title="github 添加 README 文件后导致的问题"></a>github 添加 README 文件后导致的问题</h1><p>github 添加<code> README.md</code>文件后，<code> git push origin main</code>报错，<code> git pull origin main</code>后再推也无济于事。</p><p>这是因为<code> github</code>处添加<code> README</code>文件导致历史不一样。</p><p>通过<code> git pull</code>指令后添加<code> --allow-unrelated-histories</code>选项解决问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull origin main --allow-unrelated-histories<br></code></pre></td></tr></table></figure><p>该选项可以合并两个独立启动仓库的历史。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;github-添加-README-文件后导致的问题&quot;&gt;&lt;a href=&quot;#github-添加-README-文件后导致的问题&quot; class=&quot;headerlink&quot; title=&quot;github 添加 README 文件后导致的问题&quot;&gt;&lt;/a&gt;github 添加 R</summary>
      
    
    
    
    <category term="小技能" scheme="https://www.clzczh.top/categories/%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="git" scheme="https://www.clzczh.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>详解原型与原型链</title>
    <link href="https://www.clzczh.top/2022/03/16/javascript-prototype/"/>
    <id>https://www.clzczh.top/2022/03/16/javascript-prototype/</id>
    <published>2022-03-16T10:05:54.000Z</published>
    <updated>2022-03-25T17:14:58.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="详解原型与原型链"><a href="#详解原型与原型链" class="headerlink" title="详解原型与原型链"></a>详解原型与原型链</h1><p>其实，刚开始学 JavaScript 时，就有学过原型与原型链的相关知识了，只是当时还没有养成写笔记的习惯，导致现在已经忘的七七八八了。</p><p>这边文章真是花了很多心思，写了两天，看了很多篇篇博文，其中有小参考的，有解决一点疑惑的，但是最后只标注了一篇帮助最大的。</p><br><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p><strong>实例的构造函数属性(<code> constructor</code>)指向其构造函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person.constructor === Person); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><br><p><b style="color: red">实例的构造函数并不是自身属性，而是从原型对象上继承的属性</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person.constructor === Person); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(Person.prototype.constructor === Person); <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">console</span>.log(person.hasOwnProperty(<span class="hljs-string">&quot;constructor&quot;</span>)); <span class="hljs-comment">// false：constructor属性并不是实例自身的属性，而是继承来的</span><br></code></pre></td></tr></table></figure><br><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><ul><li><strong><code>__proto__(隐式原型)</code>：每个对象(除了<code> null</code>)都具有的属性</strong>，该属性指向该对象的原型</li><li><strong><code>prototype(显式原型)</code>：只有函数对象才有的属性</strong>，该属性指向函数的原型对象</li></ul><p>来看来看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-built_in">console</span>.log(obj);<br><span class="hljs-built_in">console</span>.log(add);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/8GRutdoLNb27qAz.png" alt="image-20220314161614197"></p><br><p><b syule="color: red">红框框中的<code> [[prototype]]</code>和<code> __proto__</code>意义相同，都是指对象的内部属性</b></p><p><strong>而所有函数都拥有<code> prototype</code>属性</strong>，所以可以通过<code> f.prototype</code>得到，那么自然也不需要通过<code> [[prototype]]</code>显示出来(毕竟<code> prototype</code>是显式原型，而<code> __proto__</code>是隐式原型，好吧，这是我猜的)</p><p><img src="https://s2.loli.net/2022/03/14/l1ebmHdsivJWNoT.png" alt="image-20220314162705526"></p><br><p><b style="color: red">箭头函数没有<code> prototype</code>属性</b></p><br><h3 id="访问原型"><a href="#访问原型" class="headerlink" title="访问原型"></a>访问原型</h3><p>通过实例对象访问原型对象有 3 种方法</p><ul><li><code>obj.__proto__</code></li><li><code>obj.constructor.prototype</code></li><li><code>Object.getPrototypeOf(obj)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br><span class="hljs-keyword">const</span> proto1 = person.__proto__;<br><span class="hljs-keyword">const</span> proto2 = person.constructor.prototype;<br><span class="hljs-keyword">const</span> proto3 = <span class="hljs-built_in">Object</span>.getPrototypeOf(person);<br><br><span class="hljs-keyword">const</span> proto = Person.prototype; <span class="hljs-comment">// 原型</span><br><br><span class="hljs-built_in">console</span>.log(proto1 === proto); <span class="hljs-comment">// true: 第一种方法</span><br><span class="hljs-built_in">console</span>.log(proto2 === proto); <span class="hljs-comment">// true: 第二种方法</span><br><span class="hljs-built_in">console</span>.log(proto3 === proto); <span class="hljs-comment">// true: 第三种方法</span><br></code></pre></td></tr></table></figure><br><p><strong>比较安全的做法是<code>Object.getPrototypeOf(obj)</code></strong></p><p><strong>以下部分会涉及一丢丢原型链的知识(如果没看懂，可以看下原型链再来看)</strong></p><ul><li><p><code> __proto__</code>属性是私有属性，存在浏览器兼容性问题，缺乏非浏览器环境的支持</p></li><li><p>如果 obj 的<code> constructor</code>属性被覆盖，那么<code>obj.constructor.prototype</code>将会失效。(因为 obj 自身是没有<code> constructor</code>属性的，是通过原型链去它的原型上获取<code> constructor</code>属性，所以覆盖该属性时，将不会再去原型链上查找)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Temp</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br>person.constructor = Temp;<br><br><span class="hljs-keyword">const</span> proto = Person.prototype; <span class="hljs-comment">// 原型</span><br><br><span class="hljs-built_in">console</span>.log(person.__proto__ === proto); <span class="hljs-comment">// true: 第一种方法</span><br><span class="hljs-built_in">console</span>.log(person.constructor.prototype === proto); <span class="hljs-comment">// false: 第二种方法</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getPrototypeOf(person) === proto); <span class="hljs-comment">// true: 第三种方法</span><br></code></pre></td></tr></table></figure></li></ul><br><h3 id="设置原型"><a href="#设置原型" class="headerlink" title="设置原型"></a>设置原型</h3><p>设置原型对象有 3 种方法</p><ul><li><code>obj.__proto__=prototypeObj</code></li><li><code>Object.setPrototypeOf(obj, prototypeObj)</code></li><li><code>Object.create(prototypeObj)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> proto = &#123;<br>  <span class="hljs-comment">// 原型对象</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;prototype&quot;</span>,<br>&#125;;<br><br><span class="hljs-comment">// 第一种方法</span><br><span class="hljs-keyword">const</span> obj1 = &#123;&#125;;<br>obj1.__proto__ = proto; <span class="hljs-comment">// 设置原型</span><br><span class="hljs-built_in">console</span>.log(obj1.name); <span class="hljs-comment">// prototype</span><br><span class="hljs-built_in">console</span>.log(obj1.__proto__ === proto); <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 第二种方法</span><br><span class="hljs-keyword">const</span> obj2 = &#123;&#125;;<br><span class="hljs-built_in">Object</span>.setPrototypeOf(obj2, proto); <span class="hljs-comment">// 设置原型</span><br><span class="hljs-built_in">console</span>.log(obj2.name); <span class="hljs-comment">// prototype</span><br><span class="hljs-built_in">console</span>.log(obj2.__proto__ === proto); <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 第三种方法</span><br><span class="hljs-keyword">const</span> obj3 = <span class="hljs-built_in">Object</span>.create(proto); <span class="hljs-comment">// 创建对象并设置原型</span><br><span class="hljs-built_in">console</span>.log(obj3.name); <span class="hljs-comment">// prototype</span><br><span class="hljs-built_in">console</span>.log(obj3.__proto__ === proto); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><br><h3 id="检测原型"><a href="#检测原型" class="headerlink" title="检测原型"></a>检测原型</h3><p>使用<code> obj1.isPrototypeOf(obj2)</code>方法判断<code> obj1</code>是否为·<code> obj2</code>的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> proto = &#123;<br>  <span class="hljs-comment">// 原型对象</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;prototype&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> proto1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;prototype&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> obj = &#123;&#125;;<br>obj.__proto__ = proto; <span class="hljs-comment">// 设置原型</span><br><br><span class="hljs-built_in">console</span>.log(proto.isPrototypeOf(obj)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.isPrototypeOf(obj)); <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">console</span>.log(proto1.isPrototypeOf(obj)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><br><h2 id="prototype、-proto-、constructor-之间的关系"><a href="#prototype、-proto-、constructor-之间的关系" class="headerlink" title="prototype、__proto__、constructor 之间的关系"></a>prototype、<code>__proto__</code>、constructor 之间的关系</h2><p><img src="https://s2.loli.net/2022/03/14/FO6IgxSiPm9pVWu.png" alt="image-20220314170210850"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(person.__proto__ === Person.prototype); <span class="hljs-comment">// true：因为创建person对象的构造函数是Person，所以person对象的隐式原型(__proto__)指向Person函数的原型(prototype)</span><br><span class="hljs-built_in">console</span>.log(Person.prototype.constructor === Person); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><br><p><strong>同一个构造函数创建的多个实例的原型是同一个</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-keyword">const</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(person1 === person2); <span class="hljs-comment">// false: 不是同一个对象</span><br><span class="hljs-built_in">console</span>.log(person1.__proto__ === person2.__proto__); <span class="hljs-comment">// true：同一个构造函数创建的实例对象的原型是同一个</span><br></code></pre></td></tr></table></figure><br><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>由上面的知识可以知道，实例对象具有属性<code> __proto__</code>，会指向原型对象。而原型对象也是对象，所以也会有属性<code> __proto__</code>，也会继续指向它的原型对象。</p><p><b style="color: red">实例对象在查找属性时，如果查找不到，就会沿着<code> __proto__</code>去它的原型上查找，还找不到，则继续去原型的原型上查找，直到找到或到最顶层为止。这就是原型链的概念。</b></p><br><p><strong>对象本身的方法(第一层：把方法当成属性)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;听音乐&quot;</span>);<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person);<br><span class="hljs-built_in">console</span>.log(<br>  <span class="hljs-string">&quot;实例对象本身是否有listenMusic方法&quot;</span>,<br>  person.hasOwnProperty(<span class="hljs-string">&quot;listenMusic&quot;</span>)<br>);<br>person.listenMusic();<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/wVuWlXUHCbSGhx9.png" alt="image-20220315094508947"></p><br><p><strong>对象的原型上添加方法(第二层)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>Person.prototype.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;听音乐&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person);<br><span class="hljs-built_in">console</span>.log(<br>  <span class="hljs-string">&quot;实例对象本身是否有listenMusic方法&quot;</span>,<br>  person.hasOwnProperty(<span class="hljs-string">&quot;listenMusic&quot;</span>)<br>);<br>person.listenMusic();<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/5bNeTitq3vJIU16.png" alt="image-20220314183755250"></p><br><p><strong>原型的原型上的方法(第三层)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>Person.prototype.__proto__.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;听音乐&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person);<br>person.listenMusic();<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/WwhLDopOEvJuxcG.png" alt="image-20220314184300125"></p><br><p>但是呢，没法玩第四层，因为已经到顶了(<strong><code> Object.prototype</code>没有原型(原型为 null)</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>Person.prototype.__proto__.__proto__.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;听音乐&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person);<br>person.listenMusic();<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/xD67UynCkVE4waz.png" alt="image-20220314184424877"></p><hr><p><strong>person -&gt; Person.prototype -&gt; Object.prototype -&gt; null</strong></p><p>那么，这里就来看看第三层是不是真的是<code> Object.prototype</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>Person.prototype.__proto__.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;听音乐&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person);<br><br><span class="hljs-built_in">console</span>.log(Person.prototype.__proto__ === person.__proto__.__proto__);<br><span class="hljs-built_in">console</span>.log(person.__proto__.__proto__ === <span class="hljs-built_in">Object</span>.prototype); <span class="hljs-comment">// 这里就是判断处</span><br><br>person.listenMusic();<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/Vq8hgzA6YsF5KLm.png" alt="image-20220315095211650"></p><p>发现，确实如此。</p><p><strong>下面这张图就是原型链的简单图</strong>(找不到是在哪里截的图了，侵删)</p><p><img src="https://s2.loli.net/2022/03/14/gvmpCyaXMPxNiZ1.png" alt="image-20220314233252631"></p><br><h3 id="原型链的作用"><a href="#原型链的作用" class="headerlink" title="原型链的作用"></a>原型链的作用</h3><h4 id="为对象设置默认值"><a href="#为对象设置默认值" class="headerlink" title="为对象设置默认值"></a>为对象设置默认值</h4><blockquote><p>利用原型为对象设置默认值。当原型属性与私有属性同名时，删除私有属性之后，可以访问原型属性，即可以把原型属性值作为初始化默认值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br>Person.prototype.name = <span class="hljs-string">&quot;赤蓝紫&quot;</span>;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person.name); <span class="hljs-comment">// clz</span><br><br><span class="hljs-keyword">delete</span> person.name;<br><span class="hljs-built_in">console</span>.log(person.name); <span class="hljs-comment">// 赤蓝紫</span><br></code></pre></td></tr></table></figure><br><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承内容部分之后单独写。</p><br><h4 id="扩展原型方法"><a href="#扩展原型方法" class="headerlink" title="扩展原型方法"></a>扩展原型方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Array</span>.prototype.test = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;扩展原型方法: 有风险&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>arr.test(); <span class="hljs-comment">// 扩展原型方法: 有风险</span><br></code></pre></td></tr></table></figure><br><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p>typeof 是判断类型时大多数人的选择(当然也包括我啦)，但是，判断非基本数据类型(<code>function</code>除外)时，只能得到<code> Object</code>。(null 也是，但是 null 这个属于是历史遗留 bug 了)。</p><blockquote><p><strong>js 在底层存储变量的时候，会在变量的机器码的低位 1-3 位存储其类型信息</strong></p><ul><li>000：对象</li><li>010：浮点数</li><li>100：字符串</li><li>110：布尔</li><li>1：整数</li></ul><p>null：所有机器码均为 0<br>undefined：用 −2^30 整数来表示</p></blockquote><hr><p><code> symbol</code>和<code> bigint</code>是后来新增的数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> num = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-keyword">const</span> bool = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">const</span> n = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">const</span> u = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">const</span> sym = <span class="hljs-built_in">Symbol</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">const</span> big = <span class="hljs-built_in">BigInt</span>(<span class="hljs-number">123</span>);<br><br><span class="hljs-keyword">const</span> fun = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> num); <span class="hljs-comment">// number</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> str); <span class="hljs-comment">// string</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> bool); <span class="hljs-comment">// boolean</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> n); <span class="hljs-comment">// object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> u); <span class="hljs-comment">// undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> sym); <span class="hljs-comment">// symbol</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> big); <span class="hljs-comment">//bigint</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fun); <span class="hljs-comment">//function</span><br></code></pre></td></tr></table></figure><br><p><strong><code>function</code>除外的非基本数据类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [];<br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>&#125;;<br><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> arr);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> set);<br></code></pre></td></tr></table></figure><p><strong>清一色<code> object</code></strong></p><br><p>通过<code>Object.prototype.toString.call(obj)</code>来识别对象类型。会返回<code>&quot;[object Type]&quot;</code>来告诉你所指对象的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">let</span> arr = []<br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>])<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(arr))  <span class="hljs-comment">// [object Array]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(obj))  <span class="hljs-comment">// [object Object]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(set))  <span class="hljs-comment">// [object Set]</span><br></code></pre></td></tr></table></figure><hr><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p><strong><code>instanceof</code>只要右边变量的 prototype 在左边变量的原型链上，就会返回<code>true</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> Person); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>); <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> Test); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><br><h2 id="普通对象与函数对象"><a href="#普通对象与函数对象" class="headerlink" title="普通对象与函数对象"></a>普通对象与函数对象</h2><ul><li><p><strong>所有的函数都是通过<code> new Function()</code>来创建的，即是函数对象</strong></p></li><li><p>**其他的都是普通对象 **</p></li></ul><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">const</span> fn2 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br><span class="hljs-keyword">const</span> fn3 = <span class="hljs-function">() =&gt;</span> &#123;&#125;;<br><span class="hljs-keyword">const</span> fn4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>();<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn1); <span class="hljs-comment">//function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn2); <span class="hljs-comment">//function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn3); <span class="hljs-comment">//function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn4); <span class="hljs-comment">//function</span><br><br><span class="hljs-keyword">const</span> obj1 = &#123;&#125;;<br><span class="hljs-keyword">const</span> obj2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><span class="hljs-keyword">const</span> obj3 = <span class="hljs-keyword">new</span> fn1();<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj1); <span class="hljs-comment">//object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj2); <span class="hljs-comment">//object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj3); <span class="hljs-comment">//object</span><br></code></pre></td></tr></table></figure><br><p>上面的例子中，<code> fn1</code>、<code> fn2</code>、<code> fn3</code>、<code> fn4</code>是函数对象，<code> obj1</code>、<code> obj2</code>、<code> obj3</code>是普通对象</p><blockquote><ul><li><strong>Object 是构造函数，即也是函数，所以<code> Object</code>也是函数对象，相当于<code>Function</code>的实例，即<code> Object.__proto__ === Function.prototype</code></strong></li><li><strong><code>Object.prototype</code>是<code>Object</code>构造函数的原型，处于原型链的顶端，<code>Object.prototype.__proto__</code>已经没有可以指向的上层原型，因此其值为<code>null</code></strong></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span>); <span class="hljs-comment">// function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.__proto__ === <span class="hljs-built_in">Function</span>.prototype); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.__proto__); <span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure><br><blockquote><ul><li><strong><code> Function.prototype</code>是<code> Function</code>的原型，是所有函数对象的原型</strong></li><li><strong><code>Function.prototype</code>是一个普通对象，所以<code> Function.prototype.__proto__ === Object.prototype</code></strong></li><li><strong><code>Function</code>函数不通过任何东西创建，<code>JS</code>引擎启动时，添加到内存中</strong>，所以**<code> Function.__proto__ === Function.prototype</code>**</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Function</span>); <span class="hljs-comment">// function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.prototype.__proto__ === <span class="hljs-built_in">Object</span>.prototype); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.__proto__ === <span class="hljs-built_in">Function</span>.prototype); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><br><h2 id="经典原型链图"><a href="#经典原型链图" class="headerlink" title="经典原型链图"></a>经典原型链图</h2><p><img src="https://s2.loli.net/2022/03/15/HXe9vi2ADnSVC6J.png" alt="img"></p><br><h2 id="练手福利"><a href="#练手福利" class="headerlink" title="练手福利"></a>练手福利</h2><p>题目来自<a href="https://juejin.cn/post/7018355953955241997">JavaScript 之彻底理解原型与原型链</a></p><p>有加一道</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">User</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>User.prototype.sayHello = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br><span class="hljs-keyword">var</span> u1 = <span class="hljs-keyword">new</span> User();<br><span class="hljs-keyword">var</span> u2 = <span class="hljs-keyword">new</span> User();<br><br><span class="hljs-built_in">console</span>.log(u1.sayHello === u2.sayHello);<br><span class="hljs-built_in">console</span>.log(User.prototype.constructor);<br><br><span class="hljs-built_in">console</span>.log(User.prototype === <span class="hljs-built_in">Function</span>.prototype);<br><span class="hljs-built_in">console</span>.log(User.prototype.__proto__ === <span class="hljs-built_in">Function</span>.prototype.__proto__);<br><span class="hljs-built_in">console</span>.log(User.prototype === u1.__proto__);<br><br><span class="hljs-built_in">console</span>.log(User.__proto__ === <span class="hljs-built_in">Function</span>.prototype);<br><span class="hljs-built_in">console</span>.log(User.__proto__ === <span class="hljs-built_in">Function</span>.__proto__);<br><br><span class="hljs-built_in">console</span>.log(u1.__proto__ === u2.__proto__);<br><span class="hljs-built_in">console</span>.log(u1.__proto__ === User.__proto__);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.__proto__ === <span class="hljs-built_in">Object</span>.__proto__);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.prototype.__proto__ === <span class="hljs-built_in">Object</span>.prototype.__proto__);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.prototype.__proto__ === <span class="hljs-built_in">Object</span>.prototype);<br></code></pre></td></tr></table></figure><br><p><strong>校对答案</strong>：(可能有点难，细嚼慢咽后再反复看就行)</p><p><img src="https://s2.loli.net/2022/03/15/h6jEpTSG4RaIfoQ.png" alt="image-20220315162828873"></p><br><p>参考链接：<a href="http://c.biancheng.net/view/5805.html">JS 原型（prototype）和原型链完全攻略</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;详解原型与原型链&quot;&gt;&lt;a href=&quot;#详解原型与原型链&quot; class=&quot;headerlink&quot; title=&quot;详解原型与原型链&quot;&gt;&lt;/a&gt;详解原型与原型链&lt;/h1&gt;&lt;p&gt;其实，刚开始学 JavaScript 时，就有学过原型与原型链的相关知识了，只是当时还没有养</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>微软自带的日语输入法怎么切换平假名和片假名</title>
    <link href="https://www.clzczh.top/2022/03/16/life-skill/"/>
    <id>https://www.clzczh.top/2022/03/16/life-skill/</id>
    <published>2022-03-16T09:32:17.000Z</published>
    <updated>2022-03-25T17:15:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微软自带的日语输入法怎么切换平假名和片假名"><a href="#微软自带的日语输入法怎么切换平假名和片假名" class="headerlink" title="微软自带的日语输入法怎么切换平假名和片假名"></a>微软自带的日语输入法怎么切换平假名和片假名</h1><p>使用按键 ctrl+caps lock，切换平假名。</p><p>使用按键 alt+caps lock，切换片假名。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微软自带的日语输入法怎么切换平假名和片假名&quot;&gt;&lt;a href=&quot;#微软自带的日语输入法怎么切换平假名和片假名&quot; class=&quot;headerlink&quot; title=&quot;微软自带的日语输入法怎么切换平假名和片假名&quot;&gt;&lt;/a&gt;微软自带的日语输入法怎么切换平假名和片假名&lt;/</summary>
      
    
    
    
    <category term="小技能" scheme="https://www.clzczh.top/categories/%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue Router深入学习(二)</title>
    <link href="https://www.clzczh.top/2022/03/15/vue-router-deep-2/"/>
    <id>https://www.clzczh.top/2022/03/15/vue-router-deep-2/</id>
    <published>2022-03-15T08:41:51.000Z</published>
    <updated>2022-03-25T17:16:25.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-Router-深入学习-二"><a href="#Vue-Router-深入学习-二" class="headerlink" title="Vue Router 深入学习(二)"></a>Vue Router 深入学习(二)</h1><p>通过阅读文档，自己写一些 demo 来加深自己的理解。(主要针对 Vue3)<br>上一篇：<a href="https://clz.vercel.app/2022/03/12/vue-router-deep-1/">Vue Router 深入学习(一)</a></p><h2 id="1-路由元信息"><a href="#1-路由元信息" class="headerlink" title="1. 路由元信息"></a>1. 路由元信息</h2><blockquote><p>有时，你可能希望将任意信息附加到路由上，如过渡名称、谁可以访问路由等。这些事情可以通过接收属性对象的<code>meta</code>属性来实现，并且它可以在路由地址和导航守卫上都被访问到。定义路由的时候你可以这样配置 <code>meta</code> 字段</p></blockquote><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;用户&quot;</span>,<br>      <span class="hljs-attr">isLogin</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><h3 id="1-1-简单使用"><a href="#1-1-简单使用" class="headerlink" title="1.1 简单使用"></a>1.1 简单使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;用户&quot;</span>,<br>      <span class="hljs-attr">isLogin</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; route.meta &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(route.meta);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/spOZRvIcYXwPtHm.png" alt="image-20220304103855475"></p><h3 id="1-2-搭配路由守卫使用"><a href="#1-2-搭配路由守卫使用" class="headerlink" title="1.2 搭配路由守卫使用"></a>1.2 搭配路由守卫使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;用户&quot;</span>,<br>      <span class="hljs-attr">isLogin</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;:id(\\d+)&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/UserId.vue&quot;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;id&quot;</span>,<br>          <span class="hljs-attr">requireAuth</span>: <span class="hljs-literal">true</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;:name&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/UserName.vue&quot;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;name&quot;</span>,<br>          <span class="hljs-attr">requireAuth</span>: <span class="hljs-literal">false</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>&#125;);<br></code></pre></td></tr></table></figure><p>路由前置守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (to.meta.requireAuth) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>      <span class="hljs-attr">query</span>: &#123;<br>        <span class="hljs-attr">redirect</span>: to.path, <span class="hljs-comment">// 保存要去的位置，获得权限后再去</span><br>      &#125;,<br>    &#125;;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/nImTkXpSrcCadJB.gif" alt="vue-router"></p><h2 id="2-数据获取"><a href="#2-数据获取" class="headerlink" title="2. 数据获取"></a>2. 数据获取</h2><blockquote><p>有时候，进入某个路由后，需要从服务器获取数据。例如，在渲染用户信息时，你需要从服务器获取用户的数据。</p></blockquote><h3 id="2-1-导航完成后获取数据"><a href="#2-1-导航完成后获取数据" class="headerlink" title="2.1 导航完成后获取数据"></a>2.1 导航完成后获取数据</h3><blockquote><p>当你使用这种方式时，我们会马上导航和渲染组件，然后在组件的 created 钩子中获取数据。这让我们有机会在数据获取期间展示一个 loading 状态，还可以在不同视图间展示不同的 loading 状态。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>id: &#123;&#123; post.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 222 &#125; &#125;&quot;</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 333 &#125; &#125;&quot;</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 444 &#125; &#125;&quot;</span>&gt;</span>444<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; reactive, watchEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">let</span> post = reactive(&#123;</span><br><span class="javascript">    <span class="hljs-attr">id</span>: <span class="hljs-literal">null</span>,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> fetchData = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// 数据获取，不需要生命周期钩子。因为beforeCreate和created没有API，因为setup实际上就相当于这两个生命周期函数</span></span><br><span class="javascript">    post.id = route.params.id;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><br><span class="javascript">  watchEffect(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> id = post.id;</span><br><span class="javascript">    fetchData();</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/468dhyarpVXUOWm.gif" alt="vue-router"></p><h3 id="2-2-在导航完成前获取数据"><a href="#2-2-在导航完成前获取数据" class="headerlink" title="2.2 在导航完成前获取数据"></a>2.2 在导航完成前获取数据</h3><blockquote><p>通过这种方式，我们在导航转入新的路由前获取数据。我们可以在接下来的组件的 <code>beforeRouteEnter</code> 守卫中获取数据，当数据获取成功后只调用 <code>next</code> 方法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>id: &#123;&#123; post.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 222 &#125; &#125;&quot;</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 333 &#125; &#125;&quot;</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 444 &#125; &#125;&quot;</span>&gt;</span>444<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">post</span>: &#123;&#125;,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">beforeRouteEnter</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-comment">// 不要写在setup里</span></span><br><span class="javascript">      next(<span class="hljs-function">(<span class="hljs-params">vm</span>) =&gt;</span> &#123;</span><br><span class="javascript">        vm.setData(to.params);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">beforeRouteUpdate</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.post = to.params;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">setData</span>(<span class="hljs-params">post</span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.post = post;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果和上图一样。这里有点问题，通过<code>beforeRouteEnter</code>无法获取到<code> setup</code>里的函数、数据等，所以变成了使用 Vue2 的形式来实现。</p><h2 id="3-过渡动效"><a href="#3-过渡动效" class="headerlink" title="3. 过渡动效"></a>3. 过渡动效</h2><h3 id="3-1-transition-简单了解"><a href="#3-1-transition-简单了解" class="headerlink" title="3.1 transition 简单了解"></a>3.1 transition 简单了解</h3><blockquote><p><code>&lt;Transition&gt;</code> 会在一个元素或组件进入和离开 DOM 时应用动画</p></blockquote><p><img src="https://s2.loli.net/2022/03/15/FBeshZCdVrvYul6.png" alt="image-20220304182013408"></p><h3 id="3-2-简单使用"><a href="#3-2-简单使用" class="headerlink" title="3.2 简单使用"></a>3.2 简单使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; Component &#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fade&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 router-view 上使用 v-slot 获取对应的组件，使用 component 动态组件来渲染这个组件，然后用 transition 包裹住这个动态组件</p><p><b style="color: red">对应的路由组件只能有一个根元素，否则过渡将没有效果</b></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.fade-enter-from</span>,<br><span class="hljs-selector-class">.fade-leave-to</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100px</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fade-enter-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2022/03/15/HNFL6CBem9nM3ao.gif" alt="vue-router"></p><h4 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; Component &#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fade&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.fade-enter-from</span>,</span><br><span class="css">  <span class="hljs-selector-class">.fade-leave-to</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100px</span>);</span><br><span class="css">    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.fade-enter-active</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-单个路由的过渡"><a href="#3-3-单个路由的过渡" class="headerlink" title="3.3 单个路由的过渡"></a>3.3 单个路由的过渡</h3><p>原理很简单，路由配置时在<code>meta上</code>添加上<code>trasition</code>属性，再动态地和<code> name</code>结合在一起就行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/post&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Post&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Post.vue&quot;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">transition</span>: <span class="hljs-string">&quot;slide-left&quot;</span>,<br>    &#125;,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">transition</span>: <span class="hljs-string">&quot;slide-right&quot;</span>,<br>    &#125;,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; Component, route &#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">:name</span>=<span class="hljs-string">&quot;route.meta.transition || fade&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再添加上对应的 css 样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.fade-enter-from</span>,<br><span class="hljs-selector-class">.fade-leave-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fade-enter-active</span>,<br><span class="hljs-selector-class">.slide-left-enter-active</span>,<br><span class="hljs-selector-class">.slide-right-enter-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.slide-left-enter-from</span>,<br><span class="hljs-selector-class">.slide-left-leave-to</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">200px</span>);<br>&#125;<br><br><span class="hljs-selector-class">.slide-right-enter-from</span>,<br><span class="hljs-selector-class">.slide-right-leave-to</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">200px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/ueE7mi691FaULNR.gif"></p><h3 id="3-4-基于路由的动态过渡"><a href="#3-4-基于路由的动态过渡" class="headerlink" title="3.4 基于路由的动态过渡"></a>3.4 基于路由的动态过渡</h3><p>根据目标路由和当前路由之间的关系，动态地确定使用的过渡</p><p>如：添加一个 <a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%90%8E%E7%BD%AE%E9%92%A9%E5%AD%90">全局后置钩子</a>，根据路径的深度动态添加信息到 <code>meta</code> 字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">router.afterEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> toDepth = to.path.split(<span class="hljs-string">&quot;/&quot;</span>).length;<br>  <span class="hljs-keyword">const</span> fromDepth = <span class="hljs-keyword">from</span>.path.split(<span class="hljs-string">&quot;/&quot;</span>).length;<br><br>  to.meta.transition = toDepth &lt; fromDepth ? <span class="hljs-string">&quot;slide-right&quot;</span> : <span class="hljs-string">&quot;slide-left&quot;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/04/M2gyJ1QtPL4aqEV.gif" alt="vue-router"></p><h2 id="4-滚动行为"><a href="#4-滚动行为" class="headerlink" title="4. 滚动行为"></a>4. 滚动行为</h2><p>在创建 Router 示例时，提供一个<code> scrollBehavior</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  <span class="hljs-attr">routes</span>: [...],<br>  scrollBehavior (to, <span class="hljs-keyword">from</span>, savedPosition) &#123;<br>    <span class="hljs-comment">// return 期望滚动到哪个的位置</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="4-1-普通用法"><a href="#4-1-普通用法" class="headerlink" title="4.1 普通用法"></a>4.1 普通用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">50</span>, <span class="hljs-comment">// 始终滚动到距离顶部50px处</span><br>    &#125;;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/EV8YKSlftByWXr3.gif" alt="vue-router1"></p><p>如果浏览器支持<a href="https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions/behavior">滚动行为</a>，可以通过<code>behavior</code>变得更流畅</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">50</span>, <span class="hljs-comment">// 始终滚动到距离顶部50px处</span><br>      <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;smooth&quot;</span>,<br>    &#125;;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/oOms145iPFjnIMG.gif" alt="vue-router1"></p><h3 id="4-2-通过-el实现相对元素的偏移"><a href="#4-2-通过-el实现相对元素的偏移" class="headerlink" title="4.2 通过 el实现相对元素的偏移"></a>4.2 通过<code> el</code>实现相对元素的偏移</h3><p><code> el</code>可接受一个 CSS 选择器或一个 DOM 元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;h2&quot;</span>,<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">50</span>,<br>    &#125;;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/b4Dv5ZBGsw7OLNm.gif" alt="vue-router1"></p><h3 id="4-3-恢复之前的位置"><a href="#4-3-恢复之前的位置" class="headerlink" title="4.3 恢复之前的位置"></a>4.3 恢复之前的位置</h3><p>返回 <code>savedPosition</code>，在按下 后退/前进 按钮时，就会恢复之前的位置。像浏览器的原生表现那样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (savedPosition) &#123;<br>      <span class="hljs-comment">// console.log(savedPosition)</span><br>      <span class="hljs-keyword">return</span> savedPosition;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,<br>      &#125;;<br>    &#125;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/bg2IuKXjRE1rPoY.gif" alt="vue-router1"></p><h3 id="4-4-延迟滚动"><a href="#4-4-延迟滚动" class="headerlink" title="4.4 延迟滚动"></a>4.4 延迟滚动</h3><p>通过返回一个 Promise 来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        resolve(&#123;<br>          <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,<br>          <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;smooth&quot;</span>,<br>        &#125;);<br>      &#125;, <span class="hljs-number">500</span>);<br>    &#125;);<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/VkiJHyfjaZDvIPc.gif" alt="vue-router1"></p><h2 id="5-路由懒加载"><a href="#5-路由懒加载" class="headerlink" title="5. 路由懒加载"></a>5. 路由懒加载</h2><blockquote><p>把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，会更高效</p></blockquote><p>静态导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> User <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../components/User.vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: User,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><p>动态导入：(实际上还省字)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><h2 id="6-动态路由"><a href="#6-动态路由" class="headerlink" title="6. 动态路由"></a>6. 动态路由</h2><h3 id="6-1-添加路由"><a href="#6-1-添加路由" class="headerlink" title="6.1 添加路由"></a>6.1 添加路由</h3><p>路由配置：初始只有一个路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>在导航守卫处添加新路由：实际上要限制那些页面的权限就可以这样添加，只有满足条件才会动态添加路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  router.addRoute(&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./components/User.vue&quot;</span>),<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="6-2-删除路由"><a href="#6-2-删除路由" class="headerlink" title="6.2 删除路由"></a>6.2 删除路由</h3><p><b style="color: red">当路由被删除时，所有的别名和子路由都会被同时删掉</b></p><h4 id="6-2-1-通过添加一个名字冲突的路由"><a href="#6-2-1-通过添加一个名字冲突的路由" class="headerlink" title="6.2.1 通过添加一个名字冲突的路由"></a>6.2.1 通过添加一个名字冲突的路由</h4><p>如果添加与现有名称相同的路由，会先删除路由，再添加路由。</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">router.addRoute(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">component</span>: About &#125;);<br><span class="hljs-comment">// 这将会删除之前已经添加的路由，因为他们具有相同的名字且名字必须是唯一的</span><br>router.addRoute(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/other&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">component</span>: Other &#125;);<br></code></pre></td></tr></table></figure></blockquote><h4 id="6-2-2-通过调用-router-addRoute-返回的回调"><a href="#6-2-2-通过调用-router-addRoute-返回的回调" class="headerlink" title="6.2.2 通过调用 router.addRoute() 返回的回调"></a>6.2.2 通过调用 <code>router.addRoute()</code> 返回的回调</h4><p>情境：路由没有名称，没法覆盖删除掉路由</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> removeRoute = router.addRoute(routeRecord);<br>removeRoute(); <span class="hljs-comment">// 删除路由如果存在的话</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="6-2-3-通过使用-router-removeRoute-按名称删除路由"><a href="#6-2-3-通过使用-router-removeRoute-按名称删除路由" class="headerlink" title="6.2.3 通过使用 router.removeRoute() 按名称删除路由"></a>6.2.3 通过使用 <code>router.removeRoute()</code> 按名称删除路由</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">router.addRoute(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">component</span>: About &#125;);<br><span class="hljs-comment">// 删除路由</span><br>router.removeRoute(<span class="hljs-string">&quot;about&quot;</span>);<br></code></pre></td></tr></table></figure></blockquote><h3 id="6-3-添加嵌套路由"><a href="#6-3-添加嵌套路由" class="headerlink" title="6.3 添加嵌套路由"></a>6.3 添加嵌套路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">router.addRoute(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/admin&quot;</span>,<br>  <span class="hljs-attr">component</span>: Admin,<br>  <span class="hljs-attr">children</span>: [&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;settings&quot;</span>, <span class="hljs-attr">component</span>: AdminSettings &#125;],<br>&#125;);<br></code></pre></td></tr></table></figure><p>也可以将路由的<code> name</code>作为第一个参数传递给<code> router.addRoute()</code>，这样就可以有效的添加路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">router.addRoute(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/admin&quot;</span>, <span class="hljs-attr">component</span>: Admin &#125;);<br>router.addRoute(<span class="hljs-string">&quot;admin&quot;</span>, &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;settings&quot;</span>, <span class="hljs-attr">component</span>: AdminSettings &#125;);<br></code></pre></td></tr></table></figure><h3 id="6-4-查看现有路由"><a href="#6-4-查看现有路由" class="headerlink" title="6.4 查看现有路由"></a>6.4 查看现有路由</h3><ul><li><a href="https://router.vuejs.org/zh/api/#hasroute"><code>router.hasRoute()</code></a>：检查路由是否存在。</li><li><a href="https://router.vuejs.org/zh/api/#getroutes"><code>router.getRoutes()</code></a>：获取一个包含所有路由记录的数组。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-Router-深入学习-二&quot;&gt;&lt;a href=&quot;#Vue-Router-深入学习-二&quot; class=&quot;headerlink&quot; title=&quot;Vue Router 深入学习(二)&quot;&gt;&lt;/a&gt;Vue Router 深入学习(二)&lt;/h1&gt;&lt;p&gt;通过阅读文档，自</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://www.clzczh.top/tags/Vue/"/>
    
    <category term="Vue Router" scheme="https://www.clzczh.top/tags/Vue-Router/"/>
    
  </entry>
  
  <entry>
    <title>详解JavaScript 执行机制</title>
    <link href="https://www.clzczh.top/2022/03/14/javascript-eventloop/"/>
    <id>https://www.clzczh.top/2022/03/14/javascript-eventloop/</id>
    <published>2022-03-14T04:27:51.000Z</published>
    <updated>2022-03-25T17:14:55.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="详解-JavaScript-执行机制"><a href="#详解-JavaScript-执行机制" class="headerlink" title="详解 JavaScript 执行机制"></a>详解 JavaScript 执行机制</h1><h2 id="热身"><a href="#热身" class="headerlink" title="热身"></a>热身</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 先打印1， 3， 2s后打印2 */</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">/* 先打印1， 3， 后打印2 */</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>第一个例子的话不难理解，定时器函数就是 1s 后才调用回调函数.</p><p>而第二个例子则可能优点小问题，JavaScript 从上到下执行，那么遇到 0s 的计时器函数，就应该先输出 2 才对啊。这就是因为后面要提到的 JavaScript 执行机制导致的啦，因为 setTimeout 是异步任务。</p><h2 id="JavaScript-是单线程"><a href="#JavaScript-是单线程" class="headerlink" title="JavaScript 是单线程"></a>JavaScript 是单线程</h2><p>JavaScript 的核心特征就是<strong>单线程</strong>，即同一时间只能做一件事。</p><p>为什么它是单线程呢？因为 JavaScript 作为浏览器脚本语言，它的主要用途就是与用户互动、操作 DOM。既然如此，如果它不是单线程的话，假如一个线程在 DOM 节点上添加内容，同时另一个线程删除这个节点。可以看出，如果 JavaScript 不是单线程的话，那么将会导致同步问题。</p><br><h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><p>JavaScript 是单线程语言，这也就导致了如果有一个任务等待很长的时间，这个时候就会导致阻塞，程序就会“卡死”，用户体验非常差。所以 JavaScript 需要异步任务。</p><br><p>那么，为什么 JavsScript 明明是单线程的，为什么能异步呢？这是因为浏览器是多线程的，通过事件循环<code> Event Loop</code>即可实现异步。</p><br><p>所有任务都可以分成两种。</p><ul><li><strong>同步任务</strong>：在主线程上排队执行的任务，只有前一个任务执行完，才能执行后一个任务</li><li><strong>异步任务</strong>：不进入主线程，而是进入任务队列的任务。<b style="color: red">当异步任务的触发条件满足时，异步任务才会进入任务队列，而当主线程空了，就会去任务队列中取异步任务到主线程中执行</b></li></ul><br><p><strong>常见异步任务</strong>：</p><ul><li>JS 事件</li><li>AJAX 请求</li><li>setTimeout 和 setInterval</li><li>Promise(<b style="color: red">Promise 定义部分为同步任务，回调部分为异步任务</b>)</li></ul><br><h2 id="Event-Loop-事件循环机制-1"><a href="#Event-Loop-事件循环机制-1" class="headerlink" title="Event Loop 事件循环机制 1"></a>Event Loop 事件循环机制 1</h2><ol><li>所有同步任务进入主线程，而异步任务则是进入<code> Event Table</code>注册回调函数</li><li>当异步任务的<b style="color: red">触发条件满足</b>时，异步任务注册的回调函数将会从<code> Event Table</code>移入到任务队列<code> Event Queue</code>中</li><li>当主线程中的所有同步任务执行完毕后，系统就会去看看<code> Event Queue</code>中看看有没有回调函数，有的话就推到主线程中</li><li>主线程不断重复上面的步骤</li></ol><p><img src="https://s2.loli.net/2022/03/14/hANCZjRUYIsFrgf.jpg" alt="preview"></p><p>这就是<strong>Event Loop</strong></p><h2 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h2><p>异步任务又可以进行更精细的划分为宏任务和微任务。</p><h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><p>setTimeout、setInterval、requestAnimationFrame</p><ul><li>当宏任务队列中的任务全部都执行完之后，如果微任务队列不为空，则先执行微任务队列中的所有任务</li></ul><h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><p>Promise 回调部分、process.nextTick</p><ul><li>在上一个宏任务队列执行完毕后如果有微任务就会执行微任务队列中的所有元素</li></ul><h2 id="Event-Loop-事件循环机制-2"><a href="#Event-Loop-事件循环机制-2" class="headerlink" title="Event Loop 事件循环机制 2"></a>Event Loop 事件循环机制 2</h2><ol><li>首先执行<code> script</code>下的同步任务</li><li>执行过程中，如果遇到异步任务，则需要把它放到对应的任务队列中(遇到宏任务，则放到宏任务中；遇到微任务，则放到微任务队列中)</li><li>同步任务执行完毕，查看微任务队列<ul><li>如果存在微任务，则将微任务队列全部执行(<b style="color: red">包括执行微任务中产生的新微任务</b>)</li><li>如果不存在微任务，则查看宏任务队列，执行第一个宏任务，宏任务执行完后，又看看微任务队列是否有任务，有的话，又先全部执行完微任务队列，重复上述操作，知道宏任务队列为空。</li></ul></li></ol><p><img src="https://s2.loli.net/2022/03/14/xzo2leVm165AkLd.png" alt="preview"></p><h3 id="练手-1"><a href="#练手-1" class="headerlink" title="练手 1"></a>练手 1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">3</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>  &#125;<br>  resolve();<br>&#125;).then(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>);<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>);<br></code></pre></td></tr></table></figure><p>打印顺序：1, 3, 4, 5, 7, 6, 2</p><br><p>解析：</p><ol><li>首先，程序从上往下走，直接输出 1，遇到<code> setTimeout</code>后，把它放到宏任务队列中<ul><li>此时，宏任务队列中为<code>[setTimeout]</code>(<strong>这里用数组表示任务队列，左边代表先进入的任务队列</strong>)</li></ul></li><li>继续往下跑，遇到<code> Promise</code>，因为<b style="color: red">Promise 定义部分为同步任务</b>，依次输出 3, 4, 5，遇到<code> Promise.then()</code>，把它放到微任务队列中<ul><li>此时，宏任务队列为<code>[setTimeout]</code></li><li>此时，微任务队列为<code>[Promise.then()]</code></li></ul></li><li>输出 7 后，执行微任务队列中全部的任务，输出 6， 再执行宏任务队列中的任务，输出 2</li></ol><h3 id="练手-2"><a href="#练手-2" class="headerlink" title="练手 2"></a>练手 2</h3><p><strong>题目是本人自己想的，分析有误请见谅(希望评论指示)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>  <span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>  &#125;);<br>&#125;, <span class="hljs-number">10</span>);<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br>  resolve(<span class="hljs-number">5</span>);<br>&#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>    <span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>);<br>    &#125;);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>);<br>    &#125;);<br>  &#125;)<br>  .then(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">8</span>);<br>  &#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">9</span>);<br></code></pre></td></tr></table></figure><p>输出顺序：1, 4, 9, 5, 6, 8, 7, 2, 3</p><br><p>解析：</p><ol><li><strong>先输出 1</strong>， 遇到定时器，但是此时并不满足触发条件，所以 2(后面还有其他的内容)只能存放在<code> Event Table</code>中<ul><li>此时，<code> Event Table</code>中有<code> [2(后面还有其他的内容)]</code>。<b style="color: red"><code> Event Table</code>中没有顺序，满足触发条件后，就会进入对应的任务队列</b></li></ul></li><li><strong>输出 4</strong>，5(后面还有内容)进入微任务队列<ul><li>此时，<code> Event Table</code>中有<code> [2(后面还有其他的内容)]</code></li><li>微任务队列为[5(后面还有内容)]</li></ul></li><li>8 进入微任务队列<ul><li>此时，<code> Event Table</code>中有<code> [2(后面还有其他的内容)]</code></li><li>微任务队列为[5(后面还有内容), 8]</li></ul></li><li><strong>输出 9</strong>， 然后执行微任务中的任务<ol><li><strong>输出 5</strong>， 6 进入微任务队列, 7 进入宏任务队列<ul><li>此时，<code> Event Table</code>中有<code> [2(后面还有其他的内容)]</code></li><li>微任务队列为<code>[6, 8]</code>，<b style="color: red">6 会在 8 之前，因为 6 是微任务队列 5 里的微任务</b></li><li>宏任务队列为[7]</li></ul></li><li>依次执行完微任务队列中的任务，然后再执行宏任务队列的任务。<strong>输出顺序为 6，8，7</strong></li></ol></li><li>10ms 后，满足触发条件，进入宏任务队列，此时，宏任务队列和微任务队列中都没有任务，所以直接执行。<strong>输出 2</strong>，3 进入微任务队列，<strong>输出 3</strong></li></ol><br><h2 id="async-await"><a href="#async-await" class="headerlink" title="async, await"></a>async, await</h2><blockquote><p>async/await 本质上还是基于 Promise 的一些封装，而 Promise 是属于微任务的一种。所以在使用 await 关键字与 Promise.then 相同。<br>async 函数在 await 之前的代码都是同步执行的，await 之后的代码则是属于微任务(类似于 Promise)<b style="color: red">await 的表达式还是属于同步任务</b></p></blockquote><p>下面就继续练手</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">await</span> async2();<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>&#125;<br>async1();<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br><br>  <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>);<br>    resolve(<span class="hljs-number">6</span>);<br>  &#125;).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>  &#125;);<br><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>);<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">8</span>);<br></code></pre></td></tr></table></figure><p>输出顺序为：1, 2, 4, 5, 8, 6, 7, 3</p><br><p>分析：</p><ol><li><strong>先输出 1</strong>，调用<code> async1</code>函数，因为<code> await</code>之前包括<code> await</code>的表达式都是同步任务，所以，<strong>输出 2</strong>后，进入到<code> async2</code>函数中</li><li><strong>输出 4</strong>，<code>await</code>一个<code> Promise</code>也是同理，<strong>输出 5</strong>，6 进入微任务队列，因为<b style="color: red">await 之后的代码则是属于微任务(不包括 await 的表达式)</b>，所以 7 进入微任务队列<ul><li>此时，微任务队列为[6, 7]</li></ul></li><li>执行完<code> async2</code>函数后，回到<code> async1</code>函数中，之后的 3 进入微任务队列<ul><li>此时，微任务队列为[6, 7, 3]</li></ul></li><li><strong>输出 8</strong>，执行微任务队列中的任务，<strong>输出 6, 7, 3</strong></li></ol><br><p>参考链接：<br><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html">JavaScript 运行机制详解：再谈 Event Loop</a><br><a href="https://zhuanlan.zhihu.com/p/379475079">彻底搞懂 JavaScript 执行机制</a><br><a href="https://juejin.cn/post/7020328988715270157">JavaScript 之彻底理解 EventLoop</a><br><a href="https://segmentfault.com/a/1190000012806637">10 分钟理解 JS 引擎的执行机制</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;详解-JavaScript-执行机制&quot;&gt;&lt;a href=&quot;#详解-JavaScript-执行机制&quot; class=&quot;headerlink&quot; title=&quot;详解 JavaScript 执行机制&quot;&gt;&lt;/a&gt;详解 JavaScript 执行机制&lt;/h1&gt;&lt;h2 id=&quot;热</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS实现渐变字</title>
    <link href="https://www.clzczh.top/2022/03/13/gradients-word/"/>
    <id>https://www.clzczh.top/2022/03/13/gradients-word/</id>
    <published>2022-03-13T04:04:06.000Z</published>
    <updated>2022-03-25T17:13:33.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-实现渐变字"><a href="#CSS-实现渐变字" class="headerlink" title="CSS 实现渐变字"></a>CSS 实现渐变字</h1><p><img src="https://s2.loli.net/2022/03/13/AmGSj5UWvXZO6gw.png" alt="image-20220309200715875"></p><p>先来下前置知识。如果想速通，也可指直接到<a href="#jump">渐变字实现</a></p><h2 id="什么是渐变"><a href="#什么是渐变" class="headerlink" title="什么是渐变"></a>什么是渐变</h2><blockquote><p>CSS3 渐变（gradients）可以让你在两个或多个指定的颜色之间显示平稳的过渡。</p><p>以前，你必须使用图像来实现这些效果。但是，通过使用 CSS3 渐变（gradients），你可以减少下载的时间和宽带的使用。此外，渐变效果的元素在放大时看起来效果更好，因为渐变（gradient）是由浏览器生成的。</p></blockquote><h2 id="渐变类型"><a href="#渐变类型" class="headerlink" title="渐变类型"></a>渐变类型</h2><p>渐变主要有三种类型：线性渐变(<code> linear-gradient</code>)、径向渐变(<code> radial-gradient</code>)、圆锥渐变(<code> conic-gradient</code>)</p><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><p>线性渐变创建了一条沿直线前进的颜色带。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(direction, color-start, ..., color-end);<br></code></pre></td></tr></table></figure><ul><li>第一个参数为<strong>渐变方向</strong></li><li>第二个参数为<strong>渐变起点</strong></li><li>第三个参数为<strong>渐变终点</strong></li></ul><br><h4 id="基础线性渐变"><a href="#基础线性渐变" class="headerlink" title="基础线性渐变"></a>基础线性渐变</h4><p>使用<code> linear-gradient</code>函数，至少指定两种颜色即可(也被称为色标)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(red, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(red, blue, purple);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/R8zcYlsv2UZXOED.png" alt="image-20220309000309356"></p><h4 id="改变渐变方向"><a href="#改变渐变方向" class="headerlink" title="改变渐变方向"></a>改变渐变方向</h4><p>线性渐变的方向默认是从上到下，可以通过关键字<code> to</code>改变渐变方向。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, blue, purple);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to bottom right, red, blue, purple);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/xY7GDQJC35ef24R.png" alt="image-20220309000853385"></p><h4 id="设置渐变角度"><a href="#设置渐变角度" class="headerlink" title="设置渐变角度"></a>设置渐变角度</h4><p>上面说了，可以通过关键字<code> to</code>来改变角度，但是可选方向有较大限制。此时可以给渐变设置一个具体的角度。</p><p><img src="https://s2.loli.net/2022/03/13/CSpdiucQHfUPzsO.png" alt="image-20220309154501119"></p><p><strong>此图来自菜鸟教程</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span>,<br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">0deg</span>, red, blue, purple);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">60deg</span>, red, blue, purple);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">180deg</span>, red, blue, purple);<br>&#125;<br><br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(-<span class="hljs-number">60deg</span>, red, blue, purple);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/JQvosu2C3YmVD5z.png" alt="image-20220309001836218"></p><h4 id="颜色终止位置"><a href="#颜色终止位置" class="headerlink" title="颜色终止位置"></a>颜色终止位置</h4><p>可以给颜色设置像素值或百分比等其他数值来调整位置。没有明确设置的话，会自动计算</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">90deg</span>, red <span class="hljs-number">70%</span>, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">90deg</span>, red <span class="hljs-number">30%</span>, blue <span class="hljs-number">70%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">180deg</span>, red <span class="hljs-number">200px</span>, blue);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/ol751QfJuVFE4pR.png" alt="image-20220309083036610"></p><h4 id="创建实线"><a href="#创建实线" class="headerlink" title="创建实线"></a>创建实线</h4><p>根据颜色终止位置的知识点，很容易就能知道可以通过设置相邻的颜色的终止位置设置为相同即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red <span class="hljs-number">50%</span>, blue <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">135deg</span>, red <span class="hljs-number">33%</span>, blue <span class="hljs-number">33%</span>, blue <span class="hljs-number">66%</span>, purple <span class="hljs-number">66%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/vponawje52IUPA6.png" alt="image-20220309084146642"></p><h4 id="设置渐变中心点"><a href="#设置渐变中心点" class="headerlink" title="设置渐变中心点"></a>设置渐变中心点</h4><p>默认情况下，渐变会平滑地从一种颜色过渡到另一种颜色。但是可以设置一个值修改渐变的中心点。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, <span class="hljs-number">50%</span>, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, <span class="hljs-number">80%</span>, blue);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/RfwzUOsLdcDpEnl.png" alt="image-20220309084757700"></p><h4 id="创建色带和条纹"><a href="#创建色带和条纹" class="headerlink" title="创建色带和条纹"></a>创建色带和条纹</h4><p>要创建一个颜色的区域的话，一个颜色需要两个位置，这样子，这个颜色在两个颜色起止点都将会是完全饱和(即会保持该饱和度)。而和相邻的不同颜色还是正常的过渡。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<br>    to right,<br>    red <span class="hljs-number">30%</span>,<br>    blue <span class="hljs-number">35%</span>,<br>    blue <span class="hljs-number">65%</span>,<br>    purple <span class="hljs-number">70%</span><br>  );<br><br>  <span class="hljs-comment">/* 简洁写法 */</span><br>  <span class="hljs-comment">/* background: linear-gradient(to right, red 30%, blue 35% 65%, purple 70%);   */</span><br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red <span class="hljs-number">33%</span>, blue <span class="hljs-number">33%</span> <span class="hljs-number">66%</span>, purple <span class="hljs-number">66%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/EMTkJjYA6B38uc9.png" alt="image-20220309090648171"></p><h4 id="堆叠背景、渐变"><a href="#堆叠背景、渐变" class="headerlink" title="堆叠背景、渐变"></a>堆叠背景、渐变</h4><p>渐变支持透明度，因此可以堆叠多个背景。背景从上到下堆叠，第一个指定在顶部</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">480px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to left, transparent <span class="hljs-number">50%</span>, red),<br>    <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;https://s2.loli.net/2022/03/09/8OjEFf5GQy6iTcm.png&quot;</span>) no-repeat;<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">800px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">480px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;https://s2.loli.net/2022/03/09/8OjEFf5GQy6iTcm.png&quot;</span>)<br>      no-repeat, <span class="hljs-built_in">linear-gradient</span>(to left, transparent <span class="hljs-number">50%</span>, red);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">800px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/B3ObCwQDSXgoKVG.png" alt="image-20220309114848001"></p><br><p>同理：渐变也是可以和其他渐变叠加的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">480px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to left, transparent, red), <span class="hljs-built_in">linear-gradient</span>(to top, transparent, blue);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/m94dTQjl7fZE8au.png" alt="image-20220309122310300"></p><h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><p>径向渐变类似于线性渐变，只是它们从中心点向外辐射。可以指定该中心点在哪里。也可以把它们做成圆形或椭圆形。</p><p>语法：</p><p><code>radial-gradient(center, shape size, start-color, ..., last-color);</code></p><ul><li>第一个参数为<strong>渐变起点</strong></li><li>第二个参数为<strong>渐变形状</strong>和<strong>渐变大小</strong></li><li>第三个参数为<strong>渐变起点色标</strong></li><li>第四个参数为<strong>渐变终点色标</strong></li></ul><br><h4 id="基础径向渐变"><a href="#基础径向渐变" class="headerlink" title="基础径向渐变"></a>基础径向渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red, blue, purple);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/4Lg2QEa5jIsRM9J.png" alt="image-20220309123443478"></p><h4 id="颜色终止位置-1"><a href="#颜色终止位置-1" class="headerlink" title="颜色终止位置"></a>颜色终止位置</h4><p>和线性渐变一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/tyrkoNGT74EevBm.png" alt="image-20220309131245750"></p><h4 id="设置渐变中心"><a href="#设置渐变中心" class="headerlink" title="设置渐变中心"></a>设置渐变中心</h4><p>通过关键字<code>at</code>实现: 第一个参数是横轴，最左是 0%, 最右是 100%. 第二个参数是纵轴.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-comment">/* 关键字at: 第一个参数是横轴，最左是0%, 最右是100%. 第二个参数是纵轴. */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(at <span class="hljs-number">0%</span> <span class="hljs-number">100%</span>, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(<br>    at <span class="hljs-number">100px</span> <span class="hljs-number">200px</span>,<br>    red <span class="hljs-number">10px</span>,<br>    yellow <span class="hljs-number">30%</span>,<br>    <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/dFDMOVX4xnE8tGK.png" alt="image-20220309131916527"></p><h4 id="设置形状"><a href="#设置形状" class="headerlink" title="设置形状"></a>设置形状</h4><p>shape 参数定义了形状。可以是值 circle 或 ellipse。其中，circle 表示圆形，ellipse 表示椭圆形。默认值是 ellipse</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(circle, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(ellipse, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/nV4MxdHZIANbzD7.png" alt="image-20220309154415832"></p><p><b style="color: red">如果盒子是正方形，那么设置形状为椭圆可能不起效</b></p><h4 id="设置渐变大小"><a href="#设置渐变大小" class="headerlink" title="设置渐变大小"></a>设置渐变大小</h4><p>size 参数定义了渐变的大小。它可以是以下四个值：</p><ul><li><code>closest-side</code>，指定径向渐变的半径长度为<strong>从圆心到离圆心最近的边</strong></li><li><code>farthest-side</code>，指定径向渐变的半径长度为<strong>从圆心到离圆心最远的边</strong></li><li><code>closest-corner</code>，指定径向渐变的半径长度为<strong>从圆心到离圆心最近的角</strong></li><li><code>farthest-corner</code>，指定径向渐变的半径长度为<strong>从圆心到离圆心最远的角</strong></li></ul><p>默认值为<code>farthest-corner</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span>,<br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(closest-side, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(farthest-side, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(<br>    closest-corner,<br>    red <span class="hljs-number">10px</span>,<br>    yellow <span class="hljs-number">30%</span>,<br>    <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span><br>  );<br>&#125;<br><br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(<br>    farthest-corner,<br>    red <span class="hljs-number">10px</span>,<br>    yellow <span class="hljs-number">30%</span>,<br>    <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/UGvjcOD1HkRQySW.png" alt="image-20220309171611188"></p><h4 id="堆叠径向渐变"><a href="#堆叠径向渐变" class="headerlink" title="堆叠径向渐变"></a>堆叠径向渐变</h4><p>和线性渐变一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(<br>      at <span class="hljs-number">50%</span> <span class="hljs-number">0</span>,<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>),<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    ), <span class="hljs-built_in">radial-gradient</span>(at <span class="hljs-number">25%</span> <span class="hljs-number">75%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.5</span>), <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>)),<br>    <span class="hljs-built_in">radial-gradient</span>(at <span class="hljs-number">75%</span> <span class="hljs-number">75%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>), <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/Ol4kNXsi9pQMyYh.png" alt="image-20220309174059818"></p><h3 id="重复渐变"><a href="#重复渐变" class="headerlink" title="重复渐变"></a>重复渐变</h3><blockquote><p><code>linear-gradient</code>和<code>radial-gradient</code>属性不支持自动重复色标。但是，<code>repeating-linear-gradient</code> 和<code>repeating-radial-gradient</code>属性可用于提供此功能。</p></blockquote><h4 id="重复线性渐变"><a href="#重复线性渐变" class="headerlink" title="重复线性渐变"></a>重复线性渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">repeating-linear-gradient</span>(<span class="hljs-number">45deg</span>, red <span class="hljs-number">0</span> <span class="hljs-number">20px</span>, blue <span class="hljs-number">20px</span> <span class="hljs-number">40px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/E98RIZTLbDrVWgu.png" alt="image-20220309175418709"></p><p>看多难受，勿贪看。</p><h4 id="重复径向渐变"><a href="#重复径向渐变" class="headerlink" title="重复径向渐变"></a>重复径向渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">repeating-radial-gradient</span>(red <span class="hljs-number">0</span> <span class="hljs-number">20px</span>, blue <span class="hljs-number">20px</span> <span class="hljs-number">40px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/6womYBMjpVqb591.png" alt="image-20220309175910740"></p><h2 id="background-clip-属性"><a href="#background-clip-属性" class="headerlink" title="background-clip 属性"></a>background-clip 属性</h2><p><code>background-clip</code> 设置元素的背景（背景图片或颜色）是否延伸到边框、内边距盒子、内容盒子下面。</p><ul><li><p>border-box：背景延伸至边框外沿（但是在边框下层）。</p></li><li><p>padding-box：背景延伸至内边距（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding"><code>padding</code></a>）外沿。不会绘制到边框处。</p></li><li><p>content-box：背景被裁剪至内容区（content box）外沿。</p></li><li><p>text：背景被裁剪成文字的前景色。（即文字的背景即为区块的背景，文字之外的区域都将被裁剪掉）</p></li></ul><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">40px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span>,<br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">20px</span> dashed blue;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background-clip</span>: padding-box;<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background-clip</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background-clip</span>: content-box;<br>&#125;<br><br><span class="hljs-selector-class">.box4</span> &#123;<br>  -webkit-<span class="hljs-attribute">background-clip</span>: text;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/oqR4vUajV9PhWdz.png" alt="image-20220309193146881"></p><p><b style="color: red">一眼望去，最后一个最特殊</b>，所以要加上前缀<code> -webkit</code>，好吧，原因并不是这样。网上有种说法是 background-clip: text; 只兼容 chrome,要想兼容其他浏览器就要用: <code>-webkit-background-clip: text;</code>。然而，我的 chrome 浏览器都需要<code>-webkit-background-clip: text;</code>才能实现。<b style="color: red">另外，文字的颜色应该设置为透明，否则会覆盖掉背景色。</b></p><h2 id="渐变字实现"><a href="#渐变字实现" class="headerlink" title="渐变字实现"></a><span id="jump">渐变字实现</span></h2><p>看到这里，基本就能实现渐变字啦。</p><p>代码如下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>渐变字实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(</span><br><span class="css">          to right,</span><br><span class="css">          <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">0%</span>,</span><br><span class="css">          <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.8</span>) <span class="hljs-number">50%</span>,</span><br><span class="css">          <span class="hljs-built_in">rgb</span>(<span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">128</span>) <span class="hljs-number">80%</span></span><br><span class="css">        );</span><br><span class="css">        -webkit-<span class="hljs-attribute">background-clip</span>: text;</span><br><span class="css">        <span class="hljs-attribute">color</span>: transparent;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>赤蓝紫<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/BL9Zesh6qIzRw2g.png" alt="image-20220309200709951"></p><br /><p>参考链接：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Images/Using_CSS_gradients">使用 CSS 渐变 - CSS（层叠样式表） | MDN (mozilla.org)</a></p><p><a href="https://www.runoob.com/css3/css3-gradients.html">CSS3 渐变 | 菜鸟教程 </a></p><p><a href="https://blog.csdn.net/weixin_45337959/article/details/123004306">CSS3 新特性概述_阿锐丫的博客-CSDN 博客_css3 新增特性</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS-实现渐变字&quot;&gt;&lt;a href=&quot;#CSS-实现渐变字&quot; class=&quot;headerlink&quot; title=&quot;CSS 实现渐变字&quot;&gt;&lt;/a&gt;CSS 实现渐变字&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/03/13/A</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://www.clzczh.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue Router深入学习(一)</title>
    <link href="https://www.clzczh.top/2022/03/12/vue-router-deep-1/"/>
    <id>https://www.clzczh.top/2022/03/12/vue-router-deep-1/</id>
    <published>2022-03-12T03:34:18.000Z</published>
    <updated>2022-03-25T17:16:24.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-Router-深入学习-一"><a href="#Vue-Router-深入学习-一" class="headerlink" title="Vue Router 深入学习(一)"></a>Vue Router 深入学习(一)</h1><p>之前的笔记：<a href="https://clz.vercel.app/2021/10/15/vue-3/#toc-heading-9">Vue 路由</a></p><p>通过阅读文档，自己写一些 demo 来加深自己的理解。(主要针对 Vue3)</p><h2 id="1-动态路由匹配"><a href="#1-动态路由匹配" class="headerlink" title="1. 动态路由匹配"></a>1. 动态路由匹配</h2><h3 id="1-1-捕获所有路由-404-路由"><a href="#1-1-捕获所有路由-404-路由" class="headerlink" title="1.1 捕获所有路由(404 路由)"></a>1.1 捕获所有路由(404 路由)</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">// 将匹配所有内容并将其放在 `$route.params.pathMatch` 下</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:pathMatch(.*)*&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;NotFound&quot;</span>, <span class="hljs-attr">component</span>: NotFound &#125;,<br>  <span class="hljs-comment">// 将匹配以 `/user-` 开头的所有内容，并将其放在 `$route.params.afterUser` 下</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user-:afterUser(.*)&quot;</span>, <span class="hljs-attr">component</span>: UserGeneric &#125;,<br>];<br></code></pre></td></tr></table></figure></blockquote><p><strong>使用</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user-:afterUser(.*)&quot;</span>,<br>    <span class="hljs-comment">// 将匹配以 `/user-` 开头的所有内容，并将其放在 `$route.params.afterUser` 下</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:pathMatch(.*)*&quot;</span>,<br>    <span class="hljs-comment">// 将匹配所有内容并将其放在 `$route.params.pathMatch` 下</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;NotFound&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/NotFound.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>app.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  &#123;&#123; route.params &#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/NpOPi2VMot3wJfh.png" alt="image-20220302183444782"></p><h2 id="2-路由的匹配语法"><a href="#2-路由的匹配语法" class="headerlink" title="2 路由的匹配语法"></a>2 路由的匹配语法</h2><p>主要是通过正则表达式的语法来实现</p><h3 id="2-1-在参数中自定义正则"><a href="#2-1-在参数中自定义正则" class="headerlink" title="2.1 在参数中自定义正则"></a>2.1 在参数中自定义正则</h3><p>语法：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">// /:orderId -&gt; 仅匹配数字</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:orderId(\\d+)&quot;</span> &#125;,<br>  <span class="hljs-comment">// /:productName -&gt; 匹配其他任何内容</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:productName&quot;</span> &#125;,<br>];<br></code></pre></td></tr></table></figure></blockquote><p>实践：</p><p>路由配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:userid(\\d+)&quot;</span>, <span class="hljs-comment">// 两个\是因为会被转义</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;UserId&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/UserId.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:username&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;UserName&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/UserName.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/kU9syn7R3pvidCm.gif" alt="vue-router"></p><h3 id="2-2-可重复的参数"><a href="#2-2-可重复的参数" class="headerlink" title="2.2 可重复的参数"></a>2.2 可重复的参数</h3><p>可以使用<code> *</code>(0 个或多个)和<code> +</code>(1 个或多个)将参数标记为可重复</p><p>语法：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">// /:chapters -&gt;  匹配 /one, /one/two, /one/two/three, 等</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:chapters+&quot;</span> &#125;,<br>  <span class="hljs-comment">// /:chapters -&gt; 匹配 /, /one, /one/two, /one/two/three, 等</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:chapters*&quot;</span> &#125;,<br>];<br></code></pre></td></tr></table></figure></blockquote><p>实践：</p><p><b style="color: red">*</b>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:chapters*&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Chapters&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Chapters.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/EBaOnpYLSKrdQjz.gif" alt="vue-router"></p><p><b style="color: red">+</b>：</p><p><img src="https://s2.loli.net/2022/03/12/Yhb82rAMQsOk1vF.gif" alt="vue-router"></p><h3 id="2-3-可选参数"><a href="#2-3-可选参数" class="headerlink" title="2.3 可选参数"></a>2.3 可选参数</h3><p>使用 <code>?</code> 修饰符(0 个或 1 个)将一个参数标记为可选</p><p>语法：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">// 匹配 /users 和 /users/posva</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/users/:userId?&quot;</span> &#125;,<br>  <span class="hljs-comment">// 匹配 /users 和 /users/42</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/users/:userId(\\d+)?&quot;</span> &#125;,<br>];<br></code></pre></td></tr></table></figure></blockquote><p>实践：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:userid(\\d+)?&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:pathMatch(.*)*&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;NotFound&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/NotFound.vue&quot;</span>),<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/TVynubejJ6OfsFa.png" alt="image-20220303103934235"></p><p>如果没加可选限制，那么访问/user 时也会匹配到 404 去</p><p><img src="https://s2.loli.net/2022/03/12/cIr1pqQnsf4CeRE.png" alt="image-20220303104039713"></p><h2 id="3-编程式导航"><a href="#3-编程式导航" class="headerlink" title="3. 编程式导航"></a>3. 编程式导航</h2><p><strong><code>params</code> 不能与 <code>path</code> 一起使用，而应该使用<code>name</code>(命名路由)</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript">      <span class="hljs-keyword">const</span> router = useRouter();</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// // query编程式导航传参</span></span><br><span class="javascript">      <span class="hljs-comment">// router.push(&#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//   path: &quot;/user/123&quot;,</span></span><br><span class="javascript">      <span class="hljs-comment">//   query: &#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//     id: 666</span></span><br><span class="javascript">      <span class="hljs-comment">//   &#125;</span></span><br><span class="javascript">      <span class="hljs-comment">// &#125;)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// params编程式导航传参</span></span><br><span class="javascript">      router.push(&#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-comment">// 需要使用命名路由</span></span><br><span class="javascript">        <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">userid</span>: <span class="hljs-number">666</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-1-替换当前位置"><a href="#3-1-替换当前位置" class="headerlink" title="3.1 替换当前位置"></a>3.1 替换当前位置</h3><p>不会向<code> history</code>添加新纪录，而是替换当前的记录</p><p><strong>声明式</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">replace</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>编程式</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">router.replace(&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>&#125;);<br><br><span class="hljs-comment">// 或</span><br><span class="hljs-comment">// router.push(&#123;</span><br><span class="hljs-comment">//   path: &#x27;/home&#x27;,</span><br><span class="hljs-comment">//   replace: true</span><br><span class="hljs-comment">// &#125;)</span><br></code></pre></td></tr></table></figure><h2 id="4-命名视图"><a href="#4-命名视图" class="headerlink" title="4. 命名视图"></a>4. 命名视图</h2><p>需要同时同级展示多个视图，而不是嵌套展示时，命名视图就能够派上用场了</p><p>首先路由配置需要使用<code> components</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;home&quot;</span>,<br>    <span class="hljs-attr">components</span>: &#123;<br>      <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./views/First.vue&quot;</span>),<br>      <span class="hljs-attr">second</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./views/Second.vue&quot;</span>),<br>      <span class="hljs-attr">third</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./views/Third.vue&quot;</span>),<br>    &#125;,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><p>使用<code> router-view</code>时，添加上<code>name</code>属性即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;second&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;third&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例：</p><p><a href="https://codesandbox.io/s/ming-ming-shi-tu-8275iy">命名视图</a></p><h2 id="5-路由组件传参"><a href="#5-路由组件传参" class="headerlink" title="5. 路由组件传参"></a>5. 路由组件传参</h2><p>首先可通过<code> route</code>来实现路由传参，不过也可以通过<code> props</code>配置来开启<code> props传参</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    <span class="hljs-attr">props</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>&#125;);<br></code></pre></td></tr></table></figure><p>通过<code> props</code>获取参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> props = defineProps([<span class="hljs-string">&quot;id&quot;</span>]);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/q7KwpDYVS4EzRkN.png" alt="image-20220303194719540"></p><p><a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html">更多</a></p><p>参考链接：<a href="https://router.vuejs.org/zh/">Vue Router</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-Router-深入学习-一&quot;&gt;&lt;a href=&quot;#Vue-Router-深入学习-一&quot; class=&quot;headerlink&quot; title=&quot;Vue Router 深入学习(一)&quot;&gt;&lt;/a&gt;Vue Router 深入学习(一)&lt;/h1&gt;&lt;p&gt;之前的笔记：&lt;a</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://www.clzczh.top/tags/Vue/"/>
    
    <category term="Vue Router" scheme="https://www.clzczh.top/tags/Vue-Router/"/>
    
  </entry>
  
</feed>
