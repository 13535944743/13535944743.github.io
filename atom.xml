<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赤蓝紫</title>
  
  <subtitle>赤蓝紫</subtitle>
  <link href="https://clz.vercel.app/atom.xml" rel="self"/>
  
  <link href="https://clz.vercel.app/"/>
  <updated>2022-03-17T06:14:34.418Z</updated>
  <id>https://clz.vercel.app/</id>
  
  <author>
    <name>赤蓝紫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>github添加README文件后导致的问题</title>
    <link href="https://clz.vercel.app/2022/03/17/git-readme/"/>
    <id>https://clz.vercel.app/2022/03/17/git-readme/</id>
    <published>2022-03-17T06:09:30.000Z</published>
    <updated>2022-03-17T06:14:34.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="github添加README文件后导致的问题"><a href="#github添加README文件后导致的问题" class="headerlink" title="github添加README文件后导致的问题"></a>github添加README文件后导致的问题</h1><p>github 添加<code> README.md</code>文件后，<code> git push origin main</code>报错，<code> git pull origin main</code>后再推也无济于事。</p><p>这是因为<code> github</code>处添加<code> README</code>文件导致历史不一样。</p><p>通过<code> git pull</code>指令后添加<code> --allow-unrelated-histories</code>选项解决问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull origin main --allow-unrelated-histories<br></code></pre></td></tr></table></figure><p>该选项可以合并两个独立启动仓库的历史。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;github添加README文件后导致的问题&quot;&gt;&lt;a href=&quot;#github添加README文件后导致的问题&quot; class=&quot;headerlink&quot; title=&quot;github添加README文件后导致的问题&quot;&gt;&lt;/a&gt;github添加README文件后导致的</summary>
      
    
    
    
    <category term="小技能" scheme="https://clz.vercel.app/categories/%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="git" scheme="https://clz.vercel.app/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>详解原型与原型链</title>
    <link href="https://clz.vercel.app/2022/03/16/javascript-prototype/"/>
    <id>https://clz.vercel.app/2022/03/16/javascript-prototype/</id>
    <published>2022-03-16T10:05:54.000Z</published>
    <updated>2022-03-16T10:06:30.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="详解原型与原型链"><a href="#详解原型与原型链" class="headerlink" title="详解原型与原型链"></a>详解原型与原型链</h1><p>其实，刚开始学JavaScript时，就有学过原型与原型链的相关知识了，只是当时还没有养成写笔记的习惯，导致现在已经忘的七七八八了。</p><p>这边文章真是花了很多心思，写了两天，看了很多篇篇博文，其中有小参考的，有解决一点疑惑的，但是最后只标注了一篇帮助最大的。</p><br><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p><strong>实例的构造函数属性(<code> constructor</code>)指向其构造函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(person.constructor === Person)    <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><br><p><b style="color: red">实例的构造函数并不是自身属性，而是从原型对象上继承的属性</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(person.constructor === Person)    <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(Person.prototype.constructor === Person)    <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">console</span>.log(person.hasOwnProperty(<span class="hljs-string">&#x27;constructor&#x27;</span>))     <span class="hljs-comment">// false：constructor属性并不是实例自身的属性，而是继承来的</span><br></code></pre></td></tr></table></figure><br><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><ul><li><strong><code>__proto__(隐式原型)</code>：每个对象(除了<code> null</code>)都具有的属性</strong>，该属性指向该对象的原型</li><li><strong><code>prototype(显式原型)</code>：只有函数对象才有的属性</strong>，该属性指向函数的原型对象</li></ul><p>来看来看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a + b<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(arr)<br><span class="hljs-built_in">console</span>.log(obj)<br><span class="hljs-built_in">console</span>.log(add)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/8GRutdoLNb27qAz.png" alt="image-20220314161614197"></p><br><p><b syule="color: red">红框框中的<code> [[prototype]]</code>和<code> __proto__</code>意义相同，都是指对象的内部属性</b></p><p><strong>而所有函数都拥有<code> prototype</code>属性</strong>，所以可以通过<code> f.prototype</code>得到，那么自然也不需要通过<code> [[prototype]]</code>显示出来(毕竟<code> prototype</code>是显式原型，而<code> __proto__</code>是隐式原型，好吧，这是我猜的)</p><p><img src="https://s2.loli.net/2022/03/14/l1ebmHdsivJWNoT.png" alt="image-20220314162705526"></p><br><p><b style="color: red">箭头函数没有<code> prototype</code>属性</b></p><br><h3 id="访问原型"><a href="#访问原型" class="headerlink" title="访问原型"></a>访问原型</h3><p>通过实例对象访问原型对象有 3 种方法</p><ul><li><code>obj.__proto__</code></li><li><code>obj.constructor.prototype</code></li><li><code>Object.getPrototypeOf(obj)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><br><span class="hljs-keyword">const</span> proto1 = person.__proto__<br><span class="hljs-keyword">const</span> proto2 = person.constructor.prototype<br><span class="hljs-keyword">const</span> proto3 = <span class="hljs-built_in">Object</span>.getPrototypeOf(person)<br><br><span class="hljs-keyword">const</span> proto = Person.prototype    <span class="hljs-comment">// 原型</span><br><br><span class="hljs-built_in">console</span>.log(proto1 === proto)     <span class="hljs-comment">// true: 第一种方法</span><br><span class="hljs-built_in">console</span>.log(proto2 === proto)     <span class="hljs-comment">// true: 第二种方法</span><br><span class="hljs-built_in">console</span>.log(proto3 === proto)     <span class="hljs-comment">// true: 第三种方法</span><br></code></pre></td></tr></table></figure><br><p><strong>比较安全的做法是<code>Object.getPrototypeOf(obj)</code></strong></p><p><strong>以下部分会涉及一丢丢原型链的知识(如果没看懂，可以看下原型链再来看)</strong></p><ul><li><p><code> __proto__</code>属性是私有属性，存在浏览器兼容性问题，缺乏非浏览器环境的支持</p></li><li><p>如果obj的<code> constructor</code>属性被覆盖，那么<code>obj.constructor.prototype</code>将会失效。(因为obj自身是没有<code> constructor</code>属性的，是通过原型链去它的原型上获取<code> constructor</code>属性，所以覆盖该属性时，将不会再去原型链上查找)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Temp</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><br>person.constructor = Temp<br><br><span class="hljs-keyword">const</span> proto = Person.prototype    <span class="hljs-comment">// 原型</span><br><br><span class="hljs-built_in">console</span>.log(person.__proto__ === proto)     <span class="hljs-comment">// true: 第一种方法</span><br><span class="hljs-built_in">console</span>.log(person.constructor.prototype === proto)     <span class="hljs-comment">// false: 第二种方法</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getPrototypeOf(person) === proto)     <span class="hljs-comment">// true: 第三种方法</span><br></code></pre></td></tr></table></figure></li></ul><br><h3 id="设置原型"><a href="#设置原型" class="headerlink" title="设置原型"></a>设置原型</h3><p>设置原型对象有 3 种方法</p><ul><li><code>obj.__proto__=prototypeObj</code></li><li><code>Object.setPrototypeOf(obj, prototypeObj)</code></li><li><code>Object.create(prototypeObj)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> proto = &#123;   <span class="hljs-comment">// 原型对象</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;prototype&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// 第一种方法</span><br><span class="hljs-keyword">const</span> obj1 = &#123;&#125;<br>obj1.__proto__ = proto    <span class="hljs-comment">// 设置原型</span><br><span class="hljs-built_in">console</span>.log(obj1.name)          <span class="hljs-comment">// prototype</span><br><span class="hljs-built_in">console</span>.log(obj1.__proto__ === proto)   <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 第二种方法</span><br><span class="hljs-keyword">const</span> obj2 = &#123;&#125;<br><span class="hljs-built_in">Object</span>.setPrototypeOf(obj2, proto)    <span class="hljs-comment">// 设置原型</span><br><span class="hljs-built_in">console</span>.log(obj2.name)          <span class="hljs-comment">// prototype</span><br><span class="hljs-built_in">console</span>.log(obj2.__proto__ === proto)   <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 第三种方法</span><br><span class="hljs-keyword">const</span> obj3 = <span class="hljs-built_in">Object</span>.create(proto)   <span class="hljs-comment">// 创建对象并设置原型</span><br><span class="hljs-built_in">console</span>.log(obj3.name)          <span class="hljs-comment">// prototype</span><br><span class="hljs-built_in">console</span>.log(obj3.__proto__ === proto)   <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><br><h3 id="检测原型"><a href="#检测原型" class="headerlink" title="检测原型"></a>检测原型</h3><p>使用<code> obj1.isPrototypeOf(obj2)</code>方法判断<code> obj1</code>是否为·<code> obj2</code>的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> proto = &#123;   <span class="hljs-comment">// 原型对象</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;prototype&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> proto1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;prototype&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> obj = &#123;&#125;<br>obj.__proto__ = proto    <span class="hljs-comment">// 设置原型</span><br><br><span class="hljs-built_in">console</span>.log(proto.isPrototypeOf(obj))   <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.isPrototypeOf(obj))  <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">console</span>.log(proto1.isPrototypeOf(obj))  <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><br><h2 id="prototype、-proto-、constructor之间的关系"><a href="#prototype、-proto-、constructor之间的关系" class="headerlink" title="prototype、__proto__、constructor之间的关系"></a>prototype、<code>__proto__</code>、constructor之间的关系</h2><p><img src="https://s2.loli.net/2022/03/14/FO6IgxSiPm9pVWu.png" alt="image-20220314170210850"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><br><span class="hljs-built_in">console</span>.log(person.__proto__ === Person.prototype)<span class="hljs-comment">// true：因为创建person对象的构造函数是Person，所以person对象的隐式原型(__proto__)指向Person函数的原型(prototype)</span><br><span class="hljs-built_in">console</span>.log(Person.prototype.constructor === Person)<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><br><p><strong>同一个构造函数创建的多个实例的原型是同一个</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>   <span class="hljs-built_in">this</span>.name = name<br> &#125;<br><br> <span class="hljs-keyword">const</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br> <span class="hljs-keyword">const</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><br> <span class="hljs-built_in">console</span>.log(person1 === person2)    <span class="hljs-comment">// false: 不是同一个对象</span><br> <span class="hljs-built_in">console</span>.log(person1.__proto__ === person2.__proto__)  <span class="hljs-comment">// true：同一个构造函数创建的实例对象的原型是同一个</span><br></code></pre></td></tr></table></figure><br><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>由上面的知识可以知道，实例对象具有属性<code> __proto__</code>，会指向原型对象。而原型对象也是对象，所以也会有属性<code> __proto__</code>，也会继续指向它的原型对象。</p><p><b style="color: red">实例对象在查找属性时，如果查找不到，就会沿着<code> __proto__</code>去它的原型上查找，还找不到，则继续去原型的原型上查找，直到找到或到最顶层为止。这就是原型链的概念。</b></p><br><p><strong>对象本身的方法(第一层：把方法当成属性)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>  <span class="hljs-built_in">this</span>.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;听音乐&#x27;</span>)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(person)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;实例对象本身是否有listenMusic方法&#x27;</span>, person.hasOwnProperty(<span class="hljs-string">&#x27;listenMusic&#x27;</span>))<br>person.listenMusic()<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/wVuWlXUHCbSGhx9.png" alt="image-20220315094508947"></p><br><p><strong>对象的原型上添加方法(第二层)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>&#125;<br>Person.prototype.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;听音乐&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(person)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;实例对象本身是否有listenMusic方法&#x27;</span>, person.hasOwnProperty(<span class="hljs-string">&#x27;listenMusic&#x27;</span>))<br>person.listenMusic()<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/5bNeTitq3vJIU16.png" alt="image-20220314183755250"></p><br><p><strong>原型的原型上的方法(第三层)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>&#125;<br>Person.prototype.__proto__.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;听音乐&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(person)<br>person.listenMusic()<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/WwhLDopOEvJuxcG.png" alt="image-20220314184300125"></p><br><p>但是呢，没法玩第四层，因为已经到顶了(<strong><code> Object.prototype</code>没有原型(原型为null)</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>&#125;<br>Person.prototype.__proto__.__proto__.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;听音乐&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(person)<br>person.listenMusic()<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/xD67UynCkVE4waz.png" alt="image-20220314184424877"></p><hr><p><strong>person -&gt; Person.prototype -&gt; Object.prototype -&gt; null</strong></p><p>那么，这里就来看看第三层是不是真的是<code> Object.prototype</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>&#125;<br>Person.prototype.__proto__.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;听音乐&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(person)<br><br><span class="hljs-built_in">console</span>.log(Person.prototype.__proto__ === person.__proto__.__proto__)<br><span class="hljs-built_in">console</span>.log(person.__proto__.__proto__ === <span class="hljs-built_in">Object</span>.prototype)   <span class="hljs-comment">// 这里就是判断处</span><br><br>person.listenMusic()<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/Vq8hgzA6YsF5KLm.png" alt="image-20220315095211650"></p><p>发现，确实如此。</p><p><strong>下面这张图就是原型链的简单图</strong>(找不到是在哪里截的图了，侵删)</p><p><img src="https://s2.loli.net/2022/03/14/gvmpCyaXMPxNiZ1.png" alt="image-20220314233252631"></p><br><h3 id="原型链的作用"><a href="#原型链的作用" class="headerlink" title="原型链的作用"></a>原型链的作用</h3><h4 id="为对象设置默认值"><a href="#为对象设置默认值" class="headerlink" title="为对象设置默认值"></a>为对象设置默认值</h4><blockquote><p>利用原型为对象设置默认值。当原型属性与私有属性同名时，删除私有属性之后，可以访问原型属性，即可以把原型属性值作为初始化默认值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>&#125;<br><br>Person.prototype.name = <span class="hljs-string">&#x27;赤蓝紫&#x27;</span><br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(person.name)    <span class="hljs-comment">// clz</span><br><br><span class="hljs-keyword">delete</span> person.name<br><span class="hljs-built_in">console</span>.log(person.name)    <span class="hljs-comment">// 赤蓝紫</span><br></code></pre></td></tr></table></figure><br><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承内容部分之后单独写。</p><br><h4 id="扩展原型方法"><a href="#扩展原型方法" class="headerlink" title="扩展原型方法"></a>扩展原型方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Array</span>.prototype.test = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;扩展原型方法: 有风险&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>arr.test()    <span class="hljs-comment">// 扩展原型方法: 有风险</span><br></code></pre></td></tr></table></figure><br><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p>typeof是判断类型时大多数人的选择(当然也包括我啦)，但是，判断非基本数据类型(<code>function</code>除外)时，只能得到<code> Object</code>。(null也是，但是null这个属于是历史遗留bug了)。</p><blockquote><p><strong>js 在底层存储变量的时候，会在变量的机器码的低位1-3位存储其类型信息</strong></p><ul><li>000：对象</li><li>010：浮点数</li><li>100：字符串</li><li>110：布尔</li><li>1：整数</li></ul><p>null：所有机器码均为0<br>undefined：用 −2^30 整数来表示</p></blockquote><hr><p><code> symbol</code>和<code> bigint</code>是后来新增的数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> num = <span class="hljs-number">123</span><br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-keyword">const</span> bool = <span class="hljs-literal">true</span><br><span class="hljs-keyword">const</span> n = <span class="hljs-literal">null</span><br><span class="hljs-keyword">const</span> u = <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">const</span> sym = <span class="hljs-built_in">Symbol</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">const</span> big = <span class="hljs-built_in">BigInt</span>(<span class="hljs-number">123</span>)<br><br><span class="hljs-keyword">const</span> fun = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> num)   <span class="hljs-comment">// number</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> str)   <span class="hljs-comment">// string</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> bool)  <span class="hljs-comment">// boolean</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> n)     <span class="hljs-comment">// object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> u)     <span class="hljs-comment">// undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> sym)   <span class="hljs-comment">// symbol</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> big)   <span class="hljs-comment">//bigint</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fun)   <span class="hljs-comment">//function</span><br></code></pre></td></tr></table></figure><br><p><strong><code>function</code>除外的非基本数据类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = []<br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>])<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> arr)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> set) <br></code></pre></td></tr></table></figure><p><strong>清一色<code> object</code></strong></p><br><p>通过<code>Object.prototype.toString.call(obj)</code>来识别对象类型。会返回<code>&quot;[object Type]&quot;</code>来告诉你所指对象的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">let</span> arr = []<br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>])<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(arr))  <span class="hljs-comment">// [object Array]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(obj))  <span class="hljs-comment">// [object Object]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(set))  <span class="hljs-comment">// [object Set]</span><br></code></pre></td></tr></table></figure><hr><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p><strong><code>instanceof</code>只要右边变量的 prototype 在左边变量的原型链上，就会返回<code>true</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>&#125;<br><br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><br><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> Person)   <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>)   <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> Test)     <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><br><h2 id="普通对象与函数对象"><a href="#普通对象与函数对象" class="headerlink" title="普通对象与函数对象"></a>普通对象与函数对象</h2><ul><li><p><strong>所有的函数都是通过<code> new Function()</code>来创建的，即是函数对象</strong></p></li><li><p>**其他的都是普通对象 **</p></li></ul><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123; &#125;<br><span class="hljs-keyword">const</span> fn2 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; &#125;<br><span class="hljs-keyword">const</span> fn3 = <span class="hljs-function">() =&gt;</span> &#123; &#125;<br><span class="hljs-keyword">const</span> fn4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>()<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn1)       <span class="hljs-comment">//function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn2)       <span class="hljs-comment">//function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn3)       <span class="hljs-comment">//function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn4)       <span class="hljs-comment">//function</span><br><br><br><span class="hljs-keyword">const</span> obj1 = &#123;&#125;<br><span class="hljs-keyword">const</span> obj2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br><span class="hljs-keyword">const</span> obj3 = <span class="hljs-keyword">new</span> fn1()<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj1);     <span class="hljs-comment">//object </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj2);     <span class="hljs-comment">//object </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj3);     <span class="hljs-comment">//object</span><br></code></pre></td></tr></table></figure><br><p>上面的例子中，<code> fn1</code>、<code> fn2</code>、<code> fn3</code>、<code> fn4</code>是函数对象，<code> obj1</code>、<code> obj2</code>、<code> obj3</code>是普通对象</p><blockquote><ul><li><strong>Object是构造函数，即也是函数，所以<code> Object</code>也是函数对象，相当于<code>Function</code>的实例，即<code> Object.__proto__ === Function.prototype</code></strong></li><li><strong><code>Object.prototype</code>是<code>Object</code>构造函数的原型，处于原型链的顶端，<code>Object.prototype.__proto__</code>已经没有可以指向的上层原型，因此其值为<code>null</code></strong></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span>)    <span class="hljs-comment">// function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.__proto__ === <span class="hljs-built_in">Function</span>.prototype)    <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.__proto__)   <span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure><br><blockquote><ul><li><strong><code> Function.prototype</code>是<code> Function</code>的原型，是所有函数对象的原型</strong></li><li><strong><code>Function.prototype</code>是一个普通对象，所以<code> Function.prototype.__proto__ === Object.prototype</code></strong></li><li><strong><code>Function</code>函数不通过任何东西创建，<code>JS</code>引擎启动时，添加到内存中</strong>，所以**<code>  Function.__proto__ === Function.prototype</code>**</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Function</span>)    <span class="hljs-comment">// function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.prototype.__proto__ === <span class="hljs-built_in">Object</span>.prototype)    <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.__proto__ === <span class="hljs-built_in">Function</span>.prototype)   <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><br><h2 id="经典原型链图"><a href="#经典原型链图" class="headerlink" title="经典原型链图"></a>经典原型链图</h2><p><img src="https://s2.loli.net/2022/03/15/HXe9vi2ADnSVC6J.png" alt="img"></p><br><h2 id="练手福利"><a href="#练手福利" class="headerlink" title="练手福利"></a>练手福利</h2><p>题目来自<a href="https://juejin.cn/post/7018355953955241997">JavaScript之彻底理解原型与原型链</a></p><p>有加一道</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">User</span>(<span class="hljs-params"></span>) </span>&#123; &#125;<br>User.prototype.sayHello = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; &#125;<br><span class="hljs-keyword">var</span> u1 = <span class="hljs-keyword">new</span> User();<br><span class="hljs-keyword">var</span> u2 = <span class="hljs-keyword">new</span> User();<br><br><span class="hljs-built_in">console</span>.log(u1.sayHello === u2.sayHello);   <br><span class="hljs-built_in">console</span>.log(User.prototype.constructor);    <br><br><span class="hljs-built_in">console</span>.log(User.prototype === <span class="hljs-built_in">Function</span>.prototype);  <br><span class="hljs-built_in">console</span>.log(User.prototype.__proto__ === <span class="hljs-built_in">Function</span>.prototype.__proto__);  <br><span class="hljs-built_in">console</span>.log(User.prototype === u1.__proto__);  <br><br><span class="hljs-built_in">console</span>.log(User.__proto__ === <span class="hljs-built_in">Function</span>.prototype);  <br><span class="hljs-built_in">console</span>.log(User.__proto__ === <span class="hljs-built_in">Function</span>.__proto__); <br><br><span class="hljs-built_in">console</span>.log(u1.__proto__ === u2.__proto__);         <br><span class="hljs-built_in">console</span>.log(u1.__proto__ === User.__proto__);         <br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.__proto__ === <span class="hljs-built_in">Object</span>.__proto__);  <br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.prototype.__proto__ === <span class="hljs-built_in">Object</span>.prototype.__proto__); <br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.prototype.__proto__ === <span class="hljs-built_in">Object</span>.prototype);          <br></code></pre></td></tr></table></figure><br><p><strong>校对答案</strong>：(可能有点难，细嚼慢咽后再反复看就行)</p><p><img src="https://s2.loli.net/2022/03/15/h6jEpTSG4RaIfoQ.png" alt="image-20220315162828873"></p><br><p>参考链接：<a href="http://c.biancheng.net/view/5805.html">JS原型（prototype）和原型链完全攻略</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;详解原型与原型链&quot;&gt;&lt;a href=&quot;#详解原型与原型链&quot; class=&quot;headerlink&quot; title=&quot;详解原型与原型链&quot;&gt;&lt;/a&gt;详解原型与原型链&lt;/h1&gt;&lt;p&gt;其实，刚开始学JavaScript时，就有学过原型与原型链的相关知识了，只是当时还没有养成写</summary>
      
    
    
    
    <category term="前端" scheme="https://clz.vercel.app/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://clz.vercel.app/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>微软自带的日语输入法怎么切换平假名和片假名</title>
    <link href="https://clz.vercel.app/2022/03/16/life-skill/"/>
    <id>https://clz.vercel.app/2022/03/16/life-skill/</id>
    <published>2022-03-16T09:32:17.000Z</published>
    <updated>2022-03-16T09:32:54.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微软自带的日语输入法怎么切换平假名和片假名"><a href="#微软自带的日语输入法怎么切换平假名和片假名" class="headerlink" title="微软自带的日语输入法怎么切换平假名和片假名"></a>微软自带的日语输入法怎么切换平假名和片假名</h1><p>使用按键ctrl+caps lock，切换平假名。</p><p>使用按键alt+caps lock，切换片假名。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微软自带的日语输入法怎么切换平假名和片假名&quot;&gt;&lt;a href=&quot;#微软自带的日语输入法怎么切换平假名和片假名&quot; class=&quot;headerlink&quot; title=&quot;微软自带的日语输入法怎么切换平假名和片假名&quot;&gt;&lt;/a&gt;微软自带的日语输入法怎么切换平假名和片假名&lt;/</summary>
      
    
    
    
    <category term="小技能" scheme="https://clz.vercel.app/categories/%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue Router深入学习(二)</title>
    <link href="https://clz.vercel.app/2022/03/15/vue-router-deep-2/"/>
    <id>https://clz.vercel.app/2022/03/15/vue-router-deep-2/</id>
    <published>2022-03-15T08:41:51.000Z</published>
    <updated>2022-03-15T08:42:15.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-Router深入学习-二"><a href="#Vue-Router深入学习-二" class="headerlink" title="Vue Router深入学习(二)"></a>Vue Router深入学习(二)</h1><p>通过阅读文档，自己写一些demo来加深自己的理解。(主要针对Vue3)<br>上一篇：<a href="https://clz.vercel.app/2022/03/12/vue-router-deep-1/">Vue Router深入学习(一)</a></p><h2 id="1-路由元信息"><a href="#1-路由元信息" class="headerlink" title="1. 路由元信息"></a>1. 路由元信息</h2><blockquote><p>有时，你可能希望将任意信息附加到路由上，如过渡名称、谁可以访问路由等。这些事情可以通过接收属性对象的<code>meta</code>属性来实现，并且它可以在路由地址和导航守卫上都被访问到。定义路由的时候你可以这样配置 <code>meta</code> 字段</p></blockquote><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/User.vue&#x27;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;用户&#x27;</span>,<br>      <span class="hljs-attr">isLogin</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br>];<br></code></pre></td></tr></table></figure><h3 id="1-1-简单使用"><a href="#1-1-简单使用" class="headerlink" title="1.1 简单使用"></a>1.1 简单使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/User.vue&#x27;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;用户&#x27;</span>,<br>      <span class="hljs-attr">isLogin</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes<br>&#125;);<br><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; route.meta &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> route = useRoute()</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(route.meta)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/spOZRvIcYXwPtHm.png" alt="image-20220304103855475"></p><h3 id="1-2-搭配路由守卫使用"><a href="#1-2-搭配路由守卫使用" class="headerlink" title="1.2 搭配路由守卫使用"></a>1.2 搭配路由守卫使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/User.vue&#x27;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;用户&#x27;</span>,<br>      <span class="hljs-attr">isLogin</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;:id(\\d+)&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/UserId.vue&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;id&#x27;</span>,<br>          <span class="hljs-attr">requireAuth</span>: <span class="hljs-literal">true</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;:name&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/UserName.vue&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;name&#x27;</span>,<br>          <span class="hljs-attr">requireAuth</span>: <span class="hljs-literal">false</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>路由前置守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (to.meta.requireAuth) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>      <span class="hljs-attr">query</span>: &#123;<br>        <span class="hljs-attr">redirect</span>: to.path   <span class="hljs-comment">// 保存要去的位置，获得权限后再去</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/nImTkXpSrcCadJB.gif" alt="vue-router"></p><h2 id="2-数据获取"><a href="#2-数据获取" class="headerlink" title="2. 数据获取"></a>2. 数据获取</h2><blockquote><p>有时候，进入某个路由后，需要从服务器获取数据。例如，在渲染用户信息时，你需要从服务器获取用户的数据。</p></blockquote><h3 id="2-1-导航完成后获取数据"><a href="#2-1-导航完成后获取数据" class="headerlink" title="2.1 导航完成后获取数据"></a>2.1 导航完成后获取数据</h3><blockquote><p>当你使用这种方式时，我们会马上导航和渲染组件，然后在组件的 created 钩子中获取数据。这让我们有机会在数据获取期间展示一个 loading 状态，还可以在不同视图间展示不同的 loading 状态。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>id: &#123;&#123; post.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 222 &#125; &#125;&quot;</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 333 &#125; &#125;&quot;</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 444 &#125; &#125;&quot;</span>&gt;</span>444<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; reactive, watchEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">let</span> post = reactive(&#123;</span><br><span class="javascript">  <span class="hljs-attr">id</span>: <span class="hljs-literal">null</span></span><br><span class="javascript">&#125;)</span><br><span class="javascript"><span class="hljs-keyword">const</span> route = useRoute()</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> fetchData = <span class="hljs-function">() =&gt;</span> &#123;   <span class="hljs-comment">// 数据获取，不需要生命周期钩子。因为beforeCreate和created没有API，因为setup实际上就相当于这两个生命周期函数</span></span><br><span class="javascript">  post.id = route.params.id</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">watchEffect(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">  <span class="hljs-keyword">const</span> id = post.id</span><br><span class="javascript">  fetchData()</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/468dhyarpVXUOWm.gif" alt="vue-router"></p><h3 id="2-2-在导航完成前获取数据"><a href="#2-2-在导航完成前获取数据" class="headerlink" title="2.2 在导航完成前获取数据"></a>2.2 在导航完成前获取数据</h3><blockquote><p>通过这种方式，我们在导航转入新的路由前获取数据。我们可以在接下来的组件的 <code>beforeRouteEnter</code> 守卫中获取数据，当数据获取成功后只调用 <code>next</code> 方法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>id: &#123;&#123; post.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 222 &#125; &#125;&quot;</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 333 &#125; &#125;&quot;</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 444 &#125; &#125;&quot;</span>&gt;</span>444<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      <span class="hljs-attr">post</span>: &#123;&#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">beforeRouteEnter</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>)</span> &#123;    <span class="hljs-comment">// 不要写在setup里</span></span><br><span class="javascript">    next(<span class="hljs-function"><span class="hljs-params">vm</span> =&gt;</span> &#123;</span><br><span class="javascript">      vm.setData(to.params)</span><br><span class="javascript">    &#125;)</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">beforeRouteUpdate</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">this</span>.post = to.params</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setData</span>(<span class="hljs-params">post</span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.post = post</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果和上图一样。这里有点问题，通过<code>beforeRouteEnter</code>无法获取到<code> setup</code>里的函数、数据等，所以变成了使用Vue2的形式来实现。</p><h2 id="3-过渡动效"><a href="#3-过渡动效" class="headerlink" title="3. 过渡动效"></a>3. 过渡动效</h2><h3 id="3-1-transition简单了解"><a href="#3-1-transition简单了解" class="headerlink" title="3.1 transition简单了解"></a>3.1 transition简单了解</h3><blockquote><p><code>&lt;Transition&gt;</code> 会在一个元素或组件进入和离开 DOM 时应用动画</p></blockquote><p><img src="https://s2.loli.net/2022/03/15/FBeshZCdVrvYul6.png" alt="image-20220304182013408"></p><h3 id="3-2-简单使用"><a href="#3-2-简单使用" class="headerlink" title="3.2 简单使用"></a>3.2 简单使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; Component &#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fade&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在router-view上使用v-slot获取对应的组件，使用component动态组件来渲染这个组件，然后用transition包裹住这个动态组件</p><p><b style="color: red">对应的路由组件只能有一个根元素，否则过渡将没有效果</b></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.fade-enter-from</span>,<br><span class="hljs-selector-class">.fade-leave-to</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100px</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fade-enter-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2022/03/15/HNFL6CBem9nM3ao.gif" alt="vue-router"></p><h4 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; Component &#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fade&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.fade-enter-from</span>,</span><br><span class="css"><span class="hljs-selector-class">.fade-leave-to</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100px</span>);</span><br><span class="css">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.fade-enter-active</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-单个路由的过渡"><a href="#3-3-单个路由的过渡" class="headerlink" title="3.3 单个路由的过渡"></a>3.3 单个路由的过渡</h3><p>原理很简单，路由配置时在<code>meta上</code>添加上<code>trasition</code>属性，再动态地和<code> name</code>结合在一起就行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/Home.vue&#x27;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/post&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Post&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/Post.vue&#x27;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">transition</span>: <span class="hljs-string">&#x27;slide-left&#x27;</span><br>    &#125;<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/User.vue&#x27;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">transition</span>: <span class="hljs-string">&#x27;slide-right&#x27;</span><br>    &#125;<br>  &#125;<br>];<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; Component, route &#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">:name</span>=<span class="hljs-string">&quot;route.meta.transition || fade&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再添加上对应的css样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.fade-enter-from</span>,<br><span class="hljs-selector-class">.fade-leave-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fade-enter-active</span>,<br><span class="hljs-selector-class">.slide-left-enter-active</span>,<br><span class="hljs-selector-class">.slide-right-enter-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.slide-left-enter-from</span>,<br><span class="hljs-selector-class">.slide-left-leave-to</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">200px</span>);<br>&#125;<br><br><span class="hljs-selector-class">.slide-right-enter-from</span>,<br><span class="hljs-selector-class">.slide-right-leave-to</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">200px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/ueE7mi691FaULNR.gif"></p><h3 id="3-4-基于路由的动态过渡"><a href="#3-4-基于路由的动态过渡" class="headerlink" title="3.4 基于路由的动态过渡"></a>3.4 基于路由的动态过渡</h3><p>根据目标路由和当前路由之间的关系，动态地确定使用的过渡</p><p>如：添加一个 <a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%90%8E%E7%BD%AE%E9%92%A9%E5%AD%90">全局后置钩子</a>，根据路径的深度动态添加信息到 <code>meta</code> 字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">router.afterEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> toDepth = to.path.split(<span class="hljs-string">&#x27;/&#x27;</span>).length<br>  <span class="hljs-keyword">const</span> fromDepth = <span class="hljs-keyword">from</span>.path.split(<span class="hljs-string">&#x27;/&#x27;</span>).length<br><br>  to.meta.transition = toDepth &lt; fromDepth ? <span class="hljs-string">&#x27;slide-right&#x27;</span> : <span class="hljs-string">&#x27;slide-left&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/04/M2gyJ1QtPL4aqEV.gif" alt="vue-router"></p><h2 id="4-滚动行为"><a href="#4-滚动行为" class="headerlink" title="4. 滚动行为"></a>4. 滚动行为</h2><p>在创建Router示例时，提供一个<code> scrollBehavior</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  <span class="hljs-attr">routes</span>: [...],<br>  scrollBehavior (to, <span class="hljs-keyword">from</span>, savedPosition) &#123;<br>    <span class="hljs-comment">// return 期望滚动到哪个的位置</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="4-1-普通用法"><a href="#4-1-普通用法" class="headerlink" title="4.1 普通用法"></a>4.1 普通用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">50</span>   <span class="hljs-comment">// 始终滚动到距离顶部50px处</span><br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/EV8YKSlftByWXr3.gif" alt="vue-router1"></p><p>如果浏览器支持<a href="https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions/behavior">滚动行为</a>，可以通过<code>behavior</code>变得更流畅</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">50</span>,   <span class="hljs-comment">// 始终滚动到距离顶部50px处</span><br>      <span class="hljs-attr">behavior</span>: <span class="hljs-string">&#x27;smooth&#x27;</span>,<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/oOms145iPFjnIMG.gif" alt="vue-router1"></p><h3 id="4-2-通过-el实现相对元素的偏移"><a href="#4-2-通过-el实现相对元素的偏移" class="headerlink" title="4.2 通过 el实现相对元素的偏移"></a>4.2 通过<code> el</code>实现相对元素的偏移</h3><p><code> el</code>可接受一个CSS选择器或一个DOM元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;h2&#x27;</span>,<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">50</span><br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/b4Dv5ZBGsw7OLNm.gif" alt="vue-router1"></p><h3 id="4-3-恢复之前的位置"><a href="#4-3-恢复之前的位置" class="headerlink" title="4.3 恢复之前的位置"></a>4.3 恢复之前的位置</h3><p>返回 <code>savedPosition</code>，在按下 后退/前进 按钮时，就会恢复之前的位置。像浏览器的原生表现那样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (savedPosition) &#123;<br>      <span class="hljs-comment">// console.log(savedPosition)</span><br>      <span class="hljs-keyword">return</span> savedPosition<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">top</span>: <span class="hljs-number">0</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/bg2IuKXjRE1rPoY.gif" alt="vue-router1"></p><h3 id="4-4-延迟滚动"><a href="#4-4-延迟滚动" class="headerlink" title="4.4 延迟滚动"></a>4.4 延迟滚动</h3><p>通过返回一个Promise来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        resolve(&#123;<br>          <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,<br>          <span class="hljs-attr">behavior</span>: <span class="hljs-string">&#x27;smooth&#x27;</span><br>        &#125;)<br>      &#125;, <span class="hljs-number">500</span>)<br>    &#125;)<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/VkiJHyfjaZDvIPc.gif" alt="vue-router1"></p><h2 id="5-路由懒加载"><a href="#5-路由懒加载" class="headerlink" title="5. 路由懒加载"></a>5. 路由懒加载</h2><blockquote><p>把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，会更高效</p></blockquote><p>静态导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> User <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/User.vue&#x27;</span><br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User&#x27;</span>,<br>    <span class="hljs-attr">component</span>: User<br>  &#125;<br>];<br></code></pre></td></tr></table></figure><p>动态导入：(实际上还省字)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/User.vue&#x27;</span>)<br>  &#125;<br>];<br></code></pre></td></tr></table></figure><h2 id="6-动态路由"><a href="#6-动态路由" class="headerlink" title="6. 动态路由"></a>6. 动态路由</h2><h3 id="6-1-添加路由"><a href="#6-1-添加路由" class="headerlink" title="6.1 添加路由"></a>6.1 添加路由</h3><p>路由配置：初始只有一个路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/Home.vue&#x27;</span>)<br>  &#125;<br>];<br><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes<br>&#125;);<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>在导航守卫处添加新路由：实际上要限制那些页面的权限就可以这样添加，只有满足条件才会动态添加路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  router.addRoute(&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./components/User.vue&#x27;</span>)<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="6-2-删除路由"><a href="#6-2-删除路由" class="headerlink" title="6.2 删除路由"></a>6.2 删除路由</h3><p><b style="color: red">当路由被删除时，所有的别名和子路由都会被同时删掉</b></p><h4 id="6-2-1-通过添加一个名字冲突的路由"><a href="#6-2-1-通过添加一个名字冲突的路由" class="headerlink" title="6.2.1 通过添加一个名字冲突的路由"></a>6.2.1 通过添加一个名字冲突的路由</h4><p>如果添加与现有名称相同的路由，会先删除路由，再添加路由。</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">router.addRoute(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>, <span class="hljs-attr">component</span>: About &#125;)<br><span class="hljs-comment">// 这将会删除之前已经添加的路由，因为他们具有相同的名字且名字必须是唯一的</span><br>router.addRoute(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/other&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>, <span class="hljs-attr">component</span>: Other &#125;)<br></code></pre></td></tr></table></figure></blockquote><h4 id="6-2-2-通过调用-router-addRoute-返回的回调"><a href="#6-2-2-通过调用-router-addRoute-返回的回调" class="headerlink" title="6.2.2 通过调用 router.addRoute() 返回的回调"></a>6.2.2 通过调用 <code>router.addRoute()</code> 返回的回调</h4><p>情境：路由没有名称，没法覆盖删除掉路由</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> removeRoute = router.addRoute(routeRecord)<br>removeRoute() <span class="hljs-comment">// 删除路由如果存在的话</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="6-2-3-通过使用-router-removeRoute-按名称删除路由"><a href="#6-2-3-通过使用-router-removeRoute-按名称删除路由" class="headerlink" title="6.2.3 通过使用 router.removeRoute() 按名称删除路由"></a>6.2.3 通过使用 <code>router.removeRoute()</code> 按名称删除路由</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">router.addRoute(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>, <span class="hljs-attr">component</span>: About &#125;)<br><span class="hljs-comment">// 删除路由</span><br>router.removeRoute(<span class="hljs-string">&#x27;about&#x27;</span>)<br></code></pre></td></tr></table></figure></blockquote><h3 id="6-3-添加嵌套路由"><a href="#6-3-添加嵌套路由" class="headerlink" title="6.3 添加嵌套路由"></a>6.3 添加嵌套路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">router.addRoute(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin&#x27;</span>,<br>  <span class="hljs-attr">component</span>: Admin,<br>  <span class="hljs-attr">children</span>: [&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;settings&#x27;</span>, <span class="hljs-attr">component</span>: AdminSettings &#125;],<br>&#125;)<br></code></pre></td></tr></table></figure><p>也可以将路由的<code> name</code>作为第一个参数传递给<code> router.addRoute()</code>，这样就可以有效的添加路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">router.addRoute(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin&#x27;</span>, <span class="hljs-attr">component</span>: Admin &#125;)<br>router.addRoute(<span class="hljs-string">&#x27;admin&#x27;</span>, &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;settings&#x27;</span>, <span class="hljs-attr">component</span>: AdminSettings &#125;)<br></code></pre></td></tr></table></figure><h3 id="6-4-查看现有路由"><a href="#6-4-查看现有路由" class="headerlink" title="6.4 查看现有路由"></a>6.4 查看现有路由</h3><ul><li><a href="https://router.vuejs.org/zh/api/#hasroute"><code>router.hasRoute()</code></a>：检查路由是否存在。</li><li><a href="https://router.vuejs.org/zh/api/#getroutes"><code>router.getRoutes()</code></a>：获取一个包含所有路由记录的数组。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-Router深入学习-二&quot;&gt;&lt;a href=&quot;#Vue-Router深入学习-二&quot; class=&quot;headerlink&quot; title=&quot;Vue Router深入学习(二)&quot;&gt;&lt;/a&gt;Vue Router深入学习(二)&lt;/h1&gt;&lt;p&gt;通过阅读文档，自己写一些</summary>
      
    
    
    
    <category term="前端" scheme="https://clz.vercel.app/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue Router" scheme="https://clz.vercel.app/tags/Vue-Router/"/>
    
  </entry>
  
  <entry>
    <title>详解JavaScript 执行机制</title>
    <link href="https://clz.vercel.app/2022/03/14/javascript-eventloop/"/>
    <id>https://clz.vercel.app/2022/03/14/javascript-eventloop/</id>
    <published>2022-03-14T04:27:51.000Z</published>
    <updated>2022-03-14T04:28:29.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="详解JavaScript-执行机制"><a href="#详解JavaScript-执行机制" class="headerlink" title="详解JavaScript 执行机制"></a>详解JavaScript 执行机制</h1><h2 id="热身"><a href="#热身" class="headerlink" title="热身"></a>热身</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 先打印1， 3， 2s后打印2 */</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>&#125;, <span class="hljs-number">1000</span>)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br><br><br><span class="hljs-comment">/* 先打印1， 3， 后打印2 */</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>第一个例子的话不难理解，定时器函数就是1s后才调用回调函数.</p><p>而第二个例子则可能优点小问题，JavaScript从上到下执行，那么遇到0s的计时器函数，就应该先输出2才对啊。这就是因为后面要提到的JavaScript执行机制导致的啦，因为setTimeout是异步任务。</p><h2 id="JavaScript是单线程"><a href="#JavaScript是单线程" class="headerlink" title="JavaScript是单线程"></a>JavaScript是单线程</h2><p>JavaScript的核心特征就是<strong>单线程</strong>，即同一时间只能做一件事。</p><p>为什么它是单线程呢？因为JavaScript作为浏览器脚本语言，它的主要用途就是与用户互动、操作DOM。既然如此，如果它不是单线程的话，假如一个线程在DOM节点上添加内容，同时另一个线程删除这个节点。可以看出，如果JavaScript不是单线程的话，那么将会导致同步问题。</p><br><h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><p>JavaScript是单线程语言，这也就导致了如果有一个任务等待很长的时间，这个时候就会导致阻塞，程序就会“卡死”，用户体验非常差。所以JavaScript需要异步任务。</p><br><p>那么，为什么JavsScript明明是单线程的，为什么能异步呢？这是因为浏览器是多线程的，通过事件循环<code> Event Loop</code>即可实现异步。</p><br><p>所有任务都可以分成两种。</p><ul><li><strong>同步任务</strong>：在主线程上排队执行的任务，只有前一个任务执行完，才能执行后一个任务</li><li><strong>异步任务</strong>：不进入主线程，而是进入任务队列的任务。<b style="color: red">当异步任务的触发条件满足时，异步任务才会进入任务队列，而当主线程空了，就会去任务队列中取异步任务到主线程中执行</b></li></ul><br><p><strong>常见异步任务</strong>：</p><ul><li>JS事件</li><li>AJAX请求</li><li>setTimeout和setInterval</li><li>Promise(<b style="color: red">Promise定义部分为同步任务，回调部分为异步任务</b>)</li></ul><br><h2 id="Event-Loop事件循环机制1"><a href="#Event-Loop事件循环机制1" class="headerlink" title="Event Loop事件循环机制1"></a>Event Loop事件循环机制1</h2><ol><li>所有同步任务进入主线程，而异步任务则是进入<code> Event Table</code>注册回调函数</li><li>当异步任务的<b style="color: red">触发条件满足</b>时，异步任务注册的回调函数将会从<code> Event Table</code>移入到任务队列<code> Event Queue</code>中</li><li>当主线程中的所有同步任务执行完毕后，系统就会去看看<code> Event Queue</code>中看看有没有回调函数，有的话就推到主线程中</li><li>主线程不断重复上面的步骤</li></ol><p><img src="https://s2.loli.net/2022/03/14/hANCZjRUYIsFrgf.jpg" alt="preview"></p><p>这就是<strong>Event Loop</strong></p><h2 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h2><p>异步任务又可以进行更精细的划分为宏任务和微任务。</p><h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><p>setTimeout、setInterval、requestAnimationFrame</p><ul><li>当宏任务队列中的任务全部都执行完之后，如果微任务队列不为空，则先执行微任务队列中的所有任务</li></ul><h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><p>Promise回调部分、process.nextTick</p><ul><li>在上一个宏任务队列执行完毕后如果有微任务就会执行微任务队列中的所有元素</li></ul><h2 id="Event-Loop事件循环机制2"><a href="#Event-Loop事件循环机制2" class="headerlink" title="Event Loop事件循环机制2"></a>Event Loop事件循环机制2</h2><ol><li>首先执行<code> script</code>下的同步任务</li><li>执行过程中，如果遇到异步任务，则需要把它放到对应的任务队列中(遇到宏任务，则放到宏任务中；遇到微任务，则放到微任务队列中)</li><li>同步任务执行完毕，查看微任务队列<ul><li>如果存在微任务，则将微任务队列全部执行(<b style="color: red">包括执行微任务中产生的新微任务</b>)</li><li>如果不存在微任务，则查看宏任务队列，执行第一个宏任务，宏任务执行完后，又看看微任务队列是否有任务，有的话，又先全部执行完微任务队列，重复上述操作，知道宏任务队列为空。</li></ul></li></ol><p><img src="https://s2.loli.net/2022/03/14/xzo2leVm165AkLd.png" alt="preview"></p><h3 id="练手1"><a href="#练手1" class="headerlink" title="练手1"></a>练手1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">3</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>    <span class="hljs-built_in">console</span>.log(i)<br>  &#125;<br>  resolve()<br>&#125;).then(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>)<br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>)<br></code></pre></td></tr></table></figure><p>打印顺序：1, 3, 4, 5, 7, 6, 2</p><br><p>解析：</p><ol><li>首先，程序从上往下走，直接输出1，遇到<code> setTimeout</code>后，把它放到宏任务队列中<ul><li>此时，宏任务队列中为<code>[setTimeout]</code>(<strong>这里用数组表示任务队列，左边代表先进入的任务队列</strong>)</li></ul></li><li>继续往下跑，遇到<code> Promise</code>，因为<b style="color: red">Promise定义部分为同步任务</b>，依次输出3, 4, 5，遇到<code> Promise.then()</code>，把它放到微任务队列中<ul><li>此时，宏任务队列为<code>[setTimeout]</code></li><li>此时，微任务队列为<code>[Promise.then()]</code></li></ul></li><li>输出7后，执行微任务队列中全部的任务，输出6， 再执行宏任务队列中的任务，输出2</li></ol><h3 id="练手2"><a href="#练手2" class="headerlink" title="练手2"></a>练手2</h3><p><strong>题目是本人自己想的，分析有误请见谅(希望评论指示)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>  <span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br>  &#125;)<br>&#125;, <span class="hljs-number">10</span>)<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>)<br>  resolve(<span class="hljs-number">5</span>)<br>&#125;).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(value)<br>  <span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>)<br>  &#125;)<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>)<br>  &#125;)<br>&#125;).then(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">8</span>)<br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">9</span>)<br></code></pre></td></tr></table></figure><p>输出顺序：1, 4, 9, 5, 6, 8, 7, 2, 3</p><br><p>解析：</p><ol><li><strong>先输出1</strong>， 遇到定时器，但是此时并不满足触发条件，所以2(后面还有其他的内容)只能存放在<code> Event Table</code>中<ul><li>此时，<code> Event Table</code>中有<code> [2(后面还有其他的内容)]</code>。<b style="color: red"><code> Event Table</code>中没有顺序，满足触发条件后，就会进入对应的任务队列</b></li></ul></li><li><strong>输出4</strong>，5(后面还有内容)进入微任务队列<ul><li>此时，<code> Event Table</code>中有<code> [2(后面还有其他的内容)]</code></li><li>微任务队列为[5(后面还有内容)]</li></ul></li><li>8进入微任务队列<ul><li>此时，<code> Event Table</code>中有<code> [2(后面还有其他的内容)]</code></li><li>微任务队列为[5(后面还有内容), 8]</li></ul></li><li><strong>输出9</strong>， 然后执行微任务中的任务<ol><li><strong>输出5</strong>， 6进入微任务队列, 7进入宏任务队列<ul><li>此时，<code> Event Table</code>中有<code> [2(后面还有其他的内容)]</code></li><li>微任务队列为<code>[6, 8]</code>，<b style="color: red">6会在8之前，因为6是微任务队列5里的微任务</b></li><li>宏任务队列为[7]</li></ul></li><li>依次执行完微任务队列中的任务，然后再执行宏任务队列的任务。<strong>输出顺序为6，8，7</strong></li></ol></li><li>10ms后，满足触发条件，进入宏任务队列，此时，宏任务队列和微任务队列中都没有任务，所以直接执行。<strong>输出2</strong>，3进入微任务队列，<strong>输出3</strong></li></ol><br><h2 id="async-await"><a href="#async-await" class="headerlink" title="async, await"></a>async, await</h2><blockquote><p>async/await本质上还是基于Promise的一些封装，而Promise是属于微任务的一种。所以在使用await关键字与Promise.then相同。<br>async函数在await之前的代码都是同步执行的，await之后的代码则是属于微任务(类似于Promise)<b style="color: red">await的表达式还是属于同步任务</b></p></blockquote><p>下面就继续练手</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>  <span class="hljs-keyword">await</span> async2()<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br>&#125;<br>async1()<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>)<br><br>  <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>)<br>    resolve(<span class="hljs-number">6</span>)<br>  &#125;).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value)<br>  &#125;)<br><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>)<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>输出顺序为：1, 2, 4, 5, 8, 6, 7, 3</p><br><p>分析：</p><ol><li><strong>先输出1</strong>，调用<code> async1</code>函数，因为<code> await</code>之前包括<code> await</code>的表达式都是同步任务，所以，<strong>输出2</strong>后，进入到<code> async2</code>函数中</li><li><strong>输出4</strong>，<code>await</code>一个<code> Promise</code>也是同理，<strong>输出5</strong>，6进入微任务队列，因为<b style="color: red">await之后的代码则是属于微任务(不包括await的表达式)</b>，所以7进入微任务队列<ul><li>此时，微任务队列为[6, 7]</li></ul></li><li>执行完<code> async2</code>函数后，回到<code> async1</code>函数中，之后的3进入微任务队列<ul><li>此时，微任务队列为[6, 7, 3]</li></ul></li><li><strong>输出8</strong>，执行微任务队列中的任务，<strong>输出6, 7, 3</strong></li></ol><br><p>参考链接：<br><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html">JavaScript 运行机制详解：再谈Event Loop</a><br><a href="https://zhuanlan.zhihu.com/p/379475079">彻底搞懂 JavaScript 执行机制</a><br><a href="https://juejin.cn/post/7020328988715270157">JavaScript之彻底理解EventLoop</a><br><a href="https://segmentfault.com/a/1190000012806637">10分钟理解JS引擎的执行机制</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;详解JavaScript-执行机制&quot;&gt;&lt;a href=&quot;#详解JavaScript-执行机制&quot; class=&quot;headerlink&quot; title=&quot;详解JavaScript 执行机制&quot;&gt;&lt;/a&gt;详解JavaScript 执行机制&lt;/h1&gt;&lt;h2 id=&quot;热身&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://clz.vercel.app/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://clz.vercel.app/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS实现渐变字</title>
    <link href="https://clz.vercel.app/2022/03/13/gradients-word/"/>
    <id>https://clz.vercel.app/2022/03/13/gradients-word/</id>
    <published>2022-03-13T04:04:06.000Z</published>
    <updated>2022-03-13T04:10:34.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS实现渐变字"><a href="#CSS实现渐变字" class="headerlink" title="CSS实现渐变字"></a>CSS实现渐变字</h1><p><img src="https://s2.loli.net/2022/03/13/AmGSj5UWvXZO6gw.png" alt="image-20220309200715875"></p><p>先来下前置知识。如果想速通，也可指直接到<a href="#jump">渐变字实现</a></p><h2 id="什么是渐变"><a href="#什么是渐变" class="headerlink" title="什么是渐变"></a>什么是渐变</h2><blockquote><p>CSS3 渐变（gradients）可以让你在两个或多个指定的颜色之间显示平稳的过渡。</p><p>以前，你必须使用图像来实现这些效果。但是，通过使用 CSS3 渐变（gradients），你可以减少下载的时间和宽带的使用。此外，渐变效果的元素在放大时看起来效果更好，因为渐变（gradient）是由浏览器生成的。</p></blockquote><h2 id="渐变类型"><a href="#渐变类型" class="headerlink" title="渐变类型"></a>渐变类型</h2><p>渐变主要有三种类型：线性渐变(<code> linear-gradient</code>)、径向渐变(<code> radial-gradient</code>)、圆锥渐变(<code> conic-gradient</code>)</p><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><p>线性渐变创建了一条沿直线前进的颜色带。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(direction, color-start, ..., color-end);<br></code></pre></td></tr></table></figure><ul><li>第一个参数为<strong>渐变方向</strong></li><li>第二个参数为<strong>渐变起点</strong></li><li>第三个参数为<strong>渐变终点</strong></li></ul><br><h4 id="基础线性渐变"><a href="#基础线性渐变" class="headerlink" title="基础线性渐变"></a>基础线性渐变</h4><p>使用<code> linear-gradient</code>函数，至少指定两种颜色即可(也被称为色标)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(red, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(red, blue, purple);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/R8zcYlsv2UZXOED.png" alt="image-20220309000309356"></p><h4 id="改变渐变方向"><a href="#改变渐变方向" class="headerlink" title="改变渐变方向"></a>改变渐变方向</h4><p>线性渐变的方向默认是从上到下，可以通过关键字<code> to</code>改变渐变方向。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, blue, purple);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to bottom right, red, blue, purple);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/xY7GDQJC35ef24R.png" alt="image-20220309000853385"></p><h4 id="设置渐变角度"><a href="#设置渐变角度" class="headerlink" title="设置渐变角度"></a>设置渐变角度</h4><p>上面说了，可以通过关键字<code> to</code>来改变角度，但是可选方向有较大限制。此时可以给渐变设置一个具体的角度。</p><p><img src="https://s2.loli.net/2022/03/13/CSpdiucQHfUPzsO.png" alt="image-20220309154501119"></p><p><strong>此图来自菜鸟教程</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span>,<br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">0deg</span>, red, blue, purple);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">60deg</span>, red, blue, purple);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">180deg</span>, red, blue, purple);<br>&#125;<br><br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(-<span class="hljs-number">60deg</span>, red, blue, purple);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/JQvosu2C3YmVD5z.png" alt="image-20220309001836218"></p><h4 id="颜色终止位置"><a href="#颜色终止位置" class="headerlink" title="颜色终止位置"></a>颜色终止位置</h4><p>可以给颜色设置像素值或百分比等其他数值来调整位置。没有明确设置的话，会自动计算</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">90deg</span>, red <span class="hljs-number">70%</span>, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">90deg</span>, red <span class="hljs-number">30%</span>, blue <span class="hljs-number">70%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">180deg</span>, red <span class="hljs-number">200px</span>, blue);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/ol751QfJuVFE4pR.png" alt="image-20220309083036610"></p><h4 id="创建实线"><a href="#创建实线" class="headerlink" title="创建实线"></a>创建实线</h4><p>根据颜色终止位置的知识点，很容易就能知道可以通过设置相邻的颜色的终止位置设置为相同即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red <span class="hljs-number">50%</span>, blue <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">135deg</span>, red <span class="hljs-number">33%</span>, blue <span class="hljs-number">33%</span>, blue <span class="hljs-number">66%</span>, purple <span class="hljs-number">66%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/vponawje52IUPA6.png" alt="image-20220309084146642"></p><h4 id="设置渐变中心点"><a href="#设置渐变中心点" class="headerlink" title="设置渐变中心点"></a>设置渐变中心点</h4><p>默认情况下，渐变会平滑地从一种颜色过渡到另一种颜色。但是可以设置一个值修改渐变的中心点。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, <span class="hljs-number">50%</span>, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, <span class="hljs-number">80%</span>, blue);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/RfwzUOsLdcDpEnl.png" alt="image-20220309084757700"></p><h4 id="创建色带和条纹"><a href="#创建色带和条纹" class="headerlink" title="创建色带和条纹"></a>创建色带和条纹</h4><p>要创建一个颜色的区域的话，一个颜色需要两个位置，这样子，这个颜色在两个颜色起止点都将会是完全饱和(即会保持该饱和度)。而和相邻的不同颜色还是正常的过渡。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red <span class="hljs-number">30%</span>, blue <span class="hljs-number">35%</span>, blue <span class="hljs-number">65%</span>, purple <span class="hljs-number">70%</span>);<br><br>  <span class="hljs-comment">/* 简洁写法 */</span><br>  <span class="hljs-comment">/* background: linear-gradient(to right, red 30%, blue 35% 65%, purple 70%);   */</span><br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red <span class="hljs-number">33%</span>, blue <span class="hljs-number">33%</span> <span class="hljs-number">66%</span>, purple <span class="hljs-number">66%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/EMTkJjYA6B38uc9.png" alt="image-20220309090648171"></p><h4 id="堆叠背景、渐变"><a href="#堆叠背景、渐变" class="headerlink" title="堆叠背景、渐变"></a>堆叠背景、渐变</h4><p>渐变支持透明度，因此可以堆叠多个背景。背景从上到下堆叠，第一个指定在顶部</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">480px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to left, transparent <span class="hljs-number">50%</span>, red),<br>    <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;https://s2.loli.net/2022/03/09/8OjEFf5GQy6iTcm.png&#x27;</span>) no-repeat;<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">800px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">480px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;https://s2.loli.net/2022/03/09/8OjEFf5GQy6iTcm.png&#x27;</span>) no-repeat,<br>    <span class="hljs-built_in">linear-gradient</span>(to left, transparent <span class="hljs-number">50%</span>, red);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">800px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/B3ObCwQDSXgoKVG.png" alt="image-20220309114848001"></p><br><p>同理：渐变也是可以和其他渐变叠加的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">480px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to left, transparent, red),<br>    <span class="hljs-built_in">linear-gradient</span>(to top, transparent, blue);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/m94dTQjl7fZE8au.png" alt="image-20220309122310300"></p><h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><p>径向渐变类似于线性渐变，只是它们从中心点向外辐射。可以指定该中心点在哪里。也可以把它们做成圆形或椭圆形。</p><p>语法：</p><p><code>radial-gradient(center, shape size, start-color, ..., last-color);</code></p><ul><li>第一个参数为<strong>渐变起点</strong></li><li>第二个参数为<strong>渐变形状</strong>和<strong>渐变大小</strong></li><li>第三个参数为<strong>渐变起点色标</strong></li><li>第四个参数为<strong>渐变终点色标</strong></li></ul><br><h4 id="基础径向渐变"><a href="#基础径向渐变" class="headerlink" title="基础径向渐变"></a>基础径向渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red, blue, purple);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/4Lg2QEa5jIsRM9J.png" alt="image-20220309123443478"></p><h4 id="颜色终止位置-1"><a href="#颜色终止位置-1" class="headerlink" title="颜色终止位置"></a>颜色终止位置</h4><p>和线性渐变一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/tyrkoNGT74EevBm.png" alt="image-20220309131245750"></p><h4 id="设置渐变中心"><a href="#设置渐变中心" class="headerlink" title="设置渐变中心"></a>设置渐变中心</h4><p>通过关键字<code>at</code>实现:  第一个参数是横轴，最左是0%, 最右是100%. 第二个参数是纵轴. </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-comment">/* 关键字at: 第一个参数是横轴，最左是0%, 最右是100%. 第二个参数是纵轴. */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(at <span class="hljs-number">0%</span> <span class="hljs-number">100%</span>, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(at <span class="hljs-number">100px</span> <span class="hljs-number">200px</span>, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/dFDMOVX4xnE8tGK.png" alt="image-20220309131916527"></p><h4 id="设置形状"><a href="#设置形状" class="headerlink" title="设置形状"></a>设置形状</h4><p>shape 参数定义了形状。可以是值 circle 或 ellipse。其中，circle 表示圆形，ellipse 表示椭圆形。默认值是 ellipse</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(circle, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(ellipse, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/nV4MxdHZIANbzD7.png" alt="image-20220309154415832"></p><p><b style="color: red">如果盒子是正方形，那么设置形状为椭圆可能不起效</b></p><h4 id="设置渐变大小"><a href="#设置渐变大小" class="headerlink" title="设置渐变大小"></a>设置渐变大小</h4><p>size 参数定义了渐变的大小。它可以是以下四个值：</p><ul><li><code>closest-side</code>，指定径向渐变的半径长度为<strong>从圆心到离圆心最近的边</strong></li><li><code>farthest-side</code>，指定径向渐变的半径长度为<strong>从圆心到离圆心最远的边</strong></li><li><code>closest-corner</code>，指定径向渐变的半径长度为<strong>从圆心到离圆心最近的角</strong></li><li><code>farthest-corner</code>，指定径向渐变的半径长度为<strong>从圆心到离圆心最远的角</strong></li></ul><p>默认值为<code>farthest-corner</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span>,<br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(closest-side, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(farthest-side, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(closest-corner, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(farthest-corner, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/UGvjcOD1HkRQySW.png" alt="image-20220309171611188"></p><h4 id="堆叠径向渐变"><a href="#堆叠径向渐变" class="headerlink" title="堆叠径向渐变"></a>堆叠径向渐变</h4><p>和线性渐变一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">background</span>:<br>    <span class="hljs-built_in">radial-gradient</span>(at <span class="hljs-number">50%</span> <span class="hljs-number">0</span>,<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">5</span>),<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)),<br>    <span class="hljs-built_in">radial-gradient</span>(at <span class="hljs-number">25%</span> <span class="hljs-number">75%</span>,<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, .<span class="hljs-number">5</span>),<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>)),<br>    <span class="hljs-built_in">radial-gradient</span>(at <span class="hljs-number">75%</span> <span class="hljs-number">75%</span>,<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">5</span>),<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/Ol4kNXsi9pQMyYh.png" alt="image-20220309174059818"></p><h3 id="重复渐变"><a href="#重复渐变" class="headerlink" title="重复渐变"></a>重复渐变</h3><blockquote><p><code>linear-gradient</code>和<code>radial-gradient</code>属性不支持自动重复色标。但是，<code>repeating-linear-gradient</code> 和<code>repeating-radial-gradient</code>属性可用于提供此功能。</p></blockquote><h4 id="重复线性渐变"><a href="#重复线性渐变" class="headerlink" title="重复线性渐变"></a>重复线性渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">repeating-linear-gradient</span>(<span class="hljs-number">45deg</span>, red <span class="hljs-number">0</span> <span class="hljs-number">20px</span>, blue <span class="hljs-number">20px</span> <span class="hljs-number">40px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/E98RIZTLbDrVWgu.png" alt="image-20220309175418709"></p><p>看多难受，勿贪看。</p><h4 id="重复径向渐变"><a href="#重复径向渐变" class="headerlink" title="重复径向渐变"></a>重复径向渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">repeating-radial-gradient</span>(red <span class="hljs-number">0</span> <span class="hljs-number">20px</span>, blue <span class="hljs-number">20px</span> <span class="hljs-number">40px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/6womYBMjpVqb591.png" alt="image-20220309175910740"></p><h2 id="background-clip属性"><a href="#background-clip属性" class="headerlink" title="background-clip属性"></a>background-clip属性</h2><p><code>background-clip</code> 设置元素的背景（背景图片或颜色）是否延伸到边框、内边距盒子、内容盒子下面。</p><ul><li><p>border-box：背景延伸至边框外沿（但是在边框下层）。</p></li><li><p>padding-box：背景延伸至内边距（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding"><code>padding</code></a>）外沿。不会绘制到边框处。</p></li><li><p>content-box：背景被裁剪至内容区（content box）外沿。</p></li><li><p>text：背景被裁剪成文字的前景色。（即文字的背景即为区块的背景，文字之外的区域都将被裁剪掉）</p></li></ul><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">40px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span>,<br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">20px</span> dashed blue;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background-clip</span>: padding-box;<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background-clip</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background-clip</span>: content-box;<br>&#125;<br><br><span class="hljs-selector-class">.box4</span> &#123;<br>  -webkit-<span class="hljs-attribute">background-clip</span>: text;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/oqR4vUajV9PhWdz.png" alt="image-20220309193146881"></p><p><b style="color: red">一眼望去，最后一个最特殊</b>，所以要加上前缀<code> -webkit</code>，好吧，原因并不是这样。网上有种说法是background-clip: text; 只兼容chrome,要想兼容其他浏览器就要用: <code>-webkit-background-clip: text;</code>。然而，我的chrome浏览器都需要<code>-webkit-background-clip: text;</code>才能实现。<b style="color: red">另外，文字的颜色应该设置为透明，否则会覆盖掉背景色。</b></p><h2 id="渐变字实现"><a href="#渐变字实现" class="headerlink" title="渐变字实现"></a><span id="jump">渐变字实现</span></h2><p>看到这里，基本就能实现渐变字啦。</p><p>代码如下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>渐变字实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">0%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, .<span class="hljs-number">8</span>) <span class="hljs-number">50%</span>, <span class="hljs-built_in">rgb</span>(<span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">128</span>) <span class="hljs-number">80%</span>);</span><br><span class="css">      -webkit-<span class="hljs-attribute">background-clip</span>: text;</span><br><span class="css">      <span class="hljs-attribute">color</span>: transparent;</span><br><span class="css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">    &#125;</span><br><span class="css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>赤蓝紫<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/BL9Zesh6qIzRw2g.png" alt="image-20220309200709951"></p><br /><p>参考链接：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Images/Using_CSS_gradients">使用 CSS 渐变 - CSS（层叠样式表） | MDN (mozilla.org)</a></p><p><a href="https://www.runoob.com/css3/css3-gradients.html">CSS3 渐变 | 菜鸟教程 </a></p><p><a href="https://blog.csdn.net/weixin_45337959/article/details/123004306">CSS3新特性概述_阿锐丫的博客-CSDN博客_css3新增特性</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS实现渐变字&quot;&gt;&lt;a href=&quot;#CSS实现渐变字&quot; class=&quot;headerlink&quot; title=&quot;CSS实现渐变字&quot;&gt;&lt;/a&gt;CSS实现渐变字&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/03/13/AmGSj</summary>
      
    
    
    
    <category term="前端" scheme="https://clz.vercel.app/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://clz.vercel.app/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue Router深入学习(一)</title>
    <link href="https://clz.vercel.app/2022/03/12/vue-router-deep-1/"/>
    <id>https://clz.vercel.app/2022/03/12/vue-router-deep-1/</id>
    <published>2022-03-12T03:34:18.000Z</published>
    <updated>2022-03-12T03:36:41.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-Router深入学习-一"><a href="#Vue-Router深入学习-一" class="headerlink" title="Vue Router深入学习(一)"></a>Vue Router深入学习(一)</h1><p>之前的笔记：<a href="https://clz.vercel.app/2021/10/15/vue-3/#toc-heading-9">Vue路由</a></p><p>通过阅读文档，自己写一些demo来加深自己的理解。(主要针对Vue3)</p><h2 id="1-动态路由匹配"><a href="#1-动态路由匹配" class="headerlink" title="1. 动态路由匹配"></a>1. 动态路由匹配</h2><h3 id="1-1-捕获所有路由-404路由"><a href="#1-1-捕获所有路由-404路由" class="headerlink" title="1.1 捕获所有路由(404路由)"></a>1.1 捕获所有路由(404路由)</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&gt;<span class="hljs-keyword">const</span> routes = [<br>&gt;<span class="hljs-comment">// 将匹配所有内容并将其放在 `$route.params.pathMatch` 下</span><br>&gt;&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/:pathMatch(.*)*&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;NotFound&#x27;</span>, <span class="hljs-attr">component</span>: NotFound &#125;,<br>&gt;<span class="hljs-comment">// 将匹配以 `/user-` 开头的所有内容，并将其放在 `$route.params.afterUser` 下</span><br>&gt;&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user-:afterUser(.*)&#x27;</span>, <span class="hljs-attr">component</span>: UserGeneric &#125;,<br>&gt;]<br></code></pre></td></tr></table></figure></blockquote><p><strong>使用</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span><br><br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/home&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user-:afterUser(.*)&#x27;</span>,<br>    <span class="hljs-comment">// 将匹配以 `/user-` 开头的所有内容，并将其放在 `$route.params.afterUser` 下</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/User.vue&#x27;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:pathMatch(.*)*&quot;</span>,<br>    <span class="hljs-comment">// 将匹配所有内容并将其放在 `$route.params.pathMatch` 下</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;NotFound&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/NotFound.vue&quot;</span>)<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p>app.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  &#123;&#123; route.params &#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> route = useRoute()</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/NpOPi2VMot3wJfh.png" alt="image-20220302183444782"></p><h2 id="2-路由的匹配语法"><a href="#2-路由的匹配语法" class="headerlink" title="2 路由的匹配语法"></a>2 路由的匹配语法</h2><p>主要是通过正则表达式的语法来实现</p><h3 id="2-1-在参数中自定义正则"><a href="#2-1-在参数中自定义正则" class="headerlink" title="2.1 在参数中自定义正则"></a>2.1 在参数中自定义正则</h3><p>语法：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br><span class="hljs-comment">// /:orderId -&gt; 仅匹配数字</span><br>&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/:orderId(\\d+)&#x27;</span> &#125;,<br><span class="hljs-comment">// /:productName -&gt; 匹配其他任何内容</span><br>&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/:productName&#x27;</span> &#125;,<br>]<br></code></pre></td></tr></table></figure></blockquote><p>实践：</p><p>路由配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span><br><br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/home&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:userid(\\d+)&quot;</span>,   <span class="hljs-comment">// 两个\是因为会被转义</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;UserId&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/UserId.vue&#x27;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:username&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;UserName&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/UserName.vue&#x27;</span>)<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/kU9syn7R3pvidCm.gif" alt="vue-router"></p><h3 id="2-2-可重复的参数"><a href="#2-2-可重复的参数" class="headerlink" title="2.2 可重复的参数"></a>2.2 可重复的参数</h3><p>可以使用<code> *</code>(0个或多个)和<code> +</code>(1个或多个)将参数标记为可重复</p><p>语法：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br><span class="hljs-comment">// /:chapters -&gt;  匹配 /one, /one/two, /one/two/three, 等</span><br>&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/:chapters+&#x27;</span> &#125;,<br><span class="hljs-comment">// /:chapters -&gt; 匹配 /, /one, /one/two, /one/two/three, 等</span><br>&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/:chapters*&#x27;</span> &#125;,<br>]<br></code></pre></td></tr></table></figure></blockquote><p>实践：</p><p><b style="color: red">*</b>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span><br><br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:chapters*&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Chapters&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Chapters.vue&quot;</span>)<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/EBaOnpYLSKrdQjz.gif" alt="vue-router"></p><p><b style="color: red">+</b>：</p><p><img src="https://s2.loli.net/2022/03/12/Yhb82rAMQsOk1vF.gif" alt="vue-router"></p><h3 id="2-3-可选参数"><a href="#2-3-可选参数" class="headerlink" title="2.3 可选参数"></a>2.3 可选参数</h3><p>使用 <code>?</code> 修饰符(0 个或 1 个)将一个参数标记为可选</p><p>语法：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br><span class="hljs-comment">// 匹配 /users 和 /users/posva</span><br>&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/users/:userId?&#x27;</span> &#125;,<br><span class="hljs-comment">// 匹配 /users 和 /users/42</span><br>&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/users/:userId(\\d+)?&#x27;</span> &#125;,<br>]<br></code></pre></td></tr></table></figure></blockquote><p>实践：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:userid(\\d+)?&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/User.vue&#x27;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/:pathMatch(.*)*&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;NotFound&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/NotFound.vue&#x27;</span>)<br>  &#125;,<br>]<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/TVynubejJ6OfsFa.png" alt="image-20220303103934235"></p><p>如果没加可选限制，那么访问/user时也会匹配到404去</p><p><img src="https://s2.loli.net/2022/03/12/cIr1pqQnsf4CeRE.png" alt="image-20220303104039713"></p><h2 id="3-编程式导航"><a href="#3-编程式导航" class="headerlink" title="3. 编程式导航"></a>3. 编程式导航</h2><p><strong><code>params</code> 不能与 <code>path</code> 一起使用，而应该使用<code>name</code>(命名路由)</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> route = useRoute()</span><br><span class="javascript">    <span class="hljs-keyword">const</span> router = useRouter()</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// // query编程式导航传参</span></span><br><span class="javascript">    <span class="hljs-comment">// router.push(&#123;</span></span><br><span class="javascript">    <span class="hljs-comment">//   path: &quot;/user/123&quot;,</span></span><br><span class="javascript">    <span class="hljs-comment">//   query: &#123;</span></span><br><span class="javascript">    <span class="hljs-comment">//     id: 666</span></span><br><span class="javascript">    <span class="hljs-comment">//   &#125;</span></span><br><span class="javascript">    <span class="hljs-comment">// &#125;)</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// params编程式导航传参</span></span><br><span class="javascript">    router.push(&#123;</span><br><span class="javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-comment">// 需要使用命名路由</span></span><br><span class="javascript">      <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">        <span class="hljs-attr">userid</span>: <span class="hljs-number">666</span></span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="3-1-替换当前位置"><a href="#3-1-替换当前位置" class="headerlink" title="3.1 替换当前位置"></a>3.1 替换当前位置</h3><p>不会向<code> history</code>添加新纪录，而是替换当前的记录</p><p><strong>声明式</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">replace</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>编程式</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">router.replace(&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">// 或</span><br><span class="hljs-comment">// router.push(&#123;</span><br><span class="hljs-comment">//   path: &#x27;/home&#x27;,</span><br><span class="hljs-comment">//   replace: true</span><br><span class="hljs-comment">// &#125;)</span><br></code></pre></td></tr></table></figure><h2 id="4-命名视图"><a href="#4-命名视图" class="headerlink" title="4. 命名视图"></a>4. 命名视图</h2><p>需要同时同级展示多个视图，而不是嵌套展示时，命名视图就能够派上用场了</p><p>首先路由配置需要使用<code> components</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;home&quot;</span>,<br>    <span class="hljs-attr">components</span>: &#123;<br>      <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./views/First.vue&quot;</span>),<br>      <span class="hljs-attr">second</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./views/Second.vue&quot;</span>),<br>      <span class="hljs-attr">third</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./views/Third.vue&quot;</span>)<br>    &#125;<br>  &#125;<br>];<br></code></pre></td></tr></table></figure><p>使用<code> router-view</code>时，添加上<code>name</code>属性即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;second&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;third&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例：</p><p><a href="https://codesandbox.io/s/ming-ming-shi-tu-8275iy">命名视图</a></p><h2 id="5-路由组件传参"><a href="#5-路由组件传参" class="headerlink" title="5. 路由组件传参"></a>5. 路由组件传参</h2><p>首先可通过<code> route</code>来实现路由传参，不过也可以通过<code> props</code>配置来开启<code> props传参</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    <span class="hljs-attr">props</span>: <span class="hljs-literal">true</span><br>  &#125;<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>通过<code> props</code>获取参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> props = defineProps([<span class="hljs-string">&quot;id&quot;</span>]);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/q7KwpDYVS4EzRkN.png" alt="image-20220303194719540"></p><p><a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html">更多</a></p><p>参考链接：<a href="https://router.vuejs.org/zh/">Vue Router</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-Router深入学习-一&quot;&gt;&lt;a href=&quot;#Vue-Router深入学习-一&quot; class=&quot;headerlink&quot; title=&quot;Vue Router深入学习(一)&quot;&gt;&lt;/a&gt;Vue Router深入学习(一)&lt;/h1&gt;&lt;p&gt;之前的笔记：&lt;a hre</summary>
      
    
    
    
    <category term="前端" scheme="https://clz.vercel.app/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue Router" scheme="https://clz.vercel.app/tags/Vue-Router/"/>
    
  </entry>
  
  <entry>
    <title>axios笔记(二)    深入了解axios</title>
    <link href="https://clz.vercel.app/2022/03/10/axios-2/"/>
    <id>https://clz.vercel.app/2022/03/10/axios-2/</id>
    <published>2022-03-10T15:20:20.000Z</published>
    <updated>2022-03-10T15:21:17.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios笔记-二-深入了解axios"><a href="#axios笔记-二-深入了解axios" class="headerlink" title="axios笔记(二)    深入了解axios"></a>axios笔记(二)    深入了解axios</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><ul><li>前端最流行的ajax请求库</li><li>react / vue官方推荐使用axios发送ajax请求</li><li><a href="https://github.com/axios/axios">axios仓库</a></li></ul><h2 id="2-axios特点"><a href="#2-axios特点" class="headerlink" title="2. axios特点"></a>2. axios特点</h2><ul><li>基于promise的异步ajax请求库</li><li>浏览器端 / node端都可以使用</li><li>支持请求 / 响应拦截器</li><li>支持请求取消</li><li>请求 / 响应数据转换</li><li>批量发送多个请求</li></ul><h2 id="3-axios常用语法"><a href="#3-axios常用语法" class="headerlink" title="3. axios常用语法"></a>3. axios常用语法</h2><ul><li>axios(config)：最本质的能发任何类型请求的方式</li><li>axios.get(url, config)：发get请求</li><li>axios.put(url, config)：发put请求</li></ul><ul><li>axios.defaults.xxx：请求的默认全局配置，如baseURL</li><li>axios.interceptors.request.use()：添加请求拦截器</li><li>axios.interceptors.response.use()：添加响应拦截器</li><li>axios.create(config)：新建一个 axios 实例(没有以下的功能)</li></ul><ul><li>axios.Cancel()：用于创建取消请求的错误对象</li><li>axios.CancelToken()：用于创建取消请求的token对象</li><li>axios.isCancel()：判断是否是一个取消请求的错误</li><li>axios.all(promises)：用于批量执行多个异步错误</li></ul><h3 id="3-1-axios简单使用"><a href="#3-1-axios简单使用" class="headerlink" title="3.1 axios简单使用"></a>3.1 axios简单使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testGet()&quot;</span>&gt;</span>GET请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testPost()&quot;</span>&gt;</span>POST请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    axios.defaults.baseURL = <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span> <span class="hljs-comment">// 设置请求的基址,后面就不需要写完整的路径了</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// GET请求: 服务端获取数据</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> testGet = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      axios(&#123;</span><br><span class="javascript">          <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/posts&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">id</span>: <span class="hljs-number">1</span></span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(response)</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="javascript">            alert(error.message)</span><br><span class="javascript">          &#125;)</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// POST请求: 服务端增加数据</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> testPost = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      axios(&#123;</span><br><span class="javascript">          <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/posts&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;axios&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;clz&#x27;</span></span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(response)</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="javascript">            alert(error.message)</span><br><span class="javascript">          &#125;)</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-axios-create-config"><a href="#3-2-axios-create-config" class="headerlink" title="3.2 axios.create(config)"></a>3.2 axios.create(config)</h3><p>简单使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> instance1 = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">// 使用instance发送请求</span><br>instance1(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/posts&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>可以发现用法和axios()很像，和下面一样效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.defaults.baseURL = <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span><br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/posts&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>那么，axios.create(config)肯定得有它的过人之处，否则，早就会被淘汰掉了。</p><p>先来一个情景：我们要向端口3000发送get请求，要向端口4000发送post请求</p><p><strong>通过axios.create(config)实现</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> instance1 = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">// 使用instance发送请求</span><br>instance1(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/posts&#x27;</span><br>&#125;)<br><br><span class="hljs-keyword">const</span> instance2 = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://localhost:4000&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">// 使用instance发送请求</span><br>instance2(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/posts&#x27;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>直接通过axios()实现</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.defaults.baseURL = <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span><br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/posts&#x27;</span><br>&#125;)<br><br>axios.defaults.baseURL = <span class="hljs-string">&#x27;http://localhost:4000&#x27;</span><br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/posts&#x27;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>可能有人会提出疑问：不是一样都能实现吗？但是，如果我需要最后在向端口3000再发送一次GET请求的话。</p><p>让我们再看一下代码：</p><p><strong>通过axios.create(config)实现</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> instance1 = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span><br>&#125;)<br><br>instance1(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/posts&#x27;</span><br>&#125;)<br><br><span class="hljs-keyword">const</span> instance2 = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://localhost:4000&#x27;</span><br>&#125;)<br><br>instance2(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/posts&#x27;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span><br>&#125;)<br><br>instance1(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/posts&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>直接通过axios()实现</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.defaults.baseURL = <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span><br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/posts&#x27;</span><br>&#125;)<br><br>axios.defaults.baseURL = <span class="hljs-string">&#x27;http://localhost:4000&#x27;</span><br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/posts&#x27;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span><br>&#125;)<br><br>axios.defaults.baseURL = <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span><br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/posts&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>比较上面的两种情况，就能发现**axios.create(config)<strong>的好处了。因为是新建axios实例，所以3000和4000两个端口分别使用的是不同的axios实例。所以能够很好地各司其责。而axios()则不能，仅仅只是简单地修改baseURL，都需要每次发送请求前重新修改，还是未考虑异步的情况。这么一看，在这种情况下，</strong>axios.create()**新建axios实例还是很香的。</p><h3 id="3-3-拦截器及运行流程"><a href="#3-3-拦截器及运行流程" class="headerlink" title="3.3 拦截器及运行流程"></a>3.3 拦截器及运行流程</h3><h4 id="3-3-1-添加请求拦截器"><a href="#3-3-1-添加请求拦截器" class="headerlink" title="3.3.1 添加请求拦截器"></a>3.3.1 添加请求拦截器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.interceptors.request.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) </span>&#123;<br>  <span class="hljs-comment">// Do something before request is sent</span><br>  <span class="hljs-keyword">return</span> config;<span class="hljs-comment">// 用于把任务串联起来</span><br>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>  <span class="hljs-comment">// Do something with request error</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);<span class="hljs-comment">// 一定要返回错误，不让之后能进入成功的流程</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="3-3-2-添加响应拦截器"><a href="#3-3-2-添加响应拦截器" class="headerlink" title="3.3.2 添加响应拦截器"></a>3.3.2 添加响应拦截器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.interceptors.response.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>    <span class="hljs-comment">// Any status code that lie within the range of 2xx cause this function to trigger</span><br>    <span class="hljs-comment">// Do something with response data</span><br>    <span class="hljs-keyword">return</span> response;<br>  &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>    <span class="hljs-comment">// Any status codes that falls outside the range of 2xx cause this function to trigger</span><br>    <span class="hljs-comment">// Do something with response error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);<br>  &#125;);<br></code></pre></td></tr></table></figure><h4 id="3-3-3-拦截器简单使用"><a href="#3-3-3-拦截器简单使用" class="headerlink" title="3.3.3 拦截器简单使用"></a>3.3.3 拦截器简单使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>拦截器简单使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 添加请求拦截器(回调函数，成功的必须返回config：用于把任务串联起来)</span></span><br><span class="javascript">    axios.interceptors.request.use(</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;request interceptor1 onResolved()&#x27;</span>)</span><br><span class="javascript">        <span class="hljs-keyword">return</span> config</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;request interceptor1 onRejected()&#x27;</span>)</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error) <span class="hljs-comment">// 一定要返回错误，不让之后能进入成功的流程</span></span><br><span class="javascript">      &#125;</span><br><span class="javascript">    )</span><br><span class="javascript">    axios.interceptors.request.use(</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;request interceptor2 onResolved()&#x27;</span>)</span><br><span class="javascript">        <span class="hljs-keyword">return</span> config</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;request interceptor2 onRejected()&#x27;</span>)</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error)</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    )</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 添加响应拦截器(回调函数，成功的必须返回response：用于把任务串联起来)</span></span><br><span class="javascript">    axios.interceptors.response.use(</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;response interceptor1 onResolved()&#x27;</span>)</span><br><span class="javascript">        <span class="hljs-keyword">return</span> response</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;response interceptor1 onRejected()&#x27;</span>)</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error)</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    )</span><br><span class="javascript">    axios.interceptors.response.use(</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;response interceptor2 onResolved()&#x27;</span>)</span><br><span class="javascript">        <span class="hljs-keyword">return</span> response</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;response interceptor2 onRejected()&#x27;</span>)</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error)</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    )</span><br><span class="javascript"></span><br><span class="javascript">    axios.get(<span class="hljs-string">&#x27;http://localhost:3000/posts&#x27;</span>)</span><br><span class="javascript">      .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;data: &#x27;</span>, response.data)</span><br><span class="javascript">      &#125;)</span><br><span class="javascript">      .catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;error: &#x27;</span>, error.message)</span><br><span class="javascript">      &#125;)</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/10/pRVPvKnuZqzJ3Uf.png" alt="image-20220301001039494"></p><p>先发送请求，再接收响应。所以会先触发请求拦截器，再触发响应拦截器，经过响应拦截器后才能得到数据</p><h4 id="3-3-4-取消请求"><a href="#3-3-4-取消请求" class="headerlink" title="3.3.4 取消请求"></a>3.3.4 取消请求</h4><p>express知识：<a href="https://clz.vercel.app/tags/Express/">Express笔记: clz</a></p><p>先搭建一个服务器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>)<br><br><span class="hljs-keyword">const</span> app = express()<br><br>app.use(cors())  <span class="hljs-comment">// 使用cors，允许跨域</span><br><br>app.use(express.json())   <span class="hljs-comment">// 解析Content-Type为 application/json格式的请求体</span><br><br>app.get(<span class="hljs-string">&#x27;/product1&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    res.send([<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;product1&#x27;</span><br>      &#125;<br>    ])<br>  &#125;, <span class="hljs-number">2000</span>)<br>&#125;)<br><br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>开启服务器，<code> node server.js</code>或<code> nodemon server.js</code>（支持热更新）</p><p><strong>取消请求的简单使用</strong>：</p><ol><li><p>先定义一个变量<code> cancel</code>，用于保存取消请求的函数</p></li><li><p>设置请求路径、请求方法时，还要设置属性<code> cancelToken</code>，值为一个<code> CancelToken对象</code>，CancelToken类的构造函数的参数是用于请求的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">cancelToken: <span class="hljs-keyword">new</span> axios.CancelToken(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123; <span class="hljs-comment">// c是用于取消当前请求的函数</span><br>  cancel = c <span class="hljs-comment">// 保存取消请求函数，用于之后取消请求</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>在需要请求的地方，调用保存的取消请求的函数</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>取消请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getProducts1()&quot;</span>&gt;</span>获取商品列表1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;cancelReq()&quot;</span>&gt;</span>取消请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/axios/dist/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> cancel <span class="hljs-comment">// 用于保存取消请求的函数</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> getProducts1 = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      axios(&#123;</span><br><span class="javascript">        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:3000/products1&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">cancelToken</span>: <span class="hljs-keyword">new</span> axios.CancelToken(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123; <span class="hljs-comment">// c是用于取消当前请求的函数</span></span><br><span class="javascript">          cancel = c <span class="hljs-comment">// 保存取消请求函数，用于之后取消请求</span></span><br><span class="javascript">        &#125;)</span><br><span class="javascript">      &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="javascript">        cancel = <span class="hljs-literal">null</span> <span class="hljs-comment">// 请求结束后保存的取消请求的函数不在需要保存</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;请求1成功: &#x27;</span>, response.data)</span><br><span class="javascript">      &#125;, <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="javascript">        cancel = <span class="hljs-literal">null</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;请求1失败: &#x27;</span>, error.message, error)</span><br><span class="javascript">      &#125;)</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> cancelReq = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cancel === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;</span><br><span class="javascript">        cancel(<span class="hljs-string">&#x27;强制取消请求1&#x27;</span>)</span><br><span class="javascript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;没有可以取消的请求&#x27;</span>)</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/10/mdoGr4ALWMKQDlc.gif" alt="axios"></p><p>另外，取消请求的函数可以传参，传的参数将变成请求失败时，Cancel对象的message(这个时候并不是Error对象)<br></p><p><strong>取消请求优化</strong>：发送请求前取消掉未完成的请求</p><p>在点击事件最前面添加判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cancel === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>  cancel(<span class="hljs-string">&#x27;取消请求&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>这里会出现一个问题，如果连续发送三个请求(在收到响应之前)，会发现，第三个请求没有取消掉前一个未完成的请求</p><p><img src="https://s2.loli.net/2022/03/10/356pd2mBaUYRKuw.gif" alt="axios"></p><p>为什么会这样呢？看下下面的流程图就可能可以迎刃而解了(有错可评论指出)</p><p><img src="https://s2.loli.net/2022/03/10/m8NGi7p5w6FyrjR.png" alt="image-20220301185301548"></p><p>为了解决上面的问题，这时候就需要使用<code> axios.isCancel(error)</code>判断是不是取消请求导致的请求失败，如果是，则此时不需要把<code> cancel</code>变为<code>null</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>  &lt;meta charset=&quot;UTF-8&quot;&gt;<br>  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>  &lt;title&gt;取消请求&lt;/title&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>  &lt;button onclick=&quot;getProducts1()&quot;&gt;获取商品列表1&lt;/button&gt;&lt;br&gt;<br><br>  &lt;button onclick=&quot;cancelReq()&quot;&gt;取消请求&lt;/button&gt;<br><br>  &lt;script src=&quot;./node_modules/axios/dist/axios.js&quot;&gt;&lt;/script&gt;<br>  &lt;script&gt;<br>    let cancel // 用于保存取消请求的函数<br><br>    const getProducts1 = () =&gt; &#123;<br>      if (typeof cancel === &#x27;function&#x27;) &#123;<br>        cancel(&#x27;取消请求&#x27;)<br>      &#125;<br><br>      axios(&#123;<br>        url: &#x27;http://localhost:3000/products1&#x27;,<br>        cancelToken: new axios.CancelToken((c) =&gt; &#123; // c是用于取消当前请求的函数<br>          cancel = c // 保存取消请求函数，用于之后取消请求<br>        &#125;)<br>      &#125;).then(response =&gt; &#123;<br>        cancel = null // 请求结束后保存的取消请求的函数不在需要保存<br>        console.log(&#x27;请求1成功: &#x27;, response.data)<br>      &#125;, error =&gt; &#123;<br>        if (axios.isCancel(error)) &#123;<br>          console.log(&#x27;请求1失败: &#x27;, error.message)<br>        &#125; else &#123;<br>          cancel = null<br>          console.log(&#x27;请求1失败: &#x27;, error.message)<br>        &#125;<br><br>      &#125;)<br>    &#125;<br><br>    const cancelReq = () =&gt; &#123;<br>      if (typeof cancel === &#x27;function&#x27;) &#123;<br>        cancel(&#x27;强制取消请求1&#x27;)<br>      &#125; else &#123;<br>        console.log(&#x27;没有可以取消的请求&#x27;)<br>      &#125;<br>    &#125;<br>  &lt;/script&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/10/kwRCNruZ1cSe8hs.png" alt="image-20220301185709307"></p><p><img src="https://s2.loli.net/2022/03/10/tqs5JXMgWpIhHwl.gif" alt="axios"></p><p><strong>通过拦截器再优化</strong>：增加代码可复用性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 请求拦截器</span><br>axios.interceptors.request.use(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cancel === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    cancel(<span class="hljs-string">&#x27;取消请求&#x27;</span>)<br>  &#125;<br>  config.cancelToken = <span class="hljs-keyword">new</span> axios.CancelToken(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123; <span class="hljs-comment">// c是用于取消当前请求的函数</span><br>    cancel = c <span class="hljs-comment">// 保存取消请求函数，用于之后取消请求</span><br>  &#125;)<br><br>  <span class="hljs-keyword">return</span> config<br>&#125;)<br><br><span class="hljs-comment">// 响应拦截器</span><br>axios.interceptors.response.use(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>  cancel = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">return</span> response<br>&#125;, <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (axios.isCancel(error)) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;请求取消: &#x27;</span>, error.message)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;) <span class="hljs-comment">// 中断Promise链。因为返回一个pending状态的对象时，后续的回调就不能执行了。</span><br>    <span class="hljs-comment">// 因为后面的回调函数只有在状态发生变化时才能执行。</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    cancel = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error) <span class="hljs-comment">// 将错误向下传递</span><br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>取消请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getProducts1()&quot;</span>&gt;</span>获取商品列表1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getProducts2()&quot;</span>&gt;</span>获取商品列表2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;cancelReq()&quot;</span>&gt;</span>取消请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/axios/dist/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 请求拦截器</span></span><br><span class="javascript">    axios.interceptors.request.use(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cancel === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;</span><br><span class="javascript">        cancel(<span class="hljs-string">&#x27;取消请求&#x27;</span>)</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      config.cancelToken = <span class="hljs-keyword">new</span> axios.CancelToken(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123; <span class="hljs-comment">// c是用于取消当前请求的函数</span></span><br><span class="javascript">        cancel = c <span class="hljs-comment">// 保存取消请求函数，用于之后取消请求</span></span><br><span class="javascript">      &#125;)</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> config</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 响应拦截器</span></span><br><span class="javascript">    axios.interceptors.response.use(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="javascript">      cancel = <span class="hljs-literal">null</span></span><br><span class="javascript">      <span class="hljs-keyword">return</span> response</span><br><span class="javascript">    &#125;, <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (axios.isCancel(error)) &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;请求取消: &#x27;</span>, error.message)</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;) <span class="hljs-comment">// 中断Promise链。因为返回一个pending状态的对象时，后续的回调就不能执行了。</span></span><br><span class="javascript">        <span class="hljs-comment">// 因为后面的回调函数只有在状态发生变化时才能执行。</span></span><br><span class="javascript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">        cancel = <span class="hljs-literal">null</span></span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error) <span class="hljs-comment">// 将错误向下传递</span></span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> cancel <span class="hljs-comment">// 用于保存取消请求的函数</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> getProducts1 = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      axios(&#123;</span><br><span class="javascript">        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:3000/products1&#x27;</span>,</span><br><span class="javascript">      &#125;).then(</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;请求1成功: &#x27;</span>, response.data)</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;请求1失败: &#x27;</span>, error.message)</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> getProducts2 = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      axios(&#123;</span><br><span class="javascript">        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:3000/products1&#x27;</span>,</span><br><span class="javascript">      &#125;).then(</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;请求2成功: &#x27;</span>, response.data)</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;请求2失败: &#x27;</span>, error.message)</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> cancelReq = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cancel === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;</span><br><span class="javascript">        cancel(<span class="hljs-string">&#x27;强制取消请求1&#x27;</span>)</span><br><span class="javascript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;没有可以取消的请求&#x27;</span>)</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;axios笔记-二-深入了解axios&quot;&gt;&lt;a href=&quot;#axios笔记-二-深入了解axios&quot; class=&quot;headerlink&quot; title=&quot;axios笔记(二)    深入了解axios&quot;&gt;&lt;/a&gt;axios笔记(二)    深入了解axios&lt;/</summary>
      
    
    
    
    <category term="前端" scheme="https://clz.vercel.app/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="axios" scheme="https://clz.vercel.app/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>axios笔记(一)    简单入门</title>
    <link href="https://clz.vercel.app/2022/03/10/axios-1/"/>
    <id>https://clz.vercel.app/2022/03/10/axios-1/</id>
    <published>2022-03-10T01:37:44.000Z</published>
    <updated>2022-03-10T15:21:04.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios笔记-一-简单入门"><a href="#axios笔记-一-简单入门" class="headerlink" title="axios笔记(一)    简单入门"></a>axios笔记(一)    简单入门</h1><p>又是前端必备知识的笔记。</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>之前的笔记：<a href="https://clz.vercel.app/2022/02/09/yc-http/">HTTP笔记 | 赤蓝紫 (clz.vercel.app)</a></p><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><blockquote><p>HTTP是一种能够获取如 HTML 这样的网络资源的<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Protocol">protocol</a>(通讯协议)。它是在 Web 上进行数据交换的基础，是一种 client-server 协议，也就是说，请求通常是由像浏览器这样的接受方发起的。一个完整的Web文档通常是由不同的子文档拼接而成的，像是文本、布局描述、图片、视频、脚本等等。</p></blockquote><p>文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview">HTTP</a></p><h3 id="2-HTTP请求交互的基本过程"><a href="#2-HTTP请求交互的基本过程" class="headerlink" title="2. HTTP请求交互的基本过程"></a>2. HTTP请求交互的基本过程</h3><p><img src="https://s2.loli.net/2022/03/10/xBUuGF69vNS78mI.png" alt="image-20220228094936947"></p><ol><li>浏览器向服务器发送请求报文</li><li>后台服务器接收到请求后，调度服务器应用处理请求，向浏览器返回HTTP响应(响应报文)</li><li>浏览器接收到响应，解析显示响应体 / 调用监视回调</li></ol><p>查看HTTP请求响应信息：DevTools Network面板</p><p><img src="https://s2.loli.net/2022/03/10/AZN5J6KEwiovrYu.png" alt="image-20220228095526783"></p><h3 id="3-API分类"><a href="#3-API分类" class="headerlink" title="3. API分类"></a>3. API分类</h3><h4 id="3-1-REST-API-restful"><a href="#3-1-REST-API-restful" class="headerlink" title="3.1 REST API(restful)"></a>3.1 REST API(restful)</h4><p><a href="https://clz.vercel.app/2022/02/28/RESTful/">RESTful接口设计规范</a></p><ul><li>发送请求进行CRUD哪个操作由请求方式来决定</li><li>同一个请求路径可以进行多个操作</li><li>请求方式会用到GET / POST / PUT / DELETE等</li></ul><h4 id="3-2-非REST-API-restless"><a href="#3-2-非REST-API-restless" class="headerlink" title="3.2 非REST API(restless)"></a>3.2 非REST API(restless)</h4><ul><li>请求方式不决定请求的CRUD操作(甚至可以用GET请求进行删除操作)</li><li>一个请求路径只对应一个操作</li><li>请求方式一般只有GET / POST</li></ul><h3 id="4-json-server搭建REST接口"><a href="#4-json-server搭建REST接口" class="headerlink" title="4. json-server搭建REST接口"></a>4. json-server搭建REST接口</h3><p><a href="https://github.com/typicode/json-server">json-server仓库</a></p><ol><li><p>全局安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g json-server<br></code></pre></td></tr></table></figure></li><li><p>新建<code> db.json</code>文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;posts&quot;</span>: [<br>    &#123; <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;json-server&quot;</span>, <span class="hljs-attr">&quot;author&quot;</span>: <span class="hljs-string">&quot;typicode&quot;</span> &#125;<br>  ],<br>  <span class="hljs-attr">&quot;comments&quot;</span>: [<br>    &#123; <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">&quot;body&quot;</span>: <span class="hljs-string">&quot;some comment&quot;</span>, <span class="hljs-attr">&quot;postId&quot;</span>: <span class="hljs-number">1</span> &#125;<br>  ],<br>  <span class="hljs-attr">&quot;profile&quot;</span>: &#123; <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;typicode&quot;</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>开启服务器(支持热更新)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">json-server --watch db.json<br></code></pre></td></tr></table></figure></li><li><p>打开<code> http://localhost:3000/</code>，可以在Resources中看到所有的接口</p><p><img src="https://s2.loli.net/2022/03/10/aMDp4T9JQ2ruvqV.png" alt="image-20220228105153779"></p></li><li><p>点击对应接口，可以获取对应数据</p><p><img src="https://s2.loli.net/2022/03/10/pg9WGrXK1HhINBm.png" alt="image-20220228105310624"></p></li><li><p>支持携带参数</p><ul><li><p>params参数</p><p><img src="https://s2.loli.net/2022/03/10/Ux4IzmPwQ3BFLuA.png" alt="image-20220228105412534"></p></li><li><p>query参数</p><p><img src="https://s2.loli.net/2022/03/10/j65GDoirbMQa27A.png" alt="image-20220228105530166"></p></li><li><p>两种参数区别：query参数是从所有的数据中筛选，所以最后是数组的形式；params参数则是特定查找的形式，所以最后是对象的形式</p></li></ul></li></ol><h2 id="使用axios请求REST接口"><a href="#使用axios请求REST接口" class="headerlink" title="使用axios请求REST接口"></a>使用axios请求REST接口</h2><p><b style="color:red">上面开启的服务器不要关</b></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testGet()&quot;</span>&gt;</span>GET请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testPost()&quot;</span>&gt;</span>POST请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testPut()&quot;</span>&gt;</span>PUT请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testDelete()&quot;</span>&gt;</span>DELETE请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> testGet = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      axios.get(<span class="hljs-string">&#x27;http://localhost:3000/posts&#x27;</span>, &#123;</span><br><span class="javascript">          <span class="hljs-comment">// params: &#123;</span></span><br><span class="javascript">          <span class="hljs-comment">//   id: 2</span></span><br><span class="javascript">          <span class="hljs-comment">// &#125;</span></span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;/posts get&#x27;</span>, response.data)</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> testPost = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      axios.post(<span class="hljs-string">&#x27;http://localhost:3000/posts&#x27;</span>, &#123;</span><br><span class="javascript">          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;czh&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;czh&#x27;</span></span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;/posts post&#x27;</span>, response.data)</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> testPut = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      axios.put(<span class="hljs-string">&#x27;http://localhost:3000/posts/3&#x27;</span>, &#123;</span><br><span class="javascript">          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;czh...&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;czh...&#x27;</span></span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;/posts put&#x27;</span>, response.data)</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> testDelete = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      axios.delete(<span class="hljs-string">&#x27;http://localhost:3000/posts/3&#x27;</span>)</span><br><span class="javascript">        .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;/posts delete&#x27;</span>, response.data)</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="XHR"><a href="#XHR" class="headerlink" title="XHR"></a>XHR</h2><h3 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><blockquote><p><code>XMLHttpRequest</code>（XHR）对象用于与服务器交互。通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。<code>XMLHttpRequest</code> 在 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/AJAX">AJAX</a> 编程中被大量使用。</p></blockquote><p>文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a></p><h3 id="2-ajax请求与一般的http请求"><a href="#2-ajax请求与一般的http请求" class="headerlink" title="2. ajax请求与一般的http请求"></a>2. ajax请求与一般的http请求</h3><ul><li><p>ajax请求是一种特殊的http请求</p></li><li><p>对服务器端来说，没有任何请求，区别在于<strong>浏览器端</strong>(ajax请求有专门的ajax引擎帮忙发送)</p></li><li><p>浏览器端发送请求，只有XHR或fetch发出的才是ajax请求，其他的都不是ajax请求</p></li><li><p>浏览器端接收到响应(一般请求浏览器会自动更新页面，而ajax请求需要手动更新)</p><ul><li><p>一般请求：浏览器会直接显示响应体数据，即刷新/跳转页面</p></li><li><p>ajax请求：浏览器不会对页面进行任何更新操作，而只是调用监视的回调函数并传入响应相关数据</p></li></ul></li></ul><h3 id="3-常用API"><a href="#3-常用API" class="headerlink" title="3. 常用API"></a>3. 常用API</h3><ul><li><p>XMLHttpRequest()：创建XHR对象的构造函数</p></li><li><p>status：响应状态码，如200、404等</p></li><li><p>statusText：响应状态文本</p></li><li><p>readyState：标识请求状态的只读属性</p><p>​    0: 初始</p><p>​    1: open()之后</p><p>​    2: send()之后</p><p>​    3: 请求中</p><p>​    4: 请求完成</p></li><li><p>onreadystatechange：绑定readyState改变的监听</p></li><li><p>responseType：指定响应数据类型</p></li><li><p>timeout：指定请求超时时间，默认为0，表示没有限制</p></li><li><p>open()：初始化一个请求。参数为<code> (method, url [, async])</code></p></li><li><p>send(data)：发送请求</p></li><li><p>setRequestHeader(name, value)：设置请求头</p></li><li><p>getResponseHeader(name)：获取指定名称的响应头值</p></li></ul><h2 id="封装axios"><a href="#封装axios" class="headerlink" title="封装axios"></a>封装axios</h2><p>axios</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">axios</span>(<span class="hljs-params">&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">  url,</span></span><br><span class="hljs-params"><span class="hljs-function">  method = <span class="hljs-string">&#x27;GET&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  params = &#123;&#125;,</span></span><br><span class="hljs-params"><span class="hljs-function">  data = &#123;&#125;</span></span><br><span class="hljs-params"><span class="hljs-function">&#125;</span>) </span>&#123;<br>  <span class="hljs-comment">// 返回Promise对象</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 处理method大小写</span><br>    method = method.toUpperCase()<br><br>    <span class="hljs-comment">// 把请求参数拼接到url中</span><br>    <span class="hljs-keyword">let</span> queryString = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-built_in">Object</span>.keys(params).forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>      queryString += <span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;params[key]&#125;</span>&amp;`</span><br>    &#125;)<br><br>    <span class="hljs-keyword">if</span> (queryString) &#123; <span class="hljs-comment">// 有查询参数,需要把最后的&amp;去掉</span><br>      queryString = queryString.substring(<span class="hljs-number">0</span>, queryString.length - <span class="hljs-number">1</span>)<br>      url += <span class="hljs-string">`?<span class="hljs-subst">$&#123;queryString&#125;</span>`</span><br>    &#125;<br><br>    <span class="hljs-comment">// 1. 执行异步ajax请求</span><br>    <span class="hljs-comment">// 1.1 创建xhr对象</span><br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br><br>    <span class="hljs-comment">// 1.2 打开连接，初始化请求</span><br>    xhr.open(method, url, <span class="hljs-literal">true</span>) <span class="hljs-comment">// 第三个参数表示是否异步执行操作，默认为true。如果值为false，send()方法直到收到答复前不会返回。</span><br><br>    <span class="hljs-comment">// 1.3 发送请求</span><br>    <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&#x27;GET&#x27;</span> || method === <span class="hljs-string">&#x27;DELETE&#x27;</span>) &#123;<br>      xhr.send()<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&#x27;POST&#x27;</span> || method === <span class="hljs-string">&#x27;PUT&#x27;</span>) &#123;<br>      xhr.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span>) <span class="hljs-comment">// 设置请求头，通知服务器请求体的格式是json</span><br>      xhr.send(<span class="hljs-built_in">JSON</span>.stringify(data)) <span class="hljs-comment">// 发送json格式请求体参数</span><br>    &#125;<br><br>    <span class="hljs-comment">// 1.4 绑定状态的监听,监听的定义能放在后面是因为这里是异步发送请求</span><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (xhr.readyState !== <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">return</span><br>      &#125;<br><br>      <span class="hljs-keyword">const</span> &#123;<br>        status, <span class="hljs-comment">// 响应状态在[200, 300)之间代表成功,否则失败</span><br>        statusText<br>      &#125; = xhr<br><br>      <span class="hljs-comment">// 2.1 如果请求成功，调用resolve()</span><br>      <span class="hljs-keyword">if</span> (status &gt;= <span class="hljs-number">200</span> &amp;&amp; status &lt; <span class="hljs-number">300</span>) &#123;<br>        <span class="hljs-keyword">const</span> response = &#123;<br>          <span class="hljs-attr">data</span>: <span class="hljs-built_in">JSON</span>.parse(xhr.response), <span class="hljs-comment">// 把响应转化成JSON对象</span><br>          status,<br>          statusText<br>        &#125;<br>        resolve(response)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 2.2 如果请求失败，调用reject()</span><br>        reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;request error status is &#x27;</span> + status))<br>      &#125;<br><br>    &#125;<br><br>  &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// GET请求: 服务端获取数据</span><br><span class="hljs-keyword">const</span> testGet = <span class="hljs-function">() =&gt;</span> &#123;<br>  axios(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:3000/posts&#x27;</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>      <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span><br>      &#125;<br>    &#125;)<br>    .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(response)<br>      &#125;,<br>      <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        alert(error.message)<br>      &#125;)<br>&#125;<br><br><span class="hljs-comment">// POST请求: 服务端增加数据</span><br><span class="hljs-keyword">const</span> testPost = <span class="hljs-function">() =&gt;</span> &#123;<br>  axios(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:3000/posts&#x27;</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>      <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;axios&#x27;</span>,<br>        <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;clz&#x27;</span><br>      &#125;<br>    &#125;)<br>    .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(response)<br>      &#125;,<br>      <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        alert(error.message)<br>      &#125;)<br>&#125;<br><br><span class="hljs-comment">// PUT请求: 服务端更新数据</span><br><span class="hljs-keyword">const</span> testPut = <span class="hljs-function">() =&gt;</span> &#123;<br>  axios(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:3000/posts/1&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;put&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;axios!!!!!&#x27;</span>,<br>      <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;clz!!!!!!&#x27;</span><br>    &#125;<br>  &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(response)<br>  &#125;, <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    alert(error.message)<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// DELETE请求: 服务端删除数据</span><br><span class="hljs-keyword">const</span> testDelete = <span class="hljs-function">() =&gt;</span> &#123;<br>  axios(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:3000/posts/2&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;delete&#x27;</span><br>  &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(response)<br>  &#125;, <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    alert(error.message)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><b style="color: red">发送POST、PUT等需要修改服务器端的资源的请求时会发送OPTIONS请求，查看是否能够修改，即预请求。而GET请求不需要，因为GET请求不需要修改服务器上的资源</b></p><p><img src="https://s2.loli.net/2022/03/10/XfniK4GOZEIRcVs.png" alt="image-20220228151239576"></p><p>学习链接：<a href="https://www.bilibili.com/video/BV1NJ41197u6">尚硅谷_axios核心技术</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;axios笔记-一-简单入门&quot;&gt;&lt;a href=&quot;#axios笔记-一-简单入门&quot; class=&quot;headerlink&quot; title=&quot;axios笔记(一)    简单入门&quot;&gt;&lt;/a&gt;axios笔记(一)    简单入门&lt;/h1&gt;&lt;p&gt;又是前端必备知识的笔记。&lt;/</summary>
      
    
    
    
    <category term="前端" scheme="https://clz.vercel.app/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="axios" scheme="https://clz.vercel.app/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>params编程式导航踩坑</title>
    <link href="https://clz.vercel.app/2022/03/08/vue-router-proplem-2/"/>
    <id>https://clz.vercel.app/2022/03/08/vue-router-proplem-2/</id>
    <published>2022-03-08T08:14:53.000Z</published>
    <updated>2022-03-08T08:32:17.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="params编程式导航踩坑"><a href="#params编程式导航踩坑" class="headerlink" title="params编程式导航踩坑"></a>params编程式导航踩坑</h1><h2 id="1-params-不能与-path-一起使用"><a href="#1-params-不能与-path-一起使用" class="headerlink" title="1. params 不能与 path 一起使用"></a>1. <code>params</code> 不能与 <code>path</code> 一起使用</h2><p>先来一下路由配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span><br><br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:userid&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/User.vue&#x27;</span>),<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p>先来一下：query编程式导航</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> router = useRouter()</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// query编程式导航传参</span></span><br><span class="javascript">    router.push(&#123;</span><br><span class="javascript">      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/123&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">query</span>: &#123;</span><br><span class="javascript">        <span class="hljs-attr">userid</span>: <span class="hljs-number">666</span></span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/lJkUbH12vCRnus6.png" alt="image-20220303114728772"></p><p>一切正常</p><p>然后，换成params编程式导航</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> router = useRouter()</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// params编程式导航传参</span></span><br><span class="javascript">    router.push(&#123;</span><br><span class="javascript">      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">        <span class="hljs-attr">userid</span>: <span class="hljs-number">123</span></span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后跳转到<a href="http://localhost:3000/#/user%EF%BC%8C%E6%B2%A1%E6%9C%89%E5%90%8E%E9%9D%A2%E7%9A%84params%E5%8F%82%E6%95%B0%EF%BC%8C%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA">http://localhost:3000/#/user，没有后面的params参数，这是因为</a><b style="color: red"><code>params</code> 不能与 <code>path</code> 一起使用</b>，一起使用后，后面的params参数将不再起作用。</p><h2 id="2-需要和命名路由搭配使用"><a href="#2-需要和命名路由搭配使用" class="headerlink" title="2. 需要和命名路由搭配使用"></a>2. 需要和命名路由搭配使用</h2><p>先说一下，一开始，本人还以为<code>name</code>就是类似<code>path</code>的用法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> router = useRouter()</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// params编程式导航传参</span></span><br><span class="javascript">    router.push(&#123;</span><br><span class="javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;user&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">        <span class="hljs-attr">userid</span>: <span class="hljs-number">123</span></span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后报错</p><p><img src="https://s2.loli.net/2022/03/08/BUNkO9yWdXK4JEe.png" alt="image-20220303115736810"></p><p>通过查阅资料后，才知道，这里的name属性就是命名路由名称。</p><p>修改路由的配置：变成命名路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span><br><br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:userid&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;user&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/User.vue&#x27;</span>),<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/YI82MDXWtHruqwy.png" alt="image-20220303120329957"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;params编程式导航踩坑&quot;&gt;&lt;a href=&quot;#params编程式导航踩坑&quot; class=&quot;headerlink&quot; title=&quot;params编程式导航踩坑&quot;&gt;&lt;/a&gt;params编程式导航踩坑&lt;/h1&gt;&lt;h2 id=&quot;1-params-不能与-path-一起使</summary>
      
    
    
    
    <category term="前端" scheme="https://clz.vercel.app/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://clz.vercel.app/tags/Vue/"/>
    
    <category term="Vue3" scheme="https://clz.vercel.app/tags/Vue3/"/>
    
    <category term="Vue-router" scheme="https://clz.vercel.app/tags/Vue-router/"/>
    
  </entry>
  
  <entry>
    <title>刷新页面后this.$route.params 为空</title>
    <link href="https://clz.vercel.app/2022/03/08/vue-router-proplem-1/"/>
    <id>https://clz.vercel.app/2022/03/08/vue-router-proplem-1/</id>
    <published>2022-03-08T08:14:47.000Z</published>
    <updated>2022-03-08T08:21:37.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="刷新页面后this-route-params-为空"><a href="#刷新页面后this-route-params-为空" class="headerlink" title="刷新页面后this.$route.params 为空"></a>刷新页面后this.$route.params 为空</h1><p>深度学习<code> vue-router</code>时，按官方文档的教程看下来，结果发现刷新页面后，打印的<code>this.$route.params </code>为空</p><h2 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h2><h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>路由配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br>Vue.use(VueRouter)<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/home&#x27;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>)<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>)<br>    &#125;<br>  ]<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$route.params)</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/FWeYxVU8bqB29yJ.png" alt="image-20220302152502581"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="1-在导航守卫中获取"><a href="#1-在导航守卫中获取" class="headerlink" title="1. 在导航守卫中获取"></a>1. 在导航守卫中获取</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(to.params)<br>  next()<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/dqoSPzYgaDeFAUy.gif" alt="vue-router2"></p><h4 id="2-在跳转后的页面获取，而不是在app-vue中获取"><a href="#2-在跳转后的页面获取，而不是在app-vue中获取" class="headerlink" title="2. 在跳转后的页面获取，而不是在app.vue中获取"></a>2. 在跳转后的页面获取，而不是在app.vue中获取</h4><p>User.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$route.params)</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">color</span>: purple;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-在-updated生命周期钩子中获取-可能实际开发用不上"><a href="#3-在-updated生命周期钩子中获取-可能实际开发用不上" class="headerlink" title="3. 在 updated生命周期钩子中获取(可能实际开发用不上)"></a>3. 在<code> updated</code>生命周期钩子中获取(可能实际开发用不上)</h4><p>为什么会出这个问题呢？</p><p>以下是个人现阶段的理解。(可能有误)</p><p>结论：<b style="Color: red">此时打印<code> this.$route.params</code>应该在<code> updated</code>生命周期钩子中打印</b></p><p>首先先在<code> created</code>和<code> mounted</code>钩子中打印<code> this.$route</code>看一下情况。</p><p><img src="https://s2.loli.net/2022/03/08/pOfQMSabTkjCt3Z.png" alt="image-20220302153712535"></p><p>发现，信息不符合。猜测可能是组件创建、渲染阶段时，路由还没有跳转，所以打印的信息不对。路由跳转后，修改数据<code> this.$route</code>是在数据更新阶段，所以获取最新的路由信息应该在<code> updated</code>中获取。</p><p><img src="https://s2.loli.net/2022/03/08/oBSyKRIdsVfhw83.png" alt="image-20220302154158334"></p><p>问题解决</p><h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><p>首先，路由配置也不太一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span><br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/home&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>)<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="1-在导航守卫中获取-1"><a href="#1-在导航守卫中获取-1" class="headerlink" title="1. 在导航守卫中获取"></a>1. 在导航守卫中获取</h4><p>和Vue2的相同。</p><h4 id="2-在跳转后的页面获取，而不是在app-vue中获取-1"><a href="#2-在跳转后的页面获取，而不是在app-vue中获取-1" class="headerlink" title="2. 在跳转后的页面获取，而不是在app.vue中获取"></a>2. 在跳转后的页面获取，而不是在app.vue中获取</h4><p><strong>这个在开发中用到的可能性还大一些。毕竟开发时每个页面都需要路由信息的很少，都需要的话就可以采用上面在导航守卫中获取的做法</strong></p><p>User.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; onUpdated &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> route = useRoute()</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(route.params)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">color</span>: purple;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果和上图一样</p><h4 id="3-强行实现-不建议"><a href="#3-强行实现-不建议" class="headerlink" title="3. 强行实现(不建议)"></a>3. 强行实现(不建议)</h4><p>Vue3中，针对Vue2的解决方案3不再有效。在Vue3中，路由的变化不再属于是数据的更新，所以也不会触发<code> onUpdated</code>钩子</p><p>app.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; onUpdated &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> route = useRoute()</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// console.log(route.params)</span></span><br><span class="javascript"></span><br><span class="javascript">onUpdated(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(route.params)</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/6mokixOAbLd2PrR.gif" alt="vue-router"></p><p>那么怎么解决呢？</p><br /><p>这个只是个人学习时，想到的暴力法。(现在也只会这个暴力法，开发时应该是嗤之以鼻的做法)</p><p>app.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; onUpdated &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> route = useRoute()</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(route.params)</span><br><span class="javascript">&#125;, <span class="hljs-number">200</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>效果还是同上</p><h2 id="最后的坑-又能解释的希望评论告知"><a href="#最后的坑-又能解释的希望评论告知" class="headerlink" title="最后的坑(又能解释的希望评论告知)"></a>最后的坑(又能解释的希望评论告知)</h2><p>app.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  params: &#123;&#123; route.params &#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; onUpdated &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> route = useRoute()</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(route)</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(route.params)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/v7SWpIYkjZx9FCV.png" alt="image-20220308160130992"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;刷新页面后this-route-params-为空&quot;&gt;&lt;a href=&quot;#刷新页面后this-route-params-为空&quot; class=&quot;headerlink&quot; title=&quot;刷新页面后this.$route.params 为空&quot;&gt;&lt;/a&gt;刷新页面后this.</summary>
      
    
    
    
    <category term="前端" scheme="https://clz.vercel.app/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://clz.vercel.app/tags/Vue/"/>
    
    <category term="Vue3" scheme="https://clz.vercel.app/tags/Vue3/"/>
    
    <category term="Vue-router" scheme="https://clz.vercel.app/tags/Vue-router/"/>
    
  </entry>
  
  <entry>
    <title>LeanCloud国际版遇到的问题及解决方案</title>
    <link href="https://clz.vercel.app/2022/03/07/valine-problem/"/>
    <id>https://clz.vercel.app/2022/03/07/valine-problem/</id>
    <published>2022-03-07T04:13:09.000Z</published>
    <updated>2022-03-07T04:42:05.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeanCloud国际版遇到的问题及解决方案"><a href="#LeanCloud国际版遇到的问题及解决方案" class="headerlink" title="LeanCloud国际版遇到的问题及解决方案"></a>LeanCloud国际版遇到的问题及解决方案</h1><p>首先，为什么要用<code> LeanCloud国际版</code>呢？就是因为设置邮件提醒功能时，需要绑定访问域名来唤醒leancloud，而国际版提供免费域名，国内的需要备案域名。</p><p><img src="https://s2.loli.net/2022/03/07/52vX34VkWodfMUj.png" alt="image-20220307123838756"></p><p><br />只能说弄这个博客，真的是非常能感受到迭代的快(虽然遇到的不是技术点上的)：</p><ul><li>搭建博客时，刚好遇上github默认分支从<code> master</code>变为<code> master</code>，然后网上的教程都还是<code> master</code></li><li>这次的问题也是因为us.avoscloud.com这个域名被弃用了，然而报错提示的确实跨域问题</li></ul><p><img src="https://s2.loli.net/2022/03/07/zpYQtBL8f2Fq5ng.png" alt="img"></p><p>这一次属于是长教训了，不看公告，一个月前的事情现在才知道</p><p><img src="https://s2.loli.net/2022/03/07/gLp8f4vniyNwt6D.png" alt="image-20220307122010510"></p><p>最后通过到leancloud社区直接询问，通过<a href="https://forum.leancloud.cn/users/shifuchen">shifuchen大佬</a>的回答解决问题</p><p>那么怎么解决这个问题呢？</p><ul><li><p>首先，登录<a href="https://console.leancloud.app/apps">LeanCloud</a>，进入自己的应用。然后进入<code> 设置 -&gt; 应用凭证</code>，复制<strong>REST API 服务器地址</strong></p><p><img src="https://s2.loli.net/2022/03/07/jFlm6HG42sVtfwM.png" alt="image-20220307122544336"></p><p><img src="https://s2.loli.net/2022/03/07/owuWH5fLhX9T7nm.png" alt="image-20220307122650723"></p></li><li><p>然后，回到你的博客的主题文件夹中，找到使用valine部分，<a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a>主题的就在<code> layout \ _partial \ valine.ejs</code>中</p><p><img src="https://s2.loli.net/2022/03/07/uaCetFqbYPLDXpf.png" alt="image-20220307123020590"></p></li><li><p>新建<code>Valine</code>实例时，添加<code> serverURLs</code>属性，值为刚刚复制的地址</p><p><img src="https://s2.loli.net/2022/03/07/xJrIPAlsfVc18i5.png" alt="image-20220307123226134"></p></li></ul><p>成功：<a href="https://clz.vercel.app/contact/">contact | 赤蓝紫</a></p><p><img src="https://s2.loli.net/2022/03/07/zlyf1ZWcmFYhNOX.png" alt="image-20220307123328264"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeanCloud国际版遇到的问题及解决方案&quot;&gt;&lt;a href=&quot;#LeanCloud国际版遇到的问题及解决方案&quot; class=&quot;headerlink&quot; title=&quot;LeanCloud国际版遇到的问题及解决方案&quot;&gt;&lt;/a&gt;LeanCloud国际版遇到的问题及解决</summary>
      
    
    
    
    <category term="小技能" scheme="https://clz.vercel.app/categories/%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="blog" scheme="https://clz.vercel.app/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(二)    JavaScript</title>
    <link href="https://clz.vercel.app/2022/03/06/leetcode-2/"/>
    <id>https://clz.vercel.app/2022/03/06/leetcode-2/</id>
    <published>2022-03-06T12:39:16.000Z</published>
    <updated>2022-03-09T16:13:13.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode刷题-二-JavaScript"><a href="#LeetCode刷题-二-JavaScript" class="headerlink" title="LeetCode刷题(二)    JavaScript"></a>LeetCode刷题(二)    JavaScript</h1><h2 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/description/">合并两个有序链表</a></h2><p>通过递归实现：判断list1和list2那个链表的头结点的值更小，然后递归下去决定下一个添加到结果的节点，当两个链表中有为空时，递归结束。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> mergeTwoLists = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">list1, list2</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (list1 === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> list2<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (list2 === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> list1<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (list1.val &lt; list2.val) &#123;<br>    list1.next = mergeTwoLists(list1.next, list2)<br>    <span class="hljs-keyword">return</span> list1<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    list2.next = mergeTwoLists(list1, list2.next)<br>    <span class="hljs-keyword">return</span> list2<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="删除有序数组中的重复项"><a href="#删除有序数组中的重复项" class="headerlink" title="删除有序数组中的重复项"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/description/">删除有序数组中的重复项</a></h2><h3 id="1-简单版本"><a href="#1-简单版本" class="headerlink" title="1. 简单版本"></a>1. 简单版本</h3><p>遍历一遍，通过<code> indexOf</code>和<code> lastIndexOf</code>来判断是否有重复项，有的话，则不相等。然后通过<code> splice</code>删除掉重复项，删除后，因为少一位了，此时的索引也需要-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number[]&#125;</span> <span class="hljs-variable">nums</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> removeDuplicates = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (nums.indexOf(nums[i]) !== nums.lastIndexOf(nums[i])) &#123;<br>      nums.splice(i, <span class="hljs-number">1</span>)<br>      i--<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> nums.length<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2-双指针法"><a href="#2-双指针法" class="headerlink" title="2. 双指针法"></a>2. 双指针法</h3><p>定义两个指针fast和slow，起始都为1(因为0时不可能会有重复)，其中fast指针一直在走，而当<code> nums[fast]</code>不等于<code> nums[fast - 1]</code>时，即是不重复项，那么此时就让<code> nums[slow] = nums[fast]</code>，即存下不重复项，<code> slow</code>指针才继续走一步，遍历完后，<code>slow</code>就是删掉重复项后数组的长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number[]&#125;</span> <span class="hljs-variable">nums</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> removeDuplicates = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> n = nums.length<br>  <span class="hljs-keyword">if</span> (n === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>  &#125;<br><br>  <span class="hljs-keyword">let</span> fast = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">let</span> slow = <span class="hljs-number">1</span><br><br>  <span class="hljs-keyword">while</span> (fast &lt; n) &#123;<br>    <span class="hljs-keyword">if</span> (nums[fast] !== nums[fast - <span class="hljs-number">1</span>]) &#123;<br>      nums[slow] = nums[fast]<br>      slow++<br>    &#125;<br>    fast++<br>  &#125;<br><br>  <span class="hljs-built_in">console</span>.log(slow)<br><br>  <span class="hljs-keyword">return</span> slow<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a><a href="https://leetcode-cn.com/problems/remove-element/description/">移除元素</a></h2><h3 id="1-双指针法"><a href="#1-双指针法" class="headerlink" title="1. 双指针法"></a>1. 双指针法</h3><p>和上面的做法一样，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> removeElement = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, val</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> n = nums.length<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> right = <span class="hljs-number">0</span>; right &lt; n; right++) &#123;<br>    <span class="hljs-keyword">if</span> (nums[right] !== val) &#123;<br>      nums[left] = nums[right]    <span class="hljs-comment">// 不等于要移除的元素，则存起来，等于则不存</span><br>      left++<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> left<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2-双指针优化"><a href="#2-双指针优化" class="headerlink" title="2. 双指针优化"></a>2. 双指针优化</h3><p>做法和双指针法类似，不同的是，初始时，左指针指向0，右指针指向数组最后一位。</p><p>通过判断left指针指向的元素等不等于val</p><ul><li>等于的话，则把right指针指向的元素赋值给left指针，然后right–，继续判断left指针指向的元素等不等于left</li><li>不等于的话，则left指针前进</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number[]&#125;</span> <span class="hljs-variable">nums</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number&#125;</span> <span class="hljs-variable">val</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> removeElement = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, val</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>, right = nums.length<br><br>  <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-keyword">if</span> (nums[left] === val) &#123;<br>      nums[left] = nums[right - <span class="hljs-number">1</span>]    <span class="hljs-comment">// 把后面的元素放到前面，避免重复赋值。如1,2,3,4,5要去掉1</span><br>      right--<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      left++<br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> left<br>&#125;;<br></code></pre></td></tr></table></figure><p><b style="color: red">可以避免元素的重复赋值操作</b>：</p><p>假设数组为<code> [1, 2, 3, 4]</code>，要删除的元素为1</p><ul><li>使用普通的双指针法：第一位等于要删的元素，跳过，后面一次赋值<code> nums[0]=2</code>，<code> nums[1]=3</code>，<code> nums[2]=4</code></li><li>使用优化的双指针法：第一轮需要赋值<code> nums[0]=4</code>，后面就不需要在赋值了</li></ul><h2 id="实现-strStr"><a href="#实现-strStr" class="headerlink" title="实现 strStr()"></a><a href="https://leetcode-cn.com/problems/implement-strstr/description/">实现 strStr()</a></h2><h3 id="1-暴力匹配"><a href="#1-暴力匹配" class="headerlink" title="1. 暴力匹配"></a>1. 暴力匹配</h3><p>就是直接嵌套循环，时间复杂度较大。KMP算法比较麻烦，先留个坑(希望之后会补坑)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> <span class="hljs-variable">haystack</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> <span class="hljs-variable">needle</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> strStr = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">haystack, needle</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> hLen = haystack.length<br>  <span class="hljs-keyword">let</span> nLen = needle.length<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i + nLen &lt;= hLen; i++) &#123;<br>    <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; nLen; j++) &#123;<br>      <span class="hljs-keyword">if</span> (haystack[i + j] !== needle[j]) &#123;<br>        flag = <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">break</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>      <span class="hljs-keyword">return</span> i<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="搜索插入位置"><a href="#搜索插入位置" class="headerlink" title="搜索插入位置"></a><a href="https://leetcode-cn.com/problems/search-insert-position/description/">搜索插入位置</a></h2><p>有序插入：二分法：就是每次都取在中间的那个值，如果<code>target</code>小于等于中间那个值的话，就是说<code> target</code>在左半边，此时，让right=mid-1，大于则让<code> left=mid+1</code>。最后返回<code> right+1</code>。（这里返回<code> right+1</code>的原因是<code>target</code>小于等于中间那个值都会继续往左移，所以<code>right</code>停的位置会比<code>target</code>小，那么插的位置就是<code> right+1</code>了）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> searchInsert = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, target</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span><br>  <span class="hljs-keyword">let</span> ans = nums.length<br><br>  <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>    <span class="hljs-keyword">let</span> mid = right - <span class="hljs-built_in">Number</span>.parseInt((right - left) / <span class="hljs-number">2</span>)<br><br>    <span class="hljs-keyword">if</span> (target &lt;= nums[mid]) &#123;<br>      right = mid - <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      left = mid + <span class="hljs-number">1</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> right + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode刷题-二-JavaScript&quot;&gt;&lt;a href=&quot;#LeetCode刷题-二-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;LeetCode刷题(二)    JavaScript&quot;&gt;&lt;/a&gt;LeetCode刷题(二)</summary>
      
    
    
    
    <category term="算法" scheme="https://clz.vercel.app/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="https://clz.vercel.app/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Express实战(二)    登录验证、身份认证、增删改查</title>
    <link href="https://clz.vercel.app/2022/03/06/express-4/"/>
    <id>https://clz.vercel.app/2022/03/06/express-4/</id>
    <published>2022-03-06T05:20:02.000Z</published>
    <updated>2022-03-06T05:22:44.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Express实战-二-登录验证、身份认证、增删改查"><a href="#Express实战-二-登录验证、身份认证、增删改查" class="headerlink" title="Express实战(二)    登录验证、身份认证、增删改查"></a>Express实战(二)    登录验证、身份认证、增删改查</h1><p>最终结果：<a href="https://github.com/13535944743/realworld-api-express-practise-">realworld-api-express-practise- </a></p><h2 id="1-数据验证-登录验证"><a href="#1-数据验证-登录验证" class="headerlink" title="1. 数据验证(登录验证)"></a>1. 数据验证(登录验证)</h2><p>validate \ user.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.login = [<br>  validate([body(<span class="hljs-string">&quot;user.email&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;邮箱不能为空&quot;</span>), body(<span class="hljs-string">&quot;user.password&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;密码不能为空&quot;</span>)]),<br>  validate([<br>    <span class="hljs-comment">// 只有上面的验证通过才会执行，利用的是中间件的机制</span><br>    body(<span class="hljs-string">&quot;user.email&quot;</span>).custom(<span class="hljs-keyword">async</span> (email, &#123; req &#125;) =&gt; &#123;<br>      <span class="hljs-comment">// 这里参数的req解构是官网文档用法</span><br>      <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> User.findOne(&#123;<br>        email<br>      &#125;).select([<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-string">&#x27;bio&#x27;</span>, <span class="hljs-string">&#x27;image&#x27;</span>])    <span class="hljs-comment">// 这里需要获取密码的话，因为用户密码的模式设计那里设置了select: false，即通过查找不能查到密码，此时需要通过select()实现能查出密码</span><br>      <span class="hljs-keyword">if</span> (!user) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;用户不存在&quot;</span>)<br>      &#125;<br><br>      <span class="hljs-comment">// 将数据挂载到请求对象上，这样子后续的中间件也可以直接使用</span><br>      req.user = user<br>    &#125;)<br>  ]),<br>  validate([<br>    body(<span class="hljs-string">&quot;user.password&quot;</span>).custom(<span class="hljs-keyword">async</span> (password, &#123; req &#125;) =&gt; &#123;<br><br>      <span class="hljs-keyword">if</span> (md5(password) !== req.user.password) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;密码错误&quot;</span>)<br>      &#125;<br><br>      <span class="hljs-built_in">console</span>.log(req.user)<br>    &#125;)<br>  ])<br>]<br></code></pre></td></tr></table></figure><p>user的路由那里也要加上</p><p>router \ user.js</p><p><img src="https://s2.loli.net/2022/03/06/VOkFwbflWv32tqx.png" alt="image-20220212175651983"></p><p><img src="https://s2.loli.net/2022/03/06/Q72rvg8PFGHahKW.png" alt="image-20220212175753306"></p><p><img src="https://s2.loli.net/2022/03/06/QeX7S6bxAN98OCP.png" alt="image-20220212175808931"></p><h2 id="2-基于JWT的身份认证"><a href="#2-基于JWT的身份认证" class="headerlink" title="2. 基于JWT的身份认证"></a>2. 基于JWT的身份认证</h2><p><a href="https://jwt.io/">JSON Web Tokens - jwt.io</a></p><p>JWT原理：服务器认证之后，生成一个JSON对象，类似下面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;姓名&quot;</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-string">&quot;角色&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>    <span class="hljs-string">&quot;到期时间&quot;</span>: <span class="hljs-string">&quot;2022-02-28&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>以后，用户和服务端通信，都要发回这个JSON对象，服务器只靠这个对象确认用户身份。为了防止用户篡改数据，服务器在生成这个对象时，会加上签名。</p><p>实际JWT：</p><p><img src="https://s2.loli.net/2022/03/06/e6YlBAa9SKiLIyP.png" alt="image-20220212181436946"></p><p>JWT的三个部分：</p><ul><li>Header（头部）</li><li>Payload（负载）</li><li>Signature（签名）</li></ul><p>Header.Payload.Signature</p><h3 id="2-1-Header"><a href="#2-1-Header" class="headerlink" title="2.1 Header"></a>2.1 Header</h3><p>Header部分是一个JSON对象，描述JWT的元数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;HS256&quot;</span>,<span class="hljs-comment">// 表示签名的算法，默认是HMAC SHA256</span><br>    <span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><span class="hljs-comment">// 表示令牌（token）的类型，ＪＷＴ令牌写为ＪＷＴ</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最后通过<code> Base64URL</code>算法将上面的ＪＳＯＮ对象转成字符串</p><h3 id="2-2-Payload"><a href="#2-2-Payload" class="headerlink" title="2.2 Payload"></a>2.2 Payload</h3><p>Payload也是一个JSON对象，用来存实际需要传的数据。JWT规定了7个官方字段</p><ul><li>iss(issuer)：签发人</li><li>exp(expiration time)：过期时间</li><li>sub(subject)：主题</li><li>aud(audience)：受众</li><li>nbf(Not Before)：生效时间</li><li>iat(Issued At)：签发时间</li><li>jti(JWT ID)：编号</li></ul><p>除了官方字段，还可以定义私有字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;sub&quot;</span>: <span class="hljs-string">&quot;134567890&quot;</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-string">&quot;admin&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p><b style="color: red">JWT默认是不加密的，所以需要保密的信息不应该放在这部分</b></p><p>最后通过<code> Base64URL</code>算法将上面的JSON对象转成字符串</p><h3 id="2-3-Signature"><a href="#2-3-Signature" class="headerlink" title="2.3 Signature"></a>2.3 Signature</h3><p>Signature是对前两部分的签名，防止数据篡改</p><p>首先，需要指定一个密钥(<b style="color: red">这个密钥只有服务器知道，不能泄露给用户</b>)。然后，使用Header里面指定的签名算法，按以下公式产生签名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">HMACSHA256(<br>base64UrlEncode(header) + <span class="hljs-string">&quot;.&quot;</span> +<br>base64UrlEncode(payload),<br>secret    <span class="hljs-comment">// 私钥</span><br>)<br></code></pre></td></tr></table></figure><p>得到签名后，将Header、Payload、Signature三个部分拼接成一个字符串，用<code> .</code>分隔，可以返回给用户</p><p><b style="Color: red">在JWT中，消息体是透明的，使用签名可以保证消息不被篡改，但不能实现数据加密功能</b></p><p>将Header和Payload串型化的算法是<code> BaseURL</code>，和<code> Base64</code>算法类似，但有一些不同。</p><p>JWT作为一个令牌(token)，有时候需要放到URL中(如api.example.com/?token=xxx)。</p><ul><li>Base64中的三个字符<code> +</code>, <code> /</code>, <code> =</code> ，在URL中有特殊意义</li><li>Base64URL：<code> =</code>被省略，<code> +</code>替换成<code> -</code>，<code> /</code>替换成<code> _</code></li></ul><h3 id="2-4-JWT的使用方式"><a href="#2-4-JWT的使用方式" class="headerlink" title="2.4 JWT的使用方式"></a>2.4 JWT的使用方式</h3><p>客户端收到服务器返回的JWT，可以存在Cookie里，也可以存在localStorage中。之后，客户端与服务器通信，都要带上这个JWT，可以将JWT放在Cookie里自动发送，不过这样子不能跨域。<b style="color: red">更好的做法是：放在HTTP请求头的<code> Authorization</code>字段里面</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Authorization: Bearer &lt;token&gt;<br></code></pre></td></tr></table></figure><h3 id="2-5-使用jsonwebtoken"><a href="#2-5-使用jsonwebtoken" class="headerlink" title="2.5 使用jsonwebtoken"></a>2.5 使用jsonwebtoken</h3><p><a href="https://github.com/auth0/node-jsonwebtoken">jsonwebtoken仓库</a></p><p>了解jsonwebtoken的使用</p><p>先安装，<code> npm install jsonwebtoken</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>)<br><br><span class="hljs-comment">// 生成jwt：jwt.sign</span><br><span class="hljs-comment">// // 同步方式:</span><br><span class="hljs-comment">// const token = jwt.sign(&#123; foo: &#x27;bar&#x27; &#125;, &#x27;hello&#x27;);</span><br><span class="hljs-comment">// console.log(token)</span><br><br><span class="hljs-comment">// 异步方式：就只是加多一个回调函数</span><br><span class="hljs-keyword">const</span> token = jwt.sign(&#123;<br>  <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span><br>&#125;, <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, token</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;生成token失败&#x27;</span>)<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(token)<br>&#125;);<br><br><span class="hljs-comment">// 验证jwt：jwt.verify</span><br><span class="hljs-comment">// 同步方式：</span><br><span class="hljs-comment">// const result = jwt.verify(&#x27;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\</span><br><span class="hljs-comment">// eyJmb28iOiJiYXIiLCJpYXQiOjE2NDQ2NjY1NDd9.\</span><br><span class="hljs-comment">// 0Vy596XulYTCxeTrBp27U2T4BMh93IPN5l2b0GqxAMY&#x27;, &#x27;hello&#x27;)</span><br><br><span class="hljs-comment">// console.log(result)</span><br><br><span class="hljs-comment">// 异步方式：</span><br>jwt.verify(<span class="hljs-string">&#x27;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\</span><br><span class="hljs-string">eyJmb28iOiJiYXIiLCJpYXQiOjE2NDQ2NjY1NDd9.\</span><br><span class="hljs-string">0Vy596XulYTCxeTrBp27U2T4BMh93IPN5l2b0GqxAMY&#x27;</span>,<br>  <span class="hljs-string">&#x27;hello&#x27;</span>,<br>  <span class="hljs-function">(<span class="hljs-params">err, ret</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;验证token失败&#x27;</span>)<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(ret)<br>  &#125;)<br></code></pre></td></tr></table></figure><h4 id="2-5-1-生成token"><a href="#2-5-1-生成token" class="headerlink" title="2.5.1 生成token"></a>2.5.1 生成token</h4><p>util \ jwt.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; promisify &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)   <span class="hljs-comment">// 将回调函数转换成Promise形式</span><br><br><br><span class="hljs-built_in">exports</span>.sign = promisify(jwt.sign)<br><br><span class="hljs-built_in">exports</span>.verify = promisify(jwt.verify)<br><br><span class="hljs-built_in">exports</span>.decode = promisify(jwt.decode)  <span class="hljs-comment">// 不验证，直接解析</span><br><br></code></pre></td></tr></table></figure><p>config \ config.default.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-string">&quot;dbURL&quot;</span>: <span class="hljs-string">&quot;mongodb://localhost:27017/realworld&quot;</span>,     <span class="hljs-comment">// MongoDB默认端口17017</span><br>  <span class="hljs-string">&quot;jwtSecret&quot;</span>: <span class="hljs-string">&quot;c06eddf5-78eb-494f-b2c6-4a6d45b56cd5&quot;</span>   <span class="hljs-comment">// uuid随机生成(直接搜索uuid)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>controller userController.js（只改登录部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 类前面引入</span><br><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../util/jwt&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; jwtSecret &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../config/config.default&#x27;</span>)<br><br><span class="hljs-comment">// 用户登录</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 1. 数据验证</span><br>    <span class="hljs-comment">// 2. 生成token</span><br>    <span class="hljs-keyword">const</span> user = req.user.toJSON()<br><br>    <span class="hljs-keyword">const</span> token = <span class="hljs-keyword">await</span> jwt.sign(&#123;<br>      <span class="hljs-attr">userId</span>: user._id    <span class="hljs-comment">// 生成token不需要全部user信息，只要_id即可</span><br>    &#125;, jwtSecret)<br><br>    <span class="hljs-comment">// 3. 发送成功响应(包含token的用户信息)</span><br>    <span class="hljs-keyword">delete</span> user.password<br>    res.status(<span class="hljs-number">200</span>).json(&#123;<br>      ...user,<br>      token<br>    &#125;)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/7E9rMZ3c8QU42sS.png" alt="image-20220212204150260"></p><h3 id="2-6-中间件统一处理JWT身份认证"><a href="#2-6-中间件统一处理JWT身份认证" class="headerlink" title="2.6 中间件统一处理JWT身份认证"></a>2.6 中间件统一处理JWT身份认证</h3><p>middleware \ authorization.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; verify &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../util/jwt&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; jwtSecret &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../config/config.default&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; User &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../model/index&#x27;</span>)<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>  <span class="hljs-comment">// 1. 从请求头获取token</span><br>  <span class="hljs-keyword">let</span> token = req.headers[<span class="hljs-string">&#x27;authorization&#x27;</span>]<br><br>  token = token ? token.split(<span class="hljs-string">&#x27;Bearer &#x27;</span>)[<span class="hljs-number">1</span>] : <span class="hljs-literal">null</span><br><br>  <span class="hljs-keyword">if</span> (!token) &#123;<br>    <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">401</span>).end(<span class="hljs-string">&#x27;请求头无token或token格式不对&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 2. 验证token是否有效</span><br>    <span class="hljs-comment">//    无效 ==&gt; 响应401状态码</span><br>    <span class="hljs-comment">//    有效 ==&gt; 把用户信息读取出来，并挂载到req请求对象中，继续往后执行</span><br>    <span class="hljs-keyword">const</span> decodedToken = <span class="hljs-keyword">await</span> verify(token, jwtSecret)<br>    req.user = <span class="hljs-keyword">await</span> User.findById(decodedToken.userId)<br><br>    next()<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">401</span>).end(<span class="hljs-string">&#x27;token无效&#x27;</span>)<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/QsY2dEJHM48ISLB.png" alt="image-20220213193413017"></p><p><img src="https://s2.loli.net/2022/03/06/bqK4VkZ9XQsWIyH.png" alt="image-20220213193952500"></p><h3 id="2-7-JWT过期时间"><a href="#2-7-JWT过期时间" class="headerlink" title="2.7 JWT过期时间"></a>2.7 JWT过期时间</h3><p><img src="https://s2.loli.net/2022/03/06/6lFVXrutyLmdkOo.png" alt="image-20220213194228528"></p><p>设置为15秒，体验下过期</p><p><img src="https://s2.loli.net/2022/03/06/XBpAb8rQvGM9qDS.gif" alt="jwt"></p><h3 id="2-8-Postman自动添加token"><a href="#2-8-Postman自动添加token" class="headerlink" title="2.8 Postman自动添加token"></a>2.8 Postman自动添加token</h3><p><img src="https://s2.loli.net/2022/03/06/ES316tO8CoMA9BY.png" alt="image-20220213195824827"></p><p><img src="https://s2.loli.net/2022/03/06/2c8tgln6ekvhGYq.png" alt="image-20220213200015365"></p><h2 id="3-新增文章"><a href="#3-新增文章" class="headerlink" title="3. 新增文章"></a>3. 新增文章</h2><p><strong>和注册类似</strong></p><h3 id="3-1-数据验证"><a href="#3-1-数据验证" class="headerlink" title="3.1 数据验证"></a>3.1 数据验证</h3><p>validate \ article.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> validate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../middleware/validate&quot;</span>)<br><span class="hljs-keyword">const</span> &#123; body &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-validator&quot;</span>)<br><br><br><span class="hljs-built_in">exports</span>.createArticle = validate([<br>  body(<span class="hljs-string">&#x27;article.title&#x27;</span>).notEmpty().withMessage(<span class="hljs-string">&#x27;文章标题不能为空&#x27;</span>),<br>  body(<span class="hljs-string">&#x27;article.description&#x27;</span>).notEmpty().withMessage(<span class="hljs-string">&#x27;文章摘要不能为空&#x27;</span>),<br>  body(<span class="hljs-string">&#x27;article.body&#x27;</span>).notEmpty().withMessage(<span class="hljs-string">&#x27;文章内容不能为空&#x27;</span>)<br>])<br><br></code></pre></td></tr></table></figure><h3 id="3-2-文章模型"><a href="#3-2-文章模型" class="headerlink" title="3.2 文章模型"></a>3.2 文章模型</h3><p>model \ article.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>)<br><br><span class="hljs-keyword">const</span> baseModel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./base-model&#x27;</span>)<br><br><span class="hljs-keyword">const</span> Schema = mongoose.Schema<br><br><span class="hljs-comment">// 创建文章模型</span><br><span class="hljs-keyword">const</span> articleSchema = mongoose.Schema(&#123;<br>  ...baseModel,<br>  <span class="hljs-attr">title</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">description</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">body</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">tagList</span>: &#123;<br>    <span class="hljs-attr">type</span>: [<span class="hljs-built_in">String</span>],<br>    <span class="hljs-attr">default</span>: <span class="hljs-literal">null</span><br>  &#125;,<br>  <span class="hljs-attr">favoritesCount</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">Number</span>,<br>    <span class="hljs-attr">default</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">author</span>: &#123;<br>    <span class="hljs-attr">type</span>: Schema.Types.ObjectId,<br>    <span class="hljs-attr">ref</span>: <span class="hljs-string">&#x27;User&#x27;</span>,   <span class="hljs-comment">// 存用户id，之后映射到用户模型去</span><br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;)<br><br><span class="hljs-built_in">module</span>.exports = articleSchema<br></code></pre></td></tr></table></figure><p><b style="Color: red">ref中的值需要时，model \ index.js中导出的模型类中启用的名字</b></p><p><img src="https://s2.loli.net/2022/03/06/LgHpIeY5b8FUqdj.png" alt="image-20220214134231860"></p><h3 id="3-3-文章相关路由"><a href="#3-3-文章相关路由" class="headerlink" title="3.3 文章相关路由"></a>3.3 文章相关路由</h3><p><b style="color: red">新增文章部分加上了JWT身份认证和数据验证</b></p><p>router \ article.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><br><span class="hljs-keyword">const</span> articleController = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../controller/articleController&#x27;</span>)<br><span class="hljs-keyword">const</span> authorization = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../middleware/authorization&#x27;</span>)<br><span class="hljs-keyword">const</span> articleValidate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../validate/article&#x27;</span>)<br><br><span class="hljs-keyword">const</span> router = express.Router()<br><br><span class="hljs-comment">// 获取所有文章(可增加条件筛选)</span><br>router.get(<span class="hljs-string">&#x27;/&#x27;</span>, articleController.listArticles)<br><br><span class="hljs-comment">// 获取关注用户的所有文章(可增加条件筛选)</span><br>router.get(<span class="hljs-string">&#x27;/feed&#x27;</span>, articleController.feedArticles)<br><br><span class="hljs-comment">// 获取单篇文章</span><br>router.get(<span class="hljs-string">&#x27;/:slug&#x27;</span>, articleController.getArticle)   <span class="hljs-comment">// slug类似id，用于确定特定文章</span><br><br><span class="hljs-comment">// 新增文章</span><br>router.post(<span class="hljs-string">&#x27;/&#x27;</span>, authorization, articleValidate.createArticle, articleController.createArticle)<br><br><span class="hljs-comment">// 更新文章</span><br>router.put(<span class="hljs-string">&#x27;/:slug&#x27;</span>, articleController.updateArticle)<br><br><span class="hljs-comment">// 删除文章</span><br>router.delete(<span class="hljs-string">&#x27;/:slug&#x27;</span>, articleController.deleteArticle)<br><br><span class="hljs-comment">// 增加一篇文章的评论</span><br>router.post(<span class="hljs-string">&#x27;/:slug/comments&#x27;</span>, articleController.addComments)<br><br><span class="hljs-comment">// 获取一篇文章的所有评论</span><br>router.get(<span class="hljs-string">&#x27;/:slug/comments&#x27;</span>, articleController.getComments)<br><br><span class="hljs-comment">// 删除文章的一条评论</span><br>router.delete(<span class="hljs-string">&#x27;/:slug/comments/:id&#x27;</span>, articleController.deleteComment)<br><br><span class="hljs-comment">// 喜欢一篇文章</span><br>router.post(<span class="hljs-string">&#x27;/:slug/favorite&#x27;</span>, articleController.likeArticle)<br><br><span class="hljs-comment">// 取消喜欢一篇文章</span><br>router.delete(<span class="hljs-string">&#x27;/:slug/favorite&#x27;</span>, articleController.unlikeArticle)<br><br><span class="hljs-built_in">module</span>.exports = router<br></code></pre></td></tr></table></figure><h3 id="3-4-处理请求"><a href="#3-4-处理请求" class="headerlink" title="3.4 处理请求"></a>3.4 处理请求</h3><p>controller \  articleController.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; Article &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../model/index&#x27;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">articleController</span> </span>&#123;<br><br>  <span class="hljs-comment">// 获取所有文章(可增加条件筛选)</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">listArticles</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&#x27;获取所有文章&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 获取关注用户的所有文章(可增加条件筛选)</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">feedArticles</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&#x27;获取关注用户的所有文章&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 获取单篇文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&#x27;获取单篇文章&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 新增文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">createArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> article = <span class="hljs-keyword">new</span> Article(req.body.article)<br><br>      article.author = req.user._id     <span class="hljs-comment">// 作者在数据库中只存一个用户id，通过id去获取用户</span><br>      article.populate(<span class="hljs-string">&#x27;author&#x27;</span>)        <span class="hljs-comment">// 简单来说，就是通过populate()以及文章模型中的ref: &#x27;User&#x27;，可以通过id把用户信息放到author中</span><br><br>      <span class="hljs-comment">// article.populate(&#x27;author&#x27;).execPopulate()     </span><br><br>      <span class="hljs-keyword">await</span> article.save()<br>      res.status(<span class="hljs-number">201</span>).json(&#123;<br>        article<br>      &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 更新文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">updateArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&#x27;更新文章&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 删除文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">deleteArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&#x27;删除文章&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 增加一篇文章的评论</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">addComments</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&#x27;增加一篇文章的评论&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 获取一篇文章的所有评论</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getComments</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&#x27;获取一篇文章的评论&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 删除文章的一条评论</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">deleteComment</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&#x27;删除文章的一条评论&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 喜欢一篇文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">likeArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&#x27;喜欢一篇文章&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 取消喜欢一篇文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">unlikeArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&#x27;取消喜欢一篇文章&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br><br>&#125;<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-keyword">new</span> articleController()<br></code></pre></td></tr></table></figure><p><b style="Color: red">疑点：老师说查询时不需要execPopulate()，new出来时需要，相当于执行一次查询。但是个人试验时发现都不需要execPopulate()，加上反而会出错</b>，类似<code> &quot;article.populate(...).execPopulate is not a function&quot;</code></p><p>可能是时代变了，现在new出来的时候，也执行了</p><p><img src="https://s2.loli.net/2022/03/06/ekR29q7nSZfCylB.png" alt="image-20220214134928849"></p><h2 id="4-查询文章"><a href="#4-查询文章" class="headerlink" title="4. 查询文章"></a>4. 查询文章</h2><h3 id="4-1-数据验证"><a href="#4-1-数据验证" class="headerlink" title="4.1 数据验证"></a>4.1 数据验证</h3><p>model \ article.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.getArticle = validate([<br>  param(<span class="hljs-string">&#x27;slug&#x27;</span>).custom(<span class="hljs-keyword">async</span> value =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!mongoose.isValidObjectId(value)) &#123;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;文章ID类型错误&#x27;</span>)<br>    &#125;<br><br>  &#125;)<br>])<br></code></pre></td></tr></table></figure><h3 id="4-2-路由"><a href="#4-2-路由" class="headerlink" title="4.2 路由"></a>4.2 路由</h3><p>router \ article.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取单篇文章</span><br>router.get(<span class="hljs-string">&#x27;/:slug&#x27;</span>, articleValidate.getArticle, articleController.getArticle)   <span class="hljs-comment">// slug类似id，用于确定特定文章</span><br></code></pre></td></tr></table></figure><h3 id="4-3-处理请求"><a href="#4-3-处理请求" class="headerlink" title="4.3 处理请求"></a>4.3 处理请求</h3><p>controller \ articleController.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取单篇文章</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> article = <span class="hljs-keyword">await</span> Article.findById(req.params.slug).populate(<span class="hljs-string">&#x27;author&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> (!article) &#123;<br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">404</span>).end()<br>    &#125;<br><br>    res.status(<span class="hljs-number">200</span>).json(<br>      article<br>    )<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-获取所有文章"><a href="#5-获取所有文章" class="headerlink" title="5. 获取所有文章"></a>5. 获取所有文章</h2><p>controller \ articleController.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取所有文章(可增加条件筛选)</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">listArticles</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123;<br>        offset = <span class="hljs-number">0</span>,<span class="hljs-comment">// offset默认为0</span><br>        limit = <span class="hljs-number">20</span>,<br>        tag,<br>        author<br>      &#125; = req.query<br><br>      <span class="hljs-keyword">const</span> filter = &#123;&#125;   <span class="hljs-comment">// 用于筛选</span><br><br>      <span class="hljs-keyword">if</span> (tag) &#123;<br>        filter.tagList = tag<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (author) &#123;<br>        <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> User.findOne(&#123; <span class="hljs-attr">username</span>: author &#125;)<br>        filter.author = user ? user._id : <span class="hljs-literal">null</span>  <span class="hljs-comment">// 如果有这个作者，则获取作者的id用于筛选。没有则为null</span><br>      &#125;<br><br>      <span class="hljs-keyword">const</span> articlesCount = <span class="hljs-keyword">await</span> Article.countDocuments()<br><br>      <span class="hljs-keyword">const</span> articles = <span class="hljs-keyword">await</span> Article.find(filter)   <span class="hljs-comment">// 筛选出有这个标签的文章</span><br>        .skip(<span class="hljs-built_in">Number</span>.parseInt(offset))       <span class="hljs-comment">// 跳过多少条</span><br>        .limit(<span class="hljs-built_in">Number</span>.parseInt(limit))      <span class="hljs-comment">// 取多少条</span><br>        .sort(&#123;       <span class="hljs-comment">// 排序， -1代表倒叙，1代表正序</span><br>          <span class="hljs-attr">createdAt</span>: -<span class="hljs-number">1</span><br>        &#125;)<br><br>      res.status(<span class="hljs-number">200</span>).json(&#123;<br>        articles,<br>        articlesCount<br>      &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="6-更新文章"><a href="#6-更新文章" class="headerlink" title="6. 更新文章"></a>6. 更新文章</h2><h3 id="6-1-封装验证ID是否有效"><a href="#6-1-封装验证ID是否有效" class="headerlink" title="6.1 封装验证ID是否有效"></a>6.1 封装验证ID是否有效</h3><p>修改validate中间件</p><p>middle \ validate.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; validationResult, buildCheckFunction &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-validator&quot;</span>)<br><span class="hljs-keyword">const</span> &#123; isValidObjectId &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>)<br><br><span class="hljs-built_in">exports</span> = <span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">validations</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-built_in">Promise</span>.all(validations.map(<span class="hljs-function"><span class="hljs-params">validation</span> =&gt;</span> validation.run(req)))<br><br>    <span class="hljs-keyword">const</span> errors = validationResult(req)<br>    <span class="hljs-keyword">if</span> (errors.isEmpty()) &#123;<br>      <span class="hljs-keyword">return</span> next()<br>    &#125;<br><br>    res.status(<span class="hljs-number">400</span>).json(&#123; <span class="hljs-attr">errors</span>: errors.array() &#125;)<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">exports</span>.isValidObjectId = <span class="hljs-function">(<span class="hljs-params">location, fields</span>) =&gt;</span> &#123;   <span class="hljs-comment">// 第一个参数是验证的数据的位置，第二个参数是验证数据字段</span><br>  <span class="hljs-keyword">return</span> buildCheckFunction(location)(fields).custom(<span class="hljs-keyword">async</span> value =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!isValidObjectId(value)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;ID不是有效的ObjectID&#x27;</span>)<br>    &#125;<br>  &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-2-修改article的验证以及添加更新文章的验证"><a href="#6-2-修改article的验证以及添加更新文章的验证" class="headerlink" title="6.2 修改article的验证以及添加更新文章的验证"></a>6.2 修改article的验证以及添加更新文章的验证</h3><p>validate \ article.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> validate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../middleware/validate&quot;</span>)<br><span class="hljs-keyword">const</span> &#123; body, param &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-validator&quot;</span>)<br><span class="hljs-keyword">const</span> &#123; Article &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../model&#x27;</span>)<br><br><span class="hljs-built_in">exports</span>.createArticle = validate([<br>  body(<span class="hljs-string">&#x27;article.title&#x27;</span>).notEmpty().withMessage(<span class="hljs-string">&#x27;文章标题不能为空&#x27;</span>),<br>  body(<span class="hljs-string">&#x27;article.description&#x27;</span>).notEmpty().withMessage(<span class="hljs-string">&#x27;文章摘要不能为空&#x27;</span>),<br>  body(<span class="hljs-string">&#x27;article.body&#x27;</span>).notEmpty().withMessage(<span class="hljs-string">&#x27;文章内容不能为空&#x27;</span>)<br>])<br><br><br><span class="hljs-built_in">exports</span>.getArticle = validate([<br>  validate.isValidObjectId([<span class="hljs-string">&#x27;params&#x27;</span>], <span class="hljs-string">&#x27;slug&#x27;</span>)    <span class="hljs-comment">// 第一个参数是验证的数据的位置，第二个参数是验证数据字段</span><br><br>  <span class="hljs-comment">// param(&#x27;slug&#x27;).custom(async value =&gt; &#123;</span><br>  <span class="hljs-comment">//   if (!mongoose.isValidObjectId(value)) &#123;</span><br><br>  <span class="hljs-comment">//     return Promise.reject(&#x27;文章ID类型错误&#x27;)</span><br>  <span class="hljs-comment">//   &#125;</span><br><br>  <span class="hljs-comment">// &#125;)</span><br>])<br><br><span class="hljs-built_in">exports</span>.updateArticle = [<br>  validate([<br>    validate.isValidObjectId([<span class="hljs-string">&#x27;params&#x27;</span>], <span class="hljs-string">&#x27;slug&#x27;</span>)    <span class="hljs-comment">// 第一个参数是验证的数据的位置，第二个参数是验证数据字段</span><br>  ]),<br>  <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>    <span class="hljs-comment">// 校验文章是否存在</span><br>    <span class="hljs-keyword">const</span> articleId = req.params.slug<br>    <span class="hljs-keyword">const</span> article = <span class="hljs-keyword">await</span> Article.findById(articleId)<br>    req.article = article     <span class="hljs-comment">// 把article挂载到req上</span><br><br>    <span class="hljs-keyword">if</span> (!article) &#123;   <span class="hljs-comment">// 要修改的文章不存在</span><br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">404</span>).end()<br>    &#125;<br>    next()    <span class="hljs-comment">// 文章存在，下一个中间件处理</span><br>  &#125;,<br>  <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>    <span class="hljs-comment">// 判断文章作者是否是登录用户(禁止修改别人的文章)</span><br><br>    <span class="hljs-keyword">if</span> (req.user._id.toString() !== req.article.author.toString()) &#123;    <span class="hljs-comment">// ObjectId是一个对象，不能直接比较</span><br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">403</span>).end()<br>    &#125;<br>    next()<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><h3 id="6-3-增加article的路由——更新文章"><a href="#6-3-增加article的路由——更新文章" class="headerlink" title="6.3 增加article的路由——更新文章"></a>6.3 增加article的路由——更新文章</h3><p>route \ article.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 更新文章</span><br>router.put(<span class="hljs-string">&#x27;/:slug&#x27;</span>, authorization, articleValidate.updateArticle, articleController.updateArticle)<br></code></pre></td></tr></table></figure><h3 id="6-4-处理请求（更新文章）"><a href="#6-4-处理请求（更新文章）" class="headerlink" title="6.4 处理请求（更新文章）"></a>6.4 处理请求（更新文章）</h3><p>controller \  articleController.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 更新文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">updateArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> article = req.article<br>      <span class="hljs-keyword">const</span> bodyArticle = req.body.article<br><br>      article.title = bodyArticle.title || article.title  <span class="hljs-comment">// 有修改的则用修改的，否则用原来的</span><br>      article.description = bodyArticle.description || article.description<br>      article.body = bodyArticle.body || article.body<br><br>      <span class="hljs-keyword">await</span> article.save()<br>      res.status(<span class="hljs-number">200</span>).json(&#123;<br>        article<br>      &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="7-删除文章"><a href="#7-删除文章" class="headerlink" title="7. 删除文章"></a>7. 删除文章</h2><h3 id="7-1-数据验证"><a href="#7-1-数据验证" class="headerlink" title="7.1 数据验证"></a>7.1 数据验证</h3><p>middle \ validate.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.deleteArticle = <span class="hljs-built_in">exports</span>.updateArticle<br></code></pre></td></tr></table></figure><h3 id="7-2-路由"><a href="#7-2-路由" class="headerlink" title="7.2 路由"></a>7.2 路由</h3><p>route \ article.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 删除文章</span><br>router.delete(<span class="hljs-string">&#x27;/:slug&#x27;</span>, authorization, articleValidate.deleteArticle, articleController.deleteArticle)<br></code></pre></td></tr></table></figure><h3 id="7-3-处理请求"><a href="#7-3-处理请求" class="headerlink" title="7.3 处理请求"></a>7.3 处理请求</h3><p>controller \ articleController.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 删除文章</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">deleteArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> article = req.article<br>    <span class="hljs-keyword">await</span> article.remove()<br>    res.status(<span class="hljs-number">204</span>).end()<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Express实战-二-登录验证、身份认证、增删改查&quot;&gt;&lt;a href=&quot;#Express实战-二-登录验证、身份认证、增删改查&quot; class=&quot;headerlink&quot; title=&quot;Express实战(二)    登录验证、身份认证、增删改查&quot;&gt;&lt;/a&gt;Expr</summary>
      
    
    
    
    <category term="后端" scheme="https://clz.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Express" scheme="https://clz.vercel.app/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>Express实战(一)	项目结构搭建及验证、加密</title>
    <link href="https://clz.vercel.app/2022/03/06/express-3/"/>
    <id>https://clz.vercel.app/2022/03/06/express-3/</id>
    <published>2022-03-06T05:19:56.000Z</published>
    <updated>2022-03-06T05:21:01.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Express实战-一-项目结构搭建及验证、加密"><a href="#Express实战-一-项目结构搭建及验证、加密" class="headerlink" title="Express实战(一)            项目结构搭建及验证、加密"></a>Express实战(一)            项目结构搭建及验证、加密</h1><p>开源项目：</p><ul><li><p><a href="https://github.com/gothinkster/realworld">github仓库</a></p></li><li><p><a href="https://realworld-docs.netlify.app/docs/specs/backend-specs/endpoints">接口文档</a></p></li></ul><br><p><a href="https://clz.vercel.app/2022/02/28/RESTful/">RESTful接口设计规范</a></p><p>最终结果：<a href="https://github.com/13535944743/realworld-api-express-practise-">realworld-api-express-practise- </a></p><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir realworld-api-express<br>cd realworld-api-express<br>npm init -y<br>npm install express<br></code></pre></td></tr></table></figure><p>目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.<br>├── node_modules npm安装的第三方包目录，使用 npm 装包会自动创建<br>├── config# 配置文件<br>|├── config.default.js<br>├── controller# 解析用户的输入，处理后返回相应的结果<br>├── model# 数据持久层<br>├── middleware# 中间件<br>├── router# 配置URL路由<br>├── util# 工具模块<br>├── app.js 服务端程序入口文件，执行该文件会启动我们的 Web 服务器<br>├── package.json 项目包说明文件，存储第三方包依赖等信息<br>└── package-lock.json npm的包锁定文件，用来锁定第三方包的版本和提高npm下载速度<br></code></pre></td></tr></table></figure><h2 id="3-配置常用中间件"><a href="#3-配置常用中间件" class="headerlink" title="3. 配置常用中间件"></a>3. 配置常用中间件</h2><ul><li><strong>解析请求体</strong><ul><li>express.json()</li><li>express.urlencoded()</li></ul></li><li><strong>日志输出</strong><ul><li>morgan()</li></ul></li><li><strong>提供跨域资源请求</strong><ul><li>cors()</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> morgan = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;morgan&#x27;</span>)<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>);<br><br><span class="hljs-keyword">const</span> app = express()<br><br><span class="hljs-comment">// 日志输出</span><br>app.use(morgan(<span class="hljs-string">&#x27;dev&#x27;</span>))<br><br><span class="hljs-comment">// 解析请求体的中间件</span><br>app.use(express.json())<br>app.use(express.urlencoded())<br><br><span class="hljs-comment">// 提供跨域资源请求</span><br>app.use(cors())<br><br><br><span class="hljs-keyword">const</span> PORT = process.env.PORT || <span class="hljs-number">3000</span>  <span class="hljs-comment">// process.env.PORT读取当前目录下环境变量port的值，若没有则默认端口为3000</span><br><br>app.post(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(req.body)<br>&#125;)<br><br>app.listen(PORT, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Server is running at http://localhost:<span class="hljs-subst">$&#123;PORT&#125;</span>`</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/1LCVTXJmcyZiSKA.png" alt="image-20220211002712124"></p><h2 id="4-路由设计"><a href="#4-路由设计" class="headerlink" title="4. 路由设计"></a>4. 路由设计</h2><p><a href="https://realworld-docs.netlify.app/docs/specs/backend-specs/endpoints">接口文档</a></p><p>用户相关路由(user.js)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><br><span class="hljs-keyword">const</span> router = express.Router()<br><br><span class="hljs-comment">// 用户登录</span><br>router.post(<span class="hljs-string">&#x27;/users/login&#x27;</span>, <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;用户登录&#x27;</span>)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err)<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// 用户注册</span><br>router.post(<span class="hljs-string">&#x27;/users&#x27;</span>, <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;用户注册&#x27;</span>)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err)<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// 获取当前用户</span><br>router.get(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;获取当前用户&#x27;</span>)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err)<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// 更新用户</span><br>router.put(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;更新用户&#x27;</span>)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err)<br>  &#125;<br>&#125;)<br><br><span class="hljs-built_in">module</span>.exports = router<br></code></pre></td></tr></table></figure><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><br><span class="hljs-keyword">const</span> router = express.Router()<br><br><span class="hljs-comment">// 用户相关路由</span><br>router.use(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./user&#x27;</span>))<br><br><span class="hljs-comment">// 用户资料相关路由</span><br>router.use(<span class="hljs-string">&#x27;/profiles&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./profile&#x27;</span>))<br><br><br><span class="hljs-built_in">module</span>.exports = router<br></code></pre></td></tr></table></figure><p>app.js挂载路由级别中间件</p><p><img src="https://s2.loli.net/2022/03/06/GjxSF28w5asHzKA.png" alt="image-20220211125351747"></p><p>其他路由做法类似</p><h2 id="5-提取控制器模块"><a href="#5-提取控制器模块" class="headerlink" title="5. 提取控制器模块"></a>5. 提取控制器模块</h2><p>简单来说，就是把路由处理的回调函数单独抽出来，放到另一个地方，方便维护等操作。</p><p>示例(userController)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 用户登录</span><br><span class="hljs-built_in">exports</span>.login = <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;用户登录&#x27;</span>)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/n9uJZeIOog8tMlU.png" alt="image-20220211185051313"></p><p>再优化一下(将控制器封装成类)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">userController</span> </span>&#123;<br><br>  <span class="hljs-comment">// 用户登录</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&#x27;用户登录&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 用户注册</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">register</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&#x27;用户注册&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 获取当前用户</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getCurrentUser</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&#x27;获取当前用户&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 更新用户</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">updateUser</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&#x27;更新用户&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-keyword">new</span> userController()<br></code></pre></td></tr></table></figure><h2 id="6-配置错误处理中间件"><a href="#6-配置错误处理中间件" class="headerlink" title="6. 配置错误处理中间件"></a>6. 配置错误处理中间件</h2><p>error-handler</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;   <span class="hljs-comment">// 错误处理中间件必须要四个参数</span><br>    res.status(<span class="hljs-number">500</span>).json(&#123;<br>      <span class="hljs-attr">error</span>: err.message<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/lckJVbijDN7ShK8.png" alt="image-20220211210724530"></p><p><b style="color: red">错误处理中间件应该在最后才挂载</b></p><p>测试：<img src="https://s2.loli.net/2022/03/06/UwrY8Ha2xVnSPBX.png" alt="image-20220211210925234"></p><p>​        <img src="https://s2.loli.net/2022/03/06/fV9Y3abCJ1WjneS.png" alt="image-20220211210949033"></p><h2 id="7-统一管理测试接口-postman"><a href="#7-统一管理测试接口-postman" class="headerlink" title="7. 统一管理测试接口(postman)"></a>7. 统一管理测试接口(postman)</h2><p><img src="https://s2.loli.net/2022/03/06/Ewk4XzUAx3MFjyS.png" alt="image-20220211212812413"></p><p>选择对应环境(Development或Production)，没有则点击No Environment，然后点击小眼睛，添加环境</p><p>设置基础路径(选择环境后，点击小眼睛进行编辑，如下图所示)</p><p><img src="https://s2.loli.net/2022/03/06/zwvo7CjGmUr2euN.png" alt="image-20220211213132330"></p><p><img src="https://s2.loli.net/2022/03/06/23lmkYXwPHbdRr5.png" alt="image-20220211213615327"></p><h2 id="8-使用mongodb数据库"><a href="#8-使用mongodb数据库" class="headerlink" title="8. 使用mongodb数据库"></a>8. 使用mongodb数据库</h2><h3 id="8-1-安装mongodb"><a href="#8-1-安装mongodb" class="headerlink" title="8.1 安装mongodb"></a>8.1 安装mongodb</h3><p><a href="https://www.mongodb.com/try/download/community">MongoDB Community Download | MongoDB</a></p><p>先打开MongoDB Compass</p><p><img src="https://s2.loli.net/2022/03/06/zwLaTcpu3FEs6RD.png" alt="image-20220212132611027"></p><h3 id="8-2-连接Mongodb数据库"><a href="#8-2-连接Mongodb数据库" class="headerlink" title="8.2 连接Mongodb数据库"></a>8.2 连接Mongodb数据库</h3><p>首先，需要安装Mongoose，<code> npm install mongoose</code></p><p><a href="http://www.mongoosejs.net/docs/">Mongoose 5.0 中文文档</a></p><p>model \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<br><br><span class="hljs-keyword">const</span> &#123; dbURL &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../config/config.default&#x27;</span>)<br><br><span class="hljs-comment">// 连接MongoDB数据库</span><br>mongoose.connect(dbURL);<br><br><span class="hljs-keyword">var</span> db = mongoose.connection;<br><br><span class="hljs-comment">// 数据库连接失败</span><br>db.on(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;MongoDB 数据库连接失败&#x27;</span>, err)<br>&#125;);<br><br><span class="hljs-comment">// 数据库连接成功</span><br>db.once(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;MongoDB 数据库连接成功&#x27;</span>)<br>&#125;);<br></code></pre></td></tr></table></figure><p>数据库地址在配置中(便于上线等操作时直接更换地址)</p><p>config \ config.default.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-string">&quot;dbURL&quot;</span>: <span class="hljs-string">&quot;mongodb://localhost:27017/realworld&quot;</span>   <span class="hljs-comment">// MongoDB默认端口17017</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行(<code> nodemon app.js</code>)</p><p><img src="https://s2.loli.net/2022/03/06/mr56Ij931dMCGvQ.png" alt="image-20220212133236905"></p><h3 id="8-3-增加数据模块-以user为例"><a href="#8-3-增加数据模块-以user为例" class="headerlink" title="8.3 增加数据模块(以user为例)"></a>8.3 增加数据模块(以user为例)</h3><p>根据接口文档，确定属性</p><p><a href="https://realworld-docs.netlify.app/docs/specs/backend-specs/endpoints">接口文档</a></p><p><img src="https://s2.loli.net/2022/03/06/1U2MkDzV4AmBZHb.png" alt="image-20220212133538143"></p><p>model \ base-model.js（<strong>存放共有的属性</strong>，如创建时间，更新时间等）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">createdAt</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">Date</span>,<br>    <span class="hljs-attr">default</span>: <span class="hljs-built_in">Date</span>.now<br>  &#125;,<br>  <span class="hljs-attr">updatedAt</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">Date</span>,<br>    <span class="hljs-attr">default</span>: <span class="hljs-built_in">Date</span>.now<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>model \ user.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>)<br><br><span class="hljs-keyword">const</span> baseModel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./base-model&#x27;</span>)<br><br><span class="hljs-comment">// 创建用户模型</span><br><span class="hljs-keyword">const</span> userSchema = mongoose.Schema(&#123;<br>  ...baseModel,<br>  <span class="hljs-attr">username</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">email</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">password</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">bio</span>: &#123;    <span class="hljs-comment">// 简介</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">default</span>: <span class="hljs-literal">null</span><br>  &#125;,<br>  <span class="hljs-attr">image</span>: &#123;    <span class="hljs-comment">// 头像</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">default</span>: <span class="hljs-literal">null</span><br>  &#125;<br>&#125;)<br><br><span class="hljs-built_in">module</span>.exports = userSchema<br></code></pre></td></tr></table></figure><p>module \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<br><br><span class="hljs-keyword">const</span> &#123; dbURL &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../config/config.default&#x27;</span>)<br><br><span class="hljs-comment">// 连接MongoDB数据库</span><br>mongoose.connect(dbURL);<br><br><span class="hljs-keyword">var</span> db = mongoose.connection;<br><br><span class="hljs-comment">// 数据库连接失败</span><br>db.on(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;MongoDB 数据库连接失败&#x27;</span>, err)<br>&#125;);<br><br><span class="hljs-comment">// 数据库连接成功</span><br>db.once(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;MongoDB 数据库连接成功&#x27;</span>)<br>&#125;);<br><br><span class="hljs-comment">// 组织导出模型类</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">User</span>: mongoose.model(<span class="hljs-string">&#x27;User&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./user&#x27;</span>)),<br>  <span class="hljs-attr">Article</span>: mongoose.model(<span class="hljs-string">&#x27;Article&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./article&#x27;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-4-注册，操作数据库"><a href="#8-4-注册，操作数据库" class="headerlink" title="8.4 注册，操作数据库"></a>8.4 注册，操作数据库</h3><p>controller \ userController.js</p><p><img src="https://s2.loli.net/2022/03/06/TDULJdzurGaHR9e.png" alt="image-20220212140140573"></p><p><img src="https://s2.loli.net/2022/03/06/hxuJtTKnz2U61mE.png" alt="image-20220212134443019"></p><h2 id="9-验证"><a href="#9-验证" class="headerlink" title="9. 验证"></a>9. 验证</h2><p>首先，mongodb添加模式时的<code> required: true</code>可以实现一点验证是否缺必需参数。但是，还远远不够，以下提供两个验证的库。</p><ul><li><a href="https://github.com/sindresorhus/awesome-nodejs">awesome-nodejs</a></li><li><a href="https://github.com/express-validator/express-validator">express-validator</a></li></ul><h3 id="9-1-基本使用"><a href="#9-1-基本使用" class="headerlink" title="9.1 基本使用"></a>9.1 基本使用</h3><p>具体使用可查看<a href="https://express-validator.github.io/docs/">文档</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install express-validator<br></code></pre></td></tr></table></figure><p>router \ user.js</p><p><img src="https://s2.loli.net/2022/03/06/B7hdIYKL5UibsrD.png" alt="image-20220212150822951"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 用户注册</span><br>router.post(<span class="hljs-string">&#x27;/users&#x27;</span>, [   <span class="hljs-comment">// 1. 配置验证规则</span><br>  body(<span class="hljs-string">&#x27;user.username&#x27;</span>).notEmpty().withMessage(<span class="hljs-string">&#x27;用户名不能为空&#x27;</span>),   <span class="hljs-comment">// withMessage()定制错误提示消息</span><br>  body(<span class="hljs-string">&#x27;user.email&#x27;</span>)<br>    .notEmpty().withMessage(<span class="hljs-string">&#x27;邮箱不能为空&#x27;</span>)<br>    .isEmail().withMessage(<span class="hljs-string">&#x27;邮箱格式不正确&#x27;</span>)<br>    .bail()    <span class="hljs-comment">// 前面验证失败则不会往后执行</span><br>    .custom(<span class="hljs-keyword">async</span> email =&gt; &#123;  <span class="hljs-comment">// 自定义验证</span><br>      <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> User.findOne(&#123; email &#125;)<br>      <span class="hljs-keyword">if</span> (user) &#123;   <span class="hljs-comment">// 有相同邮箱的用户存在</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;邮箱已存在&#x27;</span>)<br>      &#125;<br>    &#125;),<br>  body(<span class="hljs-string">&#x27;user.password&#x27;</span>).notEmpty().withMessage(<span class="hljs-string">&#x27;密码不能为空&#x27;</span>),<br>], <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;    <span class="hljs-comment">// 2. 判断验证结果</span><br>  <span class="hljs-keyword">const</span> errors = validationResult(req);<br>  <span class="hljs-keyword">if</span> (!errors.isEmpty()) &#123;<br>    <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">400</span>).json(&#123; <span class="hljs-attr">errors</span>: errors.array() &#125;);<br>  &#125;<br><br>  next()    <span class="hljs-comment">// 这个一定要加，不然通过验证的情况就会卡住</span><br>&#125;, userController.register)   <span class="hljs-comment">// 3. 通过验证</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/SVXpFAc5r1bZGCz.png" alt="image-20220212150745557"></p><h3 id="9-2-提取验证中间件模块"><a href="#9-2-提取验证中间件模块" class="headerlink" title="9.2 提取验证中间件模块"></a>9.2 提取验证中间件模块</h3><p>首先根据官方文档，增加验证中间件</p><p><img src="https://s2.loli.net/2022/03/06/CuIfyMkhGjaBiOF.png" alt="image-20220212151331241"></p><p>middleware \ validate.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; validationResult &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-validator&quot;</span>)<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">validations</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-built_in">Promise</span>.all(validations.map(<span class="hljs-function"><span class="hljs-params">validation</span> =&gt;</span> validation.run(req)))<br><br>    <span class="hljs-keyword">const</span> errors = validationResult(req)<br>    <span class="hljs-keyword">if</span> (errors.isEmpty()) &#123;<br>      <span class="hljs-keyword">return</span> next()<br>    &#125;<br><br>    res.status(<span class="hljs-number">400</span>).json(&#123; <span class="hljs-attr">errors</span>: errors.array() &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>新增文件夹validate(验证业务逻辑代码)</p><p>validate \ user.js(用户的验证逻辑)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> validate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../middleware/validate&quot;</span>)<br><span class="hljs-keyword">const</span> &#123; body, validationResult &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-validator&#x27;</span>);<br><br><span class="hljs-keyword">const</span> &#123; User &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../model&#x27;</span>)<br><br><span class="hljs-built_in">exports</span>.register = validate([   <span class="hljs-comment">// 1. 配置验证规则</span><br>  body(<span class="hljs-string">&#x27;user.username&#x27;</span>).notEmpty().withMessage(<span class="hljs-string">&#x27;用户名不能为空&#x27;</span>),   <span class="hljs-comment">// withMessage()定制错误提示消息</span><br>  body(<span class="hljs-string">&#x27;user.email&#x27;</span>)<br>    .notEmpty().withMessage(<span class="hljs-string">&#x27;邮箱不能为空&#x27;</span>)<br>    .isEmail().withMessage(<span class="hljs-string">&#x27;邮箱格式不正确&#x27;</span>)<br>    .bail()    <span class="hljs-comment">// 前面验证失败则不会往后执行</span><br>    .custom(<span class="hljs-keyword">async</span> email =&gt; &#123;  <span class="hljs-comment">// 自定义验证</span><br>      <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> User.findOne(&#123; email &#125;)<br>      <span class="hljs-keyword">if</span> (user) &#123;   <span class="hljs-comment">// 有相同邮箱的用户存在</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;邮箱已存在&#x27;</span>)<br>      &#125;<br>    &#125;),<br>  body(<span class="hljs-string">&#x27;user.password&#x27;</span>).notEmpty().withMessage(<span class="hljs-string">&#x27;密码不能为空&#x27;</span>),<br>])<br></code></pre></td></tr></table></figure><p>修改<code> router \ user.js</code></p><p><img src="https://s2.loli.net/2022/03/06/6tmrvNaL92XyxDs.png" alt="image-20220212151657837"></p><h2 id="10-密码加密处理"><a href="#10-密码加密处理" class="headerlink" title="10. 密码加密处理"></a>10. 密码加密处理</h2><p>开始前，先了解一下，MD5的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)<br><br><span class="hljs-comment">// 获取crypto支持的散列算法</span><br><span class="hljs-built_in">console</span>.log(crypto.getHashes())<br><br><span class="hljs-keyword">const</span> ret = crypto.createHash(<span class="hljs-string">&#x27;md5&#x27;</span>)  <span class="hljs-comment">// 必须是crypto支持的散列算法</span><br>  .update(<span class="hljs-string">&#x27;456&#x27;</span>)<br>  .digest(<span class="hljs-string">&#x27;hex&#x27;</span>)<span class="hljs-comment">// hex代表生成的序列是十进制的</span><br><br><br><span class="hljs-built_in">console</span>.log(ret)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/rbVPspS6oA781fJ.png" alt="image-20220212152639731"></p><p>开搞。</p><ol><li><p>封装md5模块</p><p>util \ md5.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">str</span> =&gt;</span> &#123;   <span class="hljs-comment">// str是明文，即要加密的数据</span><br>  <span class="hljs-keyword">return</span> crypto.createHash(<span class="hljs-string">&#x27;md5&#x27;</span>)  <span class="hljs-comment">// 必须是crypto支持的散列算法</span><br>    .update(str)       <span class="hljs-comment">// 可以凭借字符串，达到混淆效果，如hunxiao + str</span><br>    .digest(<span class="hljs-string">&#x27;hex&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用md5模块</p><p><img src="https://s2.loli.net/2022/03/06/wg6r2EeWGoXsM3d.png" alt="image-20220212155626831"></p><p><img src="https://s2.loli.net/2022/03/06/uaKD8TVZwJgAyoR.png" alt="image-20220212155939195"></p></li><li><p>上面返回给用户的数据中，密码也给返回了，所以有点危险</p><p>用户模型修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">password: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> md5(value),    <span class="hljs-comment">// 对密码赋值时，会调用md5进行加密</span><br>    <span class="hljs-attr">select</span>: <span class="hljs-literal">false</span>    <span class="hljs-comment">// 查询数据时，不显示出来</span><br><br>  &#125;<br></code></pre></td></tr></table></figure><p>结果还是不对，因为注册的用户是新new出来的对象，而不是查询出来的</p><p>直接删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 用户注册</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">register</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">let</span> user = <span class="hljs-keyword">new</span> User(req.body.user)<br>    <span class="hljs-keyword">await</span> user.save()<br>   <br>    user = user.toJSON()    <span class="hljs-comment">// 因为user是mongodb的对象，不能直接delete，所以先把它转成JSON</span><br>    <span class="hljs-keyword">delete</span> user.password<br>   <br>    <span class="hljs-comment">// 发送成功响应</span><br>    res.status(<span class="hljs-number">201</span>).json(&#123;<br>      user<br>    &#125;)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/c1PziKea9bGo2Iu.png" alt="image-20220212162415623"></p></li></ol><p>视频教程：<a href="https://www.bilibili.com/video/BV1mQ4y1C7Cn">Node.js 系列教程之 Express_哔哩哔哩_bilibili</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Express实战-一-项目结构搭建及验证、加密&quot;&gt;&lt;a href=&quot;#Express实战-一-项目结构搭建及验证、加密&quot; class=&quot;headerlink&quot; title=&quot;Express实战(一)            项目结构搭建及验证、加密&quot;&gt;&lt;/a&gt;Ex</summary>
      
    
    
    
    <category term="后端" scheme="https://clz.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Express" scheme="https://clz.vercel.app/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>Promise学习笔记(二)</title>
    <link href="https://clz.vercel.app/2022/03/05/promise-2/"/>
    <id>https://clz.vercel.app/2022/03/05/promise-2/</id>
    <published>2022-03-05T03:29:53.000Z</published>
    <updated>2022-03-05T03:31:37.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise学习笔记-二"><a href="#Promise学习笔记-二" class="headerlink" title="Promise学习笔记(二)"></a>Promise学习笔记(二)</h1><h2 id="1-改变promise的状态"><a href="#1-改变promise的状态" class="headerlink" title="1. 改变promise的状态"></a>1. 改变promise的状态</h2><p>promise的状态一开始是pending，改变promise的状态有三个方法：</p><ul><li>调用resolve函数：pending =&gt; fulfilled(resolved)</li><li>调用reject函数：pending =&gt; rejected</li><li>抛出异常：pending =&gt; rejected</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 0. 初始状态：pending</span><br><span class="hljs-keyword">const</span> p0 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;&#125;)<br><span class="hljs-built_in">console</span>.log(p0)<br><br><span class="hljs-comment">// 1. 调用resolve函数：pending =&gt; fulfilled(resolved)</span><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>&#125;)<br><span class="hljs-built_in">console</span>.log(p1)<br><br><span class="hljs-comment">// 2. 调用reject函数：pending =&gt; rejected</span><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  reject(<span class="hljs-string">&#x27;error&#x27;</span>)<br>&#125;)<br><span class="hljs-built_in">console</span>.log(p2)<br>p2.catch(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(reason)<br>&#125;)<br><br><span class="hljs-comment">// 3. 抛出异常：pending =&gt; rejected</span><br><span class="hljs-keyword">const</span> p3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;抛出异常&#x27;</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(p3)<br>p3.catch(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(reason)<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/4k1fOsAVoqe3Sbi.png" alt="image-20220226173041998"></p><h2 id="2-指定多个回调"><a href="#2-指定多个回调" class="headerlink" title="2. 指定多个回调"></a>2. 指定多个回调</h2><p><strong>当promise改变为对应状态时都会调用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>p.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;指定的第一个回调函数&#x27;</span>)<br>&#125;)<br><br>p.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;指定的第二个回调函数&#x27;</span>)<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;%c---------------&#x27;</span>, <span class="hljs-string">&#x27;color: red; font-size: 24px&#x27;</span>)<br>&#125;)<br><br><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;error&#x27;</span>)<br>p1.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;指定的第一个回调函数&#x27;</span>) <span class="hljs-comment">// 失败的结果，不会调用这个成功时才调用的函数</span><br>&#125;)<br><br>p1.catch(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;指定的第二个回调函数&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/nAWPjJdEcqt92si.png" alt="image-20220226174300677"></p><h2 id="3-then方法返回结果"><a href="#3-then方法返回结果" class="headerlink" title="3. then方法返回结果"></a>3. then方法返回结果</h2><p>then()方法返回新的Promise对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&#x27;ok&#x27;</span>)<br><br><span class="hljs-comment">// 1. 抛出异常</span><br><span class="hljs-keyword">let</span> result1 = p1.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;抛出异常&#x27;</span><br>&#125;, <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.warn(reason)<br>&#125;)<br><span class="hljs-built_in">console</span>.log(result1) <span class="hljs-comment">// [[PromiseState]]: &quot;rejected&quot;</span><br><br><span class="hljs-comment">// 2. 非Promise类型的对象</span><br><span class="hljs-keyword">const</span> result2 = p1.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello, CLZ!&#x27;</span> <span class="hljs-comment">// [[PromiseState]]: &quot;fulfilled&quot;</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(result2)<br><br><span class="hljs-comment">// 3. Promise类型的对象</span><br><span class="hljs-comment">// 3.1 结果成功</span><br><span class="hljs-keyword">const</span> result3 = p1.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&#x27;success&#x27;</span>)<br>  &#125;)<br>&#125;)<br><span class="hljs-built_in">console</span>.log(result3)<br><br><span class="hljs-comment">// 3.2 结果失败</span><br><span class="hljs-keyword">const</span> result4 = p1.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    reject(<span class="hljs-string">&#x27;error&#x27;</span>)<br>  &#125;)<br>&#125;)<br><span class="hljs-built_in">console</span>.log(result4)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/ax9SIO7D6gKcNvj.png" alt="image-20220226203535240"></p><h2 id="4-串联多个任务"><a href="#4-串联多个任务" class="headerlink" title="4. 串联多个任务"></a>4. 串联多个任务</h2><p><strong>链式调用</strong>原理：then()返回的是Promise对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&#x27;ok&#x27;</span>)<br><br>p1.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&#x27;success&#x27;</span>)<br>  &#125;)<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(value) <span class="hljs-comment">// success</span><br>  <span class="hljs-keyword">return</span> value<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(value) <span class="hljs-comment">// success</span><br>  <span class="hljs-keyword">return</span> value<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="5-异常穿透"><a href="#5-异常穿透" class="headerlink" title="5. 异常穿透"></a>5. 异常穿透</h2><ul><li>当使用Promise的then链式调用时，可以在最后指定失败的回调</li><li>前面任何操作出异常都会传给最后失败的回调处理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&#x27;ok&#x27;</span>)<br><br>p1.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&#x27;success&#x27;</span>)<br>  &#125;)<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(value)<br>  <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;出现异常&#x27;</span><br>  <span class="hljs-keyword">return</span> value<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(value)<br>  <span class="hljs-keyword">return</span> value<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.warn(reason)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="6-中断Promise链"><a href="#6-中断Promise链" class="headerlink" title="6. 中断Promise链"></a>6. 中断Promise链</h2><p><b style="color: red">有且只有一个方式：返回一个pending状态的Promise对象</b></p><p>因为返回一个pending状态的对象时，后续的回调就不能执行了，因为后面的回调函数只有在状态发生变化时才能执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&#x27;ok&#x27;</span>)<br><br>p1.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&#x27;success&#x27;</span>)<br>  &#125;)<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;) <span class="hljs-comment">// 只输出1, 2</span><br>  <span class="hljs-comment">// return false    // 无效果</span><br>&#125;).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.warn(reason)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="7-Promise自定义封装"><a href="#7-Promise自定义封装" class="headerlink" title="7. Promise自定义封装"></a>7. Promise自定义封装</h2><h3 id="7-1-基本结构的搭建"><a href="#7-1-基本结构的搭建" class="headerlink" title="7.1 基本结构的搭建"></a>7.1 基本结构的搭建</h3><p>promise.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Promise</span>(<span class="hljs-params">executor</span>) </span>&#123;<br><br>&#125;<br><br><br><span class="hljs-built_in">Promise</span>.prototype.then = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试用: index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>手写Promise<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./promise.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="javascript">      resolve(<span class="hljs-string">&#x27;OK&#x27;</span>)</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><br><span class="javascript">    p.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(value)</span><br><span class="javascript">    &#125;, <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.warn(reason)</span><br><span class="javascript">    &#125;)</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-2-resolve、reject功能实现"><a href="#7-2-resolve、reject功能实现" class="headerlink" title="7.2 resolve、reject功能实现"></a>7.2 resolve、reject功能实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// resolve函数</span><br><span class="hljs-keyword">const</span> resolve = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 1. 修改对象的状态(promiseState)</span><br>  <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&#x27;fulfilled&#x27;</span><br><br>  <span class="hljs-comment">// 2. 设置对象结果值(promiseResult)</span><br>  <span class="hljs-built_in">this</span>.PromiseResult = data<br>&#125;<br><br><br><span class="hljs-comment">// reject函数</span><br><span class="hljs-keyword">const</span> reject = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 1. 修改对象的状态(promiseState)</span><br>  <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&#x27;rejected&#x27;</span><br><br>  <span class="hljs-comment">// 2. 设置对象结果值(promiseResult)</span><br>  <span class="hljs-built_in">this</span>.PromiseResult = data<br>&#125;<br></code></pre></td></tr></table></figure><p>promise.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Promise</span>(<span class="hljs-params">executor</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&#x27;pending&#x27;</span><br>  <span class="hljs-built_in">this</span>.PromiseResult = <span class="hljs-literal">null</span><br><br>  <span class="hljs-comment">// resolve函数</span><br>  <span class="hljs-keyword">const</span> resolve = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 1. 修改对象的状态(promiseState)</span><br>    <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&#x27;fulfilled&#x27;</span><br><br>    <span class="hljs-comment">// 2. 设置对象结果值(promiseResult)</span><br>    <span class="hljs-built_in">this</span>.PromiseResult = data<br>  &#125;<br><br>  <span class="hljs-comment">// reject函数</span><br>  <span class="hljs-keyword">const</span> reject = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 1. 修改对象的状态(promiseState)</span><br>    <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&#x27;rejected&#x27;</span><br><br>    <span class="hljs-comment">// 2. 设置对象结果值(promiseResult)</span><br>    <span class="hljs-built_in">this</span>.PromiseResult = data<br>  &#125;<br><br>  <span class="hljs-comment">// 同步调用执行器函数executor</span><br>  executor(resolve, reject)<br>&#125;<br><br><br><span class="hljs-built_in">Promise</span>.prototype.then = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-实现抛出异常改变promise状态"><a href="#7-3-实现抛出异常改变promise状态" class="headerlink" title="7.3 实现抛出异常改变promise状态"></a>7.3 实现抛出异常改变promise状态</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 实现抛出异常改变promise状态</span><br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-comment">// 同步调用执行器函数executor</span><br>  executor(resolve, reject)<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>  reject(e)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-4-实现Promise状态只能修改一次"><a href="#7-4-实现Promise状态只能修改一次" class="headerlink" title="7.4 实现Promise状态只能修改一次"></a>7.4 实现Promise状态只能修改一次</h3><p><code>pending =&gt; fulfilled(resolved)</code>或<code>pending =&gt; rejected</code></p><p>只需要在resolve函数和reject函数最开始加上判断，Promise的状态是不是pending就行，如果不是，直接return</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState !== <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;<br>  <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-5-实现then方法"><a href="#7-5-实现then方法" class="headerlink" title="7.5 实现then方法"></a>7.5 实现then方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.prototype.then = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;fulfilled&#x27;</span>) &#123;<br>    onResolved(<span class="hljs-built_in">this</span>.PromiseResult)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;rejected&#x27;</span>) &#123;<br>    onRejected(<span class="hljs-built_in">this</span>.PromiseResult)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-6-实现异步任务的执行"><a href="#7-6-实现异步任务的执行" class="headerlink" title="7.6 实现异步任务的执行"></a>7.6 实现异步任务的执行</h3><p>当任务是异步任务时，则无法执行成功或失败的回调函数，因为执行then参数时，状态是pending。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&#x27;OK&#x27;</span>)<br>  &#125;, <span class="hljs-number">0</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>实现方法：</p><ul><li><p>自定义Promise对象增加一个<code> callback</code>对象，用于存成功、失败的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.callback = &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p><code> then</code>函数增加状态为<code> pending</code>的判断，这时候只是把回调函数存放起来，等到实际调用<code> resolve</code>或<code> reject</code>函数时才调用存起来的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;fulfilled&#x27;</span>) &#123;<br>    onResolved(<span class="hljs-built_in">this</span>.PromiseResult)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;rejected&#x27;</span>) &#123;<br>    onRejected(<span class="hljs-built_in">this</span>.PromiseResult)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 保存回调函数</span><br>    <span class="hljs-built_in">this</span>.callback = &#123;<br>      onResolved,<br>      onRejected<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>调用<code> resolve</code>或<code> reject</code>函数时，判断是否需要调用存起来的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.callback.onResolved) &#123;  <span class="hljs-comment">// ` resolve`或` reject`函数最后</span><br>  <span class="hljs-built_in">this</span>.callback.onResolved(data)<span class="hljs-comment">// reject函数对应修改为onRejected</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="7-7-指定多个回调函数"><a href="#7-7-指定多个回调函数" class="headerlink" title="7.7 指定多个回调函数"></a>7.7 指定多个回调函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&#x27;OK&#x27;</span>)<br>  &#125;, <span class="hljs-number">1000</span>)<br>&#125;)<br><br>p.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(value)<br>&#125;, <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.warn(reason)<br>&#125;)<br><br>p.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  alert(value)<br>&#125;, <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>  alert(reason)<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>会发现，最后只会弹出OK，而不会在控制台输出。</strong>只是因为前面保存的callback属性是对象，所以后面的会覆盖掉前面的，改进只需要把callback变为数组即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.callbacks = []<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.prototype.then = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;fulfilled&#x27;</span>) &#123;<br>    onResolved(<span class="hljs-built_in">this</span>.PromiseResult)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;rejected&#x27;</span>) &#123;<br>    onRejected(<span class="hljs-built_in">this</span>.PromiseResult)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">this</span>.callbacks.push(&#123;<br>      onResolved,<br>      onRejected<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.callbacks.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123; <span class="hljs-comment">// ` resolve`或` reject`函数最后</span><br>  item.onResolved(data)<span class="hljs-comment">// reject函数对应修改为onRejected</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="7-8-then方法返回结果"><a href="#7-8-then方法返回结果" class="headerlink" title="7.8 then方法返回结果"></a>7.8 then方法返回结果</h3><p>成功时的代码修改如下图，失败的类似</p><p><strong>只实现同步</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;fulfilled&#x27;</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 获取回调函数的执行结果</span><br>        <span class="hljs-keyword">const</span> result = onResolved(<span class="hljs-built_in">this</span>.PromiseResult)<br><br>        <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>          <span class="hljs-comment">// 结果是Promise类型对象 </span><br>          result.then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>            resolve(v)<br>          &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>            reject(r)<br>          &#125;)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          resolve(result)<br>        &#125;<br><br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        reject(e)<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// else if (this.PromiseState === &#x27;rejected&#x27;) &#123;</span><br>    <span class="hljs-comment">//   onRejected(this.PromiseResult)</span><br>    <span class="hljs-comment">// &#125; else &#123;</span><br>    <span class="hljs-comment">//   this.callbacks.push(&#123;</span><br>    <span class="hljs-comment">//     onResolved,</span><br>    <span class="hljs-comment">//     onRejected</span><br>    <span class="hljs-comment">//   &#125;)</span><br>    <span class="hljs-comment">// &#125;</span><br>  &#125;)<br></code></pre></td></tr></table></figure><p><strong>实现异步</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> self = <span class="hljs-built_in">this</span><br><br><span class="hljs-built_in">this</span>.callbacks.push(&#123;<br>  <span class="hljs-attr">onResolved</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">let</span> result = onResolved(self.PromiseResult)<br>      <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>        result.then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>          resolve(v)<br>        &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>          reject(r)<br>        &#125;)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        resolve(result)<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      reject(e)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">onRejected</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 类似上面</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="7-9-then方法封装优化"><a href="#7-9-then方法封装优化" class="headerlink" title="7.9 then方法封装优化"></a>7.9 then方法封装优化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">type</span>) </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 获取回调函数的执行结果</span><br>    <span class="hljs-keyword">const</span> result = type(self.PromiseResult)<br><br>    <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>      <span class="hljs-comment">// 结果是Promise类型对象 </span><br>      result.then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>        resolve(v)<br>      &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>        reject(r)<br>      &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      resolve(result)<br>    &#125;<br><br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    reject(e)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.prototype.then = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> self = <span class="hljs-built_in">this</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">type</span>) </span>&#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 获取回调函数的执行结果</span><br>        <span class="hljs-keyword">const</span> result = type(self.PromiseResult)<br><br>        <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>          <span class="hljs-comment">// 结果是Promise类型对象 </span><br>          result.then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>            resolve(v)<br>          &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>            reject(r)<br>          &#125;)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          resolve(result)<br>        &#125;<br><br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        reject(e)<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;fulfilled&#x27;</span>) &#123;<br>      callback(onResolved)<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState ===   <span class="hljs-string">&#x27;rejected&#x27;</span>) &#123;<br>      callback(onRejected)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks.push(&#123;<br>        <span class="hljs-attr">onResolved</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          callback(onResolved)<br>        &#125;,<br>        <span class="hljs-attr">onRejected</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          callback(onRejected)<br>        &#125;<br>      &#125;)<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-10-catch方法"><a href="#7-10-catch方法" class="headerlink" title="7.10 catch方法"></a>7.10 catch方法</h3><p><strong>异常穿透</strong>：因为catch方法支持只传一个参数<code> reason =&gt; &#123;&#125;</code>，而then方法第二个参数才是<code> reason =&gt; &#123;&#125;</code>，所以会出问题：最后调用catch时没有onRejected方法</p><p>所以，需要在then方法开始的时候添加以下判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onRejected !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>  onRejected = <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">throw</span> reason<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>catch方法还应实现值传递，即then可以不传参数，那么和上面的原理一样，还需要添加当onResolved不存在的情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onResolved !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>  onResolved = <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value<br>&#125;<br></code></pre></td></tr></table></figure><p>测试用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>手写Promise<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./promise.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        resolve(<span class="hljs-string">&#x27;ok&#x27;</span>)</span><br><span class="javascript">      &#125;, <span class="hljs-number">1000</span>)</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><br><span class="javascript">    p.then()</span><br><span class="javascript">      .then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">222</span>)</span><br><span class="javascript">      &#125;).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">333</span>)</span><br><span class="javascript">      &#125;).catch(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.warn(reason)</span><br><span class="javascript">      &#125;)</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-11-API"><a href="#7-11-API" class="headerlink" title="7.11 API"></a>7.11 API</h3><h4 id="7-11-1-resolve方法和reject方法"><a href="#7-11-1-resolve方法和reject方法" class="headerlink" title="7.11.1 resolve方法和reject方法"></a>7.11.1 resolve方法和reject方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// resolve方法</span><br><span class="hljs-built_in">Promise</span>.resolve = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>      value.then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>        resolve(v)<br>      &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>        reject(r)<br>      &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      resolve(value)<br>    &#125;<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// reject方法</span><br><span class="hljs-built_in">Promise</span>.reject = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">reason</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    reject(reason)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-11-2-all方法"><a href="#7-11-2-all方法" class="headerlink" title="7.11.2 all方法"></a>7.11.2 all方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// all方法</span><br><span class="hljs-built_in">Promise</span>.all = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> arr = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) &#123;<br>      promises[i].then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>        arr[i] = v<br>        <span class="hljs-keyword">if</span> (arr.length === promises.length) &#123;<br>          resolve(arr)<br>        &#125;<br>      &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>        reject(r)<br>      &#125;)<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>手写Promise<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./promise.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="javascript">      resolve(<span class="hljs-string">&#x27;p1: OK&#x27;</span>)</span><br><span class="javascript">    &#125;)</span><br><span class="javascript">    <span class="hljs-keyword">const</span> p2 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&#x27;p2: OK&#x27;</span>)</span><br><span class="javascript">    <span class="hljs-keyword">const</span> p3 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&#x27;p3: OK&#x27;</span>)</span><br><span class="javascript">    <span class="hljs-keyword">const</span> result1 = <span class="hljs-built_in">Promise</span>.all([p1, p2, p3]) <span class="hljs-comment">// 所有Promise的结果都成功</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(result1)</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> p4 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&#x27;p4: OK&#x27;</span>)</span><br><span class="javascript">    <span class="hljs-keyword">const</span> p5 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;p5: Err&#x27;</span>)</span><br><span class="javascript">    <span class="hljs-keyword">const</span> p6 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;p6: Err&#x27;</span>)</span><br><span class="javascript">    <span class="hljs-keyword">const</span> result2 = <span class="hljs-built_in">Promise</span>.all([p4, p5, p6]) <span class="hljs-comment">// 有Promise的结果失败</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(result2)</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/n7BaoepVFNtulUS.png" alt="image-20220227171844700"></p><h4 id="7-11-3-race方法"><a href="#7-11-3-race方法" class="headerlink" title="7.11.3 race方法"></a>7.11.3 race方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// race方法</span><br><span class="hljs-built_in">Promise</span>.race = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) &#123;<br>      promises[i].then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>        resolve(v)<br>      &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>        reject(r)<br>      &#125;)<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-12-then方法回调是异步执行"><a href="#7-12-then方法回调是异步执行" class="headerlink" title="7.12 then方法回调是异步执行"></a>7.12 then方法回调是异步执行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1 3 2：then方法异步执行，得等同步方法执行完才执行</span><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>&#125;)<br><br>p1.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p><strong>自定义Promise实现then方法回调异步执行</strong>：就是把原本调用成功、失败时的回调函数变为异步的就行了</p><p>如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;fulfilled&#x27;</span>) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    callback(onResolved)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/JWv3BpfiebkuGth.png" alt="image-20220227175150352"></p><h3 id="7-13-完整代码"><a href="#7-13-完整代码" class="headerlink" title="7.13. 完整代码"></a>7.13. 完整代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Promise</span>(<span class="hljs-params">executor</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&#x27;pending&#x27;</span><br>  <span class="hljs-built_in">this</span>.PromiseResult = <span class="hljs-literal">null</span><br>  <span class="hljs-built_in">this</span>.callbacks = []<br><br>  <span class="hljs-comment">// resolve函数</span><br>  <span class="hljs-keyword">const</span> resolve = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState !== <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;<br>      <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-comment">// 1. 修改对象的状态(promiseState)</span><br>    <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&#x27;fulfilled&#x27;</span><br><br>    <span class="hljs-comment">// 2. 设置对象结果值(promiseResult)</span><br>    <span class="hljs-built_in">this</span>.PromiseResult = data<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        item.onResolved(data)<br>      &#125;)<br>    &#125;)<br><br>  &#125;<br><br>  <span class="hljs-comment">// reject函数</span><br>  <span class="hljs-keyword">const</span> reject = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState !== <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;<br>      <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-comment">// 1. 修改对象的状态(promiseState)</span><br>    <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&#x27;rejected&#x27;</span><br><br>    <span class="hljs-comment">// 2. 设置对象结果值(promiseResult)</span><br>    <span class="hljs-built_in">this</span>.PromiseResult = data<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        item.onRejected(data)<br>      &#125;)<br>    &#125;)<br><br>  &#125;<br><br>  <span class="hljs-comment">// 实现抛出异常改变promise状态</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 同步调用执行器函数executor</span><br>    executor(resolve, reject)<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    reject(e)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// then方法</span><br><span class="hljs-built_in">Promise</span>.prototype.then = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onRejected !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    onRejected = <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">throw</span> reason<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onResolved !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    onResolved = <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> self = <span class="hljs-built_in">this</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">type</span>) </span>&#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 获取回调函数的执行结果</span><br>        <span class="hljs-keyword">const</span> result = type(self.PromiseResult)<br><br>        <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>          <span class="hljs-comment">// 结果是Promise类型对象 </span><br>          result.then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>            resolve(v)<br>          &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>            reject(r)<br>          &#125;)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          resolve(result)<br>        &#125;<br><br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        reject(e)<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;fulfilled&#x27;</span>) &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        callback(onResolved)<br>      &#125;)<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;rejected&#x27;</span>) &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        callback(onRejected)<br>      &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks.push(&#123;<br>        <span class="hljs-attr">onResolved</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          callback(onResolved)<br>        &#125;,<br>        <span class="hljs-attr">onRejected</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          callback(onRejected)<br>        &#125;<br>      &#125;)<br>    &#125;<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// catch方法</span><br><span class="hljs-built_in">Promise</span>.prototype.catch = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onRejected</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.then(<span class="hljs-literal">undefined</span>, onRejected)<br>&#125;<br><br><span class="hljs-comment">// resolve方法</span><br><span class="hljs-built_in">Promise</span>.resolve = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>      value.then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>        resolve(v)<br>      &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>        reject(r)<br>      &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      resolve(value)<br>    &#125;<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// reject方法</span><br><span class="hljs-built_in">Promise</span>.reject = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">reason</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    reject(reason)<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// all方法</span><br><span class="hljs-built_in">Promise</span>.all = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> arr = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) &#123;<br>      promises[i].then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>        arr[i] = v<br>        <span class="hljs-keyword">if</span> (arr.length === promises.length) &#123;<br>          resolve(arr)<br>        &#125;<br>      &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>        reject(r)<br>      &#125;)<br>    &#125;<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// race方法</span><br><span class="hljs-built_in">Promise</span>.race = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) &#123;<br>      promises[i].then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>        resolve(v)<br>      &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>        reject(r)<br>      &#125;)<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>封装成类版本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Promise</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&#x27;pending&#x27;</span><br>    <span class="hljs-built_in">this</span>.PromiseResult = <span class="hljs-literal">null</span><br>    <span class="hljs-built_in">this</span>.callbacks = []<br><br>    <span class="hljs-comment">// resolve函数</span><br>    <span class="hljs-keyword">const</span> resolve = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState !== <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span><br>      &#125;<br><br>      <span class="hljs-comment">// 1. 修改对象的状态(promiseState)</span><br>      <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&#x27;fulfilled&#x27;</span><br><br>      <span class="hljs-comment">// 2. 设置对象结果值(promiseResult)</span><br>      <span class="hljs-built_in">this</span>.PromiseResult = data<br><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.callbacks.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>          item.onResolved(data)<br>        &#125;)<br>      &#125;)<br><br>    &#125;<br><br>    <span class="hljs-comment">// reject函数</span><br>    <span class="hljs-keyword">const</span> reject = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState !== <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span><br>      &#125;<br><br>      <span class="hljs-comment">// 1. 修改对象的状态(promiseState)</span><br>      <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&#x27;rejected&#x27;</span><br><br>      <span class="hljs-comment">// 2. 设置对象结果值(promiseResult)</span><br>      <span class="hljs-built_in">this</span>.PromiseResult = data<br><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.callbacks.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>          item.onRejected(data)<br>        &#125;)<br>      &#125;)<br><br>    &#125;<br><br>    <span class="hljs-comment">// 实现抛出异常改变promise状态</span><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 同步调用执行器函数executor</span><br>      executor(resolve, reject)<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      reject(e)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">then</span>(<span class="hljs-params">onResolved, onRejected</span>)</span> &#123;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onRejected !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>      onRejected = <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">throw</span> reason<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onResolved !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>      onResolved = <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> self = <span class="hljs-built_in">this</span><br><br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">type</span>) </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">// 获取回调函数的执行结果</span><br>          <span class="hljs-keyword">const</span> result = type(self.PromiseResult)<br><br>          <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>            <span class="hljs-comment">// 结果是Promise类型对象 </span><br>            result.then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>              resolve(v)<br>            &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>              reject(r)<br>            &#125;)<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            resolve(result)<br>          &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>          reject(e)<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;fulfilled&#x27;</span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          callback(onResolved)<br>        &#125;)<br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;rejected&#x27;</span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          callback(onRejected)<br>        &#125;)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">this</span>.callbacks.push(&#123;<br>          <span class="hljs-attr">onResolved</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            callback(onResolved)<br>          &#125;,<br>          <span class="hljs-attr">onRejected</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            callback(onRejected)<br>          &#125;<br>        &#125;)<br>      &#125;<br>    &#125;)<br><br>  &#125;<br><br>  <span class="hljs-keyword">catch</span>(onRejected) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.then(<span class="hljs-literal">undefined</span>, onRejected)<br>  &#125;<br><br>  <span class="hljs-comment">// resolve方法(静态方法，属于类而不是属于实例对象)</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">resolve</span>(<span class="hljs-params">value</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>        value.then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>          resolve(v)<br>        &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>          reject(r)<br>        &#125;)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        resolve(value)<br>      &#125;<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-comment">// reject方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">reject</span>(<span class="hljs-params">reason</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      reject(reason)<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-comment">// all方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">all</span>(<span class="hljs-params">promises</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> arr = []<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) &#123;<br>        promises[i].then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>          arr[i] = v<br>          <span class="hljs-keyword">if</span> (arr.length === promises.length) &#123;<br>            resolve(arr)<br>          &#125;<br>        &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>          reject(r)<br>        &#125;)<br>      &#125;<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-comment">// race方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">race</span>(<span class="hljs-params">promises</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) &#123;<br>        promises[i].then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>          resolve(v)<br>        &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>          reject(r)<br>        &#125;)<br>      &#125;<br>    &#125;)<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="8-async和await"><a href="#8-async和await" class="headerlink" title="8. async和await"></a>8. async和await</h2><h3 id="8-1-async函数"><a href="#8-1-async函数" class="headerlink" title="8.1 async函数"></a>8.1 async函数</h3><ul><li>函数的返回值是Promise对象</li><li>Promise对象的结果由async函数执行的返回值决定</li></ul><p>和then方法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 返回值为一个非Promise类型的数据</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">123</span><br>&#125;<br><span class="hljs-keyword">let</span> result1 = test1()<br><span class="hljs-built_in">console</span>.log(result1)<br><br><span class="hljs-comment">// 2. 返回值为一个Promise对象，结果为成功</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>  &#125;)<br>&#125;<br><span class="hljs-keyword">let</span> result2 = test2()<br><span class="hljs-built_in">console</span>.log(result2)<br><br><span class="hljs-comment">// 3. 返回值为一个Promise对象，结果为失败</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test3</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    reject(<span class="hljs-string">&#x27;error&#x27;</span>)<br>  &#125;)<br>&#125;<br><span class="hljs-keyword">let</span> result3 = test3()<br><span class="hljs-built_in">console</span>.log(result3)<br><br><span class="hljs-comment">// 4. 抛出异常</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test4</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;抛出异常&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> result4 = test4()<br><span class="hljs-built_in">console</span>.log(result4)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/TqvdYSm5NwipCaf.png" alt="image-20220227192621644"></p><h3 id="8-2-await表达式"><a href="#8-2-await表达式" class="headerlink" title="8.2 await表达式"></a>8.2 await表达式</h3><ul><li>await右侧的表达式一般是Promise对象，但也可以是其他值</li><li>如果右侧的表达式是promise对象，await返回的是promise成功的值</li><li>如果右侧的表达式是其他值，await返回的就是该值</li></ul><p>注意：</p><ul><li><b style="color: red">await必须写在async函数中，但async函数中不一定要await</b></li><li>如果await的promise失败，则会抛出异常，所以需要通过<code> try...catch</code>捕捉处理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> test = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-comment">// 1. await右侧为其他类型的情况</span><br>  <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-number">123</span><br>  <span class="hljs-built_in">console</span>.log(result) <span class="hljs-comment">// 123</span><br><br>  <span class="hljs-comment">// 2. await右侧为Promise的情况</span><br>  <span class="hljs-comment">// 2.1 成功</span><br>  result = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>  &#125;)<br>  <span class="hljs-built_in">console</span>.log(result) <span class="hljs-comment">// ok</span><br><br>  <span class="hljs-comment">// 2.2 失败</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    result = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      reject(<span class="hljs-string">&#x27;error&#x27;</span>)<br>    &#125;)<br>    <span class="hljs-built_in">console</span>.log(result) <span class="hljs-comment">// ok</span><br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-built_in">console</span>.log(e)<br>  &#125;<br>&#125;<br><br>test()<br></code></pre></td></tr></table></figure><h3 id="8-3-async和await使用"><a href="#8-3-async和await使用" class="headerlink" title="8.3 async和await使用"></a>8.3 async和await使用</h3><h4 id="8-3-1-读取文件"><a href="#8-3-1-读取文件" class="headerlink" title="8.3.1 读取文件"></a>8.3.1 读取文件</h4><p>情景：读取resource文件夹下的数据(1.txt，2.txt，3.txt)，分别是111、222、333。并把数据拼接后在控制台打印出来。</p><p><strong>回调函数版本</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.readFile(<span class="hljs-string">&#x27;./resource/1.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data1</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-keyword">throw</span> err<br>  &#125;<br>  fs.readFile(<span class="hljs-string">&#x27;./resource/2.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data2</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">throw</span> err<br>    &#125;<br>    fs.readFile(<span class="hljs-string">&#x27;./resource/3.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data3</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(data1 + data2 + data3)<br>    &#125;)<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/2t65LCcdgmM7lwE.png" alt="image-20220227194850320"></p><p><strong>async+await版本</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; promisify &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)<br><br><span class="hljs-keyword">const</span> readFile = promisify(fs.readFile)<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myReadFile</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">let</span> data1 = <span class="hljs-keyword">await</span> readFile(<span class="hljs-string">&#x27;./resource/1.txt&#x27;</span>)<br>    <span class="hljs-keyword">let</span> data2 = <span class="hljs-keyword">await</span> readFile(<span class="hljs-string">&#x27;./resource/2.txt&#x27;</span>)<br>    <span class="hljs-keyword">let</span> data3 = <span class="hljs-keyword">await</span> readFile(<span class="hljs-string">&#x27;./resource/3.txt&#x27;</span>)<br><br>    <span class="hljs-built_in">console</span>.log(data1 + data2 + data3)<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-built_in">console</span>.log(e)<br>  &#125;<br>&#125;<br><br>myReadFile()<br></code></pre></td></tr></table></figure><h4 id="8-3-2-axios使用"><a href="#8-3-2-axios使用" class="headerlink" title="8.3.2 axios使用"></a>8.3.2 axios使用</h4><p>安装：<code> npm install axios</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>)<br><br>  <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">&#x27;https://qcgx2i.api.cloudendpoint.cn/hello&#x27;</span>)<br>  <span class="hljs-built_in">console</span>.log(data)<br>&#125;())<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/5Q6GFRT9nSvuPoI.png" alt="image-20220227195827006"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Promise学习笔记-二&quot;&gt;&lt;a href=&quot;#Promise学习笔记-二&quot; class=&quot;headerlink&quot; title=&quot;Promise学习笔记(二)&quot;&gt;&lt;/a&gt;Promise学习笔记(二)&lt;/h1&gt;&lt;h2 id=&quot;1-改变promise的状态&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="前端" scheme="https://clz.vercel.app/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Promise" scheme="https://clz.vercel.app/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Promise学习笔记(一)</title>
    <link href="https://clz.vercel.app/2022/03/05/promise-1/"/>
    <id>https://clz.vercel.app/2022/03/05/promise-1/</id>
    <published>2022-03-05T03:29:43.000Z</published>
    <updated>2022-03-12T04:09:20.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise学习笔记-一"><a href="#Promise学习笔记-一" class="headerlink" title="Promise学习笔记(一)"></a>Promise学习笔记(一)</h1><p>一直有在用Promise，但是没有系统学过Promise，自然也不知道原理。现在就来学习一波。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>Promise是JS中进行异步编程的新解决方案。在这之前使用过回调函数进行异步编程。</p><p>Promise是一个构造函数，Promise对象用来封装一个异步操作并可以获取其成功或失败的结果值</p><h3 id="Promise优点"><a href="#Promise优点" class="headerlink" title="Promise优点"></a>Promise优点</h3><ol><li><p>支持链式调用，可解决回调地狱问题</p><p> <strong>回调地狱</strong>：回调函数嵌套使用</p></li></ol><p><img src="https://s2.loli.net/2022/03/05/NL5nd3WekJmDZSU.png" alt="image-20220225162417514"></p><pre><code>**回调地狱导致的问题**：</code></pre><ul><li><p>阅读困难（后期维护麻烦）</p></li><li><p>不便于异常处理</p></li></ul><ol start="2"><li>指定回调函数的方式更灵活<ul><li>Promise：启动异步任务 =&gt; 返回Promise对象 =&gt; Promise对象绑定回调函数</li><li>纯用回调函数：必须在启动异步任务前指定</li></ul></li></ol><h2 id="2-Promise-体验"><a href="#2-Promise-体验" class="headerlink" title="2. Promise 体验"></a>2. Promise 体验</h2><h3 id="2-1-抽奖"><a href="#2-1-抽奖" class="headerlink" title="2.1 抽奖"></a>2.1 抽奖</h3><p>先来一个抽奖示例(隔1s后出结果)</p><h4 id="2-1-1-回调函数版本"><a href="#2-1-1-回调函数版本" class="headerlink" title="2.1.1 回调函数版本"></a>2.1.1 回调函数版本</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Promise初体验<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>抽奖<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rand</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">100</span> + <span class="hljs-number">1</span>) <span class="hljs-comment">// 返回1到100之前的随机数</span></span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#btn&quot;</span>)</span><br><span class="javascript"></span><br><span class="javascript">      btn.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">let</span> n = rand()</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">50</span>) &#123;</span><br><span class="javascript">            alert(<span class="hljs-string">&quot;恭喜你中奖了&quot;</span>)</span><br><span class="javascript">          &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">            alert(<span class="hljs-string">&quot;很遗憾，你没有中奖&quot;</span>)</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;, <span class="hljs-number">1000</span>)</span><br><span class="javascript">      &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/CWhbzNoZcHAutRi.gif" alt="promise"></p><h4 id="2-1-2-Promise版本"><a href="#2-1-2-Promise版本" class="headerlink" title="2.1.2 Promise版本"></a>2.1.2 Promise版本</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Promise初体验<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>抽奖<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rand</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">100</span> + <span class="hljs-number">1</span>) <span class="hljs-comment">// 返回1到100之前的随机数</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#btn&quot;</span>)</span><br><span class="javascript"></span><br><span class="javascript">    btn.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-comment">// resolve 成功后执行的函数</span></span><br><span class="javascript">        <span class="hljs-comment">// reject 失败后执行的函数</span></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">let</span> n = rand()</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">50</span>) &#123;</span><br><span class="javascript">            resolve(n) <span class="hljs-comment">// 可以将Promise的状态设置为成功</span></span><br><span class="javascript">          &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">            reject(n) <span class="hljs-comment">// 可以将Promise的状态设置为失败</span></span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;, <span class="hljs-number">1000</span>)</span><br><span class="javascript">      &#125;)</span><br><span class="javascript"></span><br><span class="javascript">      p.then(</span><br><span class="javascript">        <span class="hljs-comment">// 通过then方法指定成功或失败时的回调函数，第一个参数是成功时的回调，第二个参数是失败时的回调</span></span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;</span><br><span class="javascript">          alert(<span class="hljs-string">`恭喜你，中奖了，中奖号码是<span class="hljs-subst">$&#123;value&#125;</span>`</span>)</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;</span><br><span class="javascript">          alert(<span class="hljs-string">`真遗憾，你没有中奖，中奖号码是<span class="hljs-subst">$&#123;value&#125;</span>`</span>)</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      )</span><br><span class="javascript">    &#125;)</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-文件读取"><a href="#2-2-文件读取" class="headerlink" title="2.2 文件读取"></a>2.2 文件读取</h3><h4 id="2-2-1-回调函数版本"><a href="#2-2-1-回调函数版本" class="headerlink" title="2.2.1 回调函数版本"></a>2.2.1 回调函数版本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.readFile(<span class="hljs-string">&#x27;./resource/content.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-keyword">throw</span> err<br>  &#125;<br><br>  <span class="hljs-built_in">console</span>.log(data.toString())<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2-2-2-Promise版本"><a href="#2-2-2-Promise版本" class="headerlink" title="2.2.2 Promise版本"></a>2.2.2 Promise版本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  fs.readFile(<span class="hljs-string">&#x27;./resource/content1.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      reject(err)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      resolve(data)<br>    &#125;<br>  &#125;)<br>&#125;)<br><br>p.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(value.toString())<br>&#125;, <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(reason)<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/nabwDJqGQHfRF3l.png" alt="image-20220225172452214"></p><h3 id="2-3-AJAX"><a href="#2-3-AJAX" class="headerlink" title="2.3  AJAX"></a>2.3  AJAX</h3><h4 id="2-3-1-原生版本-回调函数"><a href="#2-3-1-原生版本-回调函数" class="headerlink" title="2.3.1 原生版本(回调函数)"></a>2.3.1 原生版本(回调函数)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Promise封装AJAX<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-comment">// 1. 创建对象</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 2. 初始化</span></span><br><span class="javascript">      xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;https://qcgx2i.api.cloudendpoint.cn/hello&#x27;</span>)<span class="hljs-comment">// 接口可能会无效，换一个有效的就行</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 3. 发送</span></span><br><span class="javascript">      xhr.send()</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 4. 处理响应结果</span></span><br><span class="javascript">      xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(xhr.response)</span><br><span class="javascript">          &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(xhr.status)</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;)()</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/MAZxnHgewTQrY9o.png" alt="image-20220225174738518"></p><h4 id="2-3-2-Promise版本"><a href="#2-3-2-Promise版本" class="headerlink" title="2.3.2 Promise版本"></a>2.3.2 Promise版本</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Promise封装AJAX<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="javascript"></span><br><span class="javascript">        xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;https://qcgx2i.api.cloudendpoint.cn/hello&#x27;</span>);</span><br><span class="javascript"></span><br><span class="javascript">        xhr.send();</span><br><span class="javascript"></span><br><span class="javascript">        xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) &#123;</span><br><span class="javascript">              resolve(xhr.response) <span class="hljs-comment">// 成功</span></span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">              reject(xhr.status)</span><br><span class="javascript">            &#125;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;;</span><br><span class="javascript">      &#125;)</span><br><span class="javascript"></span><br><span class="javascript">      p.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(data)</span><br><span class="javascript">      &#125;, <span class="hljs-function">(<span class="hljs-params">statusCode</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.warn(statusCode)</span><br><span class="javascript">      &#125;)</span><br><span class="javascript">    &#125;)()</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-转化为Promise风格-promisify"><a href="#3-转化为Promise风格-promisify" class="headerlink" title="3. 转化为Promise风格(promisify)"></a>3. 转化为Promise风格(promisify)</h2><p>**util.promisify()**：传入一个遵循常见的错误优先的回调风格的函数(即以<code> (err, value) =&gt; &#123;...&#125;</code>作为最后一个参数)，并返回Promise版本。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; promisify &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)<br><br><span class="hljs-keyword">let</span> pReadfile = promisify(fs.readFile)  <span class="hljs-comment">// 把callback形式的异步api转化成promise形式的</span><br><br>pReadfile(<span class="hljs-string">&#x27;./resource/content.txt&#x27;</span>)<br>  .then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value.toString())<br>  &#125;)<br></code></pre></td></tr></table></figure><h2 id="4-Promise属性"><a href="#4-Promise属性" class="headerlink" title="4. Promise属性"></a>4. Promise属性</h2><h3 id="4-1-Promise状态"><a href="#4-1-Promise状态" class="headerlink" title="4.1 Promise状态"></a>4.1 Promise状态</h3><p>实例对象中的一个属性<code> [[PromiseState]]</code>，有三个值</p><ul><li>pending：未决定</li><li>resolved(fulfilled)：成功</li><li>rejected：失败</li></ul><p><strong>Promise的状态改变只有两种可能，且只能改变一次</strong>：</p><ul><li>pending变为resolved</li><li>pending变为rejected</li></ul><p>成功的结果数据一般称为<code> value</code>，失败的结果一般称为<code> reason</code></p><h3 id="4-2-Promise对象的值"><a href="#4-2-Promise对象的值" class="headerlink" title="4.2. Promise对象的值"></a>4.2. Promise对象的值</h3><p>实例对象中的一个属性<code> [[PromiseResult]]</code>，保存着异步任务成功或失败的结果</p><p>只能通过<code>resolve()</code>或<code>reject()</code>对<code> PromiseResult</code>进行修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  fs.readFile(<span class="hljs-string">&#x27;./resource/content1.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      reject(err)<span class="hljs-comment">// 通过reject()设置PromiseResult的值</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      resolve(data)<br>    &#125;<br>  &#125;)<br>&#125;)<br><br>p.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<span class="hljs-comment">// 把PromiseResult的值取出来，进行相关操作</span><br>  <span class="hljs-built_in">console</span>.log(value.toString())<br>&#125;, <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(reason)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="5-Promise工作流程"><a href="#5-Promise工作流程" class="headerlink" title="5. Promise工作流程"></a>5. Promise工作流程</h2><p><img src="https://s2.loli.net/2022/03/05/97yj6Mev2ZS1gBw.png" alt="image-20220226145957472"></p><h2 id="6-Promise-API"><a href="#6-Promise-API" class="headerlink" title="6. Promise API"></a>6. Promise API</h2><h3 id="6-1-构造函数-Promise-excutor"><a href="#6-1-构造函数-Promise-excutor" class="headerlink" title="6.1 构造函数 Promise(excutor)"></a>6.1 构造函数 Promise(excutor)</h3><p><strong>excutor函数</strong>：执行器, <code> (resolve, reject) =&gt; &#123;&#125;</code></p><p><strong>resolve函数</strong>：内部定义成功后调用的函数</p><p><strong>reject函数</strong>：内部定义失败后调用的函数</p><p><strong>构造函数会在Promise立即同步调用，异步操作在执行器中执行</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>&#125;)<br><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment">// 先输出1，再输出2</span><br></code></pre></td></tr></table></figure><h3 id="6-2-Promise-prototype-then方法"><a href="#6-2-Promise-prototype-then方法" class="headerlink" title="6.2 Promise.prototype.then方法"></a>6.2 Promise.prototype.then方法</h3><p>语法：<code> promise.then(onResolved, onRejected)</code></p><p><strong>onResolved函数</strong>：成功的回调函数, <code> value =&gt; &#123;&#125;</code></p><p><strong>onRejected函数</strong>：失败的回调函数, <code> reason =&gt; &#123;&#125;</code></p><p><strong>返回新的Promise对象</strong></p><h3 id="6-3-Promise-prototype-catch方法"><a href="#6-3-Promise-prototype-catch方法" class="headerlink" title="6.3 Promise.prototype.catch方法"></a>6.3 Promise.prototype.catch方法</h3><p>**与上面的then()类似，不过只能指定失败的回调函数</p><h3 id="6-4-Promise-resolve方法"><a href="#6-4-Promise-resolve方法" class="headerlink" title="6.4 Promise.resolve方法"></a>6.4 Promise.resolve方法</h3><p>作用：接受一个参数，返回一个成功或失败的Promise对象。能够快速封装一个值，将这个值转化为Promise对象</p><ul><li><p>如果传入的参数是<strong>非Promise类型的对象</strong>，如字符串、数字等，则放回的结果是成功的Promise对象</p></li><li><p>如果传入的参数是<strong>Promise对象</strong>，则参数的结果决定resolve的结果，即参数是成功的Promise对象的话，resolve的结果是成功的，反之是失败的</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">123</span>) <span class="hljs-comment">// Promise &#123; 123 &#125;</span><br><br><span class="hljs-built_in">console</span>.log(p1)<br><br><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-built_in">Promise</span>.resolve(p1) <span class="hljs-comment">// 参数为成功的Promise对象</span><br><br><span class="hljs-built_in">console</span>.log(p2)<br><br><span class="hljs-keyword">const</span> p3 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123; <span class="hljs-comment">// 参数为失败的Promise对象</span><br>  reject(<span class="hljs-string">&#x27;Error&#x27;</span>)<br>&#125;))<br><br>p3.catch(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(reason)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="6-5-Promise-reject方法"><a href="#6-5-Promise-reject方法" class="headerlink" title="6.5 Promise.reject方法"></a>6.5 Promise.reject方法</h3><p>接受一个参数，返回一个失败的Promise对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-number">123</span>)<br><span class="hljs-built_in">console</span>.log(p1)<br><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-string">&#x27;传参为成功的Promise对象&#x27;</span>)<br>&#125;))<br><br><span class="hljs-built_in">console</span>.log(p2)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/2ECksUOuDadvfeg.png" alt="image-20220226153204273"></p><h3 id="6-5-Promise-all方法"><a href="#6-5-Promise-all方法" class="headerlink" title="6.5 Promise.all方法"></a>6.5 Promise.all方法</h3><p>参数：promises，promise的数组</p><p>返回一个新的Promise，当所有的promise都成功才成功，且结果为成功的结果组成的数组；有一个失败就<strong>直接</strong>失败，返回的结果就是失败的那一个的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-string">&#x27;p1: OK&#x27;</span>)<br>&#125;)<br><span class="hljs-keyword">const</span> p2 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&#x27;p2: OK&#x27;</span>)<br><span class="hljs-keyword">const</span> result1 = <span class="hljs-built_in">Promise</span>.all([p1, p2]) <span class="hljs-comment">// 所有Promise的结果都成功</span><br><span class="hljs-built_in">console</span>.log(result1)<br><br><br><span class="hljs-keyword">const</span> p3 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&#x27;p3: OK&#x27;</span>)<br><span class="hljs-keyword">const</span> p4 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;p4: Err&#x27;</span>)<br><span class="hljs-keyword">const</span> p5 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;p5: Err&#x27;</span>)<br><span class="hljs-keyword">const</span> result2 = <span class="hljs-built_in">Promise</span>.all([p3, p4, p5]) <span class="hljs-comment">// 有Promise的结果失败</span><br><span class="hljs-built_in">console</span>.log(result2)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/HxUQCL3VSXhbo2Y.png" alt="image-20220226170629148"></p><p>如果想要捕捉异常，直接链式调用即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p3 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&#x27;p3: OK&#x27;</span>)<br><span class="hljs-keyword">const</span> p4 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;p4: Err&#x27;</span>)<br><span class="hljs-keyword">const</span> p5 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;p5: Err&#x27;</span>)<br><span class="hljs-keyword">const</span> result2 = <span class="hljs-built_in">Promise</span>.all([p3, p4, p5])<br><span class="hljs-built_in">console</span>.log(result2)<br><br>result2.catch(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(reason)<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/05/ipGftrdm5kWMVlZ.png" alt="image-20220226170913348"></p><p>Promise.all()传入一个空数组，立即返回成功。</p><br><h3 id="6-6-Promise-race方法"><a href="#6-6-Promise-race方法" class="headerlink" title="6.6 Promise.race方法"></a>6.6 Promise.race方法</h3><p>参数：promises，promise的数组</p><p>返回一个新的Promise，第一个完成的结果是成功则成功，反之则失败</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&#x27;p1: OK&#x27;</span>)<br>  &#125;)<br>&#125;)<br><span class="hljs-keyword">const</span> p2 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;p2: Err&#x27;</span>)<br><span class="hljs-keyword">const</span> result1 = <span class="hljs-built_in">Promise</span>.race([p1, p2])<br><span class="hljs-built_in">console</span>.log(result1) <span class="hljs-comment">// [[PromiseResult]]: &quot;p2: Err&quot;</span><br><br>result1.catch(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(reason)<br>&#125;)<br></code></pre></td></tr></table></figure><p>Promise.race()传入空数组不做任何操作</p><br><p>本次学习是视频学习：<a href="https://www.bilibili.com/video/BV1GA411x7z1">尚硅谷Web前端Promise教程从入门到精通</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Promise学习笔记-一&quot;&gt;&lt;a href=&quot;#Promise学习笔记-一&quot; class=&quot;headerlink&quot; title=&quot;Promise学习笔记(一)&quot;&gt;&lt;/a&gt;Promise学习笔记(一)&lt;/h1&gt;&lt;p&gt;一直有在用Promise，但是没有系统学过Pro</summary>
      
    
    
    
    <category term="前端" scheme="https://clz.vercel.app/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Promise" scheme="https://clz.vercel.app/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Express(二) ——中间件</title>
    <link href="https://clz.vercel.app/2022/03/01/express-2/"/>
    <id>https://clz.vercel.app/2022/03/01/express-2/</id>
    <published>2022-03-01T06:08:48.000Z</published>
    <updated>2022-03-01T06:10:14.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Express-二-——中间件"><a href="#Express-二-——中间件" class="headerlink" title="Express(二) ——中间件"></a>Express(二) ——中间件</h1><p>在Express中，中间件是一个可以访问请求对象、响应对象和调用next方法的一个函数。</p><h2 id="1-简单例子-打印请求日志"><a href="#1-简单例子-打印请求日志" class="headerlink" title="1. 简单例子(打印请求日志)"></a>1. 简单例子(打印请求日志)</h2><p>一个 Express 应用，就是由许许多多的中间件来完成的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.use(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`请求日志：<span class="hljs-subst">$&#123;req.method&#125;</span> <span class="hljs-subst">$&#123;req.url&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()&#125;</span>`</span>);<br>  next(); <span class="hljs-comment">// 放行</span><br>&#125;)<br><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <br>  res.send(<span class="hljs-string">&#x27;get / &#x27;</span>);<br>&#125;)<br><br>app.post(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&#x27;post / &#x27;</span>);<br>&#125;)<br><br>app.delete(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&#x27;delete /&#x27;</span>)<br>&#125;)<br><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span>;<br><br>app.listen(port, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`http://localhost:<span class="hljs-subst">$&#123;port&#125;</span>/`</span>);<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>可以发现：任何请求进来都会先打印请求日志，然后才会执行具体的业务处理函数</p><p><img src="https://s2.loli.net/2022/03/01/cmV8f4dyuF3RCn5.png" alt="image-20220209221247946"></p><h2 id="2-中间件的组成"><a href="#2-中间件的组成" class="headerlink" title="2. 中间件的组成"></a>2. 中间件的组成</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;  <span class="hljs-comment">// 其中use可以是get、post等，用于限定请求路径</span><br>    next();<span class="hljs-comment">// 这个例子就是所有请求路径为根路径的请求都会通过这个中间件</span><br>    <span class="hljs-comment">// 如果当前中间件没有结束请求相应周期，则需要通过next()调用下一个中间件，否则，该请求将会被挂起</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><b style="color:red">如果当前中间件没有结束请求相应周期，则需要通过next()调用下一个中间件，否则，该请求将会被挂起</b></p><h2 id="3-中间件功能"><a href="#3-中间件功能" class="headerlink" title="3. 中间件功能"></a>3. 中间件功能</h2><ul><li>执行任何代码</li><li>修改request或response对象</li><li>结束请求响应周期</li><li>调用下一个中间件</li></ul><h2 id="4-中间件分类"><a href="#4-中间件分类" class="headerlink" title="4. 中间件分类"></a>4. 中间件分类</h2><h3 id="4-1-应用程序级别中间件"><a href="#4-1-应用程序级别中间件" class="headerlink" title="4.1 应用程序级别中间件"></a>4.1 应用程序级别中间件</h3><h4 id="4-1-1-不做任何限定的中间件"><a href="#4-1-1-不做任何限定的中间件" class="headerlink" title="4.1.1 不做任何限定的中间件"></a>4.1.1 不做任何限定的中间件</h4><p>即所有请求都会通过该中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&#x27;不做任何限定的中间件&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="4-1-2-限定请求路径"><a href="#4-1-2-限定请求路径" class="headerlink" title="4.1.2 限定请求路径"></a>4.1.2 限定请求路径</h4><p>即只有请求路径匹配才会通过该中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-string">&#x27;/user/:id&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&#x27;限定请求路径的中间件&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="4-1-3-限定请求方法-请求路径"><a href="#4-1-3-限定请求方法-请求路径" class="headerlink" title="4.1.3 限定请求方法 + 请求路径"></a>4.1.3 限定请求方法 + 请求路径</h4><p>不能只限定请求方法，因为app.get()第一个参数必须</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&#x27;限定请求方法 + 请求路径的中间件&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="4-1-4-多个处理函数"><a href="#4-1-4-多个处理函数" class="headerlink" title="4.1.4 多个处理函数"></a>4.1.4 多个处理函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;第一次处理&#x27;</span>);<br>  next();    <span class="hljs-comment">// 这个next()之后就是第二个处理函数</span><br>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;第二次处理&#x27;</span>);<br>  next();    <span class="hljs-comment">// 这个next()之后则是脱离当前处理栈，往后寻找匹配调用</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>也可以通过回调函数数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> first = <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;第一次处理&#x27;</span>);<br>  next();<br>&#125;;<br><br><span class="hljs-keyword">const</span> second = <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;第二次处理&#x27;</span>);<br>  next();<br>&#125;;<br><br>app.use([first, second]);<br></code></pre></td></tr></table></figure><h4 id="4-1-5-多个路由处理函数"><a href="#4-1-5-多个路由处理函数" class="headerlink" title="4.1.5 多个路由处理函数"></a>4.1.5 多个路由处理函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;第一个路由处理函数&#x27;</span>);<br>  next();   <span class="hljs-comment">// 如果这里是res.end()，那么就会结束响应。第二个路由处理函数就没有机会执行</span><br>&#125;)<br>app.use(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;第二个路由处理函数&#x27;</span>);<br>  res.end();<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="4-1-6-显示一个中间件子堆栈"><a href="#4-1-6-显示一个中间件子堆栈" class="headerlink" title="4.1.6 显示一个中间件子堆栈"></a>4.1.6 显示一个中间件子堆栈</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<span class="hljs-string">&#x27;/:id&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (req.params.id === <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>    next(<span class="hljs-string">&#x27;route&#x27;</span>);  <span class="hljs-comment">// 跳过当前堆栈之后的所有中间件。即不执行后面的处理函数，而是直接去执行后面的路由处理函数</span><br>         <span class="hljs-comment">// (处理函数和路由处理函数看上面的例子)</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    next();<br>  &#125;<br>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&#x27;regular&#x27;</span>);<br>&#125;)<br><br>app.get(<span class="hljs-string">&#x27;/:id&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&#x27;special&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>上面例子中，动态参数id不为0时，第一个处理函数会调用next()，然后会执行第二个处理函数，然后会收到regular的响应。而当id为0时，会调用next(‘route’)，会跳过当前堆栈之后的所有中间件。即不执行后面的处理函数，而是直接去执行后面的路由处理函数。所以不会打印regular，而是打印special。</p><h3 id="4-2-路由级别中间件"><a href="#4-2-路由级别中间件" class="headerlink" title="4.2 路由级别中间件"></a>4.2 路由级别中间件</h3><p>router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">// 1.创建路由实例</span><br><span class="hljs-keyword">const</span> router = express.Router();<br><br><span class="hljs-comment">// 2. 配置路由</span><br>router.get(<span class="hljs-string">&#x27;/aaa&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&#x27;get /aaa&#x27;</span>);<br>&#125;)<br><br>router.post(<span class="hljs-string">&#x27;/bbb&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&#x27;post /bbb&#x27;</span>);<br>&#125;)<br><br><span class="hljs-comment">// 3. 导出路由实例</span><br><span class="hljs-built_in">module</span>.exports = router<br><br><span class="hljs-comment">// 4. 将路由挂载(集成)到Express实例应用中(见app.js)</span><br></code></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./router.js&#x27;</span>);<br><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&#x27;Hello World!&#x27;</span>);<br>&#125;)<br><br><span class="hljs-comment">// 4. 将路由挂载(集成)到Express实例应用中</span><br>app.use(<span class="hljs-string">&#x27;/abc&#x27;</span>, router);<span class="hljs-comment">// 给路由限定访问前缀/abc</span><br><br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;http://localhost:3000/&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/2lUS43vHrokDjqp.gif" alt="路由级别中间件"></p><p><strong>链式路由处理程序</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">app.route(<span class="hljs-string">&#x27;/abc&#x27;</span>)<br>  .get(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;get&#x27;</span>);<br>  &#125;)<br>  .post(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;post&#x27;</span>);<br>  &#125;)<br></code></pre></td></tr></table></figure><h3 id="4-3-错误处理中间件"><a href="#4-3-错误处理中间件" class="headerlink" title="4.3 错误处理中间件"></a>4.3 错误处理中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;   <span class="hljs-comment">// 四个参数都要有才是错误处理中间件。如果只有err、req、res，则err实际上是req对象</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;错误: &#x27;</span>, err);<br>  res.status(<span class="hljs-number">500</span>).json(&#123;<br>    <span class="hljs-attr">error</span>: err.message<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p><b style="color: red">四个参数都要有才是错误处理中间件。如果只有err、req、res，则err实际上是req对象</b></p><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./router.js&#x27;</span>);<br><br>app.use(router);<br><br>app.use(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;   <span class="hljs-comment">// 四个参数都要有才是错误处理中间件。如果只有err、req、res，则err实际上是req对象</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;错误: &#x27;</span>, err);<br>  res.status(<span class="hljs-number">500</span>).json(&#123;<br>    <span class="hljs-attr">error</span>: err.message<br>  &#125;)<br>&#125;)<br><br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;http://localhost:3000/&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">// 1.创建路由实例</span><br><span class="hljs-keyword">const</span> router = express.Router();<br><br><span class="hljs-comment">// 2. 配置路由</span><br>router.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> d = b + <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err);  <span class="hljs-comment">// 跳过所有剩余的无错误处理路由和中间件函数</span><br>  &#125;<br>&#125;)<br><br>router.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;第二个路由处理函数&#x27;</span>);<br>  res.end();<br>&#125;)<br><br><span class="hljs-comment">// 3. 导出路由实例</span><br><span class="hljs-built_in">module</span>.exports = router<br><br><span class="hljs-comment">// 4. 将路由挂载(集成)到Express实例应用中</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/Nanp5BT98fPM4Fr.png" alt="image-20220210103104627"></p><h3 id="4-4-内置中间件"><a href="#4-4-内置中间件" class="headerlink" title="4.4 内置中间件"></a>4.4 内置中间件</h3><ul><li>**express.json()**：解析Content-Type为<code> application/json</code>格式的请求体</li><li>**express.urlencoded()**：解析Content-Type为<code> application/x-www-form-urlencoded</code>格式的请求体</li><li>**express.raw()**：解析Content-Type为<code> application/octet-stream</code>格式的请求体</li><li>**express.text()**：解析Content-Type为<code> text/plain</code>格式的请求体</li><li>**express.static()**：托管静态资源文件</li></ul><h3 id="4-5-第三方中间件"><a href="#4-5-第三方中间件" class="headerlink" title="4.5 第三方中间件"></a>4.5 第三方中间件</h3><p><a href="https://www.expressjs.com.cn/resources/middleware.html">Express middleware</a></p><p>使用示例：morgan日志中间件</p><ol><li><p><code> npm install morgan</code></p></li><li><pre><code class="js">const express = require(&#39;express&#39;);const morgan = require(&#39;morgan&#39;);   // 1. 引入const app = express();app.use(morgan(&#39;tiny&#39;));      // 2. 挂载app.get(&#39;/&#39;, (req, res) =&gt; &#123;  res.send(&#39;Hello World!&#39;);&#125;)app.listen(3000, () =&gt; &#123;  console.log(&#39;http://localhost:3000/&#39;);&#125;)</code></pre></li><li><p>每次请求都会打印出请求日志</p><p><img src="https://s2.loli.net/2022/03/01/Ol7QrKS9HZB8Yin.png" alt="image-20220210105212413"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Express-二-——中间件&quot;&gt;&lt;a href=&quot;#Express-二-——中间件&quot; class=&quot;headerlink&quot; title=&quot;Express(二) ——中间件&quot;&gt;&lt;/a&gt;Express(二) ——中间件&lt;/h1&gt;&lt;p&gt;在Express中，中间件是一个</summary>
      
    
    
    
    <category term="后端" scheme="https://clz.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Express" scheme="https://clz.vercel.app/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>Vue3快速入门(二)</title>
    <link href="https://clz.vercel.app/2022/03/01/vue3-2/"/>
    <id>https://clz.vercel.app/2022/03/01/vue3-2/</id>
    <published>2022-03-01T02:27:11.000Z</published>
    <updated>2022-03-17T06:27:30.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3快速入门-二"><a href="#Vue3快速入门-二" class="headerlink" title="Vue3快速入门(二)"></a>Vue3快速入门(二)</h1><p><a href="https://clz.vercel.app/2022/02/21/vue3-1/">Vue3快速入门(一)</a></p><h2 id="1-父子组件间的数据共享"><a href="#1-父子组件间的数据共享" class="headerlink" title="1. 父子组件间的数据共享"></a>1. 父子组件间的数据共享</h2><h3 id="1-1-props父传子"><a href="#1-1-props父传子" class="headerlink" title="1.1 props父传子"></a>1.1 props父传子</h3><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;props.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 可省略prop. --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> props = defineProps(&#123; <span class="hljs-comment">// defineProps在&lt;script setup&gt;中可直接使用，无需引入</span></span><br><span class="javascript">    <span class="hljs-attr">name</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,</span><br><span class="javascript">      <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// 也可以用下面数组的形式</span></span><br><span class="javascript">  <span class="hljs-comment">// const props = defineProps([&#x27;name&#x27;])  </span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clz&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> Son <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Son.vue&#x27;</span> <span class="hljs-comment">// 组件自动注册</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/lwhcFbBG27vEZQA.png" alt="image-20220301103045960"></p><h3 id="1-2-emit子传父"><a href="#1-2-emit子传父" class="headerlink" title="1.2 emit子传父"></a>1.2 emit子传父</h3><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>子组件数据：&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;send&quot;</span>&gt;</span>发送数据给父组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> msg = <span class="hljs-string">&quot;我是子组件的数据&quot;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> emit = defineEmits([<span class="hljs-string">&#x27;getMessage&#x27;</span>])</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> send = (<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    emit(<span class="hljs-string">&#x27;getMessage&#x27;</span>, msg)</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>子组件数据：&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;send&quot;</span>&gt;</span>发送数据给父组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> msg = <span class="hljs-string">&quot;我是子组件的数据&quot;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> emit = defineEmits([<span class="hljs-string">&#x27;getMessage&#x27;</span>])</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> send = (<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    emit(<span class="hljs-string">&#x27;getMessage&#x27;</span>, msg)</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/aEslPySCN5o4GtH.gif" alt="vue3"></p><h3 id="1-3-v-model实现父子互传"><a href="#1-3-v-model实现父子互传" class="headerlink" title="1.3 v-model实现父子互传"></a>1.3 v-model实现父子互传</h3><p>默认情况下，组件上的 <code>v-model</code> 使用 <code>modelValue</code> 作为 prop 和 <code>update:modelValue</code> 作为事件。可以通过向 <code>v-model</code> 传递参数来修改这些默认名称</p><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：&#123;&#123;modelValue&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span>改名<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeAge&quot;</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  defineProps(&#123;</span><br><span class="javascript">    <span class="hljs-attr">modelValue</span>: <span class="hljs-built_in">String</span>,</span><br><span class="javascript">    <span class="hljs-attr">age</span>: <span class="hljs-built_in">Number</span></span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> emit = defineEmits([<span class="hljs-string">&#x27;update:modelValue&#x27;</span>, <span class="hljs-string">&#x27;update:age&#x27;</span>])</span><br><span class="javascript">  <span class="hljs-keyword">const</span> changeName = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    emit(<span class="hljs-string">&#x27;update:modelValue&#x27;</span>, <span class="hljs-string">&#x27;赤蓝紫&#x27;</span>)</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> changeAge = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    emit(<span class="hljs-string">&#x27;update:age&#x27;</span>, <span class="hljs-number">999</span>)</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;person.name&quot;</span> <span class="hljs-attr">v-model:age</span>=<span class="hljs-string">&quot;person.age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123;</span><br><span class="javascript">    reactive</span><br><span class="javascript">  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> Son <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Son.vue&#x27;</span> <span class="hljs-comment">// 组件自动注册</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> person = reactive(&#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span></span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/L9CNuhbZmwEe1Vi.gif" alt="vue3"></p><h3 id="1-4-子组件ref变量子传父"><a href="#1-4-子组件ref变量子传父" class="headerlink" title="1.4 子组件ref变量子传父"></a>1.4 子组件ref变量子传父</h3><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123;</span><br><span class="javascript">    ref,</span><br><span class="javascript">    toRefs</span><br><span class="javascript">  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> name = ref(<span class="hljs-string">&#x27;clz&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-keyword">const</span> changeName = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        name.value = <span class="hljs-string">&#x27;赤蓝紫&#x27;</span></span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        name,</span><br><span class="javascript">        changeName</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sonRef&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123;</span><br><span class="javascript">    nextTick,</span><br><span class="javascript">    ref</span><br><span class="javascript">  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> Son <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Son.vue&#x27;</span> <span class="hljs-comment">// 组件自动注册</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> sonRef = ref(<span class="hljs-string">&#x27;sonRef&#x27;</span>)</span><br><span class="javascript"></span><br><span class="javascript">  nextTick(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(sonRef.value.name)</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      sonRef.value.changeName()</span><br><span class="javascript">    &#125;, <span class="hljs-number">1000</span>)</span><br><span class="javascript"></span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/rOU97DXxPIEcKWk.gif" alt="vue3"></p><p>上面会发现用回了setup函数，这是因为需要引入一下<code> defineExpose</code></p><p>首先，变成<code> &lt;script setup&gt;</code>，发现无法得到相同效果，甚至会报错</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123;</span><br><span class="javascript">    ref,</span><br><span class="javascript">    toRefs</span><br><span class="javascript">  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> name = ref(<span class="hljs-string">&#x27;clz&#x27;</span>)</span><br><span class="javascript">  <span class="hljs-keyword">const</span> changeName = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    name.value = <span class="hljs-string">&#x27;赤蓝紫&#x27;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这是因为，标准组件写法中，子组件的数据都默认隐式暴露给父组件了，而在<code>&lt;script setup&gt;</code>模式下，所有数据只是默认return给template使用而已，不会暴露到组件外，所以父组件无法直接通过挂载ref变量获取子组件的数据。</p><p>可以通过<code> defineExpose</code>将子组件显示暴露出来，父组件才能通过ref变量获取子组件的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123;</span><br><span class="javascript">    ref,</span><br><span class="javascript">    toRefs</span><br><span class="javascript">  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> name = ref(<span class="hljs-string">&#x27;clz&#x27;</span>)</span><br><span class="javascript">  <span class="hljs-keyword">const</span> changeName = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    name.value = <span class="hljs-string">&#x27;赤蓝紫&#x27;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><br><span class="javascript">  defineExpose(&#123;</span><br><span class="javascript">    name,</span><br><span class="javascript">    changeName</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-5-provide和inject"><a href="#1-5-provide和inject" class="headerlink" title="1.5 provide和inject"></a>1.5 provide和inject</h3><p>使用<code> provide</code>和<code> inject</code>，无论组件层次结构多深，父组件都可以作为其所有子组件的依赖提供者。</p><p><b style="color: red">父组件通过provide来提供数据，子组件通过inject来使用这些数据</b></p><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 父组件通过provide来提供数据，子组件通过inject来使用这些数据</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; reactive, toRefs, provide &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span><br><span class="javascript"><span class="hljs-keyword">import</span> Son <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Son.vue&quot;</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="javascript">  <span class="hljs-attr">components</span>: &#123;</span><br><span class="javascript">    Son</span><br><span class="javascript">  &#125;,</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> person = reactive(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;)</span><br><span class="javascript">    provide(<span class="hljs-string">&quot;person&quot;</span>, person) <span class="hljs-comment">//给自己的后代组件传递数据</span></span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123; ...toRefs(person) &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.father</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#666</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    &#123;&#123;person&#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; inject &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> person = inject(<span class="hljs-string">&quot;person&quot;</span>)</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123; person &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.son</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eee</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/21/LBPortQcey89CGa.png" alt="image-20220220131546539"></p><h2 id="2-插槽slot"><a href="#2-插槽slot" class="headerlink" title="2. 插槽slot"></a>2. 插槽slot</h2><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 匿名插槽 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> /&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 具名插槽 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span> /&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 作用域插槽 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span> <span class="hljs-attr">:scope</span>=<span class="hljs-string">&quot;person&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123;</span><br><span class="javascript">    reactive</span><br><span class="javascript">  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> person = reactive(&#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span></span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;default&quot;</span>&gt;</span>匿名插槽<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>具名插槽<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>具名插槽<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>=<span class="hljs-string">&quot;&#123; scope &#125;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;area&quot;</span>&gt;</span>作用域插槽<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;area&quot;</span>&gt;</span>姓名：&#123;&#123;scope.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;area&quot;</span>&gt;</span>年龄&#123;&#123;scope.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> Son <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Son.vue&#x27;</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.default</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">color</span>: red;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.name</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">color</span>: blue;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.area</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">color</span>: purple;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/sEuYfkAc592HaQG.png" alt="image-20220221002538205"></p><h2 id="3-CSS变量注入"><a href="#3-CSS变量注入" class="headerlink" title="3. CSS变量注入"></a>3. CSS变量注入</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>CLZ<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123;</span><br><span class="javascript">    ref</span><br><span class="javascript">  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> color = ref(<span class="hljs-string">&#x27;red&#x27;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="css">    <span class="hljs-comment">/* 使用v-bind绑定变量 */</span></span><br><span class="css">    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">v-bind</span>(<span class="hljs-string">&#x27;color&#x27;</span>)</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-定义组件的name"><a href="#4-定义组件的name" class="headerlink" title="4. 定义组件的name"></a>4. 定义组件的name</h2><p>用单独的<code> &lt;script&gt;</code>块定义即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>CLZ<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123;</span><br><span class="javascript">    ref</span><br><span class="javascript">  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> color = ref(<span class="hljs-string">&#x27;red&#x27;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Test&#x27;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="css">    <span class="hljs-comment">/* 使用v-bind绑定变量 */</span></span><br><span class="css">    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">v-bind</span>(<span class="hljs-string">&#x27;color&#x27;</span>)</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/S8x2g4jJszlRDfK.png" alt="image-20220221001111236"></p><h2 id="5-Vuex的简单使用"><a href="#5-Vuex的简单使用" class="headerlink" title="5. Vuex的简单使用"></a>5. Vuex的简单使用</h2><p>之前在字节的青训营里，有老师建议不要再学Vuex了，要就学<code> pinia</code>。然后实习要先搞一手老项目，用的就是<code> Vuex</code>，自然还是得学一下的。当然，之后再学一下<code> pinia</code>，看能不能自己悟出来，为什么老师更建议<code> pinia</code></p><h3 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>状态管理模式：</p><ul><li><strong>状态</strong>：驱动应用的数据源</li><li><strong>视图</strong>：以声明方式将状态映射到视图</li><li><strong>操作</strong>：响应在视图上的用户输入导致的状态变化</li></ul><p><img src="https://s2.loli.net/2022/03/01/JDqct9xvlMngdUC.png" alt="image-20220221220827405"></p><p>但是，当需要<strong>多个组件共享状态时</strong>，单向数据流的简洁性很容易被破坏。因为：</p><ul><li>多个视图依赖于同一状态</li><li>来自不同视图的行为需要变更同一状态</li></ul><p>Vuex就是将组件的共享状态抽离出来，是代码变得更结构化且易维护</p><h3 id="5-2-State和Mutation"><a href="#5-2-State和Mutation" class="headerlink" title="5.2 State和Mutation"></a>5.2 State和Mutation</h3><p><strong>State</strong>：存储共享状态</p><p><strong>Mutation</strong>： 修改状态。更改Vuex的store中的状态的唯一方法是提交 mutation</p><p>store \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  <span class="hljs-function"><span class="hljs-title">state</span>(<span class="hljs-params"></span>)</span> &#123;<span class="hljs-comment">// 存储状态</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 或下面的形式，注意：() =&gt; (&#123;&#125;), 右边有括号包住。因为要说明右面是对象形式，而不是函数形式</span><br>  <span class="hljs-comment">// state: () =&gt; (&#123;</span><br>  <span class="hljs-comment">//   count: 0</span><br>  <span class="hljs-comment">// &#125;),</span><br>  <span class="hljs-attr">mutations</span>: &#123;<span class="hljs-comment">//  修改状态。更改Vuex的store中的状态的唯一方法是提交 mutation</span><br>    <span class="hljs-function"><span class="hljs-title">increment</span>(<span class="hljs-params">state</span>)</span> &#123;<br>      state.count++<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br>createApp(App)<br>  .use(store)<br>  .mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;store.state.count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>---------以下是子组件----------<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123;</span><br><span class="javascript">    useStore</span><br><span class="javascript">  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> Son <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Son.vue&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> store = useStore()<span class="hljs-comment">// 通过useStore()获取store，类似于useRoute()，之前是通过this.$store</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> add = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    store.commit(<span class="hljs-string">&#x27;increment&#x27;</span>)<span class="hljs-comment">// 通过store.commit()提交 mutation， 修改状态</span></span><br><span class="javascript">     </span><br><span class="javascript">    <span class="hljs-comment">// 可以携带参数，只要mutations下的函数有两个参数，第二个便是携带的参数</span></span><br><span class="javascript">    <span class="hljs-comment">// increment(state, n) &#123;</span></span><br><span class="javascript">    <span class="hljs-comment">//     state.count += n</span></span><br><span class="javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="javascript">    <span class="hljs-comment">// store.commit(&#x27;increment&#x27;, 10)</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>components \ Son.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;store.state.count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123;</span><br><span class="javascript">    useStore</span><br><span class="javascript">  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> store = useStore()</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/37g2hntF9GQSCz1.gif" alt="vue3"></p><p>又有问题了，不通过<code>store.commit()</code>来修改，而是通过<code> store.state.***</code>来修改，会发现展示的效果不一样，但是呢，实际上存储的状态那边是没有更新的，所以<b style="color: red">状态的修改必须通过<code>mutations</code>下的方法修改</b>。下面就来瞧一瞧是不是真的。</p><p>add方法变化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> add = <span class="hljs-function">() =&gt;</span> &#123;<br>  store.state.count++<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/3NbMzkdTFxnmU5t.gif" alt="vue3"></p><p>可以发现，状态确实没有发生变化，只是视图发生了变化</p><h3 id="5-3-Getter"><a href="#5-3-Getter" class="headerlink" title="5.3 Getter"></a>5.3 Getter</h3><p><strong>Getter</strong>：访问State存储的状态</p><h4 id="5-3-1-通过属性访问"><a href="#5-3-1-通过属性访问" class="headerlink" title="5.3.1 通过属性访问"></a>5.3.1 通过属性访问</h4><p>Getter 会暴露为 <code>store.getters</code> 对象，可以以属性的形式访问这些值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">store.getters.count<br></code></pre></td></tr></table></figure><p>store \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  <span class="hljs-function"><span class="hljs-title">state</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> state.count<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">increment</span>(<span class="hljs-params">state</span>)</span> &#123;<br>      state.count++<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br>createApp(App)<br>  .use(store)<br>  .mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--  注意这里 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;store.getters.count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>---------以下是子组件----------<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123;</span><br><span class="javascript">    useStore</span><br><span class="javascript">  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> Son <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Son.vue&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> store = useStore()</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> add = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    store.commit(<span class="hljs-string">&#x27;increment&#x27;</span>)</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>components \ Son.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--  注意这里 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;store.getters.count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123;</span><br><span class="javascript">    useStore</span><br><span class="javascript">  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> store = useStore()</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>正常结果，Vue Devtools下也实时更新</p><h4 id="5-3-2-通过方法访问"><a href="#5-3-2-通过方法访问" class="headerlink" title="5.3.2 通过方法访问"></a>5.3.2 通过方法访问</h4><p>通过让 getter 返回一个函数，来实现给 getter 传参。</p><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">getters: &#123;<br>  <span class="hljs-attr">getTodo</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> <span class="hljs-function">(<span class="hljs-params">id</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> state.todos.find(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.id === id)<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/D6VOnUgrJkfhNxp.png" alt="image-20220222111921712"></p><p><img src="https://s2.loli.net/2022/03/01/t5ZcqXydFIrPCkU.png" alt="image-20220222111935625"></p><h3 id="5-4-Action"><a href="#5-4-Action" class="headerlink" title="5.4 Action"></a>5.4 Action</h3><p><strong>Action</strong>：Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><h4 id="5-4-1-简单使用"><a href="#5-4-1-简单使用" class="headerlink" title="5.4.1 简单使用"></a>5.4.1 简单使用</h4><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 <code>context.commit</code> 提交一个 mutation，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 state 和 getters。</p><p>Action通过<code> store.dispatch</code>方法触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">store.dispatch(<span class="hljs-string">&#x27;increment&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/22/ZIOAYERkWKGybx9.png" alt="image-20220222121825636"></p><h4 id="5-4-2-Action支持异步"><a href="#5-4-2-Action支持异步" class="headerlink" title="5.4.2 Action支持异步"></a>5.4.2 Action支持异步</h4><p>为什么要通过Action提交<code> mutation</code>呢？都直接提交不行吗?</p><p>这是因为<b style="color: red">mutation必须同步执行，而Action不受约束</b></p><p><strong>mutation异步</strong>：在 mutation 中使用异步更新状态，虽然也会使状态正常更新，但是会导致开发者工具有时无法追踪到状态的变化，调试起来就会很困难</p><p><img src="https://s2.loli.net/2022/03/01/9m6Y38f27MPrJhR.png" alt="image-20220222122627684"></p><p><img src="https://s2.loli.net/2022/03/01/bhSdMKfVGTCOY29.gif" alt="vue3"></p><p>视图更新，存储的状态没有实时更新</p><p><strong>action异步</strong>：</p><p><img src="https://s2.loli.net/2022/03/01/fkwUN9mu8yh3Vp1.png" alt="image-20220222123511145"></p><p><img src="https://s2.loli.net/2022/03/01/3sBjHlm9XbI5DQz.gif" alt="vue3"></p><h3 id="5-5-Module"><a href="#5-5-Module" class="headerlink" title="5.5 Module"></a>5.5 Module</h3><p><strong>Module</strong>：Vuex允许将store分割成**模块(module)**。每个模块拥有自己的<code> state</code>、<code> mutation</code>、<code> getter</code>、<code> action</code>，以及嵌套子模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> moduleA = &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">increment</span>(<span class="hljs-params">state</span>)</span> &#123;<br>      <span class="hljs-comment">// 这里的 `state` 对象是模块的局部状态</span><br>      state.count++<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-comment">// 对于模块内部的 action，局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState：</span><br>    <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">&#123; state, commit, rootState &#125;</span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(state.count)<br>      <span class="hljs-built_in">console</span>.log(rootState.count)<br><br>      commit(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> moduleB = &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123; ... &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-attr">a</span>: moduleA,<br>    <span class="hljs-attr">b</span>: moduleB<br>  &#125;<br>&#125;)<br><br>store.state.a <span class="hljs-comment">// -&gt; moduleA 的状态</span><br>store.state.b <span class="hljs-comment">// -&gt; moduleB 的状态</span><br></code></pre></td></tr></table></figure><h4 id="5-2-1-示例"><a href="#5-2-1-示例" class="headerlink" title="5.2.1 示例"></a>5.2.1 示例</h4><p>store \ module \ user.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> user = &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span><br>  &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">increment</span>(<span class="hljs-params">state</span>)</span> &#123;<br>      state.age++<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">doubleAge</span>(<span class="hljs-params">state</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> state.age * <span class="hljs-number">2</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">&#123; state, commit, rootState &#125;</span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(state.name)<br>      <span class="hljs-built_in">console</span>.log(rootState.number)<br><br>      commit(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> user<br></code></pre></td></tr></table></figure><p>store \ index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">import</span> user <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module/user&#x27;</span><br><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  <span class="hljs-function"><span class="hljs-title">state</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">number</span>: <span class="hljs-number">10</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-attr">user</span>: user<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名: &#123;&#123; user.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄: &#123;&#123; user.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>年龄+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123;</span><br><span class="javascript">  useStore</span><br><span class="javascript">&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> store = useStore()</span><br><span class="javascript"><span class="hljs-keyword">const</span> user = store.state.user</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> add = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">  store.dispatch(<span class="hljs-string">&#x27;add&#x27;</span>)</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index&#x27;</span><br><br>createApp(App)<br>  .use(store)<br>  .mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/9aPoUXI8mztfeSO.png" alt="image-20220222211011517"></p><p><strong>学习参考链接</strong>：<a href="https://juejin.cn/post/7006108454028836895">Vue3.2 setup语法糖、Composition API归纳总结</a></p><p><a href="https://vuex.vuejs.org/zh/">Vuex</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3快速入门-二&quot;&gt;&lt;a href=&quot;#Vue3快速入门-二&quot; class=&quot;headerlink&quot; title=&quot;Vue3快速入门(二)&quot;&gt;&lt;/a&gt;Vue3快速入门(二)&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://clz.vercel.app/2022</summary>
      
    
    
    
    <category term="前端" scheme="https://clz.vercel.app/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://clz.vercel.app/tags/Vue/"/>
    
    <category term="Vue3" scheme="https://clz.vercel.app/tags/Vue3/"/>
    
    <category term="Vuex" scheme="https://clz.vercel.app/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>RESTful接口设计规范</title>
    <link href="https://clz.vercel.app/2022/02/28/RESTful/"/>
    <id>https://clz.vercel.app/2022/02/28/RESTful/</id>
    <published>2022-02-28T02:17:45.000Z</published>
    <updated>2022-02-28T02:18:39.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RESTful接口设计规范"><a href="#RESTful接口设计规范" class="headerlink" title="RESTful接口设计规范"></a>RESTful接口设计规范</h1><ul><li><p><strong>协议</strong>：API与用户的通信协议，尽量使用HTTPS</p></li><li><p><strong>域名</strong>：尽量将API部署在专用域名下，如<code> https://api.example.com</code>。如果API很简单，不会有进一步的扩展，则可以放在主域名下，如<code> https://example.com/api/</code></p></li><li><p><strong>版本</strong>：将API的版本号放到URL中，如<code> https://api.example.com/v1/</code>。或将版本号放在HTTP头信息中。</p></li><li><p><strong>路径</strong>：在RESTful架构中，每个网址代表一种资源，即网址中不能有动词，只能有名词，而且使用的名词一般和数据库的表格名对应。如<code>  https://api.example.com/v1/users</code></p></li><li><p><strong>HTTP动词</strong>：资源的具体操作类型</p><ul><li>GET(读取)：从服务器读取资源</li><li>POST(创建)：在服务器新建资源</li><li>PUT(完整更新)：在服务器更新资源(客户端提供改变后的完整资源，包括不改变的属性)</li><li>PATCH(部分更新)：在服务器更新资源(客户端提供改变的属性)</li><li>DELETE(删除)：从服务器删除资源</li></ul><p>不常用的两个：</p><ul><li><p>HEAD：获取资源的元数据(和GET类似，只是没有响应体)</p></li><li><p>OPTIONS：获取信息(关于资源的哪些属性是客户端可以改变的</p></li></ul><p><img src="https://s2.loli.net/2022/02/28/IJUrwTfCnqXvF89.png" alt="image-20220210134816272"></p></li><li><p><strong>过滤信息</strong>：如果记录数量很多，API应该提供参数，过滤返回结果。</p><p>常见参数：</p><ul><li>?limit=10：指定返回记录的数量</li><li>?offset=10：指定返回记录的开始位置</li><li>?page=2$per_page=50：指定第几页，以及每页的记录数</li><li>?sortby=name&amp;order=asc：指定返回结果按哪个属性排序，以及排序是升序还是降序</li><li>?id=1：指定筛选条件</li></ul></li><li><p><strong>状态码</strong>：客户端的每一次请求，服务器都应该给出响应。响应包括HTTP状态码和数据两部分</p></li><li><p><strong>返回结果</strong>：API返回的数据格式，不应该是纯文本，而应该是JSON对象，这样才可以放回标准的格式化数据。服务器回应的HTTP头部的<code> Content-Type</code>属性也应该设为<code> application/json</code></p><p><img src="https://s2.loli.net/2022/02/28/vDzmrRVoL3Wajsf.png" alt="image-20220210135856605"></p></li><li><p><strong>错误处理</strong>：状态码反应发生的错误，具体的错误信息放在数据体中</p><p><img src="https://s2.loli.net/2022/02/28/CFru1mcIayXP8Nl.png" alt="image-20220210140039430"></p></li><li><p><strong>身份认证</strong>：例如基于JWT的接口权限认证</p><ul><li>字段名：<code> Authorization</code></li><li>字段值：<code> Bearer token数据</code></li></ul></li><li><p><strong>跨端处理</strong>：在服务端设置CORS以允许客户端跨域资源请求</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RESTful接口设计规范&quot;&gt;&lt;a href=&quot;#RESTful接口设计规范&quot; class=&quot;headerlink&quot; title=&quot;RESTful接口设计规范&quot;&gt;&lt;/a&gt;RESTful接口设计规范&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;协议&lt;/stron</summary>
      
    
    
    
    <category term="前端" scheme="https://clz.vercel.app/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTTP" scheme="https://clz.vercel.app/tags/HTTP/"/>
    
  </entry>
  
</feed>
