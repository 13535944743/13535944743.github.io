<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赤蓝紫</title>
  
  <subtitle>赤蓝紫</subtitle>
  <link href="https://www.clzczh.top/atom.xml" rel="self"/>
  
  <link href="https://www.clzczh.top/"/>
  <updated>2022-07-05T12:45:12.794Z</updated>
  <id>https://www.clzczh.top/</id>
  
  <author>
    <name>赤蓝紫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>grid-3</title>
    <link href="https://www.clzczh.top/2022/07/05/grid-3/"/>
    <id>https://www.clzczh.top/2022/07/05/grid-3/</id>
    <published>2022-07-05T12:41:28.000Z</published>
    <updated>2022-07-05T12:45:12.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Grid布局-项目属性"><a href="#Grid布局-项目属性" class="headerlink" title="Grid布局 项目属性"></a>Grid布局 项目属性</h1><h2 id="容器的基础代码"><a href="#容器的基础代码" class="headerlink" title="容器的基础代码"></a>容器的基础代码</h2><p>HTML</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>CSS</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> {<br>    <span class="hljs-attribute">display</span>: grid;<br>    grid-template-rows: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">100px</span>);<br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">100px</span>);<br>}<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(odd) {<br>    <span class="hljs-attribute">background-color</span>: pink;<br>}<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(even) {<br>    <span class="hljs-attribute">background-color</span>: purple;<br>}<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span> {<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2><h3 id="grid-row系列属性"><a href="#grid-row系列属性" class="headerlink" title="grid-row系列属性"></a><code>grid-row</code>系列属性</h3><p>一共有三个：  </p><ul><li><p><code>grid-row-start</code>属性：上边框所在的水平网格线  </p></li><li><p><code>grid-row-end</code>属性：下边框所在的水平网格线  </p></li><li><p><code>grid-row</code>属性：<code>grid-row-start</code>和<code>grid-row-end</code>的简写形式。  </p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-row: &lt;start-line&gt; / &lt;end-line&gt;;<br></code></pre></td></tr></tbody></table></figure></li></ul><p>说的有点玄玄的，实际体验更清晰。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) {<br>    grid-row-start: <span class="hljs-number">1</span>;<br>    grid-row-end: <span class="hljs-number">3</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ef2e45703e64241b2817fd8404899b5~tplv-k3u1fbpfcp-zoom-1.image"><br>上面意思就是第一根水平网格线到第三根网格线的部分都是该项目的。其实也可以用数学的取值区间来解释：[1, 3)取第一行到第三行的部分，包含第一行，但不包含第三行。</p><p>上面的代码也可以使用<code>grid-row</code>属性来实现。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-row: <span class="hljs-number">1</span> / <span class="hljs-number">3</span>;<br></code></pre></td></tr></tbody></table></figure><p><strong>属性值还可以使用<code>span</code>关键字，表示跨越多少个网格</strong></p><p>如<code>grid-row: 1 / span 3;</code></p><h3 id="grid-column系列属性"><a href="#grid-column系列属性" class="headerlink" title="grid-column系列属性"></a><code>grid-column</code>系列属性</h3><p>一共有三个：  </p><ul><li><code>grid-column-start</code>属性：左边框所在的垂直网格线  </li><li><code>grid-column-end</code>属性：右边框所在的垂直网格线  </li><li><code>grid-column</code>属性：<code>grid-column-start</code>和<code>grid-column-end</code>的简写形式。  </li></ul><p>和<code>grid-row</code>系列基本一样，只是换一下方向而已。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-row: <span class="hljs-number">1</span> / span <span class="hljs-number">2</span>;<br>grid-column: <span class="hljs-number">1</span>/ span <span class="hljs-number">2</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6540ae84314b4b47ab1e128da081361d~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="排列属性"><a href="#排列属性" class="headerlink" title="排列属性"></a>排列属性</h3><p>项目的排列属性有三个：  </p><ul><li><code>justify-self</code>: 设置单元格内容的水平位置，跟<code>justify-items</code>属性用法一样，只作用于单个项目  </li><li><code>align-self</code>: 设置单元格内容的垂直位置，跟<code>align-items</code>属性用法一样，只作用于单个项目  </li><li><code>place-self</code>: <code>justify-self</code>和<code>align-self</code>的简写形式，跟<code>place-items</code>属性用法一样，只作用于单个项目  </li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) {<br>    justify-self: center;<br>    <span class="hljs-attribute">align-self</span>: center;<br><br>    <span class="hljs-comment">/* 或 */</span><br>    <span class="hljs-comment">/* place-self: center; */</span><br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="grid-area属性"><a href="#grid-area属性" class="headerlink" title="grid-area属性"></a><code>grid-area</code>属性</h1><p>之前讲解容器属性时，已经使用过<code>grid-template-areas</code>和<code>grid-area</code>来划分区域了。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> {<br>    <span class="hljs-attribute">display</span>: grid;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>    grid-template-areas:<br>        <span class="hljs-string">"header header header"</span><br>        <span class="hljs-string">"nav main main"</span>;<br>}<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) {<br>    grid-area: header;<br>    <span class="hljs-attribute">background-color</span>: skyblue;<br>}<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) {<br>    grid-area: nav;<br>    <span class="hljs-attribute">background-color</span>: purple;<br>}<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) {<br>    grid-area: main;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5acd6eb0144d46dd8046f2a7c72cdb99~tplv-k3u1fbpfcp-zoom-1.image"></p><p>实际上，<code>grid-area</code>是<code>grid-row-start</code>、<code>grid-column-start</code>、<code>grid-row-end</code> 和 <code>grid-column-end</code> 的简写。</p><p>语法：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;<br></code></pre></td></tr></tbody></table></figure><p>上面例子中<code>grid-area</code>其实也是可以拆分的。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8d6253a7c0c44084bfa18290296b377c~tplv-k3u1fbpfcp-zoom-1.image"></p><p>之前也有讲过，划分区域划分有两大原则：</p><ul><li>不能当墙头草(跨行的同时跨列)</li><li>不能太贪心(同时拿两份不紧贴的)</li></ul><p>所以最后划分的区域都一块，而且不能折。</p><p>所以其实<code>grid-area: header;</code>包含了以下的信息<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a489d160ec040a4aa1c48a7e994f4be~tplv-k3u1fbpfcp-zoom-1.image"></p><p>非划分区域用法：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) {<br>    grid-area: <span class="hljs-number">1</span> / <span class="hljs-number">2</span> / <span class="hljs-number">3</span> / <span class="hljs-number">4</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ef7fcc1db6e443d937aa9b364096452~tplv-k3u1fbpfcp-zoom-1.image"><br>所以项目的范围是：行：[1, 3)，列: [2, 4)，也就是1、2行，2、3列。</p><p>参考链接：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">CSS Grid 网格布局教程</a></li><li><a href="https://developer.mozilla.org/zh-CN/">MDN</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Grid布局-项目属性&quot;&gt;&lt;a href=&quot;#Grid布局-项目属性&quot; class=&quot;headerlink&quot; title=&quot;Grid布局 项目属性&quot;&gt;&lt;/a&gt;Grid布局 项目属性&lt;/h1&gt;&lt;h2 id=&quot;容器的基础代码&quot;&gt;&lt;a href=&quot;#容器的基础代码&quot; c</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://www.clzczh.top/tags/CSS/"/>
    
    <category term="布局" scheme="https://www.clzczh.top/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>Grid布局 容器属性(二)</title>
    <link href="https://www.clzczh.top/2022/07/05/grid-2/"/>
    <id>https://www.clzczh.top/2022/07/05/grid-2/</id>
    <published>2022-07-05T12:40:19.000Z</published>
    <updated>2022-07-05T12:40:50.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Grid布局-容器属性-二"><a href="#Grid布局-容器属性-二" class="headerlink" title="Grid布局 容器属性(二)"></a>Grid布局 容器属性(二)</h1><h2 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h2><p>HTML(<code>box</code>的子元素可能会增加、减少)</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>CSS</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> {<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>}<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(odd) {<br>    <span class="hljs-attribute">background-color</span>: pink;<br>}<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(even) {<br>    <span class="hljs-attribute">background-color</span>: purple;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="row-gap、column-gap属性"><a href="#row-gap、column-gap属性" class="headerlink" title="row-gap、column-gap属性"></a><code>row-gap</code>、<code>column-gap</code>属性</h3><p><code>row-gap</code>设置行间距，<code>column-gap</code>设置列间距。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>fr);<br>row-gap: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">column-gap</span>: <span class="hljs-number">20px</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4a3ee034c134aeb8e213c34c9bf482b~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="gap属性"><a href="#gap属性" class="headerlink" title="gap属性"></a><code>gap</code>属性</h3><p><code>gap</code>属性是<code>row-gap</code>和<code>column-gap</code>的简写形式。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">gap: &lt;row-gap&gt; &lt;column-gap&gt;;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">gap: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span>;<br></code></pre></td></tr></tbody></table></figure><p>结果和上图一样。</p><p>如果只有一个值，那么行间距、列间距都是该值。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">gap: <span class="hljs-number">20px</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1571d6fa80e34368a2f75eb6a5cc9a40~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="grid-auto-flow属性"><a href="#grid-auto-flow属性" class="headerlink" title="grid-auto-flow属性"></a><code>grid-auto-flow</code>属性</h3><p><code>grid-auto-flow</code>属性指定在网格中被自动布局的元素怎样排列。默认值是<code>row</code>，即<code>先行后列</code>。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-rows: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br>grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>fr);<br>grid-<span class="hljs-attribute">auto</span>-flow: row;    <span class="hljs-comment">/* 这里有没有都是一样的结果 */</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a9c12f285284d079ff5ed17d3036d35~tplv-k3u1fbpfcp-zoom-1.image"></p><p>设置成<code>column</code>的话，就会按<code>先列后行</code>的顺序来排列。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-rows: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br>grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>fr);<br>grid-<span class="hljs-attribute">auto</span>-flow: column;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4c22f6c117445959c4aa945a7f3dad3~tplv-k3u1fbpfcp-zoom-1.image"></p><p>下面还需要讲一下设置<code>row</code>或<code>column</code>的同时添加<code>dense</code>的情况。加了<code>dense</code>表示尽可能紧密填满。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-rows: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>fr);<br>grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>fr);<br>grid-<span class="hljs-attribute">auto</span>-flow: row;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) {<br>    <span class="hljs-comment">/* 后续将项目属性时会细讲。 */</span><br>    <span class="hljs-comment">/* auto: 表示该项目对网格项目没有任何贡献。实际没有它也行。暂时找不到必须要的理由 */</span><br>    <span class="hljs-comment">/* span: 表示跨越，即占多少个格 */</span><br>    grid-column: auto / span <span class="hljs-number">2</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e0e399150354c7f966f3d70b480c94e~tplv-k3u1fbpfcp-zoom-1.image"></p><p>如果需要紧密填满的话，只需要将<code>grid-auto-flow</code>属性变成<code>row dense</code>即可。之后4就会往上移，补空位，5、6也依次补上去。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/072c6d45c5804fcaa0d78a74ff0fed87~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="单元格内容排列"><a href="#单元格内容排列" class="headerlink" title="单元格内容排列"></a>单元格内容排列</h3><p>和单元格排列有关的主要有两个属性。</p><ul><li><code>justify-items</code>：设置单元格内容的水平位置</li><li><code>align-items</code>：设置单元格内容的垂直位置</li></ul><p>它们的取值都是一样的：</p><ul><li><code>start</code>: 对齐单元格的起点</li><li><code>end</code>: 对齐单元格的终点</li><li><code>center</code>：单元格内容居中</li><li><code>stretch</code>: 拉伸占满单元格(默认值)</li></ul><h4 id="justify-items属性"><a href="#justify-items属性" class="headerlink" title="justify-items属性"></a><code>justify-items</code>属性</h4><p>上面已经简单介绍过了，其实和<code>flex</code>的差不太多，接下来来一下实例加深一下印象。</p><p>box元素的CSS基础代码加一下下面的内容。(方便体验)</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-rows: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">2</span>, <span class="hljs-number">20%</span>);<br>grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">20%</span>);<br><span class="hljs-attribute">background-color</span>: skyblue;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fcb5d061a6734d349030e3e0e926eab4~tplv-k3u1fbpfcp-zoom-1.image"></p><p><strong><code>stretch</code></strong>: 效果和上图一样。因为默认值就是<code>stretch</code></p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">justify-items: stretch;<br></code></pre></td></tr></tbody></table></figure><p>**<code>start</code>**：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">justify-items: start;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1bf571d713c442429e27f33675995e60~tplv-k3u1fbpfcp-zoom-1.image"><br>注意：不再是<code>stretch</code>之后，单元格内容的大小就不会是单元格本身的大小了，而是真正内容的大小。例如，上面的例子中，没有设置宽度，真正内容大小就是文字的大小。</p><p>**<code>end</code>**：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">justify-items: end;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70cef98571ca433aa2ae279022c7ef6d~tplv-k3u1fbpfcp-zoom-1.image"></p><p>**<code>center</code>**：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">justify-items: center;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ede98852a490477fa20ae8a1b57113eb~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a><code>align-items</code>属性</h4><p><strong><code>start</code></strong>:</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">align-items</span>: start;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7e94f23234f49cfbf70ae99ea0583bd~tplv-k3u1fbpfcp-zoom-1.image"></p><p><strong><code>end</code></strong>:</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">align-items</span>: end;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3d498829ae6470393b4ac799e8a6452~tplv-k3u1fbpfcp-zoom-1.image"></p><p><strong><code>center</code></strong>:</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">align-items</span>: center;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51578d5573cb4e04b4a8667cbd7667be~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="place-items属性"><a href="#place-items属性" class="headerlink" title="place-items属性"></a><code>place-items</code>属性</h4><p><code>place-items</code>属性是<code>align-items</code>和<code>justify-items</code>的简写形式。</p><p>语法：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">place-items: &lt;align-items&gt; &lt;justify-items&gt;;<br></code></pre></td></tr></tbody></table></figure><p>示例：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">place-items: start center;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b30b62a94dea40e8b28213adb0dc7714~tplv-k3u1fbpfcp-zoom-1.image"><br>水平方向居上，垂直方向居中。</p><p>需要水平垂直居中只需要值都设置为<code>center</code>即可，<strong>如果省略第二个值，则第二个值会等于第一个值</strong>。也就是说水平垂直居中只需要<code>place-items: center;</code>即可。</p><h3 id="整体内容排列"><a href="#整体内容排列" class="headerlink" title="整体内容排列"></a>整体内容排列</h3><p>box元素的CSS基础代码还是要加一下下面的内容。(方便体验)</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-rows: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">2</span>, <span class="hljs-number">20%</span>);<br>grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">20%</span>);<br><span class="hljs-attribute">background-color</span>: skyblue;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/720b992735d64dc9a6a2a31caffe3d31~tplv-k3u1fbpfcp-zoom-1.image"></p><p>和单元格排列有关的主要有两个属性。</p><ul><li><code>justify-content</code>：设置整体内容的水平位置</li><li><code>align-items</code>：设置整体内容的垂直位置</li></ul><p>它们的取值都是一样的：</p><ul><li><code>start</code>、<code>end</code>、<code>center</code>、<code>stretch</code>和单元格排列部分的一样，只是对齐的不再是单元格，而是容器了。</li><li><code>space-around</code>：每个项目两侧的间隔相等，项目之间的间隔会比容器边框的间隔大一倍。</li><li><code>space-between</code>：项目与项目的间隔相等，项目与容器边框之间没有间隔</li><li><code>space-evenly</code>：项目与项目、项目与容器边框之间的间隔都相等。</li></ul><h4 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a><code>justify-content</code>属性</h4><p>简单举几个实例，基本看看结果+看看概念就懂了(真正懂需要开发时经常使用)<br><code>center</code>:</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">justify-content</span>: center;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f5ff314dc54468a90ba0e0ccb0de199~tplv-k3u1fbpfcp-zoom-1.image"></p><p><code>space-around</code>:</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">justify-content</span>: space-around;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2364907b9d8a48b59627641e529aef62~tplv-k3u1fbpfcp-zoom-1.image"></p><p><code>space-between</code>:</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">justify-content</span>: space-between;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c709503dd5f4e478e749e8a63ad9107~tplv-k3u1fbpfcp-zoom-1.image"></p><p><code>space-evenly</code>:</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">justify-content</span>: space-evenly;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c5c5f6baa3a4ccd80ed495b1ad61ca2~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a><code>align-content</code>属性</h4><p>和<code>justify-content</code>属性一样，只是从水平方向变成了垂直方向。</p><h4 id="place-content属性"><a href="#place-content属性" class="headerlink" title="place-content属性"></a><code>place-content</code>属性</h4><p><code>place-content</code>属性是<code>align-content</code>和<code>justify-content</code>的简写形式。</p><p>语法：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">place-<span class="hljs-attribute">content</span>: &lt;align-content&gt; &lt;justify-content&gt;;<br></code></pre></td></tr></tbody></table></figure><p>示例：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">place-<span class="hljs-attribute">content</span>: space-between center;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08fdf0b11b6d495cb195e65e651ade60~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="start和stretch的区别"><a href="#start和stretch的区别" class="headerlink" title="start和stretch的区别"></a><code>start</code>和<code>stretch</code>的区别</h4><p>用上面的例子测试，如果使用<code>start</code>和<code>stretch</code>,会发现它们的结果一样。</p><p>这是因为我们的项目大小已经固定好了，如果变成<code>auto</code>的话，就能看出<code>start</code>和<code>stretch</code>的区别了。</p><p><code>stretch</code>: 会拉伸占满容器</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-rows: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">2</span>, <span class="hljs-number">20%</span>);<br>grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, auto);<br><span class="hljs-attribute">justify-content</span>: stretch;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e885391d3454d8dbb432af227cf536b~tplv-k3u1fbpfcp-zoom-1.image"></p><p><code>start</code>：真正内容的大小，不会拉伸。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/37a5def12ea44a6e9b419bec4f4fc8ff~tplv-k3u1fbpfcp-zoom-1.image"></p><p>参考链接：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">CSS Grid 网格布局教程</a></li><li><a href="https://developer.mozilla.org/zh-CN/">MDN</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Grid布局-容器属性-二&quot;&gt;&lt;a href=&quot;#Grid布局-容器属性-二&quot; class=&quot;headerlink&quot; title=&quot;Grid布局 容器属性(二)&quot;&gt;&lt;/a&gt;Grid布局 容器属性(二)&lt;/h1&gt;&lt;h2 id=&quot;基础代码&quot;&gt;&lt;a href=&quot;#基础代</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://www.clzczh.top/tags/CSS/"/>
    
    <category term="布局" scheme="https://www.clzczh.top/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>Grid布局 容器属性(一) `grid-template`系列属性</title>
    <link href="https://www.clzczh.top/2022/07/05/grid-1/"/>
    <id>https://www.clzczh.top/2022/07/05/grid-1/</id>
    <published>2022-07-05T12:39:22.000Z</published>
    <updated>2022-07-05T12:40:00.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Grid布局-容器属性-一-grid-template系列属性"><a href="#Grid布局-容器属性-一-grid-template系列属性" class="headerlink" title="Grid布局 容器属性(一) grid-template系列属性"></a>Grid布局 容器属性(一) <code>grid-template</code>系列属性</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果学会语法了，想要类似刷题增加一点印象的话，可以去<a href="http://cssgridgarden.com/">GRID GARDEN</a>玩一下游戏，不过比较简单。</p><h2 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h2><p>HTML(<code>box</code>的子元素可能会增加、减少)</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>CSS</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> {<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>}<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(odd) {<br>    <span class="hljs-attribute">background-color</span>: pink;<br>}<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(even) {<br>    <span class="hljs-attribute">background-color</span>: purple;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><h3 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a><code>display</code>属性</h3><p>设置<code>grid</code>布局。</p><p><code> display: grid;</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> {<br>    <span class="hljs-attribute">display</span>: grid;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0141122b66d74317943a3bac73be811a~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220616223659841"></p><p>现在的效果是，子元素会平分行。</p><h3 id="grid-template系列属性"><a href="#grid-template系列属性" class="headerlink" title="grid-template系列属性"></a><code>grid-template</code>系列属性</h3><ul><li><code>grid-template-rows</code>：定义每一列的行高</li><li><code>grid-template-columns</code>：定义每一列的列宽</li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-rows: <span class="hljs-number">50px</span> <span class="hljs-number">100px</span>;<br>grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">50px</span> <span class="hljs-number">100px</span> <span class="hljs-number">150px</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9421ae729a6549d9bf6b1b31106b8163~tplv-k3u1fbpfcp-zoom-1.image"><br>第一行50px，第二行100px；第一列50px，第二列100px，第三列150px。</p><p><strong>注意</strong>：</p><ul><li><p>如果只定义行高，没有定义到的行，会平分剩余高度。(剩余高度为0，则后续的行高都是0)</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-rows: <span class="hljs-number">50px</span> <span class="hljs-number">100px</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d535ac7c022d4378a8fa6077ff3227bd~tplv-k3u1fbpfcp-zoom-1.image"></p></li><li><p>如果自定义列宽，也是平分剩余高度。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">50px</span> <span class="hljs-number">100px</span> <span class="hljs-number">150px</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ba994e11e1b4cb283c09bb4f8054879~tplv-k3u1fbpfcp-zoom-1.image"></p></li></ul><h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a><code>repeat()</code></h4><p>我们还可以使用<code>repest()</code>来简写重复值。第一个参数是重复的次数，第二个是要重复的值。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-rows: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">2</span>, <span class="hljs-number">50%</span>);<br>grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">33.3%</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc22e67b8e034c03b4aeb36cb43af2d7~tplv-k3u1fbpfcp-zoom-1.image"></p><p>重复的值也可以是一个模式。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">2</span>, <span class="hljs-number">20px</span> <span class="hljs-number">40px</span> <span class="hljs-number">60px</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8103d72455e4dd18e2c4997686c1523~tplv-k3u1fbpfcp-zoom-1.image"></p><p>1、2、3列是20px、40px、60px，4、5、6列还是20px、40px、60px</p><p>另外，当我们直接使用<code>repeat()</code>溢出容器也是不会自动换行的。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">4</span>, <span class="hljs-number">100px</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffd0e6caa287423db231c1455cd02bba~tplv-k3u1fbpfcp-zoom-1.image"></p><p>这时候，我们可以使用<code>auto-fill</code>关键字，可以实现容纳尽可能多的单元格。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(auto-fill, <span class="hljs-number">100px</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/472b98fd6e5f46f5837733cdc6fa71ad~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="fr关键字"><a href="#fr关键字" class="headerlink" title="fr关键字"></a><code>fr</code>关键字</h4><p><code>fr</code>是<code>fraction</code>的缩写，代表片段。如果两列的宽度分别是<code>1fr</code>和<code>2fr</code>，那么第二列是第一列的两倍。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-rows: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br>grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">3</span>fr;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f81850483d514f9997a93ceffc729888~tplv-k3u1fbpfcp-zoom-1.image"></p><p>上面两个图可以发现后两个元素消失了，这是因为我们只定义了两行，两列，没有剩余高度了，所以后两个元素的高度是0。</p><p><code>fr</code>关键字还可以和其他单位混用。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-rows: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br>grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">20px</span> <span class="hljs-number">1</span>fr <span class="hljs-number">2</span>fr;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4cbbae933e8847229d0cfda4f35edba1~tplv-k3u1fbpfcp-zoom-1.image"></p><p>如果只有一个<code>fr</code>单位，那么此时会占满剩余空间</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-rows: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br>grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">20px</span> <span class="hljs-number">1</span>fr;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3e4b19b5bb940619d230333da4fcd82~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="auto关键字"><a href="#auto关键字" class="headerlink" title="auto关键字"></a><code>auto</code>关键字</h4><p><code>auto</code>关键字表示占满剩余空间。<br>所以只有一个<code>fr</code>单位的例子中，也可以使用<code>auto</code>替换，能得到同样的结果。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-rows: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br>grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">20px</span> auto;<br></code></pre></td></tr></tbody></table></figure><p>那么<code>fr</code>和<code>auto</code>有什么区别呢？<br><code>fr</code>表示占据剩余空间的份数，所以可以有比例关系，<br><code>auto</code>是分配空余空间(即占满剩余空间)。</p><p>如果<code>auto</code>遇到<code>fr</code>，会被压缩成元素真实大小，<code>fr</code>会占满剩余空间。(小弟遇到大哥)</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-<span class="hljs-attribute">columns</span>: auto <span class="hljs-number">50px</span> <span class="hljs-number">1</span>fr;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5e758421c664737a7405421e9ea560a~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="minmax"><a href="#minmax" class="headerlink" title="minmax()"></a><code>minmax()</code></h4><p>CSS函数<code>minmax()</code>定义了一个长宽范围的闭区间， 与CSS网格布局一起使用。两个参数，最小值和最大值。</p><h3 id="grid-template-areas属性"><a href="#grid-template-areas属性" class="headerlink" title="grid-template-areas属性"></a><code>grid-template-areas</code>属性</h3><p><code>grid-template-areas</code>属性没有归到上面那里是因为它有一点点特殊。它用于定义区域(划分区域)，它定义的区域需要项目(子元素)使用才会有效果。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 实际上，使用划分区域这种做法的话，排版顺序可以随意 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>header<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>nav<span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>main<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>footer<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> {<br>    <span class="hljs-attribute">display</span>: grid;<br>    <span class="hljs-comment">/* 定义区域(划分区域) */</span><br>    grid-template-areas:<br>        <span class="hljs-string">"header header"</span><br>        <span class="hljs-string">"nav main"</span><br>        <span class="hljs-string">"nav footer"</span>;<br>}<br><br><span class="hljs-selector-tag">header</span> {<br>    <span class="hljs-comment">/* 真正使用区域(注意不是字符串) */</span><br>    grid-area: header;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>}<br><br><span class="hljs-selector-tag">nav</span> {<br>    grid-area: nav;<br>    <span class="hljs-attribute">background-color</span>: purple;<br>}<br><br><span class="hljs-selector-tag">main</span> {<br>    grid-area: main;<br>    <span class="hljs-attribute">background-color</span>: skyblue;<br>}<br><br><span class="hljs-selector-tag">footer</span> {<br>    grid-area: footer;<br>    <span class="hljs-attribute">background-color</span>: orange;<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/effbbbbb2db14091aeb4c5dd63519df1~tplv-k3u1fbpfcp-zoom-1.image"></p><p>如果有连续的行的区域一样的话，那么会合并成只有一行。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-areas:<br>                <span class="hljs-string">"header header"</span><br>                <span class="hljs-string">"nav main"</span><br>                <span class="hljs-string">"nav div"</span><br>                <span class="hljs-string">"nav footer"</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f53536744814551bfb82efaffbbcb37~tplv-k3u1fbpfcp-zoom-1.image"></p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-areas:<br>                <span class="hljs-string">"header header"</span><br>                <span class="hljs-string">"nav main"</span><br>                <span class="hljs-string">"nav footer"</span><br>                <span class="hljs-string">"nav footer"</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4160c6d05500442fa26ae63f668a00ff~tplv-k3u1fbpfcp-zoom-1.image"><br>上面的代码中，<code>footer</code>占据了两个区域，但是实际上只占了一个，这是因为第三行和第四行的区域完全相同，所以合并了。</p><p><strong>如果有区域不需要利用，使用点<code>.</code>来表示。</strong></p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-areas:<br>                <span class="hljs-string">"header header header"</span><br>                <span class="hljs-string">"nav . main"</span><br>                <span class="hljs-string">"footer footer footer"</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e974d79bfd5491fab6164f7ef5c7da3~tplv-k3u1fbpfcp-zoom-1.image"></p><p>划分区域需要注意两点：</p><ul><li>不能当墙头草(跨行的同时跨列)</li><li>不能太贪心(同时拿两份不紧贴的)</li></ul><p>墙头草：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-areas:<br>    <span class="hljs-string">"header header header"</span><br>    <span class="hljs-string">"footer nav main"</span><br>    <span class="hljs-string">"footer footer footer"</span><br></code></pre></td></tr></tbody></table></figure><p>贪心：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-areas:<br>    <span class="hljs-string">"header header header"</span><br>    <span class="hljs-string">"nav . main"</span><br>    <span class="hljs-string">"main footer footer"</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c9c7bd699d14cc3a8f973b87bac3b53~tplv-k3u1fbpfcp-zoom-1.image"><br>结果都会堆在一个位置。</p><p>点<code>.</code>不受这两点限制。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-areas:<br>    <span class="hljs-string">"header header ."</span><br>    <span class="hljs-string">"nav . main"</span><br>    <span class="hljs-string">"footer . ."</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28555658129044dd8602d013f2af3ec3~tplv-k3u1fbpfcp-zoom-1.image"></p><p>参考链接：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">CSS Grid 网格布局教程</a></li><li><a href="https://developer.mozilla.org/zh-CN/">MDN</a></li><li><a href="http://www.qiutianaimeili.com/html/page/2020/03/2050e4ee4h3hjqc.html">Grid布局中的auto和fr</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Grid布局-容器属性-一-grid-template系列属性&quot;&gt;&lt;a href=&quot;#Grid布局-容器属性-一-grid-template系列属性&quot; class=&quot;headerlink&quot; title=&quot;Grid布局 容器属性(一) grid-template系列</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://www.clzczh.top/tags/CSS/"/>
    
    <category term="布局" scheme="https://www.clzczh.top/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>MutationObserver接口-2-观察范围</title>
    <link href="https://www.clzczh.top/2022/07/05/MutationObserver%E6%8E%A5%E5%8F%A3-2-%E8%A7%82%E5%AF%9F%E8%8C%83%E5%9B%B4/"/>
    <id>https://www.clzczh.top/2022/07/05/MutationObserver%E6%8E%A5%E5%8F%A3-2-%E8%A7%82%E5%AF%9F%E8%8C%83%E5%9B%B4/</id>
    <published>2022-07-05T12:38:16.000Z</published>
    <updated>2022-07-05T12:39:04.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MutationObserver接口-二-观察范围"><a href="#MutationObserver接口-二-观察范围" class="headerlink" title="MutationObserver接口(二)    观察范围"></a>MutationObserver接口(二)    观察范围</h1><h2 id="观察范围"><a href="#观察范围" class="headerlink" title="观察范围"></a>观察范围</h2><p>上一节，我们使用<code>MutationObserver</code>时，都只是观察节点的属性。但是实际上并不仅仅是只能观察节点的属性，还可以观察子节点、子树等。只需要调用<code>observe()</code>方法时，第二个参数添加对应配置即可。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>attributes</code></td><td>布尔值，表示观察目标节点的属性变化</td></tr><tr><td><code>attributeFilter</code></td><td>字符串数组，表示要观察哪些属性的变化。(类似白名单，只有白名单的才会被观察)</td></tr><tr><td><code>attributeOldValue</code></td><td>布尔值，表示<code>MutationRecord</code>是否记录变化之间的数据。**设置该属性为<code>true</code>，会将<code>attributes</code>的值转换为<code>true</code>**。</td></tr><tr><td><code>characterData</code></td><td>布尔值，表示观察文本节点。</td></tr><tr><td><code>characterDataOldValue</code></td><td>布尔值，表示<code>MutationRecord</code>是否记录变化之间的数据。和<code>attributeOldValue</code>一样，对应<code>characterData</code></td></tr><tr><td><code>childList</code></td><td>布尔值，表示观察子节点</td></tr><tr><td><code>subtree</code></td><td>布尔值。表示观察目标节点及其子树。如果为<code>false</code>，则之观察目标节点的变化，为<code>true</code></td></tr></tbody></table><h3 id="观察属性"><a href="#观察属性" class="headerlink" title="观察属性"></a>观察属性</h3><p>观察属性就是上一节一直在用的。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function">(<span class="hljs-params">mutationsRecords</span>) =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(mutationsRecords)<br>})<br><br>observer.observe(<span class="hljs-built_in">document</span>.body, {<br>  <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span><br>})<br><br><span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'clz'</span>)<br></code></pre></td></tr></tbody></table></figure><p>如果我们不需要观察所有属性，而只是观察某个或某几个属性，可以使用<code> attributeFilter</code>属性来设置白名单，值是一个属性名数组。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function">(<span class="hljs-params">mutationRecords</span>) =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(mutationRecords)<br>})<br><br><br>observer.observe(<span class="hljs-built_in">document</span>.body, {<br>  <span class="hljs-attr">attributeFilter</span>: [<span class="hljs-string">'name'</span>, <span class="hljs-string">'age'</span>]<br>})<br><br><br><span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'clz'</span>)<br><span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'age'</span>, <span class="hljs-number">21</span>)<br><span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'job'</span>, <span class="hljs-string">'FontEnd-Coder'</span>)<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8450e0031dd64dbe948e0b5ad5adb186~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220619130352108"></p><p>上面设置了<code>name</code>和<code>age</code>为白名单，即只观察<code>name</code>和<code>age</code>属性，所以后面设置<code>job</code>属性不会触发回调。</p><p>从上图，我们可以看到一个oldValue属性，它就是用来保存属性原来的值的。而默认是不会保存属性原来的值的，如果想要记录原来的值，可以将<code> attributeOldValue</code>属性设置为<code> true</code>。**设置该属性为<code>true</code>，会将<code>attributes</code>的值转换为<code>true</code>**。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function">(<span class="hljs-params">mutationRecords</span>) =&gt;</span> {<br>  mutationRecords.map(<span class="hljs-function"><span class="hljs-params">mutationRecord</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(mutationRecord.oldValue))<br>})<br><br><br>observer.observe(<span class="hljs-built_in">document</span>.body, {<br>  <span class="hljs-attr">attributeOldValue</span>: <span class="hljs-literal">true</span><br>})<br><br><span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'clz'</span>)<br><span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'czh'</span>)<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d840d01903b5422d846243726bf78b31~tplv-k3u1fbpfcp-zoom-1.image" alt="OrufED.png"></p><p>设置<code>name</code>属性为<code>clz</code>的时候打印原来的值，原来没有值，所以打印<code>null</code>，设置为<code>czh</code>的时候打印原来的值<code>czh</code>。</p><h3 id="观察文本节点"><a href="#观察文本节点" class="headerlink" title="观察文本节点"></a>观察文本节点</h3><p><code>MutationObserver</code>可以观察文本节点。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function">(<span class="hljs-params">mutationRecords</span>) =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(mutationRecords)<br>})<br><br><span class="hljs-built_in">document</span>.body.firstChild.textContent = <span class="hljs-string">'hello'</span><br><br>observer.observe(<span class="hljs-built_in">document</span>.body.firstChild, {<br>  <span class="hljs-attr">characterData</span>: <span class="hljs-literal">true</span><br>})<br><br><span class="hljs-built_in">document</span>.body.firstChild.textContent = <span class="hljs-string">'123'</span><br><span class="hljs-built_in">document</span>.body.firstChild.textContent = <span class="hljs-string">'456'</span><br><span class="hljs-built_in">document</span>.body.firstChild.textContent = <span class="hljs-string">'789'</span><br></code></pre></td></tr></tbody></table></figure><p>如果想要记录原来的值，可以将<code> characterDataOldValue</code>属性设置为<code> true</code>。**设置该属性为<code>true</code>，会将<code>characterData</code>的值转换为<code>true</code>**。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function">(<span class="hljs-params">mutationRecords</span>) =&gt;</span> {<br>  mutationRecords.map(<span class="hljs-function"><span class="hljs-params">mutationRecord</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(mutationRecord.oldValue))<br>})<br><br><br><span class="hljs-built_in">document</span>.body.firstChild.textContent = <span class="hljs-string">'clz'</span><br><br>observer.observe(<span class="hljs-built_in">document</span>.body.firstChild, {<br>  <span class="hljs-attr">characterDataOldValue</span>: <span class="hljs-literal">true</span><br>})<br><br><span class="hljs-built_in">document</span>.body.firstChild.textContent = <span class="hljs-string">'123'</span><br><span class="hljs-built_in">document</span>.body.firstChild.textContent = <span class="hljs-string">'456'</span><br><span class="hljs-built_in">document</span>.body.firstChild.textContent = <span class="hljs-string">'789'</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39363b6e05f24eec8441139b9f2840f6~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220619131126781"></p><p>注意：<code>innerText</code>和<code>textContent</code>有点点相似，但是<code>innerText</code>可能会引发一些问题。</p><p>首先，<code>innerText</code>是<strong>元素节点</strong>的属性，表示一个节点及其后代的“渲染”文本内容。而<code>textContent</code>是<strong>节点</strong>的属性，表示节点的一个节点及其后代的文本内容。</p><p>举个小例子，说明他们两的区别。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>            123<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display:none"</span>&gt;</span><br>            456<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>)</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(div.innerText)</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(div.textContent)</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'%c%s'</span>, <span class="hljs-string">'color:red;font-size:24px'</span>, <span class="hljs-string">'============'</span>)</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> divChild = div.firstChild</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(divChild.textContent)</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(divChild.innerText)</span><br><span class="javascript"></span><br><span class="javascript">        divChild.textContent = <span class="hljs-string">'456'</span>  <span class="hljs-comment">// 会在span节点前添加上456</span></span><br><span class="javascript">        <span class="hljs-comment">// divChild.innerText = '456'   // 没有效果,因为文本节点没有innerText属性</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>差异：</p><ol><li><code>innerText</code>属性不会获取<code>display</code>为<code>none</code>的隐藏元素，而<code>textContent</code>会获取。</li><li><code>innerText</code>没有格式，而<code>textContent</code>有格式</li><li>文本节点没有<code>innerText</code>属性</li></ol><p>从上面可以看到，<code>innerText</code>属性不会获取<code>display</code>为<code>none</code>的隐藏元素，而<code>textContent</code>会获取。也就是说，<code>innetText</code>属性值的获取会触发回流，因为它需要考虑到CSS样式(如<code>display</code>)，而<code>textContent</code>只是单纯读取文本内容，所以不会发生回流。</p><p>当我们观察节点时修改的是<code>innerText</code>，而不是<code>textContent</code>的话，会引发不一样的情况(个人认为算bug了，如果有了解原因的小伙伴，可以评论交流)</p><p>另外红宝书不建议使用<code>innerText</code>，但是，<strong>明知山有虎，偏向虎山行</strong>。(了解使用后会有什么隐患)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<br>  <span class="hljs-function">(<span class="hljs-params">mutationRecords</span>) =&gt;</span> mutationRecords.map(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(x.oldValue))<br>);<br><br><span class="hljs-built_in">document</span>.body.innerText = <span class="hljs-string">'clz'</span><br><br>observer.observe(<span class="hljs-built_in">document</span>.body.firstChild, { <span class="hljs-attr">characterDataOldValue</span>: <span class="hljs-literal">true</span> });<br><br><span class="hljs-built_in">document</span>.body.firstChild.textContent = <span class="hljs-string">'123'</span><br><span class="hljs-built_in">document</span>.body.firstChild.textContent = <span class="hljs-string">'789'</span><br></code></pre></td></tr></tbody></table></figure><ol><li><p>观察前设置的<code>innerText</code>值也能被观察到</p></li><li><p><code>oldValue</code>不再是旧值，而是设置的新值</p></li></ol><p>上面开始观察后，使用的是<code>textContent</code>，因为使用<code>innerText</code>又会导致另一个bug发生。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<br>  <span class="hljs-function">(<span class="hljs-params">mutationRecords</span>) =&gt;</span> mutationRecords.map(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(x.oldValue))<br>);<br><br><span class="hljs-built_in">document</span>.body.innerText = <span class="hljs-string">'clz'</span><br><br>observer.observe(<span class="hljs-built_in">document</span>.body.firstChild, { <span class="hljs-attr">characterDataOldValue</span>: <span class="hljs-literal">true</span> });<br><br><span class="hljs-built_in">document</span>.body.firstChild.textContent = <span class="hljs-string">'123'</span><br><span class="hljs-built_in">document</span>.body.innerText = <span class="hljs-string">'456'</span><br><span class="hljs-built_in">document</span>.body.firstChild.textContent = <span class="hljs-string">'789'</span><br></code></pre></td></tr></tbody></table></figure><ol start="3"><li>开始观察后，修改<code>innerText</code>属性会导致观察失效。包括开始观察后<code>innerText</code>之前和之后的。</li></ol><p>即使不混用，也还是有问题。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<br>  <span class="hljs-function">(<span class="hljs-params">mutationRecords</span>) =&gt;</span> mutationRecords.map(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(x.oldValue))<br>);<br><br><span class="hljs-built_in">document</span>.body.innerText = <span class="hljs-string">'clz'</span><br><br>observer.observe(<span class="hljs-built_in">document</span>.body.firstChild, { <span class="hljs-attr">characterDataOldValue</span>: <span class="hljs-literal">true</span> });<br><br><span class="hljs-built_in">document</span>.body.innerText = <span class="hljs-string">'123'</span><br><span class="hljs-built_in">document</span>.body.innerText = <span class="hljs-string">'456'</span><br><span class="hljs-built_in">document</span>.body.innerText = <span class="hljs-string">'789'</span><br></code></pre></td></tr></tbody></table></figure><p>上面的代码不会打印任何东西。所以**尽可能不要使用<code>innerText</code>，而是使用<code>textContent</code>**。</p><h3 id="观察子节点"><a href="#观察子节点" class="headerlink" title="观察子节点"></a>观察子节点</h3><p><code> MutationObserver</code>还可以观察目标节点子节点的添加和移除，只需要将<code>childList</code>属性设置为<code>true</code>即可。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> box = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'box'</span>)</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(</span><br><span class="javascript">            <span class="hljs-function">(<span class="hljs-params">mutationRecords</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(mutationRecords)</span><br><span class="javascript">        );</span><br><span class="javascript"></span><br><span class="javascript">        observer.observe(box, { <span class="hljs-attr">childList</span>: <span class="hljs-literal">true</span> })</span><br><span class="javascript"></span><br><span class="javascript">        box.appendChild(<span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'span'</span>))    <span class="hljs-comment">// 在MutationRecord的addedNodes属性中可以查看到添加的节点</span></span><br><span class="javascript"></span><br><span class="javascript">        box.innerHTML = <span class="hljs-string">'&lt;div&gt;&lt;/div&gt;'</span>     <span class="hljs-comment">// 使用innetHTML还会移除节点，表现为removedNodes中有被移除的节点</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c90758a66db41e6867992731307687b~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220619134510262"></p><p>交换子节点顺序会导致发生两次变化，因为交换子节点顺序实际上有两个步骤，第一次是节点被移除，第二次是节点被添加。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> box = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'box'</span>)</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(</span><br><span class="javascript">            <span class="hljs-function">(<span class="hljs-params">mutationRecords</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(mutationRecords)</span><br><span class="javascript">        );</span><br><span class="javascript"></span><br><span class="javascript">        observer.observe(box, { <span class="hljs-attr">childList</span>: <span class="hljs-literal">true</span> })</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// box.insertBefore(box.firstElementChild, box.lastElementChild)  // 即使最后顺序并没有发生改变，实际也是被移除后，再次插入原来的位置</span></span><br><span class="javascript">        box.insertBefore(box.lastElementChild, box.firstElementChild)       </span><br><span class="javascript"></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02bbcff516174657976a400f6c13d2a4~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220619135018950"></p><h2 id="观察子树"><a href="#观察子树" class="headerlink" title="观察子树"></a>观察子树</h2><p><code> MutationObserver</code>可以观察子树，只需要将<code>subtree</code>属性设置为<code>true</code>即可。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> box = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'box'</span>)</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(</span><br><span class="javascript">      <span class="hljs-function">(<span class="hljs-params">mutationRecords</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(mutationRecords)</span><br><span class="javascript">    );</span><br><span class="javascript"></span><br><span class="javascript">    observer.observe(box, {</span><br><span class="javascript">      <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">      <span class="hljs-attr">subtree</span>: <span class="hljs-literal">true</span></span><br><span class="javascript">    });</span><br><span class="javascript"></span><br><span class="javascript">    box.firstElementChild.setAttribute(<span class="hljs-string">'haha'</span>, <span class="hljs-string">'haha'</span>)</span><br><span class="javascript">    box.firstElementChild.appendChild(<span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'b'</span>))</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/215b96a16488408498e9ef696b1064db~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220619135321868"></p><p>但是，从上面，我们可以发现，只有修改属性才会被观察到，添加节点时并没有被观察到，那是不是观察子树不能观察节点的添加和移除呢？<br>并不是，这里只是因为分工明确，<code>subtree</code>观察子树(不包括节点的添加和删除)，<code>childList</code>观察子节点，所以需要同时实现的话，那就需要两个属性都有。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> box = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'box'</span>)<br><br><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<br>  <span class="hljs-function">(<span class="hljs-params">mutationRecords</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(mutationRecords)<br>);<br><br>observer.observe(box, {<br>  <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">subtree</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">childList</span>: <span class="hljs-literal">true</span><br>});<br><br>box.firstElementChild.setAttribute(<span class="hljs-string">'haha'</span>, <span class="hljs-string">'haha'</span>)<br>box.firstElementChild.appendChild(<span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'b'</span>))<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42ac5ae90a9541eaab3cf9df2d1d996e~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220619135459550"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MutationObserver接口-二-观察范围&quot;&gt;&lt;a href=&quot;#MutationObserver接口-二-观察范围&quot; class=&quot;headerlink&quot; title=&quot;MutationObserver接口(二)    观察范围&quot;&gt;&lt;/a&gt;Mutatio</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>MutationObserver接口-1-基本用法</title>
    <link href="https://www.clzczh.top/2022/07/05/MutationObserver%E6%8E%A5%E5%8F%A3-1-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>https://www.clzczh.top/2022/07/05/MutationObserver%E6%8E%A5%E5%8F%A3-1-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</id>
    <published>2022-07-05T12:36:02.000Z</published>
    <updated>2022-07-05T12:36:56.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MutationObserver接口-一-基本用法"><a href="#MutationObserver接口-一-基本用法" class="headerlink" title="MutationObserver接口(一)    基本用法"></a>MutationObserver接口(一)    基本用法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>看红宝书的时候学习到的一个新知识点，感觉很有意思。只能说是比较典型的观察者模式了(个人只是简单了解过一点点的设计模式，有误请评论)。</p></blockquote><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>使用<code>MutationObserver</code>可以观察整个文档、DOM树的一部分或某个元素。使用<code>MutationObserver</code>需要通过<code>MutationObserver</code>的构造函数实例化对象，参数是一个回调函数。</p><h3 id="observe-方法"><a href="#observe-方法" class="headerlink" title="observe()方法"></a>observe()方法</h3><p>实例化出一个<code>MutationObserver</code>对象之后，这个对象实际上就是一个观察者，但是，这个观察者这个时候还不知道自己要观察什么。这个时候需要调用<code>observer</code>方法来将它和DOM关联起来。此方法接收两个必须参数：<strong>要观察其变化的DOM节点</strong>、<strong>一个用于控制观察哪些方面的配置对象</strong>。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'DOM元素有变化'</span>)<br>})<br><br>observer.observe(<span class="hljs-built_in">document</span>.body, {<br>  <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span><br>})<br><br><span class="hljs-built_in">document</span>.body.className = <span class="hljs-string">'foo'</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'script'</span>)        <span class="hljs-comment">// 先打印script，再打印DOM元素有变化</span><br></code></pre></td></tr></tbody></table></figure><p>上面设置了观察<code>body</code>元素的属性变化，所以修改<code>className</code>属性时会触发注册的回调函数，另外回调函数是异步执行的，所以会先打印script。</p><h3 id="MutationRecord实例"><a href="#MutationRecord实例" class="headerlink" title="MutationRecord实例"></a>MutationRecord实例</h3><p>回调函数会接收一个<code>MutationRecord</code>实例的数组。<code>MutationRecord</code>实例会包含发生变化的信息，包括发生了什么变化，哪个地方发生了变化。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function">(<span class="hljs-params">mutationsRecord</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(mutationsRecord)<br>})<br><br>observer.observe(<span class="hljs-built_in">document</span>.body, {<br>    <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span><br>})<br><br><span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'clz'</span>)<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54566fa3baea453d9c846a62d1918532~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220618130843972"></p><p>连续修改会生成多个对应的 <code>MutationRecord</code>实例，下次回调执行时就会收到包含所有这些实例的数组，<br>顺序为变化事件发生的顺序：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function">(<span class="hljs-params">mutationsRecords</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(mutationsRecords)<br>})<br><br>observer.observe(<span class="hljs-built_in">document</span>.body, {<br>    <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span><br>})<br><br><span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'clz'</span>)<br><span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'czh'</span>)<br><span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'ccc'</span>)<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3073ec96fa4d484387390f12af1a2468~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220618133330300"></p><p>回调函数还可以接收第二个参数，就是<code>MutationObserver</code>的实例</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function">(<span class="hljs-params">mutationRecords, mutationObserver</span>) =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(mutationRecords)<br>  <span class="hljs-built_in">console</span>.log(mutationObserver === observer)        <span class="hljs-comment">// true</span><br>});<br>observer.observe(<span class="hljs-built_in">document</span>.body, { <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span> });<br><span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'clz'</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="disconnect-方法"><a href="#disconnect-方法" class="headerlink" title="disconnect()方法"></a>disconnect()方法</h3><p>可以调用 <code>disconnect()</code>方法，来取消<code>observer</code>后续的观察，并且也会导致之前已经观察到，但是还没有执行毁掉的结果被抛弃。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function">(<span class="hljs-params">mutationRecords, mutationObserver</span>) =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(mutationRecords)<br>});<br><br><br>observer.observe(<span class="hljs-built_in">document</span>.body, { <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span> });<br><br><span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'clz'</span>)<br><br>observer.disconnect()<br><span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'czh'</span>)<br></code></pre></td></tr></tbody></table></figure><p>上面的例子不会打印任何结果，这就是因为<code>disconnect()</code>不仅取消掉了<code>observer</code>后续的观察，还抛弃了之前已经观察到但还没执行回调的结果。</p><p>如果我们想<code>disconnect()</code>不影响之前已经观察道德结果的话，可以使用<code>setTimeout()</code>让之前的回调执行完毕再调用<br><code>disconnect()</code>。因为<code>MutationObserver</code>的回调是微任务，而<code>setTimeout()</code>是宏任务，执行完一开始的同步任务后，会先执行微任务，再执行宏任务。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function">(<span class="hljs-params">mutationRecords, mutationObserver</span>) =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(mutationRecords)<br>});<br><br><br>observer.observe(<span class="hljs-built_in">document</span>.body, { <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span> });<br><br><span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'clz'</span>)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>    observer.disconnect()<br>    <span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'czh'</span>)<br>}, <span class="hljs-number">0</span>)<br></code></pre></td></tr></tbody></table></figure><p>上面这个例子会打印只有一个<code>MutationRecord</code>实例的数组。</p><h3 id="复用MutationObserver"><a href="#复用MutationObserver" class="headerlink" title="复用MutationObserver"></a>复用MutationObserver</h3><p>如果我们想要观察多个节点，不需要新建很多个<code>MutationObserver</code>对象。只需要多次调用<code>observe()</code>方法，就能够复用一个<code>MutationObserver</code>对象观察不同的目标节点。还可以通过<code> MutationRecord</code>的<code>target</code>属性可以标识发生变化的目标节点。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function">(<span class="hljs-params">mutationRecords</span>) =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(mutationRecords)<br>  <span class="hljs-built_in">console</span>.log(mutationRecords.map(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x.target))<br>})<br><br><span class="hljs-keyword">let</span> childA = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>)<br><span class="hljs-keyword">let</span> childB = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'span'</span>)<br><br><span class="hljs-built_in">document</span>.body.appendChild(childA)<br><span class="hljs-built_in">document</span>.body.appendChild(childB)<br><br>observer.observe(childA, { <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span> })<br>observer.observe(childB, { <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span> })<br><br><span class="hljs-comment">// observer.disconnect()    // 一刀切，会停用全部观察</span><br><br>childA.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'clz'</span>)<br>childB.setAttribute(<span class="hljs-string">'age'</span>, <span class="hljs-number">21</span>)<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6962938b98bd45bab29e6ef70f02bf8c~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220618212445463"></p><h3 id="重用-MutationObserver"><a href="#重用-MutationObserver" class="headerlink" title="重用 MutationObserver"></a>重用 MutationObserver</h3><p>上面我们有试过通过调用<code>disconnect()</code>方法来结束观察的，结束观察之后这个观察者不就没事干了吗？</p><p>为了不让这个观察者无所事事，可以重新使用它，让它观察新的目标节点(也可以是之前观察过的节点)，实际方法还是调用<code>observe()</code>方法。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'change'</span>)<br>})<br><br><br>observer.observe(<span class="hljs-built_in">document</span>.body, { <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span> })<br><br><span class="hljs-comment">// 使用异步任务，防止disconnect影响到上面的观察</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>  observer.disconnect()    <span class="hljs-comment">// 结束观察</span><br>  <span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'clz'</span>)       <span class="hljs-comment">// 结束观察了，不会输出东西</span><br>})<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-comment">// 重用观察者</span><br>  observer.observe(<span class="hljs-built_in">document</span>.body, { <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span> })<br>  <span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'clz'</span>)<br>})<br><br><br><span class="hljs-built_in">document</span>.body.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'clz'</span>)<br></code></pre></td></tr></tbody></table></figure><p>上面的例子会打印两次<code>change</code>。接下来就来分析一波。</p><ul><li>首先，<code>observer.observe()</code>添加观察，之后遇到了两个定时器，因为是异步任务所以添加到任务队列中。也就是说此时不会结束观察，最后的属性设置就会<strong>触发回调函数</strong>。</li><li>同步任务执行完之后，就开始执行异步任务，第一个定时器就会结束观察了，所以之后的属性设置不会触发回调</li><li>但是，第二个定时器又重用该定时器，还是让它观察<code>body</code>，所以之后又生效了，<strong>再次触发回调函数</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MutationObserver接口-一-基本用法&quot;&gt;&lt;a href=&quot;#MutationObserver接口-一-基本用法&quot; class=&quot;headerlink&quot; title=&quot;MutationObserver接口(一)    基本用法&quot;&gt;&lt;/a&gt;Mutatio</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>表单文本框的使用(二) 输入过滤(合成事件)</title>
    <link href="https://www.clzczh.top/2022/07/05/%E8%A1%A8%E5%8D%95%E6%96%87%E6%9C%AC%E6%A1%86%E7%9A%84%E4%BD%BF%E7%94%A8-2-%E8%BE%93%E5%85%A5%E8%BF%87%E6%BB%A4-%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6/"/>
    <id>https://www.clzczh.top/2022/07/05/%E8%A1%A8%E5%8D%95%E6%96%87%E6%9C%AC%E6%A1%86%E7%9A%84%E4%BD%BF%E7%94%A8-2-%E8%BE%93%E5%85%A5%E8%BF%87%E6%BB%A4-%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6/</id>
    <published>2022-07-05T12:34:32.000Z</published>
    <updated>2022-07-05T12:37:25.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="表单文本框的使用-二-输入过滤-合成事件"><a href="#表单文本框的使用-二-输入过滤-合成事件" class="headerlink" title="表单文本框的使用(二)  输入过滤(合成事件)"></a>表单文本框的使用(二)  输入过滤(合成事件)</h1><h2 id="输入过滤"><a href="#输入过滤" class="headerlink" title="输入过滤"></a>输入过滤</h2><h3 id="屏蔽字符"><a href="#屏蔽字符" class="headerlink" title="屏蔽字符"></a>屏蔽字符</h3><p>情景：输入框需要限制出现的字符，比如只能是数字。</p><p>输入框本身是没有这个功能的，但是我们可以通过JavaScript来实现。<br>我们能实现向输入框中输入字符，依靠的是键盘事件，所以可以通过添加键盘事件，然后根据事件对象的信息来判断符不符合条件，不符合条件，就通过<code>event.preventDefault</code>阻止默认事件，即阻止输入。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"input-box"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"10"</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">"10"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> ipt = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'input'</span>)[<span class="hljs-number">0</span>]</span><br><span class="javascript"></span><br><span class="javascript">        ipt.addEventListener(<span class="hljs-string">'keypress'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(e.key)</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^\d/</span>.test(e.key)) {</span><br><span class="javascript">                e.preventDefault()</span><br><span class="javascript">            }</span><br><span class="javascript">        })</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>上面我们添加的键盘事件是<code>keypress</code>，因为<code>keyup</code>是键盘抬起事件，这个时候已经输入到输入框里了，没有作用；而<code>keydown</code>会识别功能键，所以使用时还得考虑让功能键通过，不然就没法删除输入的内容了。另外，<code>keypress</code>支持区分大小写。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ee0ce9e55044435b2e09baec2a999db~tplv-k3u1fbpfcp-zoom-1.image" alt="filter"></p><h3 id="处理剪切板"><a href="#处理剪切板" class="headerlink" title="处理剪切板"></a>处理剪切板</h3><p>上面我们已经实现只能输入数字了，但是如果我们从外部复制了非数字的数据，粘贴到文本框里就会突破我们的输入过滤。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60653a1560e641bfbc681021102e20c8~tplv-k3u1fbpfcp-zoom-1.image" alt="filter"></p><p>这时候就需要通过剪切板事件来加强我们的输入过滤了（HTML5增加了剪切板事件）</p><ul><li><code>copy</code>：复制操作发生时触发</li><li><code>cut</code>：剪切操作发生时触发</li><li><code>paste</code>：粘贴操作发生时触发</li></ul><p>这三个事件都有添加前缀<code>before</code>的操作发生前触发版本，但是不常用，也不知道有什么具体使用情境。阻止事件也只能在发生时触发的三个事件中阻止。</p><p>怎么获取剪切板的数据呢？<br>可以通过<code>event</code>对象上的<code>clipboardData</code>对象来获取，为防止未经授权访问剪切板，只能在剪切板事件期间访问<code>clipboardData</code>对象。</p><p><code>clipboardData</code>对象上有3个方法：<code>getDate</code>、<code>setData</code>、<code>clearData</code>。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> ipt = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'input'</span>)[<span class="hljs-number">0</span>]<br><br>ipt.addEventListener(<span class="hljs-string">'keypress'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(e.key)<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^\d/</span>.test(e.key)) {<br>        e.preventDefault()<br>    }<br>})<br><br>ipt.addEventListener(<span class="hljs-string">'copy'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {<br>    <span class="hljs-comment">// e.clipboardData.setData第一个参数是格式，第二个参数是复制的内容</span><br>    e.clipboardData.setData(<span class="hljs-string">'text/plain'</span>, <span class="hljs-string">'复制了假数据'</span>)<br><br>    <span class="hljs-comment">// 屏蔽掉默认事件，实现复制假数据</span><br>    e.preventDefault()<br>})<br><br>ipt.addEventListener(<span class="hljs-string">'paste'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {<br>    <span class="hljs-comment">// 读取剪切板的数据</span><br>    <span class="hljs-keyword">const</span> text = e.clipboardData.getData(<span class="hljs-string">'text/plain'</span>)<br><br>    <span class="hljs-comment">// 不满足条件不让粘贴</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^\d/</span>.test(text)) {<br>        e.preventDefault()<br>    }<br>})<br></code></pre></td></tr></tbody></table></figure><p>这样子，就能实现即使是粘贴的数据也要是数字才能输入到输入框了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f92f242466c94c54a60282d9fea7f940~tplv-k3u1fbpfcp-zoom-1.image" alt="filter"></p><h3 id="处理中文、日语等输入法"><a href="#处理中文、日语等输入法" class="headerlink" title="处理中文、日语等输入法"></a>处理中文、日语等输入法</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f1f902c32534a0a8861827d20263368~tplv-k3u1fbpfcp-zoom-1.image" alt="filter"></p><p>当我们使用输入法时，还是会绕过了我们的只能输入数字的限制。</p><p>这里引入一个比较有意思的知识点<strong>合成事件</strong></p><p>中文这种是需要同时按下多个键才能输入一个字符的。<strong>合成事件就是用来检测和控制这种输入，输入的字符在事件对象的<code>data</code>中。</strong></p><ul><li><code>compositionstart</code>：表示输入即将开始，此时<code>data</code>为空串</li><li><code>compositionupdate</code>：新字符插入时触发，此时<code>data</code>为输入的字符</li><li><code>compositionend</code>：表示即将恢复正常的键盘输入，此时<code>data</code>为要输入到输入框的文本</li></ul><p>实践：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> ipt = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'input'</span>)[<span class="hljs-number">0</span>]<br><br>ipt.addEventListener(<span class="hljs-string">'compositionstart'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'%c%s'</span>, <span class="hljs-string">'color: red;font-size: 16px;'</span>, <span class="hljs-string">'conpositionstart'</span>)<br>    <span class="hljs-built_in">console</span>.log(e.data)<br>})<br><br>ipt.addEventListener(<span class="hljs-string">'compositionupdate'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'%c%s'</span>, <span class="hljs-string">'color: blue;font-size: 16px;'</span>, <span class="hljs-string">'compositionupdate'</span>)<br>    <span class="hljs-built_in">console</span>.log(e.data)<br><br><br>})<br><br>ipt.addEventListener(<span class="hljs-string">'compositionend'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'%c%s'</span>, <span class="hljs-string">'color: purple;font-size: 16px;'</span>, <span class="hljs-string">'compositionend'</span>)<br><br>})<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4dfa2313aae84864ba23b6fee76b8b54~tplv-k3u1fbpfcp-zoom-1.image" alt="filter"></p><p>所以说我们可以在合成事件结束的时候，即<code>compositionend</code>的事件处理函数中，把输入的中文给去掉，就能够不允许把汉字输进去。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> ipt = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'input'</span>)[<span class="hljs-number">0</span>]<br><br>ipt.addEventListener(<span class="hljs-string">'compositionend'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {<br>    <span class="hljs-comment">// 去掉后几位</span><br>    e.target.value = e.target.value.slice(<span class="hljs-number">0</span>, -e.data.length)<br>})<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b67d9cfa50134441a32909ab9d2c06ca~tplv-k3u1fbpfcp-zoom-1.image" alt="filter"></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"input-box"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"10"</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">"10"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> ipt = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'input'</span>)[<span class="hljs-number">0</span>]</span><br><span class="javascript"></span><br><span class="javascript">        ipt.addEventListener(<span class="hljs-string">'keypress'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(e.key)</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^\d/</span>.test(e.key)) {</span><br><span class="javascript">                e.preventDefault()</span><br><span class="javascript">            }</span><br><span class="javascript">        })</span><br><span class="javascript"></span><br><span class="javascript">        ipt.addEventListener(<span class="hljs-string">'paste'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {</span><br><span class="javascript">            <span class="hljs-comment">// 读取剪切板的数据</span></span><br><span class="javascript">            <span class="hljs-keyword">const</span> text = e.clipboardData.getData(<span class="hljs-string">'text/plain'</span>)</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">// 不满足条件不让粘贴</span></span><br><span class="javascript">            <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^\d/</span>.test(text)) {</span><br><span class="javascript">                e.preventDefault()</span><br><span class="javascript">            }</span><br><span class="javascript">        })</span><br><span class="javascript"></span><br><span class="javascript">        ipt.addEventListener(<span class="hljs-string">'compositionend'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {</span><br><span class="javascript">            <span class="hljs-comment">// 去掉后几位</span></span><br><span class="javascript">            e.target.value = e.target.value.slice(<span class="hljs-number">0</span>, -e.data.length)</span><br><span class="javascript">        })</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;表单文本框的使用-二-输入过滤-合成事件&quot;&gt;&lt;a href=&quot;#表单文本框的使用-二-输入过滤-合成事件&quot; class=&quot;headerlink&quot; title=&quot;表单文本框的使用(二)  输入过滤(合成事件)&quot;&gt;&lt;/a&gt;表单文本框的使用(二)  输入过滤(合成事件)</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>表单文本框的使用1-选择文本</title>
    <link href="https://www.clzczh.top/2022/07/05/%E8%A1%A8%E5%8D%95%E6%96%87%E6%9C%AC%E6%A1%86%E7%9A%84%E4%BD%BF%E7%94%A8-1-%E9%80%89%E6%8B%A9%E6%96%87%E6%9C%AC/"/>
    <id>https://www.clzczh.top/2022/07/05/%E8%A1%A8%E5%8D%95%E6%96%87%E6%9C%AC%E6%A1%86%E7%9A%84%E4%BD%BF%E7%94%A8-1-%E9%80%89%E6%8B%A9%E6%96%87%E6%9C%AC/</id>
    <published>2022-07-05T12:31:06.000Z</published>
    <updated>2022-07-05T12:37:36.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="表单文本框的使用-一-选择文本"><a href="#表单文本框的使用-一-选择文本" class="headerlink" title="表单文本框的使用(一)  选择文本"></a>表单文本框的使用(一)  选择文本</h1><h2 id="小技能"><a href="#小技能" class="headerlink" title="小技能"></a>小技能</h2><ol><li>通过<code>document.forms</code>来获取所有的表单元素</li><li>通过<code>form.elements</code>来获取表单的所有表单元素</li><li>表单有用的属性<code>tabIndex</code>：数值，表示该表单字段在按<code>Tab</code>键时的切换顺序,默认顺序是从小到大</li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">""</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">"1"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">"3"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">"2"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25ece6ea59014928a1f4a99786121ba7~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h2><p>文本框有两种：</p><ul><li><code>input</code>：单行文本框。<code>size</code>属性指定宽度，表示一次可显示的字符数(实际能显示多一点)；<code>maxlength</code>属性指定最多字符数；<code>value</code>属性指定文本框的初始值。</li><li><code>textarea</code>：多行文本框。<code>rows</code>指定文本框的高度；<code>cols</code>指定文本框的宽度，不支持<code>size</code>属性。初始值应在<code>&lt;textarea&gt;</code>和<code>&lt;/textarea&gt;</code>之间，使用<code>value</code>指定无效。</li></ul><p><strong><code>input</code>和<code>textarea</code>都会在<code>value</code>属性保存自己的内容，可设置和读取文本框的值</strong>。在<code>textarea</code>中设置<code>value</code>属性无效</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"input-box"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"clz"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"10"</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">"10"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"txa-box"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"textarea"</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"4"</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"8"</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">"20"</span>&gt;</span>clz<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="选择文本"><a href="#选择文本" class="headerlink" title="选择文本"></a>选择文本</h3><h4 id="select方法"><a href="#select方法" class="headerlink" title="select方法"></a>select方法</h4><p>文本框有一个<code>select</code>方法，可以选中文本框中全部内容，在调用该方法时会自动将焦点设置到文本框。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"input-box"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"clz"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"10"</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">"10"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"txa-box"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"123"</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"4"</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"8"</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">"20"</span>&gt;</span>clz<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"myclick()"</span>&gt;</span>选中多行文本框内容<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> txa = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'textarea'</span>)[<span class="hljs-number">0</span>]</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myclick</span>(<span class="hljs-params">e</span>) </span>{</span><br><span class="javascript">            txa.select()</span><br><span class="javascript">        }</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="select事件"><a href="#select事件" class="headerlink" title="select事件"></a>select事件</h4><p>当选中文本框中的文本时，会触发<code>select</code>事件。<code>select</code>事件会在用户选择完文本后立即触发(IE老版本除外)。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"txa-box"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"123"</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"4"</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"8"</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">"20"</span>&gt;</span>clz<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> txa = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'textarea'</span>)[<span class="hljs-number">0</span>]</span><br><span class="javascript"></span><br><span class="javascript">        txa.addEventListener(<span class="hljs-string">'select'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'选中内容了'</span>)</span><br><span class="javascript">        })</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6756644ef1441bd9653205b95831398~tplv-k3u1fbpfcp-zoom-1.image" alt="select"></p><h4 id="取得选中文本"><a href="#取得选中文本" class="headerlink" title="取得选中文本"></a>取得选中文本</h4><p>上面我们只是选中了文本，但是不知道选中了什么。HTML5进行了扩展，添加了两个属性<code>selectionStart</code>和<code>selectionEnd</code>。分别是文本选取的起点和终点。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">txa.addEventListener(<span class="hljs-string">'select'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'选中内容了'</span>)<br>    <span class="hljs-built_in">console</span>.log(e.target.selectionStart)<br>    <span class="hljs-built_in">console</span>.log(e.target.selectionEnd)<br>})<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a988936364964394b2b54880e7e97778~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220614215408161"></p><p>所以可以直接使用<code>slice</code>方法得到选中文本。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">txa.addEventListener(<span class="hljs-string">'select'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'选中内容了'</span>)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'选中文本: '</span>, txa.value.slice(txa.selectionStart, txa.selectionEnd))<br>})<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af58c8e4478e445bb03b1961486dd01a~tplv-k3u1fbpfcp-zoom-1.image" alt="select"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;表单文本框的使用-一-选择文本&quot;&gt;&lt;a href=&quot;#表单文本框的使用-一-选择文本&quot; class=&quot;headerlink&quot; title=&quot;表单文本框的使用(一)  选择文本&quot;&gt;&lt;/a&gt;表单文本框的使用(一)  选择文本&lt;/h1&gt;&lt;h2 id=&quot;小技能&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>双击事件与单击事件的那些事</title>
    <link href="https://www.clzczh.top/2022/07/05/%E5%8F%8C%E5%87%BB%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%8D%95%E5%87%BB%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>https://www.clzczh.top/2022/07/05/%E5%8F%8C%E5%87%BB%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%8D%95%E5%87%BB%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</id>
    <published>2022-07-05T12:24:36.000Z</published>
    <updated>2022-07-05T12:25:14.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="双击事件与单击事件的那些事"><a href="#双击事件与单击事件的那些事" class="headerlink" title="双击事件与单击事件的那些事"></a>双击事件与单击事件的那些事</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>项目遇到了双击事件会同时触发单击事件的bug，还是简单记录一下。</p><blockquote><p>心里话：日更太累了。以前都是单独花好几天的时间去看别人的博客，看很多博客后再慢慢输出。现在是边输入边输出(有时候为了能偷懒还把一长篇拆成两部分)，薅完这次全勤羊毛，之后随缘参加日更活动了(再这样下去，感觉写博客的初心都快变了)</p></blockquote><h2 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"myclick"</span> @<span class="hljs-attr">dblclick</span>=<span class="hljs-string">"mydblclick"</span>&gt;</span><br>  test<br><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myclick</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">"单击事件"</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mydblclick</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.error(<span class="hljs-string">"双击事件"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202207052024334.png" alt="image-20220619162952868"></p><p>合情合理，双击事件也是两次点击事件，所以同时会触发单击事件<code>click</code>和双击事件<code>dblclick</code>。但是需求是单击和双击不同的处理，所以双击的时候不应该触发单击事件。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>思路：可以使用函数防抖的做法，单击事件触发后，开启一个定时器，双击事件触发的话就清除定时器。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> timer;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myclick</span>(<span class="hljs-params"></span>) </span>{<br>  timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">"单击事件"</span>);<br>  }, <span class="hljs-number">300</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mydblclick</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">clearTimeout</span>(timer);<br>  <span class="hljs-built_in">console</span>.error(<span class="hljs-string">"双击事件"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202207052024424.gif" alt="dblclick"></p><p>可以发现还是有问题，双击事件还是会触发一次单击事件。</p><p>但这个问题实际上是定时器的使用上有点问题。先看个小案例。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> timer;<br><br>timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>});<br><br>timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>});<br><br><span class="hljs-built_in">clearTimeout</span>(timer);<br></code></pre></td></tr></tbody></table></figure><p>这个案例中，会打印<code>1</code>。也就是说实际上只清楚了第二个定时器，所以我们之前的代码还需要清除第一个定时器才行。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> timer;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myclick</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">clearTimeout</span>(timer);<br><br>  timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">"单击事件"</span>);<br>  }, <span class="hljs-number">300</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mydblclick</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">clearTimeout</span>(timer);<br>  <span class="hljs-built_in">console</span>.error(<span class="hljs-string">"双击事件"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>大功告成。</p><h2 id="el-checkbox使用注意点"><a href="#el-checkbox使用注意点" class="headerlink" title="el-checkbox使用注意点"></a>el-checkbox使用注意点</h2><p>双击事件和单击事件的问题处理完了，再加上一下下项目的踩坑点。</p><p><code>el-checkbox</code>没有事件对象，平常的事件对象在<code>el-checkbox</code>上是布尔值，表示是否选中。但是原生版本是有的。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-checkbox</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">"mychange"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-checkbox</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"mychange"</span> /&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mychange</span>(<span class="hljs-params">e</span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(e);<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202207052024419.gif" alt="el-checkbox"></p><p>另外，<strong>直接修改<code>checkbox</code>绑定的值，不会触发<code>change</code>事件</strong>。</p><p>change事件直接修改值不会触发。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"checked"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"mychange"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"myclick"</span>&gt;</span>change<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">"@vue/reactivity"</span>;<br><br><span class="hljs-keyword">const</span> checked = ref(<span class="hljs-literal">true</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mychange</span>(<span class="hljs-params">e</span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(e);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myclick</span>(<span class="hljs-params"></span>) </span>{<br>  checked.value = !checked.value;<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202207052024413.gif" alt="el-checkbox"></p><p>可以在直接修改绑定值的同时，手动调用<code>change</code>事件的处理函数来模拟触发<code>change</code>事件，不过，事件对象的传参就不太好模拟了。当然，如果使用的是<code>el-checkbox</code>的话，因为它没有事件对象，而是布尔值，所以只需要把<code>checkbox</code>当前绑定的值传过去即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;双击事件与单击事件的那些事&quot;&gt;&lt;a href=&quot;#双击事件与单击事件的那些事&quot; class=&quot;headerlink&quot; title=&quot;双击事件与单击事件的那些事&quot;&gt;&lt;/a&gt;双击事件与单击事件的那些事&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket-简单体验版</title>
    <link href="https://www.clzczh.top/2022/07/05/WebSocket-%E7%AE%80%E5%8D%95%E4%BD%93%E9%AA%8C%E7%89%88/"/>
    <id>https://www.clzczh.top/2022/07/05/WebSocket-%E7%AE%80%E5%8D%95%E4%BD%93%E9%AA%8C%E7%89%88/</id>
    <published>2022-07-05T12:23:07.000Z</published>
    <updated>2022-07-05T12:23:48.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WebSocket-简单体验版"><a href="#WebSocket-简单体验版" class="headerlink" title="WebSocket(简单体验版)"></a>WebSocket(简单体验版)</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Web Socket(套接字)：就是通过<strong>一个长时连接</strong>实现与服务器<strong>全双工、双向</strong>的通信。</p><p>Web Socket使用的并不是HTTP协议而是自定义的<code>Web Socket</code>协议，所以如果我们使用Web Socket的时候，URL不再是<code>http://</code>或<code>https://</code>，而是<code>ws://</code>或<code>wss://</code>(但是，实际上是看红宝书才想着玩一下下，在开发中还没试过用这个来开发的)</p><p>主要特点：服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h3><p>要创建一个新的Web Socket，首先需要实例化一个<code>WebSocket</code>对象。</p><p><strong>我们实例化WebSocket对象时，传的参数应该是一个绝对<code>URL</code><strong>，</strong>同源策略不适用于WebSocket</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> socket = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">"ws://localhost:8088/mysocket"</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb19ca431d9b4f47b5199dd5e362daed~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220529170446392"></p><p><strong>http请求会有跨域，但是WebSocket不会跨域</strong></p><h3 id="后端express"><a href="#后端express" class="headerlink" title="后端express"></a>后端express</h3><p>主要部分都注释了(需要安装<code> express-ws</code>)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)<br><span class="hljs-keyword">const</span> expressWs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express-ws'</span>)<br><br><span class="hljs-keyword">const</span> app = express()<br><br><span class="hljs-comment">// 将WebSocket服务加到app里，简单来说就是让app添加了ws方法</span><br>expressWs(app)<br><br><span class="hljs-comment">// 建立WebSocket服务</span><br>app.ws(<span class="hljs-string">'/mysocket'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ws</span>) </span>{<br>  <span class="hljs-comment">// ws：建立WebSocket的实例</span><br>    <br>  <span class="hljs-comment">// 向客户端发送信息</span><br>  ws.send(<span class="hljs-string">'你连接成功啦'</span>)<br>})<br><br>app.listen(<span class="hljs-number">8088</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'ws://localhost:8088'</span>)<br>})<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202207052023437.png" alt="image-20220529172415750"></p><p>如果连接上了，那么http状态码会是101，因为要切换成ws协议</p><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><p>如果我们，在实例化后就开始发送信息，那就会导致信息发不出，因为还没连接上。这时候我们就得了解一下什么时候能发，进而得了解一下WebSocket的相关事件。</p><ul><li><code>open</code>：在连接成功建立时触发</li><li><code>error</code>：在连接发生错误时触发(此时已经不能再发信息了)</li><li><code>close</code>：在连接关闭时触发(此时已经不能再发信息了)</li><li><code>message</code>：收到消息后触发(收到的消息在事件对象中的<code>data</code>里)</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> socket = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">"ws://localhost:8088/mysocket"</span>);<br>socket.onopen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"连接建立"</span>);<br>    socket.send(<span class="hljs-string">'hello'</span>);<br>    <span class="hljs-comment">// socket.close()</span><br>};<br>socket.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"连接发生错误"</span>);<br>};<br>socket.onclose = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"连接关闭"</span>);<br>};<br><br>socket.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(e)<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202207052023377.png" alt="image-20220529173743731"></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202207052023443.png" alt="image-20220529174046932"></p><h3 id="模拟两人对话"><a href="#模拟两人对话" class="headerlink" title="模拟两人对话"></a>模拟两人对话</h3><p>上面已经说了，收到消息会触发message事件，所以我们可以在message事件里根据收到的信息发送对应的信息。</p><p>客户端：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> socket = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">"ws://localhost:8088/mysocket"</span>);<br>socket.onopen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"连接建立"</span>);<br>    socket.send(<span class="hljs-string">'hello'</span>);<br>    <span class="hljs-comment">// socket.close()</span><br>};<br>socket.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"连接发生错误"</span>);<br>};<br>socket.onclose = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"连接关闭"</span>);<br>};<br><br>socket.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">{ data }</span>) </span>{<br>    <span class="hljs-keyword">if</span> (data.includes(<span class="hljs-string">'你好'</span>)) {<br>        socket.send(<span class="hljs-string">'再见，服务端ddd'</span>)<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data.includes(<span class="hljs-string">'再见'</span>)) {<br>        <span class="hljs-comment">// 调用close()方法关闭WebSocket连接</span><br>        socket.close()<br>    } <span class="hljs-keyword">else</span> {<br>        socket.send(<span class="hljs-string">'你好，我是客户端ccc'</span>)<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>服务器：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)<br><span class="hljs-keyword">const</span> expressWs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express-ws'</span>)<br><br><span class="hljs-keyword">const</span> app = express()<br><br><span class="hljs-comment">// 将WebSocket服务加到app里，简单来说就是让app添加了ws方法</span><br>expressWs(app)<br><br><span class="hljs-comment">// 建立WebSocket服务</span><br>app.ws(<span class="hljs-string">'/mysocket'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ws</span>) </span>{<br>  <span class="hljs-comment">// ws：建立WebSocket的实例</span><br>  ws.send(<span class="hljs-string">'你连接成功啦'</span>)<br><br>  ws.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">{ data }</span>) </span>{<br>    <span class="hljs-keyword">if</span> (data.includes(<span class="hljs-string">'你好'</span>)) {<br>      ws.send(<span class="hljs-string">'你好，我是服务器ddd'</span>)<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data.includes(<span class="hljs-string">'再见'</span>)) {<br>      ws.send(<span class="hljs-string">'再见，客户端ccc'</span>)<br>    }<br>  }<br>})<br><br>app.listen(<span class="hljs-number">8088</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'ws://localhost:8088'</span>)<br>})<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d54d3a931f6e4e8399e43804e83848cd~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220529175742257"></p><p>注意：如果收发部分处理，需要注意一下，如果没有处理好，可能会出现循环卡住的情况。</p><p>比如，服务器和客户端的message事件回调都是：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">socket.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">{ data }</span>) </span>{<br>    socket.send(<span class="hljs-string">'hello'</span>)<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e52e8bdcc5754feeac2bfca740df9a2c~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220529180303794"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WebSocket-简单体验版&quot;&gt;&lt;a href=&quot;#WebSocket-简单体验版&quot; class=&quot;headerlink&quot; title=&quot;WebSocket(简单体验版)&quot;&gt;&lt;/a&gt;WebSocket(简单体验版)&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>简单入门Fetch API</title>
    <link href="https://www.clzczh.top/2022/06/18/fetchAPI/"/>
    <id>https://www.clzczh.top/2022/06/18/fetchAPI/</id>
    <published>2022-06-18T04:55:37.000Z</published>
    <updated>2022-06-18T04:55:59.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单入门Fetch-API"><a href="#简单入门Fetch-API" class="headerlink" title="简单入门Fetch API"></a>简单入门Fetch API</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Fetch API</code>是使用 JavaScript请求资源的优秀工具。虽然我们开发时可能是经常使用<code>axios</code>，但是实际上<code>Fetch API</code>也能做很多一样的事。并且使用<code>Fetch API</code>不需要安装<code>axios</code>，所以我们做一些小案例，但是需要调接口的话，<code>Fetch API</code>便是很好的选择，不需要安装<code>axios</code>，也不需要像XMLHttpRequest 对象那样子需要较多步骤。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>接口有需要可以到最后自取(express接口)</p><h3 id="分派请求"><a href="#分派请求" class="headerlink" title="分派请求"></a>分派请求</h3><p>只需要使用<code>fetch()</code>方法即可，传参为获取资源的URL。该方法返回一个<code>Promise</code>对象。(和<code>axios</code>使用非常像)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> r = fetch(<span class="hljs-string">'http://localhost:8088/getInfo'</span>)<br><br><span class="hljs-built_in">console</span>.log(r)<br><br>r.then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(res)<br>})<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72e9dc5fe06f4f1481df43a07e35310b~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220604132403546"></p><h3 id="读取响应"><a href="#读取响应" class="headerlink" title="读取响应"></a>读取响应</h3><p>上面我们已经把响应结果打印出来了，但是并没有得到真正的响应体的数据。</p><p>这时候可以使用<code>text()</code>方法，这个方法会返回一个<code>Promise</code>对象，这个对象会<code>resolve</code>为读取资源的完整内容。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">fetch(<span class="hljs-string">'http://localhost:8088/getInfo?name=clz'</span>)<br>    .then(<span class="hljs-keyword">async</span> (res) =&gt; {<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.text()<br>        <span class="hljs-built_in">console</span>.log(data)<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> data)<br>    })<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03a8451581e04a29ac892d24da3ec015~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220611132502823"></p><p>从结果来看，发现这时候得到的数据是<code>string</code>类型的，之后还需要通过<code>JSON.parse()</code>来操作。很显然不太好，这个时候只需要不是使用<code>text()</code>方法，而是使用<code>json()</code>方法即可。(使用方式和<code>text()</code>方法一样)</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/597b7263d4f94c82960aa8fd5714d8c2~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220611132921936"></p><h3 id="请求失败"><a href="#请求失败" class="headerlink" title="请求失败"></a>请求失败</h3><p>请求失败的时候还是会正常执行<code>then</code>方法里的处理函数。(这里的失败是指服务器返回了响应，但是不是成功的请求。)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">fetch(<span class="hljs-string">'http://localhost:8088/getBadRequest'</span>)<br>    .then(<span class="hljs-keyword">async</span> (res) =&gt; {<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.json()<br>        <span class="hljs-built_in">console</span>.log(data)<br>    })<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206111414772.png" alt="image-20220611141429705"></p><p>如果服务器没有响应导致浏览器超时的话，这时候就不会再执行<code>then()</code>方法的处理函数，而是执行<code>catch()</code>方法的，因为这时候的<code>Promise</code>不再是<code>resolved</code>状态，而是<code>rejected</code>状态。(比如跨域时候)</p><p>后端接口注释掉<code>app.use(cors())</code>，不再处理跨域</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">fetch(<span class="hljs-string">'http://localhost:8088/getBadRequest'</span>)<br>    .then(<span class="hljs-keyword">async</span> (res) =&gt; {<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.json()<br>        <span class="hljs-built_in">console</span>.log(data)<br>    })<br>    .catch(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> {<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'catch()方法里的处理函数'</span>)<br>        <span class="hljs-built_in">console</span>.log(reason)<br>    })<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ae2540a3b88488c95afaa7a9ecd4ef9~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220611142139336"></p><h3 id="POST方法"><a href="#POST方法" class="headerlink" title="POST方法"></a>POST方法</h3><p>上面我们直接使用<code>fetch()</code>方法就是<code>GET</code>请求，那么假如我们想要使用<code>POST</code>方法来进行新增数据之类的操作呢？</p><p><code>fetch</code>方法的第二个参数就是自定义选项，通过自定义选项就能实现<code>GET</code>请求之外的请求。比如使用<code>POST</code>方法的时候，自定义选项就需要<code>method</code>来确定请求方法，以及<code>body</code>来确定请求体的数据。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = {<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'clz'</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span><br>}<br><br>fetch(<span class="hljs-string">'http://localhost:8088/postInfo'</span>, {<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">'POST'</span>,<br>    <span class="hljs-attr">body</span>: <span class="hljs-built_in">JSON</span>.stringify(data)<br>})<br>    .then(<span class="hljs-keyword">async</span> (res) =&gt; {<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.json()<br>        <span class="hljs-built_in">console</span>.log(data)<br>    })<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e46b910573ce453aa428e8c068ce4fb8~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220611151000558"></p><p>结果发现：请求得到的响应的状态码是400，提示信息是需要姓名和年龄，但是我们明明已经把姓名和年龄传过去了。这种时候，有可能是后端处理的问题，也有可能是前端传出去的格式的问题(即请求头的<code>Content-Type</code>)</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206111511462.png" alt="image-20220611151154399"></p><p>果不其然，我们传的数据是json形式的，但是<code>Content-Type</code>却不是json，所以我们的自定义选项还需要添加一个<code>headers</code>选项来设置选项的请求头。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = {<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'clz'</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span><br>}<br><br><span class="hljs-keyword">const</span> headers = <span class="hljs-keyword">new</span> Headers({<br>    <span class="hljs-string">'Content-Type'</span>: <span class="hljs-string">'application/json; charset=utf-8'</span><br>})<br><br>fetch(<span class="hljs-string">'http://localhost:8088/postInfo'</span>, {<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">'POST'</span>,<br>    <span class="hljs-attr">body</span>: <span class="hljs-built_in">JSON</span>.stringify(data),<br>    headers<br>})<br>    .then(<span class="hljs-keyword">async</span> (res) =&gt; {<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.json()<br>        <span class="hljs-built_in">console</span>.log(data)<br>    })<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/390ad0d4a8fa48dabf39a8eeee45589f~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220611151402801"></p><h2 id="express接口"><a href="#express接口" class="headerlink" title="express接口"></a>express接口</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">'cors'</span>)<br><br><span class="hljs-keyword">const</span> app = express()<br><br><span class="hljs-comment">// 解决跨域</span><br>app.use(cors())<br><br><span class="hljs-comment">// 解析请求体的中间件(json格式)</span><br>app.use(express.json())<br><br><span class="hljs-comment">// GET请求</span><br>app.get(<span class="hljs-string">'/getInfo'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {<br><br>  res.json({<br>    <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">data</span>: {<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">'赤蓝紫'</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">21</span><br>    },<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">'获取信息成功'</span>,<br>  })<br>})<br><br><span class="hljs-comment">// 响应状态码为400</span><br>app.get(<span class="hljs-string">'/getBadRequest'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {<br>  res.status(<span class="hljs-number">400</span>).json({<br>    <span class="hljs-attr">code</span>: <span class="hljs-number">400</span>,<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">'Bad Request'</span>,<br>  })<br>})<br><br><span class="hljs-comment">// POST请求</span><br>app.post(<span class="hljs-string">'/postInfo'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {<br>  <span class="hljs-keyword">if</span> (req.body.name === <span class="hljs-literal">undefined</span> || req.body.age === <span class="hljs-literal">undefined</span>) {<br>    res.status(<span class="hljs-number">400</span>).json({<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">400</span>,<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">'必须要有姓名、年龄'</span><br>    })<br>  } <span class="hljs-keyword">else</span> {<br>    res.json({<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">data</span>: req.body<br>    })<br>  }<br><br>})<br><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">8088</span><br>app.listen(port, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`http://localhost:<span class="hljs-subst">${port}</span>`</span>)<br>})<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简单入门Fetch-API&quot;&gt;&lt;a href=&quot;#简单入门Fetch-API&quot; class=&quot;headerlink&quot; title=&quot;简单入门Fetch API&quot;&gt;&lt;/a&gt;简单入门Fetch API&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>从微信聊天框开始学习CSS属性filter</title>
    <link href="https://www.clzczh.top/2022/06/18/filter/"/>
    <id>https://www.clzczh.top/2022/06/18/filter/</id>
    <published>2022-06-18T04:54:52.000Z</published>
    <updated>2022-06-18T04:55:19.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从微信聊天框开始学习CSS属性filter"><a href="#从微信聊天框开始学习CSS属性filter" class="headerlink" title="从微信聊天框开始学习CSS属性filter"></a>从微信聊天框开始学习CSS属性filter</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>给别人发图片时，<code>Ctrl+A</code>选中图片发生了颜色反转。</p><p>下面重现一下</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181254212.gif" alt="filter"></p><p>至于为什么会联想到<code>filter</code>属性，主要是因为小时候经常玩手机的拍照功能，黑白滤镜、复古。。。</p><p>所以第一印象就是搜索CSS的滤镜属性，就找到了，所以来简单学习一下。(微信的那个具体怎么实现并不了解)</p><p>说是学习，但是其实就只是了解一下怎么使用而已。使用<code>filter</code>属性主要用法就是通过<code>Filter</code>函数来实现具体效果。</p><h2 id="invert"><a href="#invert" class="headerlink" title="invert()"></a>invert()</h2><p>刚开始就先从实现遇到的反转先。<code>invert()</code>函数反转输入图像，参数是转换的比例，值为<code>0%</code>表示无变化，值为<code>100%</code>表示完全反转。</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206112214442.gif" alt="filter"></p><p>超出<code>100%</code>之后也是和<code>100%</code>一样的效果。也就是说需要反转只需要设置CSS属性<code>filter</code>为<code>invert(100%)</code>即可，当然也不一定需要是<code>100%</code>。上面测试的是图像，但是实际上非图像该属性也是起作用的。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> {<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">invert</span>(<span class="hljs-number">100%</span>)<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181254224.png" alt="image-20220611222043656"></p><p>上面的反转是不是很有意思。这是因为红色的rgb值为<code>(255, 0, 0)</code>，所以反转后的rgb值为<code>(0, 255, 255)</code>，即上面的效果。</p><h3 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h3><p>我们可以给html元素添加<code>filter: invert(100%)</code>，即可实现切换亮暗模式。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">document</span>.documentElement.style.filter=<span class="hljs-string">'invert(100%)'</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206112232412.gif" alt="filter"></p><p>可以使用该方法开启黑暗模式看pdf文件的(虽然有一些地方会有点怪)</p><h2 id="blur"><a href="#blur" class="headerlink" title="blur()"></a>blur()</h2><p>调整输入图像的模糊程度，参数可以设置为CSS长度(<code>px</code>、<code>em</code>等，不接受百分比)</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206121245538.png" alt="image-20220612124521327"></p><h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><p><code>filter</code>属性的<code>blur()</code>可以将模糊应用于元素。说到模糊，可能想到的应用就是自己制作一下有毛玻璃效果的背景图片了。接下来来耍一下。(在网上看到的效果，下面的例子也是参考网上的)</p><p>基本解构：</p><p>css</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> {<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">'https://i.loli.net/2019/11/17/GAYyzeKsiWjP5qO.jpg'</span>) no-repeat;<br>    <span class="hljs-attribute">background-size</span>: cover;<br>}<br><br><span class="hljs-selector-class">.grass</span> {<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">72vw</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">36vh</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0.3px</span> <span class="hljs-number">0.7px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> / <span class="hljs-number">13%</span>), <span class="hljs-number">0</span> <span class="hljs-number">0.9px</span> <span class="hljs-number">1.7px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> / <span class="hljs-number">18%</span>), <span class="hljs-number">0</span> <span class="hljs-number">1.8px</span> <span class="hljs-number">3.5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> / <span class="hljs-number">22%</span>), <span class="hljs-number">0</span> <span class="hljs-number">3.7px</span> <span class="hljs-number">7.3px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> / <span class="hljs-number">28%</span>), <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> / <span class="hljs-number">40%</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>html</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"grass"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181254567.png" alt="image-20220612132534829"></p><p>现在给<code>grass</code>盒子添加一下模糊度。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">4px</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206121329390.png" alt="image-20220612132921567"></p><p>但是结果和我们想象的不太一样，只有阴影有模糊。这是因为<code>filter</code>是将模糊等图形效果应用于元素，而后面的背景图片是该元素后面的<code>body</code>元素的，所以添加的模糊并不会添加到后面的背景图片中。</p><p>这时候，就轮到<code>filter</code>的好兄弟<code>backdrop-filter</code>登场了，它可以让你为一个元素后面区域添加图形效果（如模糊或颜色偏移）。值和<code>filter</code>的一样用法。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">backdrop-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">4px</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206121354290.png" alt="image-20220612135449495"></p><h2 id="drop-shadow"><a href="#drop-shadow" class="headerlink" title="drop-shadow()"></a>drop-shadow()</h2><p>对输入图像应用阴影效果。(和<code>box-shadow</code>很相似，不过，<strong>在部分浏览器中通过<code>filter</code>可以提供硬件加速</strong>)</p><ul><li><p><code>offset-x</code>：设置阴影的水平偏移量</p></li><li><p><code>offset-y</code>：设置阴影的垂直偏移量</p></li><li><p><code>blur-radius</code>：设置阴影的模糊半径，值越大，越模糊，阴影也会更大、更淡</p></li><li><p><code>color</code>：颜色</p></li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> {<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>    <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">drop-shadow</span>(<span class="hljs-number">4px</span> <span class="hljs-number">4px</span> <span class="hljs-number">6px</span> black);<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3138398e857f479ab5d807ee4564c5dc~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220612151813219"></p><h2 id="复合函数"><a href="#复合函数" class="headerlink" title="复合函数"></a>复合函数</h2><p><code>Filter</code>函数可以任意组合来控制渲染。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> {<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">invert</span>(<span class="hljs-number">100%</span>) <span class="hljs-built_in">drop-shadow</span>(<span class="hljs-number">4px</span> <span class="hljs-number">4px</span> <span class="hljs-number">6px</span> black);<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17a75ac95979471fa383b1d4bb1deaf3~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220612152120004"></p><p><code>filter</code>属性还有很多很有意思的用法，可以设置对比度、灰度等。这里就不再过多赘述了，有想了解的可以到官方文档查阅。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从微信聊天框开始学习CSS属性filter&quot;&gt;&lt;a href=&quot;#从微信聊天框开始学习CSS属性filter&quot; class=&quot;headerlink&quot; title=&quot;从微信聊天框开始学习CSS属性filter&quot;&gt;&lt;/a&gt;从微信聊天框开始学习CSS属性filter&lt;/</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://www.clzczh.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>rAF实现表格内容自动滚动</title>
    <link href="https://www.clzczh.top/2022/06/18/table-auto-scroll/"/>
    <id>https://www.clzczh.top/2022/06/18/table-auto-scroll/</id>
    <published>2022-06-18T04:53:55.000Z</published>
    <updated>2022-06-18T04:54:24.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rAF实现表格内容自动滚动"><a href="#rAF实现表格内容自动滚动" class="headerlink" title="rAF实现表格内容自动滚动"></a>rAF实现表格内容自动滚动</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>实习导师让我实现表格内容自动滚动，实际就是大屏项目可能会用上的。正好之前看到<code>rAF</code>的介绍，实际上也没用过，所以就用<code>rAF</code>来玩一波。</p><p><strong>目标</strong>：</p><ol><li>让表格的内容会自动滚动</li><li>鼠标悬浮，动画停止</li><li>到底后会自动回到顶部，继续滚动</li></ol><h2 id="element表格自带滚动"><a href="#element表格自带滚动" class="headerlink" title="element表格自带滚动"></a>element表格自带滚动</h2><p>首先呢，<code>element</code>的表格是自带了滚动效果的，但是需要小小的设置一下。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mytable"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">"tableData"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"mytable"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"date"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Date"</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Name"</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"address"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Address"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> { reactive } <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> tableData = reactive([</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-03"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-02"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-04"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-01"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-02"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-04"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-01"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-02"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-04"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-01"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">]);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"less"</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.mytable</span> {</span><br><span class="css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">420px</span>;</span><br><span class="css">}</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181253320.png" alt="image-20220603093857433"></p><p>可以发现，这个时候超过表格的部分直接溢出来了。</p><p>这个时候可能会想：直接使用<code>overflow: auto;</code>不就能实现表格滚动了吗？但是，这个表格滚动效果并不是想要的表格内容滚动。表头也会滚不见。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db9f3e75855b4efda9fe95f4d6590e23~tplv-k3u1fbpfcp-zoom-1.image" alt="table"></p><p>然后，我们使用<code>Devtools</code>工具看一下：</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181253368.png" alt="image-20220603094900993"></p><p>发现上面红框框的元素高是<code>100%</code>，但是它们的父元素的高不是100%，所以外层的高并没有传过来。所以我们只需要把<code> el-scrollbar</code>的祖先元素的高设置为<code>100%</code>即可。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ea2daccad6a449cab89bd6f536a4eb1~tplv-k3u1fbpfcp-zoom-1.image" alt="table"></p><p>又有新问题出现了：表格有一部分内容被切掉了。</p><p>这时候我们仔细想一下就会发现，上面的滚动的只是表格内容，但是实际上我们把高度慢慢地传下来了，所以这个时候的滚动盒子<code> el-scrollbar</code>的高度也是整个表格的高度。所以我们需要将它的高度减掉表头的高度。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.el-scrollbar</span> {<br>  <span class="hljs-attribute">height</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">40px</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/efeceed6d092494fb0435f7e607f7868~tplv-k3u1fbpfcp-zoom-1.image" alt="table"></p><p>这样子，前置任务就初步完成了。</p><h2 id="rAF介绍"><a href="#rAF介绍" class="headerlink" title="rAF介绍"></a>rAF介绍</h2><p>rAF：**<code>requestAnimationFrame</code>**，实际上就是一个函数，会告诉浏览器：希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。</p><p>优点：</p><ul><li><strong>由系统来决定回调函数的执行时机</strong>。如果显示器刷新的频率是60Hz，那么回调韩式就是每<code>1/60</code>s，即16.7ms执行一次。也就是说<code>rAF</code>会跟着显示器地刷新频率走，能保证回调函数在每一次的刷新间隔制备执行一次，这样就不会引起丢帧，动画更流畅。</li><li><strong>窗口没激活时，动画将暂停以提升性能和电池寿命</strong></li></ul><h2 id="实现自动滚动"><a href="#实现自动滚动" class="headerlink" title="实现自动滚动"></a>实现自动滚动</h2><h3 id="获取el-scrollbar-容器"><a href="#获取el-scrollbar-容器" class="headerlink" title="获取el-scrollbar 容器"></a>获取<code>el-scrollbar</code> 容器</h3><p>需要实现自动滚动，首先得获取<code>el-scrollbar</code> 容器。访问路径在<code>mytable -&gt; scrollBarRef -&gt; wrap$</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d94cc0aafdd54fbbbf39f9a4a48280ce~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220603184941374"></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">onMounted(<span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-keyword">const</span> { proxy } = getCurrentInstance();<br><br>  <span class="hljs-keyword">const</span> mytable = proxy.$refs.mytable;<br><br>  <span class="hljs-keyword">const</span> el = mytable.scrollBarRef.wrap$;<br><br>  <span class="hljs-built_in">console</span>.log(el);<br>});<br></code></pre></td></tr></tbody></table></figure><h3 id="编写动画方法，并使用rAF添加回调"><a href="#编写动画方法，并使用rAF添加回调" class="headerlink" title="编写动画方法，并使用rAF添加回调"></a>编写动画方法，并使用rAF添加回调</h3><p>首先，需要编写我们的滚动动画方法，很简单，只需要让滚动容器的<code>scrollTop</code>一直加就行了。但是，为了让这个动画不只是会执行一次，所以在最后还得使用<code>rAF</code>添加回调。当然，<strong>在<code>onMounted</code>钩子中也需要添加一次回调</strong>。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myscroll</span>(<span class="hljs-params">el</span>) </span>{<br>  el.scrollTop += <span class="hljs-number">2</span>;<br>  <span class="hljs-built_in">window</span>.requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));<span class="hljs-comment">// 该动画方法需要携带参数，所以使用bind方法来携带参数</span><br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181254740.gif" alt="table"></p><h3 id="鼠标悬浮，动画停止"><a href="#鼠标悬浮，动画停止" class="headerlink" title="鼠标悬浮，动画停止"></a>鼠标悬浮，动画停止</h3><p>我们上面已经初步让表格内容滚动起来了，接下来实现一下第二个步骤<strong>鼠标悬浮，动画停止</strong></p><p>停止rAF动画，需要获取调用<code>window.requestAnimationFrame()</code>方法时返回的 ID，和定时器方法一样，所以我们调用<code>window.requestAnimationFrame()</code>方法时，需要使用一个变量接住它，方便停止的时候使用。</p><p>然后，绑定鼠标事件：<code>mouseenter</code>：动画停止，<code>mouseleave</code>：继续动画。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> rAFid;<br><br>onMounted(<span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-keyword">const</span> { proxy } = getCurrentInstance();<br><br>  <span class="hljs-keyword">const</span> mytable = proxy.$refs.mytable;<br><br>  <span class="hljs-keyword">const</span> el = mytable.$refs.scrollBarRef.wrap$;<br><br>  <span class="hljs-built_in">console</span>.log(el);<br><br>  rAFid = <span class="hljs-built_in">window</span>.requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));<br><br>  el.addEventListener(<span class="hljs-string">"mouseenter"</span>, <span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-built_in">window</span>.cancelAnimationFrame(rAFid);<br>  });<br><br>  el.addEventListener(<span class="hljs-string">"mouseleave"</span>, <span class="hljs-function">() =&gt;</span> {<br>    rAFid = <span class="hljs-built_in">window</span>.requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));<br>  });<br>});<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myscroll</span>(<span class="hljs-params">el</span>) </span>{<br>  el.scrollTop += <span class="hljs-number">2</span>;<br>  rAFid = <span class="hljs-built_in">window</span>.requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el)); <span class="hljs-comment">// 该动画方法需要携带参数，所以使用bind方法来携带参数</span><br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181254701.gif" alt="table"></p><h3 id="到底后会自动回到顶部，继续滚动"><a href="#到底后会自动回到顶部，继续滚动" class="headerlink" title="到底后会自动回到顶部，继续滚动"></a>到底后会自动回到顶部，继续滚动</h3><p>这里我们需要判断是否到底了，所以需要使用<code>可视高度+距离顶部 &gt;= 整个高度</code>的方式，即<code>el.clientHeight + el.scrollTop &gt;= el.scrollHeight</code>.</p><p>我们判断到底后，就使用原生js的<code>scrollTo</code>方法，就能让它回到顶部。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myscroll</span>(<span class="hljs-params">el</span>) </span>{<br>  el.scrollTop += <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (el.clientHeight + el.scrollTop &gt;= el.scrollHeight) {<br>    <span class="hljs-comment">// cancelAnimationFrame(rAFid);</span><br>    el.scrollTo({<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,<br>    });<br>  }<br><br>  rAFid = requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181254963.gif" alt="202206041101159.gif"></p><p>可以看到已经实现了，而且是无缝衔接。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mytable"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">"tableData"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"mytable"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"date"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Date"</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Name"</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"address"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Address"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> { reactive, getCurrentInstance, onMounted } <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> tableData = reactive([</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-03"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-02"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-04"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-01"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-02"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-04"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-02"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">  {</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">"2016-05-04"</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">"Tom"</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">"No. 189, Grove St, Los Angeles"</span>,</span><br><span class="javascript">  },</span><br><span class="javascript">]);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">let</span> rAFid;</span><br><span class="javascript"></span><br><span class="javascript">onMounted(<span class="hljs-function">() =&gt;</span> {</span><br><span class="javascript">  <span class="hljs-keyword">const</span> { proxy } = getCurrentInstance();</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> mytable = proxy.$refs.mytable;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> el = mytable.$refs.scrollBarRef.wrap$;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(el);</span><br><span class="javascript"></span><br><span class="javascript">  rAFid = <span class="hljs-built_in">window</span>.requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));</span><br><span class="javascript"></span><br><span class="javascript">  el.addEventListener(<span class="hljs-string">"mouseenter"</span>, <span class="hljs-function">() =&gt;</span> {</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.cancelAnimationFrame(rAFid);</span><br><span class="javascript">  });</span><br><span class="javascript"></span><br><span class="javascript">  el.addEventListener(<span class="hljs-string">"mouseleave"</span>, <span class="hljs-function">() =&gt;</span> {</span><br><span class="javascript">    rAFid = <span class="hljs-built_in">window</span>.requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));</span><br><span class="javascript">  });</span><br><span class="javascript">});</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myscroll</span>(<span class="hljs-params">el</span>) </span>{</span><br><span class="javascript">  el.scrollTop += <span class="hljs-number">2</span>;</span><br><span class="javascript">  <span class="hljs-keyword">if</span> (el.clientHeight + el.scrollTop &gt;= el.scrollHeight) {</span><br><span class="javascript">    el.scrollTo({</span><br><span class="javascript">      <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">    });</span><br><span class="javascript">  }</span><br><span class="javascript"></span><br><span class="javascript">  rAFid = requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));</span><br><span class="javascript">}</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"less"</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.mytable</span> {</span><br><span class="css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">420px</span>;</span><br><span class="css">  :<span class="hljs-built_in">deep</span>(.el-table) {</span><br><span class="css">    height: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.el-table__inner-wrapper</span> {</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">    }</span><br><span class="css">    <span class="hljs-selector-class">.el-table__body-wrapper</span> {</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">    }</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.el-scrollbar</span> {</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">40px</span>);</span><br><span class="css">    }</span><br><span class="css">  }</span><br><span class="css">}</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="额外研究"><a href="#额外研究" class="headerlink" title="额外研究"></a>额外研究</h2><p>上面已经能够实现表格内容自动滚动了，但是有时候需要突出排在前面的话，可能会到顶部需要慢慢地回滚到顶部，再重新自动滚动。也就是说，<code>scrollTo</code>方法的参数添加<code> behavior: "smooth"</code>来让它圆滑的回滚到顶部。</p><p>但是，我们添加了这个选项后，反而不回滚了。这是因为动画一直都还在，回滚速度又不够动画的。所以我们回滚前还得把动画给停止掉。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myscroll</span>(<span class="hljs-params">el</span>) </span>{<br>  el.scrollTop += <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (el.clientHeight + el.scrollTop &gt;= el.scrollHeight) {<br>    <span class="hljs-built_in">window</span>.cancelAnimationFrame(rAFid);<br><br>    el.scrollTo({<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">behavior</span>: <span class="hljs-string">"smooth"</span>,<br>    });<br>  } <span class="hljs-keyword">else</span> {<br>    rAFid = requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181254759.gif" alt="table"></p><p>回滚后，动画停了，所以我们还得添加一个定时器，回滚后停一会，再重新开始动画。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myscroll</span>(<span class="hljs-params">el</span>) </span>{<br>  el.scrollTop += <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (el.clientHeight + el.scrollTop &gt;= el.scrollHeight) {<br>    <span class="hljs-built_in">window</span>.cancelAnimationFrame(rAFid);<br><br>    el.scrollTo({<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">behavior</span>: <span class="hljs-string">"smooth"</span>,<br>    });<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>      rAFid = requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));<br>    }, <span class="hljs-number">1000</span>);<br>  } <span class="hljs-keyword">else</span> {<br>    rAFid = requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181254134.gif" alt="table"></p><p>最后，还得添加一个钩子，清除<code>rAF</code>动画，避免内存泄漏等问题的发生。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">onBeforeUnmount(<span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">window</span>.cancelAnimationFrame(rAFid);<br>});<br></code></pre></td></tr></tbody></table></figure><p>参考：</p><ul><li>requestAnimationFram优势</li><li>MDN</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;rAF实现表格内容自动滚动&quot;&gt;&lt;a href=&quot;#rAF实现表格内容自动滚动&quot; class=&quot;headerlink&quot; title=&quot;rAF实现表格内容自动滚动&quot;&gt;&lt;/a&gt;rAF实现表格内容自动滚动&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
    <category term="动画" scheme="https://www.clzczh.top/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Express+FetchAPI 简单实践Cookie</title>
    <link href="https://www.clzczh.top/2022/06/18/cookie-use/"/>
    <id>https://www.clzczh.top/2022/06/18/cookie-use/</id>
    <published>2022-06-18T04:52:26.000Z</published>
    <updated>2022-06-18T04:53:05.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Express-FetchAPI-简单实践Cookie"><a href="#Express-FetchAPI-简单实践Cookie" class="headerlink" title="Express+FetchAPI 简单实践Cookie"></a>Express+FetchAPI 简单实践Cookie</h1><blockquote><p>本文并不是讲解Cookie在实际项目中的应用,而只是<strong>简单</strong>地实践一下,自动保存Cookie,然后后续请求自动携带Cookie，主要是通过使用刚学到的fetch API和差不多快忘记的express来实践。</p></blockquote><p>Cookie 用于在客户端存储会话信息。它通过服务器响应请求时，响应头的<code>Set-Cookie</code>字段来设置 Cookie。<strong>Cookie 是服务端生成，保存在客户端</strong></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181252960.png" alt="image-20220529091708813"></p><p>这个 HTTP 响应会设置一个名为<code>name</code>,值为<code>value</code>的 Cookie。<strong>名和值在发送时都会经过 URL 编码</strong>。<br>浏览器会存储这些会话信息，并且<strong>之后的每个请求都会通过请求头的<code>Cookie</code>字段再将它们发回服务器</strong>。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">GET /index.jsl HTTP/1.1<br>Cookie: name=value<br>Other-header: other-header-value<br></code></pre></td></tr></tbody></table></figure><p>发回给服务器的<code>Cookie</code>字段可用于唯一标识发送请求的客户端。</p><p>Cookie 有大小限制，一般 4K 左右。</p><h2 id="Cookie-的构成"><a href="#Cookie-的构成" class="headerlink" title="Cookie 的构成"></a>Cookie 的构成</h2><ul><li><strong>名称</strong>(<code>name</code>=value)：Cookie 的名称。不区分大小写，必须经过 URL 编码。</li><li><strong>值</strong>(name=<code>value</code>)：Cookie 的值。必须经过 URL 编码</li><li><strong>域</strong>(<code>Domain</code>=clzczh.top)：Cookie 有效的域。发送到该域名的所有请求都会包含对应的 Cookie。如果不明确设置，则默认为设置 Cookie 的域。</li><li><strong>路径</strong>(<code>Path</code>=/)：请求 URL 中包含此路径才会携带 Cookie 发送请求。</li><li><strong>过期时间</strong>(<code>Expires</code>=Date)：删除 Cookie 的时间戳，用于设置删除 Cookie 的时间，这个值是 GMT 格式（Wdy, DD-Mon-YYYY HH:MM:SS GMT）。当到达该时间后，就会删除 Cookie；没到达该时间时，即使关闭浏览器，Cookie 还会保留。<strong>把过期时间设置为过去的时间会立即删除 Cookie</strong>。默认只在浏览器关闭前有效</li><li><strong>安全标志</strong>(<code>Secure</code>)：只在 HTTPS 安全连接时才可以发送 Cookie</li><li><strong>禁止 JS 读取 Cookie</strong>(<code>HttpOnly</code>)：通过 JS 脚本无法获取 Cookie，可以有效地防止<code>XSS攻击</code>。</li></ul><p>Cookie 中实际发送给服务器的只有名/值对，其他部分只是告诉浏览器什么时候应该在请求中携带 Cookie 等。</p><h2 id="Cookie-的简单实践"><a href="#Cookie-的简单实践" class="headerlink" title="Cookie 的简单实践"></a>Cookie 的简单实践</h2><p>简单地说一下下面的代码：</p><ol><li>express 实现的后端服务</li><li>通过<code>app.post</code>开启 post 接口</li><li><code>res.cookie</code>设置 Cookie，第一个参数是 Cookie 名，第二个参数是 Cookie 值，第三个参数是 Cookie 的限制对象(如过期时间<code>expires</code>)</li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">"express"</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">"cors"</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.use(cors());<br><br>app.post(<span class="hljs-string">"/token"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{<br>  <span class="hljs-comment">// 设置Cookie</span><br>  res.cookie(<span class="hljs-string">"token"</span>, <span class="hljs-string">"123456"</span>, {<br>    <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">expires</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2030</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>),<br>  });<br><br>  res.status(<span class="hljs-number">200</span>).json({<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">"获取token成功"</span>,<br>  });<br>});<br><br>app.get(<span class="hljs-string">"/getInfo"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{<br>  res.json({<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">"成功"</span>,<br>  });<br>});<br><br>app.listen(<span class="hljs-number">8088</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"http://localhost:8088"</span>);<br>});<br></code></pre></td></tr></tbody></table></figure><p>前端试一下，能不能接收到<code>Cookie</code>。(使用 Fetch API，免装<code>axios</code>，实际使用和<code>axios</code>差不多，简单使用可查看之前的文章)</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn"</span>&gt;</span>获取token<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"test-btn"</span>&gt;</span>测试自动携带Cookie<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"btn"</span>);</span><br><span class="javascript">    btn.addEventListener(<span class="hljs-string">"click"</span>, fetchData);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> testBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"test-btn"</span>);</span><br><span class="javascript">    testBtn.addEventListener(<span class="hljs-string">"click"</span>, getInfo);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      fetch(<span class="hljs-string">"http://localhost:8088/token"</span>, {</span><br><span class="javascript">        <span class="hljs-attr">method</span>: <span class="hljs-string">"post"</span>,</span><br><span class="javascript">      }).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {</span><br><span class="javascript">        <span class="hljs-comment">// 获取响应的数据</span></span><br><span class="javascript">        res.json().then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">        });</span><br><span class="javascript">      });</span><br><span class="javascript">    }</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      fetch(<span class="hljs-string">"http://localhost:8088/getInfo"</span>).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(res);</span><br><span class="javascript">      });</span><br><span class="javascript">    }</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dfbee0b4b3684e6883fcf9bc9e202e9e~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220529093428201"></p><p>看似万事大吉了，实际上，还是有问题的：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aad33e9139234f3c89f48908b59dbed4~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220529093530601"></p><p>Cookie压根没存到客户端。</p><h3 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h3><ol><li><p>使用<code>fetch</code>发送请求时，设置<code>credentials</code>为<code>include</code>(<code>axios</code>则是设置<code>withCredentials</code>为<code>true</code>)，这样子跨域请求时夜会发送Cookie(也可以用来保存跨域请求响应的Cookie)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">fetch(<span class="hljs-string">'http://localhost:8088/token'</span>, {<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">'post'</span>,<br>    <span class="hljs-attr">credentials</span>: <span class="hljs-string">'include'</span><br>})<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d3d815f8c7f416bab0225be8d5eaed8~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220529100902883"></p></li><li><p>当我们设置<code>credentials</code>为<code>include</code>时，</p><ul><li>我们解决跨域时的<code>Access-Control-Allow-Origin</code>不应该还是通配符，而应该是具体的地址，所以<strong>后端express</strong>应该调整一下不再使用<code>cors</code>中间件，而是自己设置响应头</li><li><code>Access-Control-Allow-Credentials</code>也应该设置为<code>true</code></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用cors中间件部分换成下面的形式</span><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>{<br>  res.header(<span class="hljs-string">'Access-Control-Allow-Origin'</span>, <span class="hljs-string">'http://127.0.0.1:5501'</span>)<br>  res.header(<span class="hljs-string">'Access-Control-Allow-Credentials'</span>, <span class="hljs-string">'true'</span>)<br>  next()<br>})<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e931957410643ae8ee4245196c31185~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220529103925082"></p></li><li><p>上面已经的警告已经说了：<code>Cookie</code>有一个<code>SameSite</code>属性，它默认是<code>Lax</code>，要求响应是对顶层导航的响应(<b style="color: red">这个顶层导航并不是很懂，有懂得小伙伴欢迎评论</b>)。先按她的提示，设置Cookie的<code>SameSite</code>属性为<code>none</code>(安全性会下降)。<strong>有<code>SameSite</code>属性的话，也必须要有<code>Secure</code>属性</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 设置Cookie</span><br>res.cookie(<span class="hljs-string">"token"</span>, <span class="hljs-string">"123456"</span>, {<br>  <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">expires</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2030</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>),<br>  <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">sameSite</span>: <span class="hljs-string">'none'</span><br>});<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181252953.png" alt="image-20220529105604140"></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205291056522.png" alt="image-20220529105657457"></p><p>最终代码：</p><p>express：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">"express"</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">"cors"</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>{<br>  res.header(<span class="hljs-string">'Access-Control-Allow-Origin'</span>, <span class="hljs-string">'http://127.0.0.1:5501'</span>)<br>  res.header(<span class="hljs-string">'Access-Control-Allow-Credentials'</span>, <span class="hljs-string">'true'</span>)<br>  next()<br>})<br><br>app.post(<span class="hljs-string">"/token"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{<br><br>  <span class="hljs-comment">// 设置Cookie</span><br>  res.cookie(<span class="hljs-string">"token"</span>, <span class="hljs-string">"123456"</span>, {<br>    <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">expires</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2030</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>),<br>    <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">sameSite</span>: <span class="hljs-string">'none'</span><br>  });<br><br>  res.status(<span class="hljs-number">200</span>).json({<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">"获取token成功"</span>,<br>  });<br>});<br><br>app.get(<span class="hljs-string">"/getInfo"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{<br>  res.json({<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">"成功"</span>,<br>  });<br>});<br><br>app.listen(<span class="hljs-number">8088</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"http://localhost:8088"</span>);<br>});<br></code></pre></td></tr></tbody></table></figure><p>html</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn"</span>&gt;</span>获取token<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"test-btn"</span>&gt;</span>测试自动携带Cookie<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'btn'</span>)</span><br><span class="javascript">        btn.addEventListener(<span class="hljs-string">'click'</span>, fetchData)</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> testBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'test-btn'</span>)</span><br><span class="javascript">        testBtn.addEventListener(<span class="hljs-string">'click'</span>, getInfo)</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">            fetch(<span class="hljs-string">'http://localhost:8088/token'</span>, {</span><br><span class="javascript">                <span class="hljs-attr">method</span>: <span class="hljs-string">'post'</span>,</span><br><span class="javascript">                <span class="hljs-attr">credentials</span>: <span class="hljs-string">'include'</span></span><br><span class="javascript">            })</span><br><span class="javascript">        }</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">            fetch(<span class="hljs-string">'http://localhost:8088/getInfo'</span>, {</span><br><span class="javascript">                <span class="hljs-attr">credentials</span>: <span class="hljs-string">'include'</span></span><br><span class="javascript">            })</span><br><span class="javascript">        }</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><h3 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2"></a>解决方案2</h3><p>上面的解决方案1,非常的麻烦,还把Cookie的<code>SameSite</code>属性改成<code>None</code>了,安全性也会下降一点</p><p>实际上呢,我们有一个更简单的解决方案,只需要把他们变成不跨域就行了。</p><p>用<code>express</code>来测试的话,就是把之前的html代码放到<code>express</code>下的<code>public</code>文件夹里,</p><p>然后通过<code>app.use(express.static(__dirname + '/public'))</code>将静态文件目录设置为<code>项目根目录+/public</code></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181252820.png" alt="image-20220529110925343"></p><p>然后,访问<code>http://localhost:8088</code>,就是我们写的html,不跨域,自然就没有解决方案1中出现的问题了.</p><p>当然,只看上面的例子的话,好像是用解决方案2的话,前后端就不能很好的分离了.其实并不是,我们可以通过<code>nginx</code>的代理来解决前后端的跨域问题.</p><p>可以使用<code>Vue</code>来简单实践代理能否解决这个保存携带Cookie问题.</p><p>   首先呢?我们需要修改配置文件,实现代理.</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">'@vitejs/plugin-vue'</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineConfig({<br>  <span class="hljs-attr">plugins</span>: [vue()],<br>  <span class="hljs-attr">server</span>: {<br>    <span class="hljs-comment">// 实现其他设备能访问本机开启的服务</span><br>    <span class="hljs-attr">host</span>: <span class="hljs-string">'0.0.0.0'</span>,<br><br>    <span class="hljs-attr">proxy</span>: {<br>      <span class="hljs-string">'/api'</span>: {<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">'http://localhost:8088'</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">rewrite</span>: <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> path.replace(<span class="hljs-regexp">/^\/api/</span>, <span class="hljs-string">''</span>)<br>      }<br>    }<br>  }<br>})<br></code></pre></td></tr></tbody></table></figure><p>fetch API的请求地址就不再需要去到后端的那个接口地址了,而是变成<code>/api</code>即可,这样子代理就会把这个请求转发给真实服务器.</p>   <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"fetchData"</span>&gt;</span>获取token<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"getInfo"</span>&gt;</span>测试自动携带Cookie<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">  fetch(<span class="hljs-string">"/api/token"</span>, {</span><br><span class="javascript">    <span class="hljs-attr">method</span>: <span class="hljs-string">"post"</span>,</span><br><span class="javascript">  }).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {</span><br><span class="javascript">    <span class="hljs-comment">// 获取响应的数据</span></span><br><span class="javascript">    res.json().then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">    });</span><br><span class="javascript">  });</span><br><span class="javascript">}</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">  fetch(<span class="hljs-string">"/api/getInfo"</span>).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(res);</span><br><span class="javascript">  });</span><br><span class="javascript">}</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181252095.png" alt="image-20220529113512641"></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205291135722.png" alt="image-20220529113535623"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Express-FetchAPI-简单实践Cookie&quot;&gt;&lt;a href=&quot;#Express-FetchAPI-简单实践Cookie&quot; class=&quot;headerlink&quot; title=&quot;Express+FetchAPI 简单实践Cookie&quot;&gt;&lt;/a&gt;Expre</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Webpack搭建简单的TypeScript脚手架</title>
    <link href="https://www.clzczh.top/2022/06/18/webpack-build-typescript/"/>
    <id>https://www.clzczh.top/2022/06/18/webpack-build-typescript/</id>
    <published>2022-06-18T04:51:29.000Z</published>
    <updated>2022-06-18T04:52:02.274Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Webpack搭建简单的TypeScript脚手架"><a href="#Webpack搭建简单的TypeScript脚手架" class="headerlink" title="Webpack搭建简单的TypeScript脚手架"></a>Webpack搭建简单的TypeScript脚手架</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>这里的脚手架只是指能更方便学习TypeScript的基础工具<br>简单入门了一下Typescript(可能还没入门)，学习TypeScript并不能直接运行查看结果，需要<code>tsc xxx.ts</code>将TS编译出JS才能执行，这样子很明显不是很方便。</p></blockquote><p>虽然我们也可以在TypeScript中文网的练习平台写，直接看对比编译出来的JS代码，但是实际看代码运行结果还是需要点击运行按钮，去到新页面，再打开控制台。</p><p>所以为了很方便地学习TS，搭建一个简单的TypeScript脚手架很有必要</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><p><code>npm init -y</code>：对项目进行初始化操作对包进行管理。(会生成默认的<code>package.json</code>文件)</p><p>添加<code>src</code>目录，后续的代码在<code>src</code>目录下进行编写</p><h3 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h3><p><code>npm install webpack webpack-cli</code></p><p>添加Webpack配置文件<code>webpack.config.js</code>，设置入口文件、出口文件地址。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)<br><br><span class="hljs-built_in">module</span>.exports = {<br>    <span class="hljs-comment">// 开发模式</span><br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">'development'</span>,<br><br>    <span class="hljs-comment">// 入口文件是src目录下的`index.js`文件</span><br>    <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">'src'</span>, <span class="hljs-string">'index.js'</span>),<br>    <br>     <br>    <span class="hljs-attr">output</span>: {<br>        <span class="hljs-comment">// 把所有依赖的模块合并输出到一个 index.js 文件</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">'index.js'</span>,<br><br>        <span class="hljs-comment">// 输出文件都放到 dist 目录下</span><br>        <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">'dist'</span>)<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="初次测试"><a href="#初次测试" class="headerlink" title="初次测试"></a>初次测试</h3><p>编写一下<code>index.js</code>文件，测试一下前面的配置是否正确。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'赤蓝紫'</span>)<br></code></pre></td></tr></tbody></table></figure><p>执行命令<code>npx webpack</code><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2840f6380f4b45d788d234a64b4f2767~tplv-k3u1fbpfcp-zoom-1.image"></p><p>执行编译生成的文件，能得到正确的结果就表示前面的步骤正确了。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eee2a95b5d0d4a9888f1a4d24a57a507~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="生成html"><a href="#生成html" class="headerlink" title="生成html"></a>生成html</h3><p>上面我们已经能够使用Webpack编译打包js代码了，但是生成的是js文件，还得去执行它。所以接下来我们需要能够开启一个服务。开启服务之前得先让它能够生成html文件。</p><ol><li><p>安装依赖<br><code>npm install html-webpack-plugin</code></p></li><li><p>修改配置，引入并使用插件<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d68ce145b6bd4a62b133cd28811ab497~tplv-k3u1fbpfcp-zoom-1.image"></p></li><li><p>执行<code>npx webpack</code><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f317369984bb4005a8c83cb70decc331~tplv-k3u1fbpfcp-zoom-1.image"></p></li></ol><h3 id="开启服务器"><a href="#开启服务器" class="headerlink" title="开启服务器"></a>开启服务器</h3><ol><li>安装<code>webpack-dev-server</code>：<code>npm install webpack-dev-server</code></li><li>执行<code>npx webpack serve</code></li><li>打开<a href="http://localhost:8080/">http://localhost:8080/</a></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/060925f181a54875a24a55ad88a529ce~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="处理TS文件"><a href="#处理TS文件" class="headerlink" title="处理TS文件"></a>处理TS文件</h3><p>现在我们的脚手架还是不能处理TS文件的。</p><p>index.js</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">'./myts.ts'</span><br></code></pre></td></tr></tbody></table></figure><p>myts.ts</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> age: <span class="hljs-built_in">number</span> = <span class="hljs-number">21</span><br><span class="hljs-built_in">console</span>.log(age)<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c64caf42202844dd903dfd1f13d6b030~tplv-k3u1fbpfcp-zoom-1.image"></p><p>处理TS文件其实也不难，只需要两个步骤就行：</p><ol><li>安装<code>ts-loader</code>，<code>npm install ts-loader</code></li><li>修改Webpack配置文件<code>webpack.config.js</code>，增加<code>module</code>节点<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>: {<br>    <span class="hljs-attr">rules</span>: [<br>        {<br>            <span class="hljs-comment">// ts后缀名的文件会使用ts-loader</span><br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.ts$/</span>,<br>            use: [<span class="hljs-string">"ts-loader"</span>]<br>        }<br>    ]<br>}<br></code></pre></td></tr></tbody></table></figure></li><li>增加TS配置文件，空文件也行，只是一定要有</li></ol><p>再次执行<code>npx webpack serve</code><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ddc46ad1ea64f5b9cff7d84936a0e84~tplv-k3u1fbpfcp-zoom-1.image"></p><p>然后，还可稍微修改一下<code>package.json</code>文件，设置<code>npx webpack serve</code>命令为更常用的<code>npm run dev</code><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e432893f879c416491fa4d0188b8fbde~tplv-k3u1fbpfcp-zoom-1.image"></p><p>简单的TS脚手架这样子就结束了。之后就能更方便的学习TS了。</p><p>完整版Webpack配置献上：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">"path"</span>)<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">"html-webpack-plugin"</span>)<br><br><span class="hljs-built_in">module</span>.exports = {<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">"development"</span>,<br>    <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">"src"</span>, <span class="hljs-string">"index.js"</span>),<br>    <span class="hljs-attr">output</span>: {<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">"index.js"</span>,<br>        <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">"dist"</span>)<br>    },<br>    <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> HtmlWebpackPlugin()],<br>    <span class="hljs-attr">module</span>: {<br>        <span class="hljs-attr">rules</span>: [<br>            {<br>                <span class="hljs-comment">// ts后缀名的文件会使用ts-loader</span><br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.ts$/</span>,<br>                use: [<span class="hljs-string">"ts-loader"</span>]<br>            }<br>        ]<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Webpack搭建简单的TypeScript脚手架&quot;&gt;&lt;a href=&quot;#Webpack搭建简单的TypeScript脚手架&quot; class=&quot;headerlink&quot; title=&quot;Webpack搭建简单的TypeScript脚手架&quot;&gt;&lt;/a&gt;Webpack搭建简单</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
    <category term="Webpack" scheme="https://www.clzczh.top/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript查漏补缺(基础类型)</title>
    <link href="https://www.clzczh.top/2022/06/18/typescript-9/"/>
    <id>https://www.clzczh.top/2022/06/18/typescript-9/</id>
    <published>2022-06-18T04:50:53.000Z</published>
    <updated>2022-06-18T04:51:15.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript查漏补缺-基础类型"><a href="#TypeScript查漏补缺-基础类型" class="headerlink" title="TypeScript查漏补缺(基础类型)"></a>TypeScript查漏补缺(基础类型)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>TypeScript 入门教程看完了，大部分都按自己的理解来做了下笔记输出。但是，总感觉有遗漏的知识点。于是，找了一些大佬的博客，来查漏补缺一下。(但是这里只记录一下基本类型的，因为其他部分暂时看的还有点云里雾里)</p><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>主要补充之前的笔记中没有的讲到的类型。</p><h3 id="unknown类型"><a href="#unknown类型" class="headerlink" title="unknown类型"></a>unknown类型</h3><p><strong><code>unknown</code>类型是<code>any</code>类型对应的安全类型。</strong></p><p>**所有类型都可以赋值给<code>any</code>，也可以赋值给<code>unknown</code>**。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// unknown</span><br><span class="hljs-keyword">let</span> myunknown: unknown<br><br>myunknown = <span class="hljs-number">123</span><br>myunknown = <span class="hljs-string">'hello'</span><br><br><span class="hljs-comment">// any</span><br><span class="hljs-keyword">let</span> myany: <span class="hljs-built_in">any</span><br><br>myany = <span class="hljs-number">123</span><br>myany = <span class="hljs-string">'hello'</span><br><br><span class="hljs-comment">// number</span><br><span class="hljs-keyword">let</span> mynumber: <span class="hljs-built_in">number</span><br><br>mynumber = <span class="hljs-number">123</span><br>mynumber = <span class="hljs-string">'hello'</span>  <span class="hljs-comment">// 报错：不能将类型“string”分配给类型“number”。</span><br></code></pre></td></tr></tbody></table></figure><p><strong><code>any</code>类型能被赋值给任意类型(<code>any</code>、<code>unknown</code>、<code>number</code>等，<code>unknown</code>类型只能被赋值给<code>unknown</code>、<code>any</code>类型)</strong></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// unknown</span><br><span class="hljs-keyword">let</span> myunknown: unknown<br><br><span class="hljs-keyword">let</span> value1: unknown = myunknown<br><span class="hljs-keyword">let</span> value2: <span class="hljs-built_in">any</span> = myunknown<br><span class="hljs-keyword">let</span> value3: <span class="hljs-built_in">number</span> = myunknown  <span class="hljs-comment">// 报错：不能将类型“unknown”分配给类型“number”。</span><br><br><br><span class="hljs-comment">// any</span><br><span class="hljs-keyword">let</span> myany: <span class="hljs-built_in">any</span><br><br><span class="hljs-keyword">let</span> value4: unknown = myany<br><span class="hljs-keyword">let</span> value5: <span class="hljs-built_in">any</span> = myany<br><span class="hljs-keyword">let</span> value6: <span class="hljs-built_in">number</span> = myany <br></code></pre></td></tr></tbody></table></figure><p><strong>对<code>any</code>类型的值进行操作无需检查，<code>unknown</code>类型需要检查</strong></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// unknown</span><br><span class="hljs-keyword">let</span> myunknown: unknown<br><span class="hljs-built_in">console</span>.log(myunknown.name) <span class="hljs-comment">// 报错：类型“unknown”上不存在属性“name”。</span><br><br><span class="hljs-comment">// any</span><br><span class="hljs-keyword">let</span> myany: <span class="hljs-built_in">any</span><br><span class="hljs-built_in">console</span>.log(myany.name)<br><br></code></pre></td></tr></tbody></table></figure><p>上面的例子简单讲一下本人的理解：任意类型<code>any</code>顾名思义，值可以是任意类型，也就包括是对象，而对象可能会有<code>name</code>，所以就不会报错。但是，<code>unknown</code>类型就会不知道该类型究竟存储了什么类型的值，虽然它也可能是对象，但是为了安全着想，会报错。**<code>unknown</code>类型是<code>any</code>类型对应的安全类型。**</p><h3 id="void类型"><a href="#void类型" class="headerlink" title="void类型"></a>void类型</h3><p><code>void</code>类型表示没有任何类型。一般用来声明没有返回值的函数。(实际上，返回<code>undefined</code>和<code>null</code>也是可行的，<code>void</code>类型更像是不会返回有用的值)</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span> </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hello'</span>)<br>}<br><br>sayHello()<br></code></pre></td></tr></tbody></table></figure><p>但是，这里又有一个疑问：函数没有返回值时，默认返回<code>undefined</code></p><p>那么，声明函数时的<code>void</code>类型和<code>undefined</code>类型有什么区别呢？</p><h4 id="返回值为undefined类型必须有返回值"><a href="#返回值为undefined类型必须有返回值" class="headerlink" title="返回值为undefined类型必须有返回值"></a>返回值为<code>undefined</code>类型必须有返回值</h4><p>虽然**函数没有返回值时，默认返回<code>undefined</code>**，但是当我们指定函数的返回值为<code>undefined</code>类型时，没有返回值会报错。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span> </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hello'</span>)<br>}<br><br><span class="hljs-built_in">console</span>.log(sayHello())<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>): <span class="hljs-title">undefined</span> </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hi'</span>)<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0797eb0a70284717a9c5b18e6382eb8a~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="undefined能被赋值给void，但void不能赋值给undefined"><a href="#undefined能被赋值给void，但void不能赋值给undefined" class="headerlink" title="undefined能被赋值给void，但void不能赋值给undefined"></a><code>undefined</code>能被赋值给<code>void</code>，但<code>void</code>不能赋值给<code>undefined</code></h4><p><code>void</code>类型不能赋值给<code>undefined</code>这是符合正常的情况的：即只能赋值给自己和<code>any</code>类型</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span> </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hello'</span>)<br>}<br><br><span class="hljs-keyword">const</span> s1: <span class="hljs-literal">undefined</span> = sayHello()    <span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">const</span> s2: <span class="hljs-built_in">void</span> = sayHello()<br><span class="hljs-keyword">const</span> s3: <span class="hljs-literal">null</span> = sayHello()         <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181250687.png"></p><p>但是，有例外情况：<code>undefined</code>可以被赋值给<code>void</code></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> s1: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">const</span> s2: <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span><br></code></pre></td></tr></tbody></table></figure><p>顺带提一下：<code>null</code>和<code>undefined</code>的关系还是依然难解难分</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> s1: <span class="hljs-literal">null</span> = <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">const</span> s2: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">null</span> <br></code></pre></td></tr></tbody></table></figure><h3 id="never类型"><a href="#never类型" class="headerlink" title="never类型"></a>never类型</h3><p><code>never</code>类型表示永不存在的值的类型。如抛出异常或不会有返回值的函数的返回值类型。</p><p>也就是说：如果看到<code>never</code>类型，很有可能是代码出问题了。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errFunc</span>(<span class="hljs-params"></span>): <span class="hljs-title">never</span> </span>{<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'clz'</span>)<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">infiniteLoop</span>(<span class="hljs-params"></span>): <span class="hljs-title">never</span> </span>{<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) { }<br>}<br></code></pre></td></tr></tbody></table></figure><p>可以看下官方提示(VSCode翻译版)<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fb5d9ee945c47539792a6a404600b93~tplv-k3u1fbpfcp-zoom-1.image"></p><p>那么，<code>never</code>类型有什么用途呢？毕竟按上面的写法的话，就像是只能手动制造bug一样。<br>在TS中，<strong>可以利用<code>never</code>类型来实现详细的检查</strong>。</p><p>实例：</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> Nickname = <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkNickname</span>(<span class="hljs-params">nickname: Nickname</span>) </span>{<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> nickname === <span class="hljs-string">'string'</span>) {<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`你的昵称是string类型<span class="hljs-subst">${nickname}</span>`</span>)<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> nickname === <span class="hljs-string">'number'</span>) {<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`你的昵称是number类型<span class="hljs-subst">${nickname}</span>`</span>)<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'请检查类型'</span>)<br>    }<br>}<br><br>checkNickname(<span class="hljs-string">'赤蓝紫'</span>)<br><br>checkNickname(<span class="hljs-number">123</span>)<br><br>checkNickname(<span class="hljs-literal">true</span>)     <br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c36989148cb444879fb566ee3fa465a9~tplv-k3u1fbpfcp-zoom-1.image"></p><p>从上面的例子中，可以看到<code>checkNickname</code>只是接受<code>string</code>和<code>number</code>类型，当我们传<code>boolean</code>类型的时候，会在编译期间报错。</p><p>但是，当同事修改<code>Nickname</code>的类型为<code>string | number | boolean</code>时，而且没修改<code>checkNickname</code>的逻辑的话，就会出问题。<br><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181250709.png"></p><p>可以发现：我们传参为<code>boolean</code>时，会在运行时抛出我们自定义的错误，但是再编译时没法检测出问题。这时候就能利用<code>never</code>来实现编译时就检测出问题。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c862f2c547394b80a592d252acc40f0b~tplv-k3u1fbpfcp-zoom-1.image"></p><p>上面的例子中，<code>else</code>分支的<code>nickname</code>会被收窄为<code>boolean</code>类型，而<code>boolean</code>类型无法被赋值给<code>never</code>类型，所以会出现编译错误，就能够提前检测出错误，避免很多没必要的问题。</p><p><strong>使用<code>never</code>类型能够避免新增联合类型，但是没有对应实现的情况</strong></p><p>参考链接：</p><ul><li><a href="https://juejin.cn/post/6872111128135073806">一份不可多得的 TS 学习指南（1.8W字）</a></li><li><a href="https://www.codercto.com/a/103516.html">TypeScript never 类型</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TypeScript查漏补缺-基础类型&quot;&gt;&lt;a href=&quot;#TypeScript查漏补缺-基础类型&quot; class=&quot;headerlink&quot; title=&quot;TypeScript查漏补缺(基础类型)&quot;&gt;&lt;/a&gt;TypeScript查漏补缺(基础类型)&lt;/h1&gt;&lt;h2</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>攀爬TS之路(八)    泛型</title>
    <link href="https://www.clzczh.top/2022/06/18/typescript-8/"/>
    <id>https://www.clzczh.top/2022/06/18/typescript-8/</id>
    <published>2022-06-18T04:50:17.000Z</published>
    <updated>2022-06-18T04:50:37.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攀爬TS之路-八-泛型"><a href="#攀爬TS之路-八-泛型" class="headerlink" title="攀爬TS之路(八)    泛型"></a>攀爬TS之路(八)    泛型</h1><blockquote><p>泛型是指在定义函数、接口或类时，不预先指定具体的类型，而是在使用的时候再指定类型的一种特性。</p></blockquote><h2 id="泛型的简单使用"><a href="#泛型的简单使用" class="headerlink" title="泛型的简单使用"></a>泛型的简单使用</h2><p>先来一个简单的例子，加深了解。<br>目标：创建一个函数<code>createArr</code>，实现创建一个指定长度的数组。第一个参数是数组，第二个参数是数组每一项的值。</p><p>首先，我们想要实现这个功能，第一时间可能想到的是使用任意类型<code>any</code>来实现。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createArr</span>(<span class="hljs-params">length: <span class="hljs-built_in">number</span>, value: <span class="hljs-built_in">any</span></span>): <span class="hljs-title">any</span>[] </span>{<br>    <span class="hljs-keyword">const</span> ret = []<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) {<br>        ret[i] = value<br>    }<br><br>    <span class="hljs-keyword">return</span> ret<br>}<br><br><br><span class="hljs-built_in">console</span>.log(createArr(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>))<br><span class="hljs-built_in">console</span>.log(createArr(<span class="hljs-number">4</span>, <span class="hljs-string">'hello'</span>))<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181250209.png"></p><p>结果是出来了，但TS还需要看下类型。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3fc1ba0eee3f44fcb937573a76b650b4~tplv-k3u1fbpfcp-zoom-1.image"></p><p>不对劲的地方：</p><ul><li>数组是<code>any</code>类型</li><li>数组的元素也都是<code>any</code>类型</li></ul><p>但是，我们想要的效果应该是<strong>无论传什么类型，就得到对应类型</strong>。使用泛型就能很简单地实现这种效果。</p><p>使用起来也比较简单，在函数名后添加<code>&lt;T&gt;</code>，这个<code>T</code>就是表示输入的类型，之后就能把这个<code>T</code>当成类型来使用。<br>如：</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createArr</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">length: <span class="hljs-built_in">number</span>, value: T</span>): <span class="hljs-title">T</span>[] </span>{<br>    <span class="hljs-keyword">const</span> ret: T[] = []<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) {<br>        ret[i] = value<br>    }<br><br>    <span class="hljs-keyword">return</span> ret<br>}<br></code></pre></td></tr></tbody></table></figure><p>调用的时候，可以指定具体类型。也可以不手动指定，TS的类型推论会自动得到结果。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">createArr&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c56698cd5e8e4041add48f76befaa377~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="多个类型参数"><a href="#多个类型参数" class="headerlink" title="多个类型参数"></a>多个类型参数</h2><p>定义泛型的时候，可以使用多个不同的字母来表示多个类型参数。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createPerson</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">U</span>&gt;(<span class="hljs-params">name: T, age: U</span>): </span>{ name: T, <span class="hljs-attr">age</span>: U } {<br>    <span class="hljs-keyword">const</span> person: { <span class="hljs-attr">name</span>: T, <span class="hljs-attr">age</span>: U } = {<br>        name,<br>        age<br>    }<br><br>    <span class="hljs-keyword">return</span> person;<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0702f8fefd7846c6a92101e8a6aedefc~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><p>在我们使用泛型变量的时候，因为不知道该变量是哪种类型(具体是哪种类型只有调用函数后才知道)，所以就不能操作它的属性和方法。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88ab8396acd54d4c8da48c43b8eb801e~tplv-k3u1fbpfcp-zoom-1.image"></p><p>这时候，可以对泛型进行约束，只允许有<code>length</code>属性的变量。具体使用就是定义一个接口<code>Lengthwise</code>,去限制泛型必须符合该接口的形状(即必须包含<code>length</code>属性)，然后通过<code>extends</code>来约束泛型<code>T</code>。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Lengthwise {<br>    <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span><br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLength</span>&lt;<span class="hljs-title">T</span> <span class="hljs-title">extends</span> <span class="hljs-title">Lengthwise</span>&gt;(<span class="hljs-params">arg: T</span>): <span class="hljs-title">number</span> </span>{<br>    <span class="hljs-keyword">return</span> arg.length;<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a43ddf6534554db081347ff686cd36b6~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>泛型也可以用来定义接口。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> MyType&lt;T&gt; {<br>    <span class="hljs-attr">data</span>: T<br>}<br><br><br><span class="hljs-keyword">const</span> info1: MyType&lt;<span class="hljs-built_in">number</span>&gt; = {<br>    <span class="hljs-attr">data</span>: <span class="hljs-number">123</span><br>}<br><br><span class="hljs-keyword">const</span> info2: MyType&lt;<span class="hljs-built_in">string</span>&gt; = {<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">'hello'</span><br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>泛型也可以用来定义类。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&lt;<span class="hljs-title">T</span>&gt; </span>{<br>    <span class="hljs-keyword">private</span> name: T;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">initValue: T</span>)</span> {<br>        <span class="hljs-built_in">this</span>.name = initValue<br>    }<br><br>    getName(): T {<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name<br>    }<br>}<br><br><span class="hljs-keyword">let</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">123</span>)<br><span class="hljs-keyword">let</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">'clz'</span>)<br><br><span class="hljs-built_in">console</span>.log(person1.getName(), person2.getName())<br></code></pre></td></tr></tbody></table></figure><h3 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h3><p>之前在数组一节中已经介绍了，现在再回顾一下。和泛型接口、泛型类的使用方法类似，不过并不需要提前使用<code>T</code>来定义，而是直接将<code>Array&lt;type&gt;</code>当成类型来使用即可。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> nums: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;攀爬TS之路-八-泛型&quot;&gt;&lt;a href=&quot;#攀爬TS之路-八-泛型&quot; class=&quot;headerlink&quot; title=&quot;攀爬TS之路(八)    泛型&quot;&gt;&lt;/a&gt;攀爬TS之路(八)    泛型&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;泛型是指在定义函数、接口或</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>攀爬TS之路(七)    类与接口</title>
    <link href="https://www.clzczh.top/2022/06/18/typescript-7/"/>
    <id>https://www.clzczh.top/2022/06/18/typescript-7/</id>
    <published>2022-06-18T04:48:44.000Z</published>
    <updated>2022-06-18T04:49:25.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攀爬TS之路-七-类与接口"><a href="#攀爬TS之路-七-类与接口" class="headerlink" title="攀爬TS之路(七)    类与接口"></a>攀爬TS之路(七)    类与接口</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>这里不会赘述JS中的类的用法，而是单刀直入，直接来TS中的类的用法。</p><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><p>先提一嘴，JS中的类有私有属性，在属性名之前使用<code>#</code>表示。<strong>私有属性只能在类的内部使用</strong>。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    #name = <span class="hljs-string">'clz'</span><br><br>    <span class="hljs-keyword">get</span> <span class="hljs-title">val</span>() {<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.#name<br>    }<br>}<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person()<br><span class="hljs-built_in">console</span>.log(person.val)<br></code></pre></td></tr></tbody></table></figure><p>有学过其它语言的可能就会用的有点不太习惯，因为很多语言(指本人课程教的，C++、Java)使用的访问修饰符是<code>public</code>、<code>private</code>、<code>protected</code>。而TS可以使用这三种访问修饰符。</p><ul><li><code>public</code>：修饰的属性和方法是公有的，可以在任何地方被访问。默认都是<code>public</code></li><li><code>private</code>：私有的，<strong>只能在声明该属性的类中访问</strong>，即也不能被子类访问</li><li><code>protected</code>：受保护的，和<code>private</code>类似，不过，<strong>能被子类访问</strong></li></ul><h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><p>修饰的属性和方法是公有的，可以在任何地方被访问。</p><p>实例：</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">public</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> {<br>        <span class="hljs-built_in">this</span>.name = name<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">public</span> grade;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, grade</span>)</span> {<br>        <span class="hljs-built_in">super</span>(name)<br><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>        <span class="hljs-built_in">this</span>.grade = grade<br>    }<br>}<br><br><br><span class="hljs-keyword">const</span> student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">'czh'</span>, <span class="hljs-number">3</span>)      <span class="hljs-comment">// czh</span><br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">'clz'</span>)<br><span class="hljs-built_in">console</span>.log(person.name)                    <span class="hljs-comment">// clz</span><br></code></pre></td></tr></tbody></table></figure><h4 id="private"><a href="#private" class="headerlink" title="private"></a>private</h4><p><strong>只能在声明该属性的类中访问</strong>，即也不能被子类访问。</p><p>实例：把上面的例子中，<code>name</code>的修饰符变成<code>private</code>即可。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b6017eab0cd7441ab50bbf46a62a5573~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h4><p>和<code>private</code>类似，不过，<strong>能被子类访问</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f4d4f6a323a440cb046a196987d9cc4~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h3><p>访问修饰符和<code>readonly</code>修饰符能够<strong>直接使用在构造函数的参数中</strong>。相当于在类中定义该属性的同时赋值。只读属性的用法在对象那一节已经介绍过了。</p><p>原版本：</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">public</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> {<br>        <span class="hljs-built_in">this</span>.name = name<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>使用参数属性的简洁版：</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name</span>)</span> { }<br>}<br></code></pre></td></tr></tbody></table></figure><p>另外，如果需要同时使用访问修饰符和<code>readonly</code>修饰符的话，<strong>访问修饰符要在<code>readonly</code>修饰符之前</strong>，如<code>public readonly name</code>。</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p><code>abstract</code>用于定义抽象类和其中的抽象方法。对一个学过Java的人来说，就是面向对象这一块，TS和Java感觉上就是一样的。</p><p>抽象类主要是一些<strong>没有足够信息来描绘一个具体的对象的类</strong>。所以<strong>抽象类必须被继承获取足够信息，才能被使用</strong>。<strong>抽象类不能被实例化对象</strong>，但是类的其他功能依然存在。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab74d74dbf04439b85f657d5d15ac118~tplv-k3u1fbpfcp-zoom-1.image"></p><p>抽象类的使用：</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name</span>)</span> { }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">public</span> grade;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, grade</span>)</span> {<br>        <span class="hljs-built_in">super</span>(name)<br>        <span class="hljs-built_in">this</span>.grade = grade<br>    }<br>}<br><br><br><span class="hljs-keyword">const</span> student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">'clz'</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">console</span>.log(student)    <span class="hljs-comment">// Student {name: 'clz', grade: 3}</span><br></code></pre></td></tr></tbody></table></figure><p>抽象类还可以有抽象方法，<strong>抽象方法只能出现在抽象类中，子类必须实现抽象方法</strong></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name</span>)</span> { }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> listen()<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">public</span> grade;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, grade</span>)</span> {<br>        <span class="hljs-built_in">super</span>(name)<br>        <span class="hljs-built_in">this</span>.grade = grade<br>    }<br><br>    <span class="hljs-comment">// public listen() {</span><br>    <span class="hljs-comment">//     console.log('Kylee-大好きなのに')</span><br>    <span class="hljs-comment">// }</span><br>}<br><br><br><span class="hljs-keyword">const</span> student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">'clz'</span>, <span class="hljs-number">3</span>)<br>student.listen()    <span class="hljs-comment">// Kylee-大好きなのに</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c00e500131344231b674432523f7c9e9~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="类限制变量、函数类型"><a href="#类限制变量、函数类型" class="headerlink" title="类限制变量、函数类型"></a>类限制变量、函数类型</h3><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">public</span> name: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>)</span> {<br>        <span class="hljs-built_in">this</span>.name = name<br>    }<br><br>    getName(): <span class="hljs-built_in">string</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name<br>    }<br>}<br><br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">'clz'</span>)<br><span class="hljs-built_in">console</span>.log(person.getName())   <span class="hljs-comment">// clz</span><br></code></pre></td></tr></tbody></table></figure><h2 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h2><p><strong>一般来说，一个类只能继承自另一个类</strong>。(C++可以多继承)</p><p>但是，有时候不同类之间有一些共有特性，可以将它们封装成接口。</p><h3 id="类实现接口"><a href="#类实现接口" class="headerlink" title="类实现接口"></a>类实现接口</h3><p>就拿前面的<code>Person</code>类举例子，所有人都需要吃、睡，即可以封装一个<code>Normal</code>接口，包含必须的行为。然后通过<code>implements</code>关键字去实现接口。<strong>接口只是声明，需要类通过<code>implements</code>关键字实现</strong></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Normal {<br>    eat(): <span class="hljs-built_in">void</span><br>    sleep(): <span class="hljs-built_in">void</span><br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-title">implements</span> <span class="hljs-title">Normal</span> </span>{<br>    <span class="hljs-keyword">public</span> name: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>)</span> {<br>        <span class="hljs-built_in">this</span>.name = name<br>    }<br><br>    <span class="hljs-function"><span class="hljs-title">eat</span>(<span class="hljs-params"></span>)</span> {<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'吃'</span>)<br>    }<br><br>    <span class="hljs-function"><span class="hljs-title">sleep</span>(<span class="hljs-params"></span>)</span> {<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'睡'</span>)<br>    }<br>}<br><br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">'clz'</span>)<br><br>person.eat()    <span class="hljs-comment">// 吃</span><br></code></pre></td></tr></tbody></table></figure><h3 id="类实现多个接口"><a href="#类实现多个接口" class="headerlink" title="类实现多个接口"></a>类实现多个接口</h3><p>还可以把<code>Normal</code>接口分解成<code>Eat</code>接口和<code>Sleep</code>接口，然后同时实现两个接口。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Eat {<br>    eat(): <span class="hljs-built_in">void</span><br>}<br><br><span class="hljs-keyword">interface</span> Sleep {<br>    sleep(): <span class="hljs-built_in">void</span><br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-title">implements</span> <span class="hljs-title">Eat</span>, <span class="hljs-title">Sleep</span> </span>{}<br></code></pre></td></tr></tbody></table></figure><p>上面的Person类中省略了代码，代码和<code>Normal</code>接口的案例一样。</p><h3 id="接口继承接口"><a href="#接口继承接口" class="headerlink" title="接口继承接口"></a>接口继承接口</h3><ul><li><strong>类可以继承类，接口也可以继承接口。</strong></li><li><strong>类只能继承一个类，但是接口可以继承多个接口</strong></li></ul><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Eat {<br>    eat(): <span class="hljs-built_in">void</span><br>}<br><br><span class="hljs-keyword">interface</span> Drink {<br>    drink(): <span class="hljs-built_in">void</span><br>}<br><br><span class="hljs-keyword">interface</span> Sleep {<br>    sleep(): <span class="hljs-built_in">void</span><br>}<br><br><span class="hljs-keyword">interface</span> Normal <span class="hljs-keyword">extends</span> Eat, Drink, Sleep { }<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;攀爬TS之路-七-类与接口&quot;&gt;&lt;a href=&quot;#攀爬TS之路-七-类与接口&quot; class=&quot;headerlink&quot; title=&quot;攀爬TS之路(七)    类与接口&quot;&gt;&lt;/a&gt;攀爬TS之路(七)    类与接口&lt;/h1&gt;&lt;h2 id=&quot;类&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>攀爬TS之路(六)    类型别名、字面量类型、枚举</title>
    <link href="https://www.clzczh.top/2022/06/18/typescript-6/"/>
    <id>https://www.clzczh.top/2022/06/18/typescript-6/</id>
    <published>2022-06-18T04:47:43.000Z</published>
    <updated>2022-06-18T04:48:34.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攀爬TS之路-六-类型别名、字面量类型、枚举"><a href="#攀爬TS之路-六-类型别名、字面量类型、枚举" class="headerlink" title="攀爬TS之路(六)    类型别名、字面量类型、枚举"></a>攀爬TS之路(六)    类型别名、字面量类型、枚举</h1><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>类型别名就是给一个类型起一个新名字。使用关键字<code>type</code>。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> Name = <span class="hljs-built_in">string</span><br><br><br><span class="hljs-keyword">const</span> myname1: Name = <span class="hljs-string">'clz'</span><br><span class="hljs-keyword">const</span> myname2: Name = <span class="hljs-number">123</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4416a0dc1fd649be9868a9bbc41b14c5~tplv-k3u1fbpfcp-zoom-1.image"></p><p>上面的例子中，使用了类型别名，所以后续可以直接使用类型别名<code>Name</code>来当成<code>string</code>使用。</p><p>如果给比较复杂的类型使用类型别名，后续使用就会很方便。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> SumType = <span class="hljs-function">(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span><br><br><span class="hljs-keyword">const</span> sum: SumType = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b<br><br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">11</span>, <span class="hljs-number">22</span>))<br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">11</span>, <span class="hljs-string">''</span>))    <span class="hljs-comment">// 报错：类型“string”的参数不能赋给类型“number”的参数。</span><br></code></pre></td></tr></tbody></table></figure><h2 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h2><p>可以使用字面量类型来约束取值只能为特定的字面量。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> Name = <span class="hljs-string">'clz'</span> | <span class="hljs-number">123</span> | <span class="hljs-literal">true</span> | { <span class="hljs-attr">name</span>: <span class="hljs-string">'clz'</span> }<br><br><span class="hljs-keyword">const</span> myname1: Name = <span class="hljs-string">'clz'</span><br><span class="hljs-keyword">const</span> myname2: Name = <span class="hljs-number">123</span><br><span class="hljs-keyword">const</span> myname3: Name = <span class="hljs-literal">true</span><br><span class="hljs-keyword">const</span> myname4: Name = {<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'clz'</span><br>}<br><br><span class="hljs-keyword">const</span> myname5: Name = <span class="hljs-string">'ccc'</span><br><span class="hljs-keyword">const</span> myname6: Name = <span class="hljs-number">124</span><br><span class="hljs-keyword">const</span> myname7: Name = <span class="hljs-literal">false</span><br><span class="hljs-keyword">const</span> myname8: Name = {<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'czh'</span><br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181248354.png"></p><p><strong><code>null</code>和<code>undefined</code>不受限制</strong></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> Name = <span class="hljs-string">'clz'</span> | <span class="hljs-number">123</span> | <span class="hljs-literal">true</span> | { <span class="hljs-attr">name</span>: <span class="hljs-string">'clz'</span> }<br><br><span class="hljs-keyword">const</span> myname1: Name = <span class="hljs-literal">null</span><br><span class="hljs-keyword">const</span> myname2: Name = <span class="hljs-literal">undefined</span><br></code></pre></td></tr></tbody></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举一般用来表示一组常量，比如一周的七天，方向有东南西北等。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>使用方法很简单：</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Direction {<br>    East,<br>    South,<br>    West,<br>    North<br>}<br><br><span class="hljs-built_in">console</span>.log(Direction[<span class="hljs-string">'East'</span>])     <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">console</span>.log(Direction[<span class="hljs-string">'South'</span>])    <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(Direction[<span class="hljs-string">'West'</span>])     <span class="hljs-comment">// 2</span><br><span class="hljs-built_in">console</span>.log(Direction[<span class="hljs-string">'North'</span>])    <span class="hljs-comment">// 3</span><br></code></pre></td></tr></tbody></table></figure><p>枚举成员会被赋值从<code>0</code>开始递增数字，所以上面的例子会依次打印0、1、2、3。<br>另外，还会对枚举值到枚举名进行反向映射，如枚举成员<code>East</code>的值是0，那么<code>Direction[0]</code>的值就是<code>East</code></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">console</span>.log(Direction[<span class="hljs-string">'East'</span>])     <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">console</span>.log(Direction[<span class="hljs-number">0</span>])          <span class="hljs-comment">// East</span><br></code></pre></td></tr></tbody></table></figure><p>那么，这是怎么实现的呢？<br>先打印<code>Direction</code>瞧瞧。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/803a015557c84c6195c05a6016d9e213~tplv-k3u1fbpfcp-zoom-1.image"></p><p>发现这个枚举对象的键和值都是该对象的属性。接下来当然得看看编译成JS后究竟是怎么实现的。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fcc386fca2e64b11bf2c3a8f3d466b87~tplv-k3u1fbpfcp-zoom-1.image"></p><p>发现还挺简单。就是赋值的时候，把另一个赋值表达式当成键来赋值，这样子就会拿那个表达式的结果来当成键来使用。</p><h3 id="手动赋值"><a href="#手动赋值" class="headerlink" title="手动赋值"></a>手动赋值</h3><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Direction {<br>    East = <span class="hljs-number">4</span>,<br>    South = <span class="hljs-number">1</span>,<br>    West,<br>    North<br>}<br><br><span class="hljs-built_in">console</span>.log(Direction)<br></code></pre></td></tr></tbody></table></figure><p>手动赋值的时候，枚举项的值将不再是从0开始递增了，而是会接着上一个枚举项递增。比如上面的例子中，<code>South</code>的值是1，而后面的<code>West</code>没有手动赋值，所以它的值是2，同理，<code>North</code>的值是3。</p><p><strong>注意</strong>：非手动赋值的枚举项和手动赋值的重复的时候，后面的会把前面的给覆盖掉。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Direction {<br>    East = <span class="hljs-number">2</span>,<br>    South = <span class="hljs-number">1</span>,<br>    West,<br>    North<br>}<br><br><span class="hljs-built_in">console</span>.log(Direction[<span class="hljs-number">2</span>])   <span class="hljs-comment">// West</span><br><span class="hljs-built_in">console</span>.log(Direction)      <span class="hljs-comment">// 键为2时的结果是West。键为2，值为East的被覆盖掉了</span><br></code></pre></td></tr></tbody></table></figure><h3 id="常数枚举"><a href="#常数枚举" class="headerlink" title="常数枚举"></a>常数枚举</h3><p>常数枚举就是使用<code>const enum</code>定义的枚举类型。它和普通枚举不同，它会在编译阶段被删除。</p><p>所以下面这段代码编译出来是什么东西都没有。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-built_in">enum</span> Direction {<br>    East,<br>    South,<br>    West,<br>    North,<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181248319.png"></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">console</span>.log([Direction.East, Direction.South, Direction.West, Direction.North])<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1a88bbc7bc54017887bf4c39f525d4d~tplv-k3u1fbpfcp-zoom-1.image"></p><p>当我们使用时，编译的结果后面会有<strong>该枚举项的键</strong>作为注释。</p><h3 id="其他使用方式"><a href="#其他使用方式" class="headerlink" title="其他使用方式"></a>其他使用方式</h3><h4 id="枚举项是小数或负数"><a href="#枚举项是小数或负数" class="headerlink" title="枚举项是小数或负数"></a>枚举项是小数或负数</h4><p>手动赋值的枚举项还可以是小数或负数，递增步长仍然是1</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Direction {<br>    East = -<span class="hljs-number">4</span>,<br>    South = -<span class="hljs-number">1.5</span>,<br>    West,<br>    North<br>}<br><br><span class="hljs-built_in">console</span>.log(Direction)     <br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181248176.png"></p><h4 id="枚举项不是数字"><a href="#枚举项不是数字" class="headerlink" title="枚举项不是数字"></a>枚举项不是数字</h4><p><strong>手动赋值的枚举项可以不是数字</strong></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Direction {<br>    East = <span class="hljs-string">"E"</span>,<br>    South = <span class="hljs-string">"S"</span>,<br>    West = <span class="hljs-string">"W"</span>,<br>    North = <span class="hljs-string">"N"</span><br>}<br><br><span class="hljs-built_in">console</span>.log(Direction)  <br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87dcf47cbf744859a0e4809f53f63964~tplv-k3u1fbpfcp-zoom-1.image"></p><p>这个时候没有反向映射了，如果枚举项不是数字，但是还是想要有反向映射的话。需要使用类型断言来让tsc无视类型检查，并且全部都要并且只能断言为<code>any</code>。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/521234f6125f4767ac3d9db0074f9711~tplv-k3u1fbpfcp-zoom-1.image"></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Direction {<br>    East = <span class="hljs-string">"E"</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>,<br>    South = <span class="hljs-string">"S"</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>,<br>    West = <span class="hljs-string">"W"</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>,<br>    North = <span class="hljs-string">"N"</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span><br>}<br><br><span class="hljs-built_in">console</span>.log(Direction)     <br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181248373.png"></p><p><strong>手动赋值的枚举项不是数字时，后面不能有非手动赋值项</strong><br><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181248475.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;攀爬TS之路-六-类型别名、字面量类型、枚举&quot;&gt;&lt;a href=&quot;#攀爬TS之路-六-类型别名、字面量类型、枚举&quot; class=&quot;headerlink&quot; title=&quot;攀爬TS之路(六)    类型别名、字面量类型、枚举&quot;&gt;&lt;/a&gt;攀爬TS之路(六)    类型别</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>攀爬TS之路(五)    类型断言</title>
    <link href="https://www.clzczh.top/2022/06/18/typescript-5/"/>
    <id>https://www.clzczh.top/2022/06/18/typescript-5/</id>
    <published>2022-06-18T04:47:05.000Z</published>
    <updated>2022-06-18T04:47:32.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攀爬TS之路-五-类型断言"><a href="#攀爬TS之路-五-类型断言" class="headerlink" title="攀爬TS之路(五)    类型断言"></a>攀爬TS之路(五)    类型断言</h1><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>第二段路时，已经提到联合类型：变量<strong>只能访问</strong>联合类型中<strong>所有类型共有的属性或方法</strong></p><p>语法：<code>值 as 类型</code> 或 <code>&lt;类型&gt;值</code></p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><h4 id="将联合类型断言成其中的具体类型"><a href="#将联合类型断言成其中的具体类型" class="headerlink" title="将联合类型断言成其中的具体类型"></a>将联合类型断言成其中的具体类型</h4><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> IFishman {<br>    <span class="hljs-comment">// 摸鱼人</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    play(): <span class="hljs-built_in">void</span><br>}<br><br><br><span class="hljs-keyword">interface</span> IWorker {<br>    <span class="hljs-comment">// 干饭人</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>    eat(): <span class="hljs-built_in">void</span><br>}<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunc</span>(<span class="hljs-params">person: IFishman | IWorker</span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(person.name)<br><br>    person.play()       <span class="hljs-comment">// 报错：类型“IFishman | IWorker”上不存在属性“play”。类型“IWorker”上不存在属性“play”。</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>但是，有时候我们就是需要访问非公有的属性或方法。比如上面的例子中，当是<code>Fishman</code>时，调用<code>play</code>方法，当是<code>Worker</code>时，调用<code>eat</code>方法。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/313cd5a1ed8b49a9b428997246575b46~tplv-k3u1fbpfcp-zoom-1.image"></p><p>这时候，断言就能用来<strong>将联合类型断言成其中的具体类型</strong>。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> IFishman {<br>    <span class="hljs-comment">// 摸鱼人</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    play(): <span class="hljs-built_in">void</span><br>}<br><br><br><span class="hljs-keyword">interface</span> IWorker {<br>    <span class="hljs-comment">// 干饭人</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    eat(): <span class="hljs-built_in">void</span><br>}<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunc</span>(<span class="hljs-params">person: IFishman | IWorker</span>) </span>{<br>    (person <span class="hljs-keyword">as</span> IFishman).play()       <span class="hljs-comment">// 将person断言成IFishman</span><br>}<br><br><br><span class="hljs-keyword">const</span> fishman: IFishman = {<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'clz'</span>,<br>    <span class="hljs-attr">play</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'摸鱼'</span>)<br>    }<br>}<br><br>myFunc(fishman)     <span class="hljs-comment">// 摸鱼</span><br></code></pre></td></tr></tbody></table></figure><p>乍一看，挺好的，但是，实际上只是隐藏其他情况而已，比如上面<code>person as IFishman</code>隐藏了<code>person</code>为<code>IWorker</code>的情况，这时候如果传入的参数是<code>IWorker</code>类型的，那就会报错，而且<strong>没法在编译阶段就暴露错误</strong></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> worker: IWorker = {<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'clz'</span>,<br>    <span class="hljs-attr">eat</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'干饭'</span>)<br>    }<br>}<br><br>myFunc(worker)<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16642fe94541457f90d20db6ae9d1bf5~tplv-k3u1fbpfcp-zoom-1.image"></p><p>所以，使用断言时，应该非常注意，不然会增加一些运行时错误</p><h4 id="将父类断言成更具体的子类"><a href="#将父类断言成更具体的子类" class="headerlink" title="将父类断言成更具体的子类"></a>将父类断言成更具体的子类</h4><p>更准确来说，是将父类型断言成更具体的子类型，因为类的话，使用<code>instanceof</code>来判断就足够了。</p><p>但是，如果我们使用接口的话，它并不是类，而是类型，自然就不能使用<code>instanceof</code>来判断，这时候就需要使用断言来将父类型断言成更具体的子类型(实际上和<strong>将联合类型断言成其中的具体类型</strong>很像)</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>}<br><br><span class="hljs-keyword">interface</span> IFishman <span class="hljs-keyword">extends</span> Person {<br>    <span class="hljs-comment">// 摸鱼人</span><br>    play(): <span class="hljs-built_in">void</span><br>}<br><br><span class="hljs-keyword">interface</span> IWorker <span class="hljs-keyword">extends</span> Person {<br>    <span class="hljs-comment">// 干饭人</span><br>    eat(): <span class="hljs-built_in">void</span><br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunc</span>(<span class="hljs-params">person: Person</span>) </span>{<br>    <span class="hljs-comment">// console.log(person instanceof IFishman)      // 会报错：“IFishman”仅表示类型，但在此处却作为值使用。</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> (person <span class="hljs-keyword">as</span> IFishman).play === <span class="hljs-string">'function'</span>) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">'摸鱼人'</span><br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> (person <span class="hljs-keyword">as</span> IWorker).eat === <span class="hljs-string">'function'</span>) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">'干饭人'</span><br>    }<br><br>}<br><br><span class="hljs-keyword">const</span> worker: IWorker = {<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'clz'</span>,<br>    <span class="hljs-attr">eat</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{ }<br>}<br><span class="hljs-built_in">console</span>.log(myFunc(worker))     <span class="hljs-comment">// 干饭人</span><br></code></pre></td></tr></tbody></table></figure><h4 id="将任何一个类型断言成any"><a href="#将任何一个类型断言成any" class="headerlink" title="将任何一个类型断言成any"></a>将任何一个类型断言成<code>any</code></h4><p>我们使用JS进行开发时，有时候可以在<code>window</code>对象上添加新的属性，这个属性就能够全局访问了，但是，在TS中是会报错的，因为<code>window</code>对象没有该属性，就会报错。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0e176c060ae4d7ea889cd7eba5b337e~tplv-k3u1fbpfcp-zoom-1.image"></p><p>但是，这个做法实际上在开发中能够很便利，这个时候可以使用断言将它断言成<code>any</code>类型，这样子就能够添加新属性了。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">(<span class="hljs-built_in">window</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>).a = <span class="hljs-number">123</span><br></code></pre></td></tr></tbody></table></figure><p>需要注意的是，<strong>这样可能会掩盖真正的类型错误</strong></p><h4 id="将any断言成具体类型"><a href="#将any断言成具体类型" class="headerlink" title="将any断言成具体类型"></a>将<code>any</code>断言成具体类型</h4><p>设想一个情境，一个获取两个参数的和的函数，返回值按理应该是<code>number</code>类型，但是，结果却是<code>any</code>类型，这样子就会导致很多能在编译阶段暴露出的错误没法暴露出来。(这个情境是随便想的，简单来讲就是，历史代码不太好动，可能会引发蝴蝶效应)</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mySum</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">any</span> </span>{<br>    <span class="hljs-keyword">return</span> a + b<br>}<br><br><span class="hljs-keyword">const</span> sum = mySum(<span class="hljs-number">9</span>, <span class="hljs-number">8</span>)<br><span class="hljs-built_in">console</span>.log(sum.length)<br></code></pre></td></tr></tbody></table></figure><p>比如上面，我们应该在访问<code>sum.length</code>时报错才对，但是因为是任意类型，所以不会报错，所以这时候就可能使用断言，将<code>any</code>断言成具体的类型，恢复它的在编译阶段报错的功能。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18a71f0462f142f88a5a683cfa6477e4~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="断言规则"><a href="#断言规则" class="headerlink" title="断言规则"></a>断言规则</h3><p><strong>如果A兼容B或者B兼容A，那么A能够被断言为B</strong>。<br>这里的兼容简单来说就是：A兼容B就是指类型A是类型B的子集。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>}<br><br><span class="hljs-keyword">interface</span> IFishman <span class="hljs-keyword">extends</span> Person {<br>    <span class="hljs-comment">// 摸鱼人</span><br>    play(): <span class="hljs-built_in">void</span><br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPerson</span>(<span class="hljs-params">person: Person</span>) </span>{<br>    <span class="hljs-keyword">return</span> (person <span class="hljs-keyword">as</span> IFishman)<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testIFishman</span>(<span class="hljs-params">fishman: IFishman</span>) </span>{<br>    <span class="hljs-keyword">return</span> (fishman <span class="hljs-keyword">as</span> Person)<br>}<br></code></pre></td></tr></tbody></table></figure><p>上面的例子中，类型<code>Person</code>是类型<code>IFishman</code>的子集，即<code>Person</code>兼容<code>IFishman</code>，所以<code>Person</code>能被断言为<code>IFishman</code>，<code>IFishman</code>也能被断言为<code>Person</code>。</p><p>上面使用的<code>Person</code>是类，而<code>IFishman</code>是继承了<code>Person</code>，所以可能会误以为是继承关系导致的能否被断言。实际上，<strong>断言并不是根据是否有继承关系，而是看有没有兼容关系</strong>。所以下面的做法也是可以的。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> IPerson {<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>}<br><br><span class="hljs-keyword">interface</span> IFishman {<br>    <span class="hljs-comment">// 摸鱼人</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    play(): <span class="hljs-built_in">void</span><br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPerson</span>(<span class="hljs-params">person: IPerson</span>) </span>{<br>    <span class="hljs-keyword">return</span> (person <span class="hljs-keyword">as</span> IFishman)<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testIFishman</span>(<span class="hljs-params">fishman: IFishman</span>) </span>{<br>    <span class="hljs-keyword">return</span> (fishman <span class="hljs-keyword">as</span> IPerson)<br>}<br></code></pre></td></tr></tbody></table></figure><p>如果类型A不兼容B，并且类型B不兼容A，那么A不能断言为B，B也不能断言为A。<br>比如<code>number</code>和<code>string</code>。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a43796ef61134bf5897196ddd92c7b21~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="禁术：双重断言"><a href="#禁术：双重断言" class="headerlink" title="禁术：双重断言"></a>禁术：双重断言</h3><ul><li>任何类型都可以被断言成<code>any</code></li><li><code>any</code>可以被断言成任何类型</li></ul><p>所以，可以使用禁术<strong>双重断言</strong>把任何一个类型断言成任何另一个类型。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mytest</span>(<span class="hljs-params">num: <span class="hljs-built_in">number</span></span>) </span>{<br>    <span class="hljs-keyword">return</span> (num <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>)<br>}<br></code></pre></td></tr></tbody></table></figure><blockquote><p><strong>除非迫不得已，千万别用双重断言</strong>。禁术：伤敌一千，自损八百</p></blockquote><h3 id="类型断言不会进行类型转换"><a href="#类型断言不会进行类型转换" class="headerlink" title="类型断言不会进行类型转换"></a>类型断言不会进行类型转换</h3><p><strong>类型断言只在TS编译时有效果</strong>，在编译结果中会被删除，不会影响到编译结果的类型。<br><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181247912.png"></p><p>这个例子中，乍一看，断言还同时实现了类型的转换。</p><p>但是，都是假象。编译结果，立马打回原形。<br><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181247813.png"></p><p>所以，需要进行类型转换还是得老老实实直接调用类型转换的方法。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mytest</span>(<span class="hljs-params">num: <span class="hljs-built_in">number</span></span>) </span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>(num)<br>}<br><br><span class="hljs-keyword">const</span> num: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">const</span> str = mytest(num)<br><br><br><span class="hljs-built_in">console</span>.log(str)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> str)<br></code></pre></td></tr></tbody></table></figure><h3 id="类型断言VS类型声明"><a href="#类型断言VS类型声明" class="headerlink" title="类型断言VS类型声明"></a>类型断言VS类型声明</h3><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mytest</span>(<span class="hljs-params">num: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">any</span> </span>{<br>    <span class="hljs-keyword">return</span> num<br>}<br><br><span class="hljs-keyword">const</span> num = mytest(<span class="hljs-number">123</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">number</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> num)<br></code></pre></td></tr></tbody></table></figure><p>我们可以使用断言将<code>any</code>类型断言为<code>number</code>类型。</p><p>当然我们也可以使用类型声明的方式来实现。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> num: <span class="hljs-built_in">number</span> = mytest(<span class="hljs-number">123</span>)<br></code></pre></td></tr></tbody></table></figure><p>这么一看，结果几乎是一样的。</p><p>实际上，类型声明的使用会比类型断言要更严格，所以使用类型断言很可能会导致一些隐藏问题。</p><p>先来看看，类型断言和类型声明的核心区别：</p><ul><li>A断言为B：需要满足A兼容B，或者B兼容A</li><li>A赋值给B：只有满足B兼容A才行</li></ul><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> IPerson {<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>}<br><br><span class="hljs-keyword">interface</span> IFishman {<br>    <span class="hljs-comment">// 摸鱼人</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    play(): <span class="hljs-built_in">void</span><br>}<br><br><span class="hljs-keyword">const</span> person: IPerson = {<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'clz'</span><br>}<br><br><span class="hljs-keyword">const</span> fishman = person <span class="hljs-keyword">as</span> IFishman<br></code></pre></td></tr></tbody></table></figure><p>上面的断言：<code>person</code>兼容<code>IFishman</code>，所以<code>IPerson</code>类型能断言为<code>IFishman</code>类型，不过会有一些隐藏问题，比如<code>IFishman</code><br>类型原本是需要有<code>play</code>方法的，但是用断言就直接出现了一个没有<code>play</code>方法的<code>IFishman</code>。</p><p>使用类型声明会更严格，但是也能够避免一些隐藏错误。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> fishman: IFishman = person<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/753b4770d6b34406a902ff4013ee84bf~tplv-k3u1fbpfcp-zoom-1.image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;攀爬TS之路-五-类型断言&quot;&gt;&lt;a href=&quot;#攀爬TS之路-五-类型断言&quot; class=&quot;headerlink&quot; title=&quot;攀爬TS之路(五)    类型断言&quot;&gt;&lt;/a&gt;攀爬TS之路(五)    类型断言&lt;/h1&gt;&lt;h2 id=&quot;类型断言&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>攀爬TS之路(四)    函数类型</title>
    <link href="https://www.clzczh.top/2022/06/18/typescript-4/"/>
    <id>https://www.clzczh.top/2022/06/18/typescript-4/</id>
    <published>2022-06-18T04:46:34.000Z</published>
    <updated>2022-06-18T04:46:57.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攀爬TS之路-四-函数类型"><a href="#攀爬TS之路-四-函数类型" class="headerlink" title="攀爬TS之路(四)    函数类型"></a>攀爬TS之路(四)    函数类型</h1><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><h3 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式"></a>三种方式</h3><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><p>函数会有参数，也会有返回值。所以要用TS对函数进行约束的话，我们这个块都得限制。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span> </span>{<br>    <span class="hljs-keyword">return</span> a + b;<br>}<br><br><br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></tbody></table></figure><p>我们学过JS的话，应该会知道：JS的参数个数不符合函数定义时的，也不会报错。但是，在TS中，<strong>输入多的或少的参数都是不允许的</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/515310aed5e34a53be014dcabe71c0c4~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> sum: <span class="hljs-function">(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) </span>{<br>    <span class="hljs-keyword">return</span> a + b;<br>}<br></code></pre></td></tr></tbody></table></figure><p>这里一看，就会很混乱，又有箭头在，又好像不是箭头函数，下面就来分析一波。<br>首先，我们的<code>=</code>右边就是一般的函数表达式用法。<br>然后，我们在TS中,<code>=&gt;</code>可以用来表示函数的定义，左边是输入类型，右边是输出类型。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">sum: <span class="hljs-function">(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span>   <span class="hljs-comment">// 这一部分就是函数的类型，两个参数都要是number，返回值也得是number</span><br></code></pre></td></tr></tbody></table></figure><p>TS的函数表达式搭配箭头函数一开始可能会觉得很怪。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> sum: <span class="hljs-function">(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181246104.png"></p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>函数的定义也能通过结果来实现。用接口来实现基本和对象的定义一样，就不多说废话了。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> ISum {<br>    (a: <span class="hljs-built_in">number</span>, <span class="hljs-attr">b</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">number</span><br>}<br><br><span class="hljs-keyword">const</span> sum: ISum = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b<br><br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">11</span>, <span class="hljs-number">22</span>))    <br></code></pre></td></tr></tbody></table></figure><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>可选参数和对象中的可选属性一样，都是通过<code>?:</code>来定义。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97d3bcd8dfe74869838ae24a634f58a9~tplv-k3u1fbpfcp-zoom-1.image"></p><p>在函数中使用需要注意：<strong>必选参数不能在可选参数后面</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a516ee479b4140909966148ff45384c9~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>重载就是让一个函数能够实现接收不同数量或类型的参数时，做不同的处理。</p><p>比如：一个函数当参数是数字时，返回参数乘积，当参数是字符串时，返回字符串拼接结果。</p><p>实现：</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunc</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>, b: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span></span>): <span class="hljs-title">number</span> | <span class="hljs-title">string</span> | <span class="hljs-title">void</span> </span>{<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> a === <span class="hljs-string">'number'</span> &amp;&amp; <span class="hljs-keyword">typeof</span> b === <span class="hljs-string">'number'</span>) {<br>        <span class="hljs-keyword">return</span> a * b<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> a === <span class="hljs-string">'string'</span> &amp;&amp; <span class="hljs-keyword">typeof</span> b === <span class="hljs-string">'string'</span>) {<br>        <span class="hljs-keyword">return</span> a + b<br>    }<br>}<br><br><span class="hljs-keyword">const</span> x1 = myFunc(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br><span class="hljs-keyword">const</span> x2 = myFunc(<span class="hljs-string">'Hello '</span>, <span class="hljs-string">'CLZ'</span>)<br><br><span class="hljs-built_in">console</span>.log(x1)<br><span class="hljs-built_in">console</span>.log(x2)<br></code></pre></td></tr></tbody></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c3da4b9709940acbb648c5a72ac6c3d~tplv-k3u1fbpfcp-zoom-1.image"></p><p>乍一看，这不是没有重载的必要吗？<br>重载能让我们能够得到具体的类型。</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181246101.png"><br>没有重载，得到的返回值的类型就会是联合类型，很混乱，也不能对函数的返回值进行类型定义。</p><p>重载函数就能解决上面说的问题。<br>重载函数也不是很难实现，只需要在实际实现函数之前多次定义函数(定义时只是定义好输入和输出的类型)<br><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181246960.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;攀爬TS之路-四-函数类型&quot;&gt;&lt;a href=&quot;#攀爬TS之路-四-函数类型&quot; class=&quot;headerlink&quot; title=&quot;攀爬TS之路(四)    函数类型&quot;&gt;&lt;/a&gt;攀爬TS之路(四)    函数类型&lt;/h1&gt;&lt;h2 id=&quot;函数类型&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
  </entry>
  
</feed>
