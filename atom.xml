<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赤蓝紫</title>
  
  <subtitle>赤蓝紫</subtitle>
  <link href="https://www.clzczh.top/atom.xml" rel="self"/>
  
  <link href="https://www.clzczh.top/"/>
  <updated>2022-06-18T04:55:59.633Z</updated>
  <id>https://www.clzczh.top/</id>
  
  <author>
    <name>赤蓝紫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单入门Fetch API</title>
    <link href="https://www.clzczh.top/2022/06/18/fetchAPI/"/>
    <id>https://www.clzczh.top/2022/06/18/fetchAPI/</id>
    <published>2022-06-18T04:55:37.000Z</published>
    <updated>2022-06-18T04:55:59.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单入门Fetch-API"><a href="#简单入门Fetch-API" class="headerlink" title="简单入门Fetch API"></a>简单入门Fetch API</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Fetch API</code>是使用 JavaScript请求资源的优秀工具。虽然我们开发时可能是经常使用<code>axios</code>，但是实际上<code>Fetch API</code>也能做很多一样的事。并且使用<code>Fetch API</code>不需要安装<code>axios</code>，所以我们做一些小案例，但是需要调接口的话，<code>Fetch API</code>便是很好的选择，不需要安装<code>axios</code>，也不需要像XMLHttpRequest 对象那样子需要较多步骤。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>接口有需要可以到最后自取(express接口)</p><h3 id="分派请求"><a href="#分派请求" class="headerlink" title="分派请求"></a>分派请求</h3><p>只需要使用<code>fetch()</code>方法即可，传参为获取资源的URL。该方法返回一个<code>Promise</code>对象。(和<code>axios</code>使用非常像)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> r = fetch(<span class="hljs-string">&#x27;http://localhost:8088/getInfo&#x27;</span>)<br><br><span class="hljs-built_in">console</span>.log(r)<br><br>r.then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res)<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72e9dc5fe06f4f1481df43a07e35310b~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220604132403546"></p><h3 id="读取响应"><a href="#读取响应" class="headerlink" title="读取响应"></a>读取响应</h3><p>上面我们已经把响应结果打印出来了，但是并没有得到真正的响应体的数据。</p><p>这时候可以使用<code>text()</code>方法，这个方法会返回一个<code>Promise</code>对象，这个对象会<code>resolve</code>为读取资源的完整内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">fetch(<span class="hljs-string">&#x27;http://localhost:8088/getInfo?name=clz&#x27;</span>)<br>    .then(<span class="hljs-keyword">async</span> (res) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.text()<br>        <span class="hljs-built_in">console</span>.log(data)<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> data)<br>    &#125;)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03a8451581e04a29ac892d24da3ec015~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220611132502823"></p><p>从结果来看，发现这时候得到的数据是<code>string</code>类型的，之后还需要通过<code>JSON.parse()</code>来操作。很显然不太好，这个时候只需要不是使用<code>text()</code>方法，而是使用<code>json()</code>方法即可。(使用方式和<code>text()</code>方法一样)</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/597b7263d4f94c82960aa8fd5714d8c2~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220611132921936"></p><h3 id="请求失败"><a href="#请求失败" class="headerlink" title="请求失败"></a>请求失败</h3><p>请求失败的时候还是会正常执行<code>then</code>方法里的处理函数。(这里的失败是指服务器返回了响应，但是不是成功的请求。)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">fetch(<span class="hljs-string">&#x27;http://localhost:8088/getBadRequest&#x27;</span>)<br>    .then(<span class="hljs-keyword">async</span> (res) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.json()<br>        <span class="hljs-built_in">console</span>.log(data)<br>    &#125;)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206111414772.png" alt="image-20220611141429705"></p><p>如果服务器没有响应导致浏览器超时的话，这时候就不会再执行<code>then()</code>方法的处理函数，而是执行<code>catch()</code>方法的，因为这时候的<code>Promise</code>不再是<code>resolved</code>状态，而是<code>rejected</code>状态。(比如跨域时候)</p><p>后端接口注释掉<code>app.use(cors())</code>，不再处理跨域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">fetch(<span class="hljs-string">&#x27;http://localhost:8088/getBadRequest&#x27;</span>)<br>    .then(<span class="hljs-keyword">async</span> (res) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.json()<br>        <span class="hljs-built_in">console</span>.log(data)<br>    &#125;)<br>    .catch(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;catch()方法里的处理函数&#x27;</span>)<br>        <span class="hljs-built_in">console</span>.log(reason)<br>    &#125;)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ae2540a3b88488c95afaa7a9ecd4ef9~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220611142139336"></p><h3 id="POST方法"><a href="#POST方法" class="headerlink" title="POST方法"></a>POST方法</h3><p>上面我们直接使用<code>fetch()</code>方法就是<code>GET</code>请求，那么假如我们想要使用<code>POST</code>方法来进行新增数据之类的操作呢？</p><p><code>fetch</code>方法的第二个参数就是自定义选项，通过自定义选项就能实现<code>GET</code>请求之外的请求。比如使用<code>POST</code>方法的时候，自定义选项就需要<code>method</code>来确定请求方法，以及<code>body</code>来确定请求体的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span><br>&#125;<br><br>fetch(<span class="hljs-string">&#x27;http://localhost:8088/postInfo&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">body</span>: <span class="hljs-built_in">JSON</span>.stringify(data)<br>&#125;)<br>    .then(<span class="hljs-keyword">async</span> (res) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.json()<br>        <span class="hljs-built_in">console</span>.log(data)<br>    &#125;)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e46b910573ce453aa428e8c068ce4fb8~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220611151000558"></p><p>结果发现：请求得到的响应的状态码是400，提示信息是需要姓名和年龄，但是我们明明已经把姓名和年龄传过去了。这种时候，有可能是后端处理的问题，也有可能是前端传出去的格式的问题(即请求头的<code>Content-Type</code>)</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206111511462.png" alt="image-20220611151154399"></p><p>果不其然，我们传的数据是json形式的，但是<code>Content-Type</code>却不是json，所以我们的自定义选项还需要添加一个<code>headers</code>选项来设置选项的请求头。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span><br>&#125;<br><br><span class="hljs-keyword">const</span> headers = <span class="hljs-keyword">new</span> Headers(&#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json; charset=utf-8&#x27;</span><br>&#125;)<br><br>fetch(<span class="hljs-string">&#x27;http://localhost:8088/postInfo&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">body</span>: <span class="hljs-built_in">JSON</span>.stringify(data),<br>    headers<br>&#125;)<br>    .then(<span class="hljs-keyword">async</span> (res) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.json()<br>        <span class="hljs-built_in">console</span>.log(data)<br>    &#125;)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/390ad0d4a8fa48dabf39a8eeee45589f~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220611151402801"></p><h2 id="express接口"><a href="#express接口" class="headerlink" title="express接口"></a>express接口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>)<br><br><span class="hljs-keyword">const</span> app = express()<br><br><span class="hljs-comment">// 解决跨域</span><br>app.use(cors())<br><br><span class="hljs-comment">// 解析请求体的中间件(json格式)</span><br>app.use(express.json())<br><br><span class="hljs-comment">// GET请求</span><br>app.get(<span class="hljs-string">&#x27;/getInfo&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><br>  res.json(&#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;赤蓝紫&#x27;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">21</span><br>    &#125;,<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;获取信息成功&#x27;</span>,<br>  &#125;)<br>&#125;)<br><br><span class="hljs-comment">// 响应状态码为400</span><br>app.get(<span class="hljs-string">&#x27;/getBadRequest&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.status(<span class="hljs-number">400</span>).json(&#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-number">400</span>,<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;Bad Request&#x27;</span>,<br>  &#125;)<br>&#125;)<br><br><span class="hljs-comment">// POST请求</span><br>app.post(<span class="hljs-string">&#x27;/postInfo&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (req.body.name === <span class="hljs-literal">undefined</span> || req.body.age === <span class="hljs-literal">undefined</span>) &#123;<br>    res.status(<span class="hljs-number">400</span>).json(&#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">400</span>,<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;必须要有姓名、年龄&#x27;</span><br>    &#125;)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.json(&#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">data</span>: req.body<br>    &#125;)<br>  &#125;<br><br>&#125;)<br><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">8088</span><br>app.listen(port, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`http://localhost:<span class="hljs-subst">$&#123;port&#125;</span>`</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简单入门Fetch-API&quot;&gt;&lt;a href=&quot;#简单入门Fetch-API&quot; class=&quot;headerlink&quot; title=&quot;简单入门Fetch API&quot;&gt;&lt;/a&gt;简单入门Fetch API&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>从微信聊天框开始学习CSS属性filter</title>
    <link href="https://www.clzczh.top/2022/06/18/filter/"/>
    <id>https://www.clzczh.top/2022/06/18/filter/</id>
    <published>2022-06-18T04:54:52.000Z</published>
    <updated>2022-06-18T04:55:19.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从微信聊天框开始学习CSS属性filter"><a href="#从微信聊天框开始学习CSS属性filter" class="headerlink" title="从微信聊天框开始学习CSS属性filter"></a>从微信聊天框开始学习CSS属性filter</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>给别人发图片时，<code>Ctrl+A</code>选中图片发生了颜色反转。</p><p>下面重现一下</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181254212.gif" alt="filter"></p><p>至于为什么会联想到<code>filter</code>属性，主要是因为小时候经常玩手机的拍照功能，黑白滤镜、复古。。。</p><p>所以第一印象就是搜索CSS的滤镜属性，就找到了，所以来简单学习一下。(微信的那个具体怎么实现并不了解)</p><p>说是学习，但是其实就只是了解一下怎么使用而已。使用<code>filter</code>属性主要用法就是通过<code>Filter</code>函数来实现具体效果。</p><h2 id="invert"><a href="#invert" class="headerlink" title="invert()"></a>invert()</h2><p>刚开始就先从实现遇到的反转先。<code>invert()</code>函数反转输入图像，参数是转换的比例，值为<code>0%</code>表示无变化，值为<code>100%</code>表示完全反转。</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206112214442.gif" alt="filter"></p><p>超出<code>100%</code>之后也是和<code>100%</code>一样的效果。也就是说需要反转只需要设置CSS属性<code>filter</code>为<code>invert(100%)</code>即可，当然也不一定需要是<code>100%</code>。上面测试的是图像，但是实际上非图像该属性也是起作用的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">invert</span>(<span class="hljs-number">100%</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181254224.png" alt="image-20220611222043656"></p><p>上面的反转是不是很有意思。这是因为红色的rgb值为<code>(255, 0, 0)</code>，所以反转后的rgb值为<code>(0, 255, 255)</code>，即上面的效果。</p><h3 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h3><p>我们可以给html元素添加<code>filter: invert(100%)</code>，即可实现切换亮暗模式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">document</span>.documentElement.style.filter=<span class="hljs-string">&#x27;invert(100%)&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206112232412.gif" alt="filter"></p><p>可以使用该方法开启黑暗模式看pdf文件的(虽然有一些地方会有点怪)</p><h2 id="blur"><a href="#blur" class="headerlink" title="blur()"></a>blur()</h2><p>调整输入图像的模糊程度，参数可以设置为CSS长度(<code>px</code>、<code>em</code>等，不接受百分比)</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206121245538.png" alt="image-20220612124521327"></p><h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><p><code>filter</code>属性的<code>blur()</code>可以将模糊应用于元素。说到模糊，可能想到的应用就是自己制作一下有毛玻璃效果的背景图片了。接下来来耍一下。(在网上看到的效果，下面的例子也是参考网上的)</p><p>基本解构：</p><p>css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;https://i.loli.net/2019/11/17/GAYyzeKsiWjP5qO.jpg&#x27;</span>) no-repeat;<br>    <span class="hljs-attribute">background-size</span>: cover;<br>&#125;<br><br><span class="hljs-selector-class">.grass</span> &#123;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">72vw</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">36vh</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0.3px</span> <span class="hljs-number">0.7px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> / <span class="hljs-number">13%</span>), <span class="hljs-number">0</span> <span class="hljs-number">0.9px</span> <span class="hljs-number">1.7px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> / <span class="hljs-number">18%</span>), <span class="hljs-number">0</span> <span class="hljs-number">1.8px</span> <span class="hljs-number">3.5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> / <span class="hljs-number">22%</span>), <span class="hljs-number">0</span> <span class="hljs-number">3.7px</span> <span class="hljs-number">7.3px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> / <span class="hljs-number">28%</span>), <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> / <span class="hljs-number">40%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;grass&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181254567.png" alt="image-20220612132534829"></p><p>现在给<code>grass</code>盒子添加一下模糊度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">4px</span>);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206121329390.png" alt="image-20220612132921567"></p><p>但是结果和我们想象的不太一样，只有阴影有模糊。这是因为<code>filter</code>是将模糊等图形效果应用于元素，而后面的背景图片是该元素后面的<code>body</code>元素的，所以添加的模糊并不会添加到后面的背景图片中。</p><p>这时候，就轮到<code>filter</code>的好兄弟<code>backdrop-filter</code>登场了，它可以让你为一个元素后面区域添加图形效果（如模糊或颜色偏移）。值和<code>filter</code>的一样用法。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">backdrop-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">4px</span>);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206121354290.png" alt="image-20220612135449495"></p><h2 id="drop-shadow"><a href="#drop-shadow" class="headerlink" title="drop-shadow()"></a>drop-shadow()</h2><p>对输入图像应用阴影效果。(和<code>box-shadow</code>很相似，不过，<strong>在部分浏览器中通过<code>filter</code>可以提供硬件加速</strong>)</p><ul><li><p><code>offset-x</code>：设置阴影的水平偏移量</p></li><li><p><code>offset-y</code>：设置阴影的垂直偏移量</p></li><li><p><code>blur-radius</code>：设置阴影的模糊半径，值越大，越模糊，阴影也会更大、更淡</p></li><li><p><code>color</code>：颜色</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>    <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">drop-shadow</span>(<span class="hljs-number">4px</span> <span class="hljs-number">4px</span> <span class="hljs-number">6px</span> black);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3138398e857f479ab5d807ee4564c5dc~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220612151813219"></p><h2 id="复合函数"><a href="#复合函数" class="headerlink" title="复合函数"></a>复合函数</h2><p><code>Filter</code>函数可以任意组合来控制渲染。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">invert</span>(<span class="hljs-number">100%</span>) <span class="hljs-built_in">drop-shadow</span>(<span class="hljs-number">4px</span> <span class="hljs-number">4px</span> <span class="hljs-number">6px</span> black);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17a75ac95979471fa383b1d4bb1deaf3~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220612152120004"></p><p><code>filter</code>属性还有很多很有意思的用法，可以设置对比度、灰度等。这里就不再过多赘述了，有想了解的可以到官方文档查阅。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从微信聊天框开始学习CSS属性filter&quot;&gt;&lt;a href=&quot;#从微信聊天框开始学习CSS属性filter&quot; class=&quot;headerlink&quot; title=&quot;从微信聊天框开始学习CSS属性filter&quot;&gt;&lt;/a&gt;从微信聊天框开始学习CSS属性filter&lt;/</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://www.clzczh.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>rAF实现表格内容自动滚动</title>
    <link href="https://www.clzczh.top/2022/06/18/table-auto-scroll/"/>
    <id>https://www.clzczh.top/2022/06/18/table-auto-scroll/</id>
    <published>2022-06-18T04:53:55.000Z</published>
    <updated>2022-06-18T04:54:24.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rAF实现表格内容自动滚动"><a href="#rAF实现表格内容自动滚动" class="headerlink" title="rAF实现表格内容自动滚动"></a>rAF实现表格内容自动滚动</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>实习导师让我实现表格内容自动滚动，实际就是大屏项目可能会用上的。正好之前看到<code>rAF</code>的介绍，实际上也没用过，所以就用<code>rAF</code>来玩一波。</p><p><strong>目标</strong>：</p><ol><li>让表格的内容会自动滚动</li><li>鼠标悬浮，动画停止</li><li>到底后会自动回到顶部，继续滚动</li></ol><h2 id="element表格自带滚动"><a href="#element表格自带滚动" class="headerlink" title="element表格自带滚动"></a>element表格自带滚动</h2><p>首先呢，<code>element</code>的表格是自带了滚动效果的，但是需要小小的设置一下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mytable&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;mytable&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Date&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Name&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Address&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> tableData = reactive([</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-03&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-02&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-04&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-01&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-02&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-04&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-01&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-02&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-04&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-01&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">]);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.mytable</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">420px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181253320.png" alt="image-20220603093857433"></p><p>可以发现，这个时候超过表格的部分直接溢出来了。</p><p>这个时候可能会想：直接使用<code>overflow: auto;</code>不就能实现表格滚动了吗？但是，这个表格滚动效果并不是想要的表格内容滚动。表头也会滚不见。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db9f3e75855b4efda9fe95f4d6590e23~tplv-k3u1fbpfcp-zoom-1.image" alt="table"></p><p>然后，我们使用<code>Devtools</code>工具看一下：</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181253368.png" alt="image-20220603094900993"></p><p>发现上面红框框的元素高是<code>100%</code>，但是它们的父元素的高不是100%，所以外层的高并没有传过来。所以我们只需要把<code> el-scrollbar</code>的祖先元素的高设置为<code>100%</code>即可。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ea2daccad6a449cab89bd6f536a4eb1~tplv-k3u1fbpfcp-zoom-1.image" alt="table"></p><p>又有新问题出现了：表格有一部分内容被切掉了。</p><p>这时候我们仔细想一下就会发现，上面的滚动的只是表格内容，但是实际上我们把高度慢慢地传下来了，所以这个时候的滚动盒子<code> el-scrollbar</code>的高度也是整个表格的高度。所以我们需要将它的高度减掉表头的高度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.el-scrollbar</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">40px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/efeceed6d092494fb0435f7e607f7868~tplv-k3u1fbpfcp-zoom-1.image" alt="table"></p><p>这样子，前置任务就初步完成了。</p><h2 id="rAF介绍"><a href="#rAF介绍" class="headerlink" title="rAF介绍"></a>rAF介绍</h2><p>rAF：**<code>requestAnimationFrame</code>**，实际上就是一个函数，会告诉浏览器：希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。</p><p>优点：</p><ul><li><strong>由系统来决定回调函数的执行时机</strong>。如果显示器刷新的频率是60Hz，那么回调韩式就是每<code>1/60</code>s，即16.7ms执行一次。也就是说<code>rAF</code>会跟着显示器地刷新频率走，能保证回调函数在每一次的刷新间隔制备执行一次，这样就不会引起丢帧，动画更流畅。</li><li><strong>窗口没激活时，动画将暂停以提升性能和电池寿命</strong></li></ul><h2 id="实现自动滚动"><a href="#实现自动滚动" class="headerlink" title="实现自动滚动"></a>实现自动滚动</h2><h3 id="获取el-scrollbar-容器"><a href="#获取el-scrollbar-容器" class="headerlink" title="获取el-scrollbar 容器"></a>获取<code>el-scrollbar</code> 容器</h3><p>需要实现自动滚动，首先得获取<code>el-scrollbar</code> 容器。访问路径在<code>mytable -&gt; scrollBarRef -&gt; wrap$</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d94cc0aafdd54fbbbf39f9a4a48280ce~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220603184941374"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">onMounted(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; proxy &#125; = getCurrentInstance();<br><br>  <span class="hljs-keyword">const</span> mytable = proxy.$refs.mytable;<br><br>  <span class="hljs-keyword">const</span> el = mytable.scrollBarRef.wrap$;<br><br>  <span class="hljs-built_in">console</span>.log(el);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="编写动画方法，并使用rAF添加回调"><a href="#编写动画方法，并使用rAF添加回调" class="headerlink" title="编写动画方法，并使用rAF添加回调"></a>编写动画方法，并使用rAF添加回调</h3><p>首先，需要编写我们的滚动动画方法，很简单，只需要让滚动容器的<code>scrollTop</code>一直加就行了。但是，为了让这个动画不只是会执行一次，所以在最后还得使用<code>rAF</code>添加回调。当然，<strong>在<code>onMounted</code>钩子中也需要添加一次回调</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myscroll</span>(<span class="hljs-params">el</span>) </span>&#123;<br>  el.scrollTop += <span class="hljs-number">2</span>;<br>  <span class="hljs-built_in">window</span>.requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));<span class="hljs-comment">// 该动画方法需要携带参数，所以使用bind方法来携带参数</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181254740.gif" alt="table"></p><h3 id="鼠标悬浮，动画停止"><a href="#鼠标悬浮，动画停止" class="headerlink" title="鼠标悬浮，动画停止"></a>鼠标悬浮，动画停止</h3><p>我们上面已经初步让表格内容滚动起来了，接下来实现一下第二个步骤<strong>鼠标悬浮，动画停止</strong></p><p>停止rAF动画，需要获取调用<code>window.requestAnimationFrame()</code>方法时返回的 ID，和定时器方法一样，所以我们调用<code>window.requestAnimationFrame()</code>方法时，需要使用一个变量接住它，方便停止的时候使用。</p><p>然后，绑定鼠标事件：<code>mouseenter</code>：动画停止，<code>mouseleave</code>：继续动画。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> rAFid;<br><br>onMounted(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; proxy &#125; = getCurrentInstance();<br><br>  <span class="hljs-keyword">const</span> mytable = proxy.$refs.mytable;<br><br>  <span class="hljs-keyword">const</span> el = mytable.$refs.scrollBarRef.wrap$;<br><br>  <span class="hljs-built_in">console</span>.log(el);<br><br>  rAFid = <span class="hljs-built_in">window</span>.requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));<br><br>  el.addEventListener(<span class="hljs-string">&quot;mouseenter&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">window</span>.cancelAnimationFrame(rAFid);<br>  &#125;);<br><br>  el.addEventListener(<span class="hljs-string">&quot;mouseleave&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    rAFid = <span class="hljs-built_in">window</span>.requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));<br>  &#125;);<br>&#125;);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myscroll</span>(<span class="hljs-params">el</span>) </span>&#123;<br>  el.scrollTop += <span class="hljs-number">2</span>;<br>  rAFid = <span class="hljs-built_in">window</span>.requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el)); <span class="hljs-comment">// 该动画方法需要携带参数，所以使用bind方法来携带参数</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181254701.gif" alt="table"></p><h3 id="到底后会自动回到顶部，继续滚动"><a href="#到底后会自动回到顶部，继续滚动" class="headerlink" title="到底后会自动回到顶部，继续滚动"></a>到底后会自动回到顶部，继续滚动</h3><p>这里我们需要判断是否到底了，所以需要使用<code>可视高度+距离顶部 &gt;= 整个高度</code>的方式，即<code>el.clientHeight + el.scrollTop &gt;= el.scrollHeight</code>.</p><p>我们判断到底后，就使用原生js的<code>scrollTo</code>方法，就能让它回到顶部。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myscroll</span>(<span class="hljs-params">el</span>) </span>&#123;<br>  el.scrollTop += <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (el.clientHeight + el.scrollTop &gt;= el.scrollHeight) &#123;<br>    <span class="hljs-comment">// cancelAnimationFrame(rAFid);</span><br>    el.scrollTo(&#123;<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,<br>    &#125;);<br>  &#125;<br><br>  rAFid = requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181254963.gif" alt="202206041101159.gif"></p><p>可以看到已经实现了，而且是无缝衔接。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mytable&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;mytable&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Date&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Name&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Address&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; reactive, getCurrentInstance, onMounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> tableData = reactive([</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-03&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-02&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-04&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-01&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-02&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-04&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-02&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  &#123;</span><br><span class="javascript">    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2016-05-04&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;No. 189, Grove St, Los Angeles&quot;</span>,</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">]);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">let</span> rAFid;</span><br><span class="javascript"></span><br><span class="javascript">onMounted(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">  <span class="hljs-keyword">const</span> &#123; proxy &#125; = getCurrentInstance();</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> mytable = proxy.$refs.mytable;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> el = mytable.$refs.scrollBarRef.wrap$;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(el);</span><br><span class="javascript"></span><br><span class="javascript">  rAFid = <span class="hljs-built_in">window</span>.requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));</span><br><span class="javascript"></span><br><span class="javascript">  el.addEventListener(<span class="hljs-string">&quot;mouseenter&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.cancelAnimationFrame(rAFid);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><br><span class="javascript">  el.addEventListener(<span class="hljs-string">&quot;mouseleave&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    rAFid = <span class="hljs-built_in">window</span>.requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myscroll</span>(<span class="hljs-params">el</span>) </span>&#123;</span><br><span class="javascript">  el.scrollTop += <span class="hljs-number">2</span>;</span><br><span class="javascript">  <span class="hljs-keyword">if</span> (el.clientHeight + el.scrollTop &gt;= el.scrollHeight) &#123;</span><br><span class="javascript">    el.scrollTo(&#123;</span><br><span class="javascript">      <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><br><span class="javascript">  rAFid = requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.mytable</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">420px</span>;</span><br><span class="css">  :<span class="hljs-built_in">deep</span>(.el-table) &#123;</span><br><span class="css">    height: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.el-table__inner-wrapper</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-class">.el-table__body-wrapper</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.el-scrollbar</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">40px</span>);</span><br><span class="css">    &#125;</span><br><span class="css">  &#125;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="额外研究"><a href="#额外研究" class="headerlink" title="额外研究"></a>额外研究</h2><p>上面已经能够实现表格内容自动滚动了，但是有时候需要突出排在前面的话，可能会到顶部需要慢慢地回滚到顶部，再重新自动滚动。也就是说，<code>scrollTo</code>方法的参数添加<code> behavior: &quot;smooth&quot;</code>来让它圆滑的回滚到顶部。</p><p>但是，我们添加了这个选项后，反而不回滚了。这是因为动画一直都还在，回滚速度又不够动画的。所以我们回滚前还得把动画给停止掉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myscroll</span>(<span class="hljs-params">el</span>) </span>&#123;<br>  el.scrollTop += <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (el.clientHeight + el.scrollTop &gt;= el.scrollHeight) &#123;<br>    <span class="hljs-built_in">window</span>.cancelAnimationFrame(rAFid);<br><br>    el.scrollTo(&#123;<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;smooth&quot;</span>,<br>    &#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    rAFid = requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181254759.gif" alt="table"></p><p>回滚后，动画停了，所以我们还得添加一个定时器，回滚后停一会，再重新开始动画。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myscroll</span>(<span class="hljs-params">el</span>) </span>&#123;<br>  el.scrollTop += <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (el.clientHeight + el.scrollTop &gt;= el.scrollHeight) &#123;<br>    <span class="hljs-built_in">window</span>.cancelAnimationFrame(rAFid);<br><br>    el.scrollTo(&#123;<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;smooth&quot;</span>,<br>    &#125;);<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      rAFid = requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    rAFid = requestAnimationFrame(myscroll.bind(<span class="hljs-literal">null</span>, el));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181254134.gif" alt="table"></p><p>最后，还得添加一个钩子，清除<code>rAF</code>动画，避免内存泄漏等问题的发生。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">onBeforeUnmount(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">window</span>.cancelAnimationFrame(rAFid);<br>&#125;);<br></code></pre></td></tr></table></figure><p>参考：</p><ul><li>requestAnimationFram优势</li><li>MDN</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;rAF实现表格内容自动滚动&quot;&gt;&lt;a href=&quot;#rAF实现表格内容自动滚动&quot; class=&quot;headerlink&quot; title=&quot;rAF实现表格内容自动滚动&quot;&gt;&lt;/a&gt;rAF实现表格内容自动滚动&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
    <category term="动画" scheme="https://www.clzczh.top/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Express+FetchAPI 简单实践Cookie</title>
    <link href="https://www.clzczh.top/2022/06/18/cookie-use/"/>
    <id>https://www.clzczh.top/2022/06/18/cookie-use/</id>
    <published>2022-06-18T04:52:26.000Z</published>
    <updated>2022-06-18T04:53:05.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Express-FetchAPI-简单实践Cookie"><a href="#Express-FetchAPI-简单实践Cookie" class="headerlink" title="Express+FetchAPI 简单实践Cookie"></a>Express+FetchAPI 简单实践Cookie</h1><blockquote><p>本文并不是讲解Cookie在实际项目中的应用,而只是<strong>简单</strong>地实践一下,自动保存Cookie,然后后续请求自动携带Cookie，主要是通过使用刚学到的fetch API和差不多快忘记的express来实践。</p></blockquote><p>Cookie 用于在客户端存储会话信息。它通过服务器响应请求时，响应头的<code>Set-Cookie</code>字段来设置 Cookie。<strong>Cookie 是服务端生成，保存在客户端</strong></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181252960.png" alt="image-20220529091708813"></p><p>这个 HTTP 响应会设置一个名为<code>name</code>,值为<code>value</code>的 Cookie。<strong>名和值在发送时都会经过 URL 编码</strong>。<br>浏览器会存储这些会话信息，并且<strong>之后的每个请求都会通过请求头的<code>Cookie</code>字段再将它们发回服务器</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">GET /index.jsl HTTP/1.1<br>Cookie: name=value<br>Other-header: other-header-value<br></code></pre></td></tr></table></figure><p>发回给服务器的<code>Cookie</code>字段可用于唯一标识发送请求的客户端。</p><p>Cookie 有大小限制，一般 4K 左右。</p><h2 id="Cookie-的构成"><a href="#Cookie-的构成" class="headerlink" title="Cookie 的构成"></a>Cookie 的构成</h2><ul><li><strong>名称</strong>(<code>name</code>=value)：Cookie 的名称。不区分大小写，必须经过 URL 编码。</li><li><strong>值</strong>(name=<code>value</code>)：Cookie 的值。必须经过 URL 编码</li><li><strong>域</strong>(<code>Domain</code>=clzczh.top)：Cookie 有效的域。发送到该域名的所有请求都会包含对应的 Cookie。如果不明确设置，则默认为设置 Cookie 的域。</li><li><strong>路径</strong>(<code>Path</code>=/)：请求 URL 中包含此路径才会携带 Cookie 发送请求。</li><li><strong>过期时间</strong>(<code>Expires</code>=Date)：删除 Cookie 的时间戳，用于设置删除 Cookie 的时间，这个值是 GMT 格式（Wdy, DD-Mon-YYYY HH:MM:SS GMT）。当到达该时间后，就会删除 Cookie；没到达该时间时，即使关闭浏览器，Cookie 还会保留。<strong>把过期时间设置为过去的时间会立即删除 Cookie</strong>。默认只在浏览器关闭前有效</li><li><strong>安全标志</strong>(<code>Secure</code>)：只在 HTTPS 安全连接时才可以发送 Cookie</li><li><strong>禁止 JS 读取 Cookie</strong>(<code>HttpOnly</code>)：通过 JS 脚本无法获取 Cookie，可以有效地防止<code>XSS攻击</code>。</li></ul><p>Cookie 中实际发送给服务器的只有名/值对，其他部分只是告诉浏览器什么时候应该在请求中携带 Cookie 等。</p><h2 id="Cookie-的简单实践"><a href="#Cookie-的简单实践" class="headerlink" title="Cookie 的简单实践"></a>Cookie 的简单实践</h2><p>简单地说一下下面的代码：</p><ol><li>express 实现的后端服务</li><li>通过<code>app.post</code>开启 post 接口</li><li><code>res.cookie</code>设置 Cookie，第一个参数是 Cookie 名，第二个参数是 Cookie 值，第三个参数是 Cookie 的限制对象(如过期时间<code>expires</code>)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cors&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.use(cors());<br><br>app.post(<span class="hljs-string">&quot;/token&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  <span class="hljs-comment">// 设置Cookie</span><br>  res.cookie(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, &#123;<br>    <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">expires</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2030</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>),<br>  &#125;);<br><br>  res.status(<span class="hljs-number">200</span>).json(&#123;<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;获取token成功&quot;</span>,<br>  &#125;);<br>&#125;);<br><br>app.get(<span class="hljs-string">&quot;/getInfo&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.json(&#123;<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;成功&quot;</span>,<br>  &#125;);<br>&#125;);<br><br>app.listen(<span class="hljs-number">8088</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:8088&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>前端试一下，能不能接收到<code>Cookie</code>。(使用 Fetch API，免装<code>axios</code>，实际使用和<code>axios</code>差不多，简单使用可查看之前的文章)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>获取token<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test-btn&quot;</span>&gt;</span>测试自动携带Cookie<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="javascript">    btn.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, fetchData);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> testBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test-btn&quot;</span>);</span><br><span class="javascript">    testBtn.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, getInfo);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      fetch(<span class="hljs-string">&quot;http://localhost:8088/token&quot;</span>, &#123;</span><br><span class="javascript">        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="javascript">      &#125;).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-comment">// 获取响应的数据</span></span><br><span class="javascript">        res.json().then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      fetch(<span class="hljs-string">&quot;http://localhost:8088/getInfo&quot;</span>).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(res);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dfbee0b4b3684e6883fcf9bc9e202e9e~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220529093428201"></p><p>看似万事大吉了，实际上，还是有问题的：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aad33e9139234f3c89f48908b59dbed4~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220529093530601"></p><p>Cookie压根没存到客户端。</p><h3 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h3><ol><li><p>使用<code>fetch</code>发送请求时，设置<code>credentials</code>为<code>include</code>(<code>axios</code>则是设置<code>withCredentials</code>为<code>true</code>)，这样子跨域请求时夜会发送Cookie(也可以用来保存跨域请求响应的Cookie)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">fetch(<span class="hljs-string">&#x27;http://localhost:8088/token&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;include&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d3d815f8c7f416bab0225be8d5eaed8~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220529100902883"></p></li><li><p>当我们设置<code>credentials</code>为<code>include</code>时，</p><ul><li>我们解决跨域时的<code>Access-Control-Allow-Origin</code>不应该还是通配符，而应该是具体的地址，所以<strong>后端express</strong>应该调整一下不再使用<code>cors</code>中间件，而是自己设置响应头</li><li><code>Access-Control-Allow-Credentials</code>也应该设置为<code>true</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用cors中间件部分换成下面的形式</span><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.header(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;http://127.0.0.1:5501&#x27;</span>)<br>  res.header(<span class="hljs-string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="hljs-string">&#x27;true&#x27;</span>)<br>  next()<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e931957410643ae8ee4245196c31185~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220529103925082"></p></li><li><p>上面已经的警告已经说了：<code>Cookie</code>有一个<code>SameSite</code>属性，它默认是<code>Lax</code>，要求响应是对顶层导航的响应(<b style="color: red">这个顶层导航并不是很懂，有懂得小伙伴欢迎评论</b>)。先按她的提示，设置Cookie的<code>SameSite</code>属性为<code>none</code>(安全性会下降)。<strong>有<code>SameSite</code>属性的话，也必须要有<code>Secure</code>属性</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 设置Cookie</span><br>res.cookie(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, &#123;<br>  <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">expires</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2030</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>),<br>  <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">sameSite</span>: <span class="hljs-string">&#x27;none&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181252953.png" alt="image-20220529105604140"></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205291056522.png" alt="image-20220529105657457"></p><p>最终代码：</p><p>express：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cors&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.header(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;http://127.0.0.1:5501&#x27;</span>)<br>  res.header(<span class="hljs-string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="hljs-string">&#x27;true&#x27;</span>)<br>  next()<br>&#125;)<br><br>app.post(<span class="hljs-string">&quot;/token&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br><br>  <span class="hljs-comment">// 设置Cookie</span><br>  res.cookie(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, &#123;<br>    <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">expires</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2030</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>),<br>    <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">sameSite</span>: <span class="hljs-string">&#x27;none&#x27;</span><br>  &#125;);<br><br>  res.status(<span class="hljs-number">200</span>).json(&#123;<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;获取token成功&quot;</span>,<br>  &#125;);<br>&#125;);<br><br>app.get(<span class="hljs-string">&quot;/getInfo&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.json(&#123;<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;成功&quot;</span>,<br>  &#125;);<br>&#125;);<br><br>app.listen(<span class="hljs-number">8088</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:8088&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>获取token<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test-btn&quot;</span>&gt;</span>测试自动携带Cookie<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;btn&#x27;</span>)</span><br><span class="javascript">        btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, fetchData)</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> testBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test-btn&#x27;</span>)</span><br><span class="javascript">        testBtn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, getInfo)</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            fetch(<span class="hljs-string">&#x27;http://localhost:8088/token&#x27;</span>, &#123;</span><br><span class="javascript">                <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;include&#x27;</span></span><br><span class="javascript">            &#125;)</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            fetch(<span class="hljs-string">&#x27;http://localhost:8088/getInfo&#x27;</span>, &#123;</span><br><span class="javascript">                <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;include&#x27;</span></span><br><span class="javascript">            &#125;)</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2"></a>解决方案2</h3><p>上面的解决方案1,非常的麻烦,还把Cookie的<code>SameSite</code>属性改成<code>None</code>了,安全性也会下降一点</p><p>实际上呢,我们有一个更简单的解决方案,只需要把他们变成不跨域就行了。</p><p>用<code>express</code>来测试的话,就是把之前的html代码放到<code>express</code>下的<code>public</code>文件夹里,</p><p>然后通过<code>app.use(express.static(__dirname + &#39;/public&#39;))</code>将静态文件目录设置为<code>项目根目录+/public</code></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181252820.png" alt="image-20220529110925343"></p><p>然后,访问<code>http://localhost:8088</code>,就是我们写的html,不跨域,自然就没有解决方案1中出现的问题了.</p><p>当然,只看上面的例子的话,好像是用解决方案2的话,前后端就不能很好的分离了.其实并不是,我们可以通过<code>nginx</code>的代理来解决前后端的跨域问题.</p><p>可以使用<code>Vue</code>来简单实践代理能否解决这个保存携带Cookie问题.</p><p>   首先呢?我们需要修改配置文件,实现代理.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineConfig(&#123;<br>  <span class="hljs-attr">plugins</span>: [vue()],<br>  <span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-comment">// 实现其他设备能访问本机开启的服务</span><br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,<br><br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8088&#x27;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">rewrite</span>: <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> path.replace(<span class="hljs-regexp">/^\/api/</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>fetch API的请求地址就不再需要去到后端的那个接口地址了,而是变成<code>/api</code>即可,这样子代理就会把这个请求转发给真实服务器.</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;fetchData&quot;</span>&gt;</span>获取token<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;getInfo&quot;</span>&gt;</span>测试自动携带Cookie<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">  fetch(<span class="hljs-string">&quot;/api/token&quot;</span>, &#123;</span><br><span class="javascript">    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="javascript">  &#125;).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// 获取响应的数据</span></span><br><span class="javascript">    res.json().then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">  fetch(<span class="hljs-string">&quot;/api/getInfo&quot;</span>).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(res);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181252095.png" alt="image-20220529113512641"></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205291135722.png" alt="image-20220529113535623"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Express-FetchAPI-简单实践Cookie&quot;&gt;&lt;a href=&quot;#Express-FetchAPI-简单实践Cookie&quot; class=&quot;headerlink&quot; title=&quot;Express+FetchAPI 简单实践Cookie&quot;&gt;&lt;/a&gt;Expre</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Webpack搭建简单的TypeScript脚手架</title>
    <link href="https://www.clzczh.top/2022/06/18/webpack-build-typescript/"/>
    <id>https://www.clzczh.top/2022/06/18/webpack-build-typescript/</id>
    <published>2022-06-18T04:51:29.000Z</published>
    <updated>2022-06-18T04:52:02.274Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Webpack搭建简单的TypeScript脚手架"><a href="#Webpack搭建简单的TypeScript脚手架" class="headerlink" title="Webpack搭建简单的TypeScript脚手架"></a>Webpack搭建简单的TypeScript脚手架</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>这里的脚手架只是指能更方便学习TypeScript的基础工具<br>简单入门了一下Typescript(可能还没入门)，学习TypeScript并不能直接运行查看结果，需要<code>tsc xxx.ts</code>将TS编译出JS才能执行，这样子很明显不是很方便。</p></blockquote><p>虽然我们也可以在TypeScript中文网的练习平台写，直接看对比编译出来的JS代码，但是实际看代码运行结果还是需要点击运行按钮，去到新页面，再打开控制台。</p><p>所以为了很方便地学习TS，搭建一个简单的TypeScript脚手架很有必要</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><p><code>npm init -y</code>：对项目进行初始化操作对包进行管理。(会生成默认的<code>package.json</code>文件)</p><p>添加<code>src</code>目录，后续的代码在<code>src</code>目录下进行编写</p><h3 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h3><p><code>npm install webpack webpack-cli</code></p><p>添加Webpack配置文件<code>webpack.config.js</code>，设置入口文件、出口文件地址。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-comment">// 开发模式</span><br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br><br>    <span class="hljs-comment">// 入口文件是src目录下的`index.js`文件</span><br>    <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">&#x27;src&#x27;</span>, <span class="hljs-string">&#x27;index.js&#x27;</span>),<br>    <br>     <br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-comment">// 把所有依赖的模块合并输出到一个 index.js 文件</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;index.js&#x27;</span>,<br><br>        <span class="hljs-comment">// 输出文件都放到 dist 目录下</span><br>        <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="初次测试"><a href="#初次测试" class="headerlink" title="初次测试"></a>初次测试</h3><p>编写一下<code>index.js</code>文件，测试一下前面的配置是否正确。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;赤蓝紫&#x27;</span>)<br></code></pre></td></tr></table></figure><p>执行命令<code>npx webpack</code><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2840f6380f4b45d788d234a64b4f2767~tplv-k3u1fbpfcp-zoom-1.image"></p><p>执行编译生成的文件，能得到正确的结果就表示前面的步骤正确了。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eee2a95b5d0d4a9888f1a4d24a57a507~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="生成html"><a href="#生成html" class="headerlink" title="生成html"></a>生成html</h3><p>上面我们已经能够使用Webpack编译打包js代码了，但是生成的是js文件，还得去执行它。所以接下来我们需要能够开启一个服务。开启服务之前得先让它能够生成html文件。</p><ol><li><p>安装依赖<br><code>npm install html-webpack-plugin</code></p></li><li><p>修改配置，引入并使用插件<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d68ce145b6bd4a62b133cd28811ab497~tplv-k3u1fbpfcp-zoom-1.image"></p></li><li><p>执行<code>npx webpack</code><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f317369984bb4005a8c83cb70decc331~tplv-k3u1fbpfcp-zoom-1.image"></p></li></ol><h3 id="开启服务器"><a href="#开启服务器" class="headerlink" title="开启服务器"></a>开启服务器</h3><ol><li>安装<code>webpack-dev-server</code>：<code>npm install webpack-dev-server</code></li><li>执行<code>npx webpack serve</code></li><li>打开<a href="http://localhost:8080/">http://localhost:8080/</a></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/060925f181a54875a24a55ad88a529ce~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="处理TS文件"><a href="#处理TS文件" class="headerlink" title="处理TS文件"></a>处理TS文件</h3><p>现在我们的脚手架还是不能处理TS文件的。</p><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./myts.ts&#x27;</span><br></code></pre></td></tr></table></figure><p>myts.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> age: <span class="hljs-built_in">number</span> = <span class="hljs-number">21</span><br><span class="hljs-built_in">console</span>.log(age)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c64caf42202844dd903dfd1f13d6b030~tplv-k3u1fbpfcp-zoom-1.image"></p><p>处理TS文件其实也不难，只需要两个步骤就行：</p><ol><li>安装<code>ts-loader</code>，<code>npm install ts-loader</code></li><li>修改Webpack配置文件<code>webpack.config.js</code>，增加<code>module</code>节点<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>        &#123;<br>            <span class="hljs-comment">// ts后缀名的文件会使用ts-loader</span><br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.ts$/</span>,<br>            use: [<span class="hljs-string">&quot;ts-loader&quot;</span>]<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li>增加TS配置文件，空文件也行，只是一定要有</li></ol><p>再次执行<code>npx webpack serve</code><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ddc46ad1ea64f5b9cff7d84936a0e84~tplv-k3u1fbpfcp-zoom-1.image"></p><p>然后，还可稍微修改一下<code>package.json</code>文件，设置<code>npx webpack serve</code>命令为更常用的<code>npm run dev</code><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e432893f879c416491fa4d0188b8fbde~tplv-k3u1fbpfcp-zoom-1.image"></p><p>简单的TS脚手架这样子就结束了。之后就能更方便的学习TS了。</p><p>完整版Webpack配置献上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>)<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>)<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>    <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;index.js&quot;</span>),<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>        <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">&quot;dist&quot;</span>)<br>    &#125;,<br>    <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> HtmlWebpackPlugin()],<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-comment">// ts后缀名的文件会使用ts-loader</span><br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.ts$/</span>,<br>                use: [<span class="hljs-string">&quot;ts-loader&quot;</span>]<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Webpack搭建简单的TypeScript脚手架&quot;&gt;&lt;a href=&quot;#Webpack搭建简单的TypeScript脚手架&quot; class=&quot;headerlink&quot; title=&quot;Webpack搭建简单的TypeScript脚手架&quot;&gt;&lt;/a&gt;Webpack搭建简单</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Webpack" scheme="https://www.clzczh.top/tags/Webpack/"/>
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript查漏补缺(基础类型)</title>
    <link href="https://www.clzczh.top/2022/06/18/typescript-9/"/>
    <id>https://www.clzczh.top/2022/06/18/typescript-9/</id>
    <published>2022-06-18T04:50:53.000Z</published>
    <updated>2022-06-18T04:51:15.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript查漏补缺-基础类型"><a href="#TypeScript查漏补缺-基础类型" class="headerlink" title="TypeScript查漏补缺(基础类型)"></a>TypeScript查漏补缺(基础类型)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>TypeScript 入门教程看完了，大部分都按自己的理解来做了下笔记输出。但是，总感觉有遗漏的知识点。于是，找了一些大佬的博客，来查漏补缺一下。(但是这里只记录一下基本类型的，因为其他部分暂时看的还有点云里雾里)</p><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>主要补充之前的笔记中没有的讲到的类型。</p><h3 id="unknown类型"><a href="#unknown类型" class="headerlink" title="unknown类型"></a>unknown类型</h3><p><strong><code>unknown</code>类型是<code>any</code>类型对应的安全类型。</strong></p><p>**所有类型都可以赋值给<code>any</code>，也可以赋值给<code>unknown</code>**。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// unknown</span><br><span class="hljs-keyword">let</span> myunknown: unknown<br><br>myunknown = <span class="hljs-number">123</span><br>myunknown = <span class="hljs-string">&#x27;hello&#x27;</span><br><br><span class="hljs-comment">// any</span><br><span class="hljs-keyword">let</span> myany: <span class="hljs-built_in">any</span><br><br>myany = <span class="hljs-number">123</span><br>myany = <span class="hljs-string">&#x27;hello&#x27;</span><br><br><span class="hljs-comment">// number</span><br><span class="hljs-keyword">let</span> mynumber: <span class="hljs-built_in">number</span><br><br>mynumber = <span class="hljs-number">123</span><br>mynumber = <span class="hljs-string">&#x27;hello&#x27;</span>  <span class="hljs-comment">// 报错：不能将类型“string”分配给类型“number”。</span><br></code></pre></td></tr></table></figure><p><strong><code>any</code>类型能被赋值给任意类型(<code>any</code>、<code>unknown</code>、<code>number</code>等，<code>unknown</code>类型只能被赋值给<code>unknown</code>、<code>any</code>类型)</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// unknown</span><br><span class="hljs-keyword">let</span> myunknown: unknown<br><br><span class="hljs-keyword">let</span> value1: unknown = myunknown<br><span class="hljs-keyword">let</span> value2: <span class="hljs-built_in">any</span> = myunknown<br><span class="hljs-keyword">let</span> value3: <span class="hljs-built_in">number</span> = myunknown  <span class="hljs-comment">// 报错：不能将类型“unknown”分配给类型“number”。</span><br><br><br><span class="hljs-comment">// any</span><br><span class="hljs-keyword">let</span> myany: <span class="hljs-built_in">any</span><br><br><span class="hljs-keyword">let</span> value4: unknown = myany<br><span class="hljs-keyword">let</span> value5: <span class="hljs-built_in">any</span> = myany<br><span class="hljs-keyword">let</span> value6: <span class="hljs-built_in">number</span> = myany <br></code></pre></td></tr></table></figure><p><strong>对<code>any</code>类型的值进行操作无需检查，<code>unknown</code>类型需要检查</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// unknown</span><br><span class="hljs-keyword">let</span> myunknown: unknown<br><span class="hljs-built_in">console</span>.log(myunknown.name) <span class="hljs-comment">// 报错：类型“unknown”上不存在属性“name”。</span><br><br><span class="hljs-comment">// any</span><br><span class="hljs-keyword">let</span> myany: <span class="hljs-built_in">any</span><br><span class="hljs-built_in">console</span>.log(myany.name)<br><br></code></pre></td></tr></table></figure><p>上面的例子简单讲一下本人的理解：任意类型<code>any</code>顾名思义，值可以是任意类型，也就包括是对象，而对象可能会有<code>name</code>，所以就不会报错。但是，<code>unknown</code>类型就会不知道该类型究竟存储了什么类型的值，虽然它也可能是对象，但是为了安全着想，会报错。**<code>unknown</code>类型是<code>any</code>类型对应的安全类型。**</p><h3 id="void类型"><a href="#void类型" class="headerlink" title="void类型"></a>void类型</h3><p><code>void</code>类型表示没有任何类型。一般用来声明没有返回值的函数。(实际上，返回<code>undefined</code>和<code>null</code>也是可行的，<code>void</code>类型更像是不会返回有用的值)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span> </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br>&#125;<br><br>sayHello()<br></code></pre></td></tr></table></figure><p>但是，这里又有一个疑问：函数没有返回值时，默认返回<code>undefined</code></p><p>那么，声明函数时的<code>void</code>类型和<code>undefined</code>类型有什么区别呢？</p><h4 id="返回值为undefined类型必须有返回值"><a href="#返回值为undefined类型必须有返回值" class="headerlink" title="返回值为undefined类型必须有返回值"></a>返回值为<code>undefined</code>类型必须有返回值</h4><p>虽然**函数没有返回值时，默认返回<code>undefined</code>**，但是当我们指定函数的返回值为<code>undefined</code>类型时，没有返回值会报错。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span> </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(sayHello())<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>): <span class="hljs-title">undefined</span> </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hi&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0797eb0a70284717a9c5b18e6382eb8a~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="undefined能被赋值给void，但void不能赋值给undefined"><a href="#undefined能被赋值给void，但void不能赋值给undefined" class="headerlink" title="undefined能被赋值给void，但void不能赋值给undefined"></a><code>undefined</code>能被赋值给<code>void</code>，但<code>void</code>不能赋值给<code>undefined</code></h4><p><code>void</code>类型不能赋值给<code>undefined</code>这是符合正常的情况的：即只能赋值给自己和<code>any</code>类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span> </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> s1: <span class="hljs-literal">undefined</span> = sayHello()    <span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">const</span> s2: <span class="hljs-built_in">void</span> = sayHello()<br><span class="hljs-keyword">const</span> s3: <span class="hljs-literal">null</span> = sayHello()         <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181250687.png"></p><p>但是，有例外情况：<code>undefined</code>可以被赋值给<code>void</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> s1: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">const</span> s2: <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><p>顺带提一下：<code>null</code>和<code>undefined</code>的关系还是依然难解难分</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> s1: <span class="hljs-literal">null</span> = <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">const</span> s2: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">null</span> <br></code></pre></td></tr></table></figure><h3 id="never类型"><a href="#never类型" class="headerlink" title="never类型"></a>never类型</h3><p><code>never</code>类型表示永不存在的值的类型。如抛出异常或不会有返回值的函数的返回值类型。</p><p>也就是说：如果看到<code>never</code>类型，很有可能是代码出问题了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errFunc</span>(<span class="hljs-params"></span>): <span class="hljs-title">never</span> </span>&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;clz&#x27;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">infiniteLoop</span>(<span class="hljs-params"></span>): <span class="hljs-title">never</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看下官方提示(VSCode翻译版)<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fb5d9ee945c47539792a6a404600b93~tplv-k3u1fbpfcp-zoom-1.image"></p><p>那么，<code>never</code>类型有什么用途呢？毕竟按上面的写法的话，就像是只能手动制造bug一样。<br>在TS中，<strong>可以利用<code>never</code>类型来实现详细的检查</strong>。</p><p>实例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> Nickname = <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkNickname</span>(<span class="hljs-params">nickname: Nickname</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> nickname === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`你的昵称是string类型<span class="hljs-subst">$&#123;nickname&#125;</span>`</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> nickname === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`你的昵称是number类型<span class="hljs-subst">$&#123;nickname&#125;</span>`</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;请检查类型&#x27;</span>)<br>    &#125;<br>&#125;<br><br>checkNickname(<span class="hljs-string">&#x27;赤蓝紫&#x27;</span>)<br><br>checkNickname(<span class="hljs-number">123</span>)<br><br>checkNickname(<span class="hljs-literal">true</span>)     <br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c36989148cb444879fb566ee3fa465a9~tplv-k3u1fbpfcp-zoom-1.image"></p><p>从上面的例子中，可以看到<code>checkNickname</code>只是接受<code>string</code>和<code>number</code>类型，当我们传<code>boolean</code>类型的时候，会在编译期间报错。</p><p>但是，当同事修改<code>Nickname</code>的类型为<code>string | number | boolean</code>时，而且没修改<code>checkNickname</code>的逻辑的话，就会出问题。<br><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181250709.png"></p><p>可以发现：我们传参为<code>boolean</code>时，会在运行时抛出我们自定义的错误，但是再编译时没法检测出问题。这时候就能利用<code>never</code>来实现编译时就检测出问题。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c862f2c547394b80a592d252acc40f0b~tplv-k3u1fbpfcp-zoom-1.image"></p><p>上面的例子中，<code>else</code>分支的<code>nickname</code>会被收窄为<code>boolean</code>类型，而<code>boolean</code>类型无法被赋值给<code>never</code>类型，所以会出现编译错误，就能够提前检测出错误，避免很多没必要的问题。</p><p><strong>使用<code>never</code>类型能够避免新增联合类型，但是没有对应实现的情况</strong></p><p>参考链接：</p><ul><li><a href="https://juejin.cn/post/6872111128135073806">一份不可多得的 TS 学习指南（1.8W字）</a></li><li><a href="https://www.codercto.com/a/103516.html">TypeScript never 类型</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TypeScript查漏补缺-基础类型&quot;&gt;&lt;a href=&quot;#TypeScript查漏补缺-基础类型&quot; class=&quot;headerlink&quot; title=&quot;TypeScript查漏补缺(基础类型)&quot;&gt;&lt;/a&gt;TypeScript查漏补缺(基础类型)&lt;/h1&gt;&lt;h2</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>攀爬TS之路(八)    泛型</title>
    <link href="https://www.clzczh.top/2022/06/18/typescript-8/"/>
    <id>https://www.clzczh.top/2022/06/18/typescript-8/</id>
    <published>2022-06-18T04:50:17.000Z</published>
    <updated>2022-06-18T04:50:37.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攀爬TS之路-八-泛型"><a href="#攀爬TS之路-八-泛型" class="headerlink" title="攀爬TS之路(八)    泛型"></a>攀爬TS之路(八)    泛型</h1><blockquote><p>泛型是指在定义函数、接口或类时，不预先指定具体的类型，而是在使用的时候再指定类型的一种特性。</p></blockquote><h2 id="泛型的简单使用"><a href="#泛型的简单使用" class="headerlink" title="泛型的简单使用"></a>泛型的简单使用</h2><p>先来一个简单的例子，加深了解。<br>目标：创建一个函数<code>createArr</code>，实现创建一个指定长度的数组。第一个参数是数组，第二个参数是数组每一项的值。</p><p>首先，我们想要实现这个功能，第一时间可能想到的是使用任意类型<code>any</code>来实现。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createArr</span>(<span class="hljs-params">length: <span class="hljs-built_in">number</span>, value: <span class="hljs-built_in">any</span></span>): <span class="hljs-title">any</span>[] </span>&#123;<br>    <span class="hljs-keyword">const</span> ret = []<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        ret[i] = value<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret<br>&#125;<br><br><br><span class="hljs-built_in">console</span>.log(createArr(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>))<br><span class="hljs-built_in">console</span>.log(createArr(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;hello&#x27;</span>))<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181250209.png"></p><p>结果是出来了，但TS还需要看下类型。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3fc1ba0eee3f44fcb937573a76b650b4~tplv-k3u1fbpfcp-zoom-1.image"></p><p>不对劲的地方：</p><ul><li>数组是<code>any</code>类型</li><li>数组的元素也都是<code>any</code>类型</li></ul><p>但是，我们想要的效果应该是<strong>无论传什么类型，就得到对应类型</strong>。使用泛型就能很简单地实现这种效果。</p><p>使用起来也比较简单，在函数名后添加<code>&lt;T&gt;</code>，这个<code>T</code>就是表示输入的类型，之后就能把这个<code>T</code>当成类型来使用。<br>如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createArr</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">length: <span class="hljs-built_in">number</span>, value: T</span>): <span class="hljs-title">T</span>[] </span>&#123;<br>    <span class="hljs-keyword">const</span> ret: T[] = []<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        ret[i] = value<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret<br>&#125;<br></code></pre></td></tr></table></figure><p>调用的时候，可以指定具体类型。也可以不手动指定，TS的类型推论会自动得到结果。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">createArr&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c56698cd5e8e4041add48f76befaa377~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="多个类型参数"><a href="#多个类型参数" class="headerlink" title="多个类型参数"></a>多个类型参数</h2><p>定义泛型的时候，可以使用多个不同的字母来表示多个类型参数。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createPerson</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">U</span>&gt;(<span class="hljs-params">name: T, age: U</span>): </span>&#123; name: T, <span class="hljs-attr">age</span>: U &#125; &#123;<br>    <span class="hljs-keyword">const</span> person: &#123; <span class="hljs-attr">name</span>: T, <span class="hljs-attr">age</span>: U &#125; = &#123;<br>        name,<br>        age<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> person;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0702f8fefd7846c6a92101e8a6aedefc~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><p>在我们使用泛型变量的时候，因为不知道该变量是哪种类型(具体是哪种类型只有调用函数后才知道)，所以就不能操作它的属性和方法。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88ab8396acd54d4c8da48c43b8eb801e~tplv-k3u1fbpfcp-zoom-1.image"></p><p>这时候，可以对泛型进行约束，只允许有<code>length</code>属性的变量。具体使用就是定义一个接口<code>Lengthwise</code>,去限制泛型必须符合该接口的形状(即必须包含<code>length</code>属性)，然后通过<code>extends</code>来约束泛型<code>T</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Lengthwise &#123;<br>    <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLength</span>&lt;<span class="hljs-title">T</span> <span class="hljs-title">extends</span> <span class="hljs-title">Lengthwise</span>&gt;(<span class="hljs-params">arg: T</span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> arg.length;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a43ddf6534554db081347ff686cd36b6~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>泛型也可以用来定义接口。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> MyType&lt;T&gt; &#123;<br>    <span class="hljs-attr">data</span>: T<br>&#125;<br><br><br><span class="hljs-keyword">const</span> info1: MyType&lt;<span class="hljs-built_in">number</span>&gt; = &#123;<br>    <span class="hljs-attr">data</span>: <span class="hljs-number">123</span><br>&#125;<br><br><span class="hljs-keyword">const</span> info2: MyType&lt;<span class="hljs-built_in">string</span>&gt; = &#123;<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;hello&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>泛型也可以用来定义类。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> name: T;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">initValue: T</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = initValue<br>    &#125;<br><br>    getName(): T &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">123</span>)<br><span class="hljs-keyword">let</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><br><span class="hljs-built_in">console</span>.log(person1.getName(), person2.getName())<br></code></pre></td></tr></table></figure><h3 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h3><p>之前在数组一节中已经介绍了，现在再回顾一下。和泛型接口、泛型类的使用方法类似，不过并不需要提前使用<code>T</code>来定义，而是直接将<code>Array&lt;type&gt;</code>当成类型来使用即可。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> nums: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;攀爬TS之路-八-泛型&quot;&gt;&lt;a href=&quot;#攀爬TS之路-八-泛型&quot; class=&quot;headerlink&quot; title=&quot;攀爬TS之路(八)    泛型&quot;&gt;&lt;/a&gt;攀爬TS之路(八)    泛型&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;泛型是指在定义函数、接口或</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>攀爬TS之路(七)    类与接口</title>
    <link href="https://www.clzczh.top/2022/06/18/typescript-7/"/>
    <id>https://www.clzczh.top/2022/06/18/typescript-7/</id>
    <published>2022-06-18T04:48:44.000Z</published>
    <updated>2022-06-18T04:49:25.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攀爬TS之路-七-类与接口"><a href="#攀爬TS之路-七-类与接口" class="headerlink" title="攀爬TS之路(七)    类与接口"></a>攀爬TS之路(七)    类与接口</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>这里不会赘述JS中的类的用法，而是单刀直入，直接来TS中的类的用法。</p><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><p>先提一嘴，JS中的类有私有属性，在属性名之前使用<code>#</code>表示。<strong>私有属性只能在类的内部使用</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    #name = <span class="hljs-string">&#x27;clz&#x27;</span><br><br>    <span class="hljs-keyword">get</span> <span class="hljs-title">val</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.#name<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person()<br><span class="hljs-built_in">console</span>.log(person.val)<br></code></pre></td></tr></table></figure><p>有学过其它语言的可能就会用的有点不太习惯，因为很多语言(指本人课程教的，C++、Java)使用的访问修饰符是<code>public</code>、<code>private</code>、<code>protected</code>。而TS可以使用这三种访问修饰符。</p><ul><li><code>public</code>：修饰的属性和方法是公有的，可以在任何地方被访问。默认都是<code>public</code></li><li><code>private</code>：私有的，<strong>只能在声明该属性的类中访问</strong>，即也不能被子类访问</li><li><code>protected</code>：受保护的，和<code>private</code>类似，不过，<strong>能被子类访问</strong></li></ul><h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><p>修饰的属性和方法是公有的，可以在任何地方被访问。</p><p>实例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> grade;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, grade</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name)<br><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>        <span class="hljs-built_in">this</span>.grade = grade<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">const</span> student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;czh&#x27;</span>, <span class="hljs-number">3</span>)      <span class="hljs-comment">// czh</span><br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(person.name)                    <span class="hljs-comment">// clz</span><br></code></pre></td></tr></table></figure><h4 id="private"><a href="#private" class="headerlink" title="private"></a>private</h4><p><strong>只能在声明该属性的类中访问</strong>，即也不能被子类访问。</p><p>实例：把上面的例子中，<code>name</code>的修饰符变成<code>private</code>即可。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b6017eab0cd7441ab50bbf46a62a5573~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h4><p>和<code>private</code>类似，不过，<strong>能被子类访问</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f4d4f6a323a440cb046a196987d9cc4~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h3><p>访问修饰符和<code>readonly</code>修饰符能够<strong>直接使用在构造函数的参数中</strong>。相当于在类中定义该属性的同时赋值。只读属性的用法在对象那一节已经介绍过了。</p><p>原版本：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用参数属性的简洁版：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name</span>)</span> &#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外，如果需要同时使用访问修饰符和<code>readonly</code>修饰符的话，<strong>访问修饰符要在<code>readonly</code>修饰符之前</strong>，如<code>public readonly name</code>。</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p><code>abstract</code>用于定义抽象类和其中的抽象方法。对一个学过Java的人来说，就是面向对象这一块，TS和Java感觉上就是一样的。</p><p>抽象类主要是一些<strong>没有足够信息来描绘一个具体的对象的类</strong>。所以<strong>抽象类必须被继承获取足够信息，才能被使用</strong>。<strong>抽象类不能被实例化对象</strong>，但是类的其他功能依然存在。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab74d74dbf04439b85f657d5d15ac118~tplv-k3u1fbpfcp-zoom-1.image"></p><p>抽象类的使用：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name</span>)</span> &#123; &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> grade;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, grade</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name)<br>        <span class="hljs-built_in">this</span>.grade = grade<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">const</span> student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;clz&#x27;</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">console</span>.log(student)    <span class="hljs-comment">// Student &#123;name: &#x27;clz&#x27;, grade: 3&#125;</span><br></code></pre></td></tr></table></figure><p>抽象类还可以有抽象方法，<strong>抽象方法只能出现在抽象类中，子类必须实现抽象方法</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name</span>)</span> &#123; &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> listen()<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> grade;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, grade</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name)<br>        <span class="hljs-built_in">this</span>.grade = grade<br>    &#125;<br><br>    <span class="hljs-comment">// public listen() &#123;</span><br>    <span class="hljs-comment">//     console.log(&#x27;Kylee-大好きなのに&#x27;)</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><br><br><span class="hljs-keyword">const</span> student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;clz&#x27;</span>, <span class="hljs-number">3</span>)<br>student.listen()    <span class="hljs-comment">// Kylee-大好きなのに</span><br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c00e500131344231b674432523f7c9e9~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="类限制变量、函数类型"><a href="#类限制变量、函数类型" class="headerlink" title="类限制变量、函数类型"></a>类限制变量、函数类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> name: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name<br>    &#125;<br><br>    getName(): <span class="hljs-built_in">string</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(person.getName())   <span class="hljs-comment">// clz</span><br></code></pre></td></tr></table></figure><h2 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h2><p><strong>一般来说，一个类只能继承自另一个类</strong>。(C++可以多继承)</p><p>但是，有时候不同类之间有一些共有特性，可以将它们封装成接口。</p><h3 id="类实现接口"><a href="#类实现接口" class="headerlink" title="类实现接口"></a>类实现接口</h3><p>就拿前面的<code>Person</code>类举例子，所有人都需要吃、睡，即可以封装一个<code>Normal</code>接口，包含必须的行为。然后通过<code>implements</code>关键字去实现接口。<strong>接口只是声明，需要类通过<code>implements</code>关键字实现</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Normal &#123;<br>    eat(): <span class="hljs-built_in">void</span><br>    sleep(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-title">implements</span> <span class="hljs-title">Normal</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> name: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">eat</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;吃&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sleep</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;睡&#x27;</span>)<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;clz&#x27;</span>)<br><br>person.eat()    <span class="hljs-comment">// 吃</span><br></code></pre></td></tr></table></figure><h3 id="类实现多个接口"><a href="#类实现多个接口" class="headerlink" title="类实现多个接口"></a>类实现多个接口</h3><p>还可以把<code>Normal</code>接口分解成<code>Eat</code>接口和<code>Sleep</code>接口，然后同时实现两个接口。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Eat &#123;<br>    eat(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> Sleep &#123;<br>    sleep(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-title">implements</span> <span class="hljs-title">Eat</span>, <span class="hljs-title">Sleep</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>上面的Person类中省略了代码，代码和<code>Normal</code>接口的案例一样。</p><h3 id="接口继承接口"><a href="#接口继承接口" class="headerlink" title="接口继承接口"></a>接口继承接口</h3><ul><li><strong>类可以继承类，接口也可以继承接口。</strong></li><li><strong>类只能继承一个类，但是接口可以继承多个接口</strong></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Eat &#123;<br>    eat(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> Drink &#123;<br>    drink(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> Sleep &#123;<br>    sleep(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> Normal <span class="hljs-keyword">extends</span> Eat, Drink, Sleep &#123; &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;攀爬TS之路-七-类与接口&quot;&gt;&lt;a href=&quot;#攀爬TS之路-七-类与接口&quot; class=&quot;headerlink&quot; title=&quot;攀爬TS之路(七)    类与接口&quot;&gt;&lt;/a&gt;攀爬TS之路(七)    类与接口&lt;/h1&gt;&lt;h2 id=&quot;类&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>攀爬TS之路(六)    类型别名、字面量类型、枚举</title>
    <link href="https://www.clzczh.top/2022/06/18/typescript-6/"/>
    <id>https://www.clzczh.top/2022/06/18/typescript-6/</id>
    <published>2022-06-18T04:47:43.000Z</published>
    <updated>2022-06-18T04:48:34.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攀爬TS之路-六-类型别名、字面量类型、枚举"><a href="#攀爬TS之路-六-类型别名、字面量类型、枚举" class="headerlink" title="攀爬TS之路(六)    类型别名、字面量类型、枚举"></a>攀爬TS之路(六)    类型别名、字面量类型、枚举</h1><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>类型别名就是给一个类型起一个新名字。使用关键字<code>type</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> Name = <span class="hljs-built_in">string</span><br><br><br><span class="hljs-keyword">const</span> myname1: Name = <span class="hljs-string">&#x27;clz&#x27;</span><br><span class="hljs-keyword">const</span> myname2: Name = <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4416a0dc1fd649be9868a9bbc41b14c5~tplv-k3u1fbpfcp-zoom-1.image"></p><p>上面的例子中，使用了类型别名，所以后续可以直接使用类型别名<code>Name</code>来当成<code>string</code>使用。</p><p>如果给比较复杂的类型使用类型别名，后续使用就会很方便。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> SumType = <span class="hljs-function">(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span><br><br><span class="hljs-keyword">const</span> sum: SumType = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b<br><br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">11</span>, <span class="hljs-number">22</span>))<br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;&#x27;</span>))    <span class="hljs-comment">// 报错：类型“string”的参数不能赋给类型“number”的参数。</span><br></code></pre></td></tr></table></figure><h2 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h2><p>可以使用字面量类型来约束取值只能为特定的字面量。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> Name = <span class="hljs-string">&#x27;clz&#x27;</span> | <span class="hljs-number">123</span> | <span class="hljs-literal">true</span> | &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span> &#125;<br><br><span class="hljs-keyword">const</span> myname1: Name = <span class="hljs-string">&#x27;clz&#x27;</span><br><span class="hljs-keyword">const</span> myname2: Name = <span class="hljs-number">123</span><br><span class="hljs-keyword">const</span> myname3: Name = <span class="hljs-literal">true</span><br><span class="hljs-keyword">const</span> myname4: Name = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> myname5: Name = <span class="hljs-string">&#x27;ccc&#x27;</span><br><span class="hljs-keyword">const</span> myname6: Name = <span class="hljs-number">124</span><br><span class="hljs-keyword">const</span> myname7: Name = <span class="hljs-literal">false</span><br><span class="hljs-keyword">const</span> myname8: Name = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;czh&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181248354.png"></p><p><strong><code>null</code>和<code>undefined</code>不受限制</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> Name = <span class="hljs-string">&#x27;clz&#x27;</span> | <span class="hljs-number">123</span> | <span class="hljs-literal">true</span> | &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span> &#125;<br><br><span class="hljs-keyword">const</span> myname1: Name = <span class="hljs-literal">null</span><br><span class="hljs-keyword">const</span> myname2: Name = <span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举一般用来表示一组常量，比如一周的七天，方向有东南西北等。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>使用方法很简单：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Direction &#123;<br>    East,<br>    South,<br>    West,<br>    North<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(Direction[<span class="hljs-string">&#x27;East&#x27;</span>])     <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">console</span>.log(Direction[<span class="hljs-string">&#x27;South&#x27;</span>])    <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(Direction[<span class="hljs-string">&#x27;West&#x27;</span>])     <span class="hljs-comment">// 2</span><br><span class="hljs-built_in">console</span>.log(Direction[<span class="hljs-string">&#x27;North&#x27;</span>])    <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>枚举成员会被赋值从<code>0</code>开始递增数字，所以上面的例子会依次打印0、1、2、3。<br>另外，还会对枚举值到枚举名进行反向映射，如枚举成员<code>East</code>的值是0，那么<code>Direction[0]</code>的值就是<code>East</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">console</span>.log(Direction[<span class="hljs-string">&#x27;East&#x27;</span>])     <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">console</span>.log(Direction[<span class="hljs-number">0</span>])          <span class="hljs-comment">// East</span><br></code></pre></td></tr></table></figure><p>那么，这是怎么实现的呢？<br>先打印<code>Direction</code>瞧瞧。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/803a015557c84c6195c05a6016d9e213~tplv-k3u1fbpfcp-zoom-1.image"></p><p>发现这个枚举对象的键和值都是该对象的属性。接下来当然得看看编译成JS后究竟是怎么实现的。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fcc386fca2e64b11bf2c3a8f3d466b87~tplv-k3u1fbpfcp-zoom-1.image"></p><p>发现还挺简单。就是赋值的时候，把另一个赋值表达式当成键来赋值，这样子就会拿那个表达式的结果来当成键来使用。</p><h3 id="手动赋值"><a href="#手动赋值" class="headerlink" title="手动赋值"></a>手动赋值</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Direction &#123;<br>    East = <span class="hljs-number">4</span>,<br>    South = <span class="hljs-number">1</span>,<br>    West,<br>    North<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(Direction)<br></code></pre></td></tr></table></figure><p>手动赋值的时候，枚举项的值将不再是从0开始递增了，而是会接着上一个枚举项递增。比如上面的例子中，<code>South</code>的值是1，而后面的<code>West</code>没有手动赋值，所以它的值是2，同理，<code>North</code>的值是3。</p><p><strong>注意</strong>：非手动赋值的枚举项和手动赋值的重复的时候，后面的会把前面的给覆盖掉。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Direction &#123;<br>    East = <span class="hljs-number">2</span>,<br>    South = <span class="hljs-number">1</span>,<br>    West,<br>    North<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(Direction[<span class="hljs-number">2</span>])   <span class="hljs-comment">// West</span><br><span class="hljs-built_in">console</span>.log(Direction)      <span class="hljs-comment">// 键为2时的结果是West。键为2，值为East的被覆盖掉了</span><br></code></pre></td></tr></table></figure><h3 id="常数枚举"><a href="#常数枚举" class="headerlink" title="常数枚举"></a>常数枚举</h3><p>常数枚举就是使用<code>const enum</code>定义的枚举类型。它和普通枚举不同，它会在编译阶段被删除。</p><p>所以下面这段代码编译出来是什么东西都没有。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-built_in">enum</span> Direction &#123;<br>    East,<br>    South,<br>    West,<br>    North,<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181248319.png"></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">console</span>.log([Direction.East, Direction.South, Direction.West, Direction.North])<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1a88bbc7bc54017887bf4c39f525d4d~tplv-k3u1fbpfcp-zoom-1.image"></p><p>当我们使用时，编译的结果后面会有<strong>该枚举项的键</strong>作为注释。</p><h3 id="其他使用方式"><a href="#其他使用方式" class="headerlink" title="其他使用方式"></a>其他使用方式</h3><h4 id="枚举项是小数或负数"><a href="#枚举项是小数或负数" class="headerlink" title="枚举项是小数或负数"></a>枚举项是小数或负数</h4><p>手动赋值的枚举项还可以是小数或负数，递增步长仍然是1</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Direction &#123;<br>    East = -<span class="hljs-number">4</span>,<br>    South = -<span class="hljs-number">1.5</span>,<br>    West,<br>    North<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(Direction)     <br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181248176.png"></p><h4 id="枚举项不是数字"><a href="#枚举项不是数字" class="headerlink" title="枚举项不是数字"></a>枚举项不是数字</h4><p><strong>手动赋值的枚举项可以不是数字</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Direction &#123;<br>    East = <span class="hljs-string">&quot;E&quot;</span>,<br>    South = <span class="hljs-string">&quot;S&quot;</span>,<br>    West = <span class="hljs-string">&quot;W&quot;</span>,<br>    North = <span class="hljs-string">&quot;N&quot;</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.log(Direction)  <br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87dcf47cbf744859a0e4809f53f63964~tplv-k3u1fbpfcp-zoom-1.image"></p><p>这个时候没有反向映射了，如果枚举项不是数字，但是还是想要有反向映射的话。需要使用类型断言来让tsc无视类型检查，并且全部都要并且只能断言为<code>any</code>。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/521234f6125f4767ac3d9db0074f9711~tplv-k3u1fbpfcp-zoom-1.image"></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Direction &#123;<br>    East = <span class="hljs-string">&quot;E&quot;</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>,<br>    South = <span class="hljs-string">&quot;S&quot;</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>,<br>    West = <span class="hljs-string">&quot;W&quot;</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>,<br>    North = <span class="hljs-string">&quot;N&quot;</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.log(Direction)     <br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181248373.png"></p><p><strong>手动赋值的枚举项不是数字时，后面不能有非手动赋值项</strong><br><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181248475.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;攀爬TS之路-六-类型别名、字面量类型、枚举&quot;&gt;&lt;a href=&quot;#攀爬TS之路-六-类型别名、字面量类型、枚举&quot; class=&quot;headerlink&quot; title=&quot;攀爬TS之路(六)    类型别名、字面量类型、枚举&quot;&gt;&lt;/a&gt;攀爬TS之路(六)    类型别</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>攀爬TS之路(五)    类型断言</title>
    <link href="https://www.clzczh.top/2022/06/18/typescript-5/"/>
    <id>https://www.clzczh.top/2022/06/18/typescript-5/</id>
    <published>2022-06-18T04:47:05.000Z</published>
    <updated>2022-06-18T04:47:32.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攀爬TS之路-五-类型断言"><a href="#攀爬TS之路-五-类型断言" class="headerlink" title="攀爬TS之路(五)    类型断言"></a>攀爬TS之路(五)    类型断言</h1><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>第二段路时，已经提到联合类型：变量<strong>只能访问</strong>联合类型中<strong>所有类型共有的属性或方法</strong></p><p>语法：<code>值 as 类型</code> 或 <code>&lt;类型&gt;值</code></p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><h4 id="将联合类型断言成其中的具体类型"><a href="#将联合类型断言成其中的具体类型" class="headerlink" title="将联合类型断言成其中的具体类型"></a>将联合类型断言成其中的具体类型</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> IFishman &#123;<br>    <span class="hljs-comment">// 摸鱼人</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    play(): <span class="hljs-built_in">void</span><br>&#125;<br><br><br><span class="hljs-keyword">interface</span> IWorker &#123;<br>    <span class="hljs-comment">// 干饭人</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>    eat(): <span class="hljs-built_in">void</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunc</span>(<span class="hljs-params">person: IFishman | IWorker</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(person.name)<br><br>    person.play()       <span class="hljs-comment">// 报错：类型“IFishman | IWorker”上不存在属性“play”。类型“IWorker”上不存在属性“play”。</span><br>&#125;<br></code></pre></td></tr></table></figure><p>但是，有时候我们就是需要访问非公有的属性或方法。比如上面的例子中，当是<code>Fishman</code>时，调用<code>play</code>方法，当是<code>Worker</code>时，调用<code>eat</code>方法。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/313cd5a1ed8b49a9b428997246575b46~tplv-k3u1fbpfcp-zoom-1.image"></p><p>这时候，断言就能用来<strong>将联合类型断言成其中的具体类型</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> IFishman &#123;<br>    <span class="hljs-comment">// 摸鱼人</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    play(): <span class="hljs-built_in">void</span><br>&#125;<br><br><br><span class="hljs-keyword">interface</span> IWorker &#123;<br>    <span class="hljs-comment">// 干饭人</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    eat(): <span class="hljs-built_in">void</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunc</span>(<span class="hljs-params">person: IFishman | IWorker</span>) </span>&#123;<br>    (person <span class="hljs-keyword">as</span> IFishman).play()       <span class="hljs-comment">// 将person断言成IFishman</span><br>&#125;<br><br><br><span class="hljs-keyword">const</span> fishman: IFishman = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,<br>    <span class="hljs-attr">play</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;摸鱼&#x27;</span>)<br>    &#125;<br>&#125;<br><br>myFunc(fishman)     <span class="hljs-comment">// 摸鱼</span><br></code></pre></td></tr></table></figure><p>乍一看，挺好的，但是，实际上只是隐藏其他情况而已，比如上面<code>person as IFishman</code>隐藏了<code>person</code>为<code>IWorker</code>的情况，这时候如果传入的参数是<code>IWorker</code>类型的，那就会报错，而且<strong>没法在编译阶段就暴露错误</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> worker: IWorker = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,<br>    <span class="hljs-attr">eat</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;干饭&#x27;</span>)<br>    &#125;<br>&#125;<br><br>myFunc(worker)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16642fe94541457f90d20db6ae9d1bf5~tplv-k3u1fbpfcp-zoom-1.image"></p><p>所以，使用断言时，应该非常注意，不然会增加一些运行时错误</p><h4 id="将父类断言成更具体的子类"><a href="#将父类断言成更具体的子类" class="headerlink" title="将父类断言成更具体的子类"></a>将父类断言成更具体的子类</h4><p>更准确来说，是将父类型断言成更具体的子类型，因为类的话，使用<code>instanceof</code>来判断就足够了。</p><p>但是，如果我们使用接口的话，它并不是类，而是类型，自然就不能使用<code>instanceof</code>来判断，这时候就需要使用断言来将父类型断言成更具体的子类型(实际上和<strong>将联合类型断言成其中的具体类型</strong>很像)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> IFishman <span class="hljs-keyword">extends</span> Person &#123;<br>    <span class="hljs-comment">// 摸鱼人</span><br>    play(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> IWorker <span class="hljs-keyword">extends</span> Person &#123;<br>    <span class="hljs-comment">// 干饭人</span><br>    eat(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunc</span>(<span class="hljs-params">person: Person</span>) </span>&#123;<br>    <span class="hljs-comment">// console.log(person instanceof IFishman)      // 会报错：“IFishman”仅表示类型，但在此处却作为值使用。</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> (person <span class="hljs-keyword">as</span> IFishman).play === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;摸鱼人&#x27;</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> (person <span class="hljs-keyword">as</span> IWorker).eat === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;干饭人&#x27;</span><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">const</span> worker: IWorker = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,<br>    <span class="hljs-attr">eat</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(myFunc(worker))     <span class="hljs-comment">// 干饭人</span><br></code></pre></td></tr></table></figure><h4 id="将任何一个类型断言成any"><a href="#将任何一个类型断言成any" class="headerlink" title="将任何一个类型断言成any"></a>将任何一个类型断言成<code>any</code></h4><p>我们使用JS进行开发时，有时候可以在<code>window</code>对象上添加新的属性，这个属性就能够全局访问了，但是，在TS中是会报错的，因为<code>window</code>对象没有该属性，就会报错。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0e176c060ae4d7ea889cd7eba5b337e~tplv-k3u1fbpfcp-zoom-1.image"></p><p>但是，这个做法实际上在开发中能够很便利，这个时候可以使用断言将它断言成<code>any</code>类型，这样子就能够添加新属性了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">(<span class="hljs-built_in">window</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>).a = <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>需要注意的是，<strong>这样可能会掩盖真正的类型错误</strong></p><h4 id="将any断言成具体类型"><a href="#将any断言成具体类型" class="headerlink" title="将any断言成具体类型"></a>将<code>any</code>断言成具体类型</h4><p>设想一个情境，一个获取两个参数的和的函数，返回值按理应该是<code>number</code>类型，但是，结果却是<code>any</code>类型，这样子就会导致很多能在编译阶段暴露出的错误没法暴露出来。(这个情境是随便想的，简单来讲就是，历史代码不太好动，可能会引发蝴蝶效应)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mySum</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">any</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b<br>&#125;<br><br><span class="hljs-keyword">const</span> sum = mySum(<span class="hljs-number">9</span>, <span class="hljs-number">8</span>)<br><span class="hljs-built_in">console</span>.log(sum.length)<br></code></pre></td></tr></table></figure><p>比如上面，我们应该在访问<code>sum.length</code>时报错才对，但是因为是任意类型，所以不会报错，所以这时候就可能使用断言，将<code>any</code>断言成具体的类型，恢复它的在编译阶段报错的功能。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18a71f0462f142f88a5a683cfa6477e4~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="断言规则"><a href="#断言规则" class="headerlink" title="断言规则"></a>断言规则</h3><p><strong>如果A兼容B或者B兼容A，那么A能够被断言为B</strong>。<br>这里的兼容简单来说就是：A兼容B就是指类型A是类型B的子集。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> IFishman <span class="hljs-keyword">extends</span> Person &#123;<br>    <span class="hljs-comment">// 摸鱼人</span><br>    play(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPerson</span>(<span class="hljs-params">person: Person</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> (person <span class="hljs-keyword">as</span> IFishman)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testIFishman</span>(<span class="hljs-params">fishman: IFishman</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> (fishman <span class="hljs-keyword">as</span> Person)<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的例子中，类型<code>Person</code>是类型<code>IFishman</code>的子集，即<code>Person</code>兼容<code>IFishman</code>，所以<code>Person</code>能被断言为<code>IFishman</code>，<code>IFishman</code>也能被断言为<code>Person</code>。</p><p>上面使用的<code>Person</code>是类，而<code>IFishman</code>是继承了<code>Person</code>，所以可能会误以为是继承关系导致的能否被断言。实际上，<strong>断言并不是根据是否有继承关系，而是看有没有兼容关系</strong>。所以下面的做法也是可以的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> IPerson &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> IFishman &#123;<br>    <span class="hljs-comment">// 摸鱼人</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    play(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPerson</span>(<span class="hljs-params">person: IPerson</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> (person <span class="hljs-keyword">as</span> IFishman)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testIFishman</span>(<span class="hljs-params">fishman: IFishman</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> (fishman <span class="hljs-keyword">as</span> IPerson)<br>&#125;<br></code></pre></td></tr></table></figure><p>如果类型A不兼容B，并且类型B不兼容A，那么A不能断言为B，B也不能断言为A。<br>比如<code>number</code>和<code>string</code>。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a43796ef61134bf5897196ddd92c7b21~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="禁术：双重断言"><a href="#禁术：双重断言" class="headerlink" title="禁术：双重断言"></a>禁术：双重断言</h3><ul><li>任何类型都可以被断言成<code>any</code></li><li><code>any</code>可以被断言成任何类型</li></ul><p>所以，可以使用禁术<strong>双重断言</strong>把任何一个类型断言成任何另一个类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mytest</span>(<span class="hljs-params">num: <span class="hljs-built_in">number</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> (num <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>除非迫不得已，千万别用双重断言</strong>。禁术：伤敌一千，自损八百</p></blockquote><h3 id="类型断言不会进行类型转换"><a href="#类型断言不会进行类型转换" class="headerlink" title="类型断言不会进行类型转换"></a>类型断言不会进行类型转换</h3><p><strong>类型断言只在TS编译时有效果</strong>，在编译结果中会被删除，不会影响到编译结果的类型。<br><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181247912.png"></p><p>这个例子中，乍一看，断言还同时实现了类型的转换。</p><p>但是，都是假象。编译结果，立马打回原形。<br><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181247813.png"></p><p>所以，需要进行类型转换还是得老老实实直接调用类型转换的方法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mytest</span>(<span class="hljs-params">num: <span class="hljs-built_in">number</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>(num)<br>&#125;<br><br><span class="hljs-keyword">const</span> num: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">const</span> str = mytest(num)<br><br><br><span class="hljs-built_in">console</span>.log(str)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> str)<br></code></pre></td></tr></table></figure><h3 id="类型断言VS类型声明"><a href="#类型断言VS类型声明" class="headerlink" title="类型断言VS类型声明"></a>类型断言VS类型声明</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mytest</span>(<span class="hljs-params">num: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">any</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> num<br>&#125;<br><br><span class="hljs-keyword">const</span> num = mytest(<span class="hljs-number">123</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">number</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> num)<br></code></pre></td></tr></table></figure><p>我们可以使用断言将<code>any</code>类型断言为<code>number</code>类型。</p><p>当然我们也可以使用类型声明的方式来实现。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> num: <span class="hljs-built_in">number</span> = mytest(<span class="hljs-number">123</span>)<br></code></pre></td></tr></table></figure><p>这么一看，结果几乎是一样的。</p><p>实际上，类型声明的使用会比类型断言要更严格，所以使用类型断言很可能会导致一些隐藏问题。</p><p>先来看看，类型断言和类型声明的核心区别：</p><ul><li>A断言为B：需要满足A兼容B，或者B兼容A</li><li>A赋值给B：只有满足B兼容A才行</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> IPerson &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> IFishman &#123;<br>    <span class="hljs-comment">// 摸鱼人</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    play(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">const</span> person: IPerson = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> fishman = person <span class="hljs-keyword">as</span> IFishman<br></code></pre></td></tr></table></figure><p>上面的断言：<code>person</code>兼容<code>IFishman</code>，所以<code>IPerson</code>类型能断言为<code>IFishman</code>类型，不过会有一些隐藏问题，比如<code>IFishman</code><br>类型原本是需要有<code>play</code>方法的，但是用断言就直接出现了一个没有<code>play</code>方法的<code>IFishman</code>。</p><p>使用类型声明会更严格，但是也能够避免一些隐藏错误。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> fishman: IFishman = person<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/753b4770d6b34406a902ff4013ee84bf~tplv-k3u1fbpfcp-zoom-1.image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;攀爬TS之路-五-类型断言&quot;&gt;&lt;a href=&quot;#攀爬TS之路-五-类型断言&quot; class=&quot;headerlink&quot; title=&quot;攀爬TS之路(五)    类型断言&quot;&gt;&lt;/a&gt;攀爬TS之路(五)    类型断言&lt;/h1&gt;&lt;h2 id=&quot;类型断言&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>攀爬TS之路(四)    函数类型</title>
    <link href="https://www.clzczh.top/2022/06/18/typescript-4/"/>
    <id>https://www.clzczh.top/2022/06/18/typescript-4/</id>
    <published>2022-06-18T04:46:34.000Z</published>
    <updated>2022-06-18T04:46:57.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攀爬TS之路-四-函数类型"><a href="#攀爬TS之路-四-函数类型" class="headerlink" title="攀爬TS之路(四)    函数类型"></a>攀爬TS之路(四)    函数类型</h1><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><h3 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式"></a>三种方式</h3><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><p>函数会有参数，也会有返回值。所以要用TS对函数进行约束的话，我们这个块都得限制。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>我们学过JS的话，应该会知道：JS的参数个数不符合函数定义时的，也不会报错。但是，在TS中，<strong>输入多的或少的参数都是不允许的</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/515310aed5e34a53be014dcabe71c0c4~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> sum: <span class="hljs-function">(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里一看，就会很混乱，又有箭头在，又好像不是箭头函数，下面就来分析一波。<br>首先，我们的<code>=</code>右边就是一般的函数表达式用法。<br>然后，我们在TS中,<code>=&gt;</code>可以用来表示函数的定义，左边是输入类型，右边是输出类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">sum: <span class="hljs-function">(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span>   <span class="hljs-comment">// 这一部分就是函数的类型，两个参数都要是number，返回值也得是number</span><br></code></pre></td></tr></table></figure><p>TS的函数表达式搭配箭头函数一开始可能会觉得很怪。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> sum: <span class="hljs-function">(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181246104.png"></p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>函数的定义也能通过结果来实现。用接口来实现基本和对象的定义一样，就不多说废话了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> ISum &#123;<br>    (a: <span class="hljs-built_in">number</span>, <span class="hljs-attr">b</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">const</span> sum: ISum = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b<br><br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">11</span>, <span class="hljs-number">22</span>))    <br></code></pre></td></tr></table></figure><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>可选参数和对象中的可选属性一样，都是通过<code>?:</code>来定义。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97d3bcd8dfe74869838ae24a634f58a9~tplv-k3u1fbpfcp-zoom-1.image"></p><p>在函数中使用需要注意：<strong>必选参数不能在可选参数后面</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a516ee479b4140909966148ff45384c9~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>重载就是让一个函数能够实现接收不同数量或类型的参数时，做不同的处理。</p><p>比如：一个函数当参数是数字时，返回参数乘积，当参数是字符串时，返回字符串拼接结果。</p><p>实现：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunc</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>, b: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span></span>): <span class="hljs-title">number</span> | <span class="hljs-title">string</span> | <span class="hljs-title">void</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> a === <span class="hljs-string">&#x27;number&#x27;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> b === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> a * b<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> a === <span class="hljs-string">&#x27;string&#x27;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> b === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> a + b<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> x1 = myFunc(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br><span class="hljs-keyword">const</span> x2 = myFunc(<span class="hljs-string">&#x27;Hello &#x27;</span>, <span class="hljs-string">&#x27;CLZ&#x27;</span>)<br><br><span class="hljs-built_in">console</span>.log(x1)<br><span class="hljs-built_in">console</span>.log(x2)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c3da4b9709940acbb648c5a72ac6c3d~tplv-k3u1fbpfcp-zoom-1.image"></p><p>乍一看，这不是没有重载的必要吗？<br>重载能让我们能够得到具体的类型。</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181246101.png"><br>没有重载，得到的返回值的类型就会是联合类型，很混乱，也不能对函数的返回值进行类型定义。</p><p>重载函数就能解决上面说的问题。<br>重载函数也不是很难实现，只需要在实际实现函数之前多次定义函数(定义时只是定义好输入和输出的类型)<br><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181246960.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;攀爬TS之路-四-函数类型&quot;&gt;&lt;a href=&quot;#攀爬TS之路-四-函数类型&quot; class=&quot;headerlink&quot; title=&quot;攀爬TS之路(四)    函数类型&quot;&gt;&lt;/a&gt;攀爬TS之路(四)    函数类型&lt;/h1&gt;&lt;h2 id=&quot;函数类型&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>攀爬TS之路(三)    数组类型、元组类型</title>
    <link href="https://www.clzczh.top/2022/06/18/typescript-3/"/>
    <id>https://www.clzczh.top/2022/06/18/typescript-3/</id>
    <published>2022-06-18T04:45:19.000Z</published>
    <updated>2022-06-18T04:45:56.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攀爬TS之路-三-数组类型、元组类型"><a href="#攀爬TS之路-三-数组类型、元组类型" class="headerlink" title="攀爬TS之路(三)    数组类型、元组类型"></a>攀爬TS之路(三)    数组类型、元组类型</h1><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><p>数组类型有多种定义方式。</p><h3 id="普通法"><a href="#普通法" class="headerlink" title="普通法"></a>普通法</h3><p>这个方法基本上和其他静态语言的使用差不多<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ccb3e2a0bd7243898fd47f59164f371f~tplv-k3u1fbpfcp-zoom-1.image"></p><p>数组使用联合类型(这个看的教程没有这种用法，有问题可以评论交流)<br><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181245448.png"></p><h3 id="数组泛型"><a href="#数组泛型" class="headerlink" title="数组泛型"></a>数组泛型</h3><p>使用数组泛型(<code>Array&lt;type&gt;</code>)来定义数组。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> nums: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br>nums.push(<span class="hljs-number">2</span>)<br>nums.push(<span class="hljs-string">&#x27;3&#x27;</span>)<br><br><span class="hljs-built_in">console</span>.log(nums)       <span class="hljs-comment">//  [1, 2, 3, 2, &#x27;3&#x27;]</span><br><br>nums.push(<span class="hljs-literal">true</span>)     <span class="hljs-comment">// 这里报错，因为定义的数组类型里不包括`boolean`类型</span><br></code></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>数组就是一个特殊的对象，它的键是数字，且是从0开始。所以我们也可以使用接口来表示数组。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> IArray &#123;<br>    [index: <span class="hljs-built_in">number</span>]: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">const</span> arr: IArray = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]<br><br><span class="hljs-built_in">console</span>.log(arr)<br></code></pre></td></tr></table></figure><p>使用接口表示数组有很大问题：不能调用数组的方法<br><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181245606.png"></p><p>没想到好的解决方案，有想法的可以评论一下(虽然不建议用这个)</p><h2 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h2><p>元组在赋值时，需要提供元组类型中指定的项。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> tuple: [<span class="hljs-built_in">number</span>, <span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>] = [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]  <span class="hljs-comment">// 正常</span><br><br><span class="hljs-comment">// const tuple: [number, string, number | string] = [1, &#x27;2&#x27;]   // 报错：不能将类型“[number, string]”分配给类型“[number, string, string | number]”。源具有 2 个元素，但目标需要 3 个。</span><br><br><span class="hljs-comment">// const tuple: [number, string, number | string] = [1, &#x27;2&#x27;, &#x27;hello&#x27;, 4]   // 不能将类型“[number, string, string, number]”分配给类型“[number, string, string | number]”。源具有 4 个元素，但目标仅允许 3 个。</span><br></code></pre></td></tr></table></figure><p>这么一看，就像是一个固定大小和元素类型的数组。<br>但是，因为TS是JS的超集，所以元组能够使用数组的方法，即我们可以通过数组的方法让该元组不再固定大小。(这里说实在有点迷，赋值的时候元组大小固定，调方法又能让元组大小不固定)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> tuple: [<span class="hljs-built_in">number</span>, <span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>]<br><br>tuple = [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">3</span>]<br><br>tuple.push(<span class="hljs-string">&#x27;123&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(tuple)  <span class="hljs-comment">//  [1, &#x27;hello&#x27;, 3, &#x27;123&#x27;]</span><br></code></pre></td></tr></table></figure><p>当我们添加越界的元素时，类型会被限制成元组中每个类型的联合类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> tuple: [<span class="hljs-built_in">number</span>, <span class="hljs-built_in">boolean</span>]<br><br>tuple = [<span class="hljs-number">1</span>, <span class="hljs-literal">true</span>]<br><br>tuple.push(<span class="hljs-literal">true</span>) <span class="hljs-comment">//  允许越界</span><br><br>tuple.push(<span class="hljs-string">&#x27;123&#x27;</span>)   <span class="hljs-comment">// 报错：允许越界。但是越界的元素需要是元组中每个类型的联合类型</span><br><span class="hljs-built_in">console</span>.log(tuple)  <br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;攀爬TS之路-三-数组类型、元组类型&quot;&gt;&lt;a href=&quot;#攀爬TS之路-三-数组类型、元组类型&quot; class=&quot;headerlink&quot; title=&quot;攀爬TS之路(三)    数组类型、元组类型&quot;&gt;&lt;/a&gt;攀爬TS之路(三)    数组类型、元组类型&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>攀爬TS之路(二) 联合类型、对象类型</title>
    <link href="https://www.clzczh.top/2022/06/18/typescript-2/"/>
    <id>https://www.clzczh.top/2022/06/18/typescript-2/</id>
    <published>2022-06-18T04:44:34.000Z</published>
    <updated>2022-06-18T04:56:27.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攀爬TS之路-二-联合类型、对象类型"><a href="#攀爬TS之路-二-联合类型、对象类型" class="headerlink" title="攀爬TS之路(二) 联合类型、对象类型"></a>攀爬TS之路(二) 联合类型、对象类型</h1><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>联合类型表示变量的取值可以是指定的多个类型中的一种。(JS中没有的概念)</p><p>使用起来很简单，只需要在类型之间使用<code>|</code>分隔开就行了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> strOrBool: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">boolean</span> = <span class="hljs-string">&#x27;赤蓝紫&#x27;</span><br><br>strOrBool = <span class="hljs-string">&#x27;clz&#x27;</span><br><span class="hljs-built_in">console</span>.log(strOrBool)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> strOrBool)<br><br>strOrBool = <span class="hljs-literal">true</span><br><span class="hljs-built_in">console</span>.log(strOrBool)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> strOrBool)    <br><br>strOrBool = <span class="hljs-number">123</span>     <span class="hljs-comment">// 这里会报错，因为联合类型里面没有包括`number`类型</span><br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f743abe9205a414681184a3eed33eef0~tplv-k3u1fbpfcp-zoom-1.image"></p><p>有一个有点意思的地方，联合类型和任意值类型编译成的JS是一样的。<br><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181244851.png"></p><p>不过细想以下的话也会发现理所当然，毕竟JS是动态类型，也并没有联合类型的概念</p><p>联合类型的变量<strong>只能访问</strong>联合类型中<strong>所有类型共有的属性或方法</strong>。因为TS没法确定这个变量究竟是哪个类型。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca3bb581b5af48d68ac28f2b83f45eb4~tplv-k3u1fbpfcp-zoom-1.image"></p><p>当然，如果访问的是共有属性或方法的话，那就都没问题。<br><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181244766.png"></p><p>如果能够推断出当前类型是哪一个的话，就不再只能访问共有的了。<br>当我们访问的属性是推断出来的类型有的，就不会报错，如果是没有的才会报错。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b40fb24afdb4d1b96e3f530f985c2fe~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="对象类型-接口"><a href="#对象类型-接口" class="headerlink" title="对象类型(接口)"></a>对象类型(接口)</h2><p>通过接口<code>interface</code>来定义对象的类型</p><p>这里的接口和开发时和后端对接的接口不是同一个东西。它是对行为的抽象，在Java中则是抽象方法的集合，类通过继承接口来继承接口的抽象方法并实现。</p><p>但是，在TS中，常用来定义对象的类型。</p><p>使用方法：</p><ol><li>定义一个接口<code>IPerson</code>，在接口中声明一些变量，并指定类型</li><li>然后定义一个对象，并把它的类型定义成接口的类型<code>IPerson</code></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> IPerson &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">const</span> person: IPerson = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;赤蓝紫&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.log(person)<br></code></pre></td></tr></table></figure><p>这个时候，我们定义的对象必须要和接口有的属性一模一样，不能少、不能多、属性类型不能不匹配</p><p>少：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19a1b87cb77942ee90a77840d00fd94b~tplv-k3u1fbpfcp-zoom-1.image"></p><p>多：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26a70b9d485244e594b2d8c81f19fbc9~tplv-k3u1fbpfcp-zoom-1.image"></p><p>属性类型不匹配:<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e79f73610faa4e4db6227ba37b70adb1~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><p>上面已经说过：我们定义的对象必须要和接口有的属性一模一样，这当然会很不方便，所以这个时候可以使用可选属性，就可以允许该属性不存在。</p><p>使用方法很简单，就是在类型定义时不再是用<code>:</code>，而是使用<code>?:</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">name?: <span class="hljs-built_in">string</span>;<br></code></pre></td></tr></table></figure><p>实操：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> IPerson &#123;<br>    name?: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">const</span> person: IPerson = &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(person)<br></code></pre></td></tr></table></figure><p>当然，这个时候还是不允许添加未定义的属性。属性不匹配就更是如此，毕竟原本就是为了引入属性匹配才使用的TS。</p><h3 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h3><p>这个属性顾名思义，就是允许有任意的属性。</p><p>使用方法就是使用中括号包住属性名，并且属性名必须要定义类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">[key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>;     <span class="hljs-comment">// 对象可以有任意属性，键是字符串类型的，值是任意类型的</span><br></code></pre></td></tr></table></figure><p>实操：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> IPerson &#123;<br>    name?: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>,<br>    [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>&#125;<br><br><span class="hljs-keyword">const</span> person: IPerson = &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">job</span>: <span class="hljs-string">&#x27;Coder&#x27;</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.log(person)<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：如果定义了任意属性，那么一般属性和可选属性的类型都要是<strong>任意属性的值的类型的子集</strong><br><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181244984.png"></p><p>简单来说就是，任意类型是其他属性的老大哥，所以其他属性不能是其他类型，因为其他属性只能听老大哥的。</p><p>可以使用联合类型来更方便地使用任意属性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> IPerson &#123;<br>    name?: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>,<br>    [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>,<br>&#125;<br><br><span class="hljs-keyword">const</span> person: IPerson = &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">job</span>: <span class="hljs-string">&#x27;Coder&#x27;</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.log(person)<br></code></pre></td></tr></table></figure><h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><p>使用方法：在定义接口的属性时，在想设置为只读属性的属性前，添加关键字<code>readonly</code>即可，这时候该属性在不允许被重新赋值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">readonly</span> id: <span class="hljs-built_in">string</span>;    <span class="hljs-comment">// 只读属性</span><br></code></pre></td></tr></table></figure><p>如果只读是对象类型，那就可以修改它里面的成员，当然还是不允许重新赋值的。</p><p>实操：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1ca3e6e91774509a3bbbb9156f951b2~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181244989.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;攀爬TS之路-二-联合类型、对象类型&quot;&gt;&lt;a href=&quot;#攀爬TS之路-二-联合类型、对象类型&quot; class=&quot;headerlink&quot; title=&quot;攀爬TS之路(二) 联合类型、对象类型&quot;&gt;&lt;/a&gt;攀爬TS之路(二) 联合类型、对象类型&lt;/h1&gt;&lt;h2 id=</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>攀爬TS之路(一) 原始数据类型、任意值类型</title>
    <link href="https://www.clzczh.top/2022/06/18/typescript-1/"/>
    <id>https://www.clzczh.top/2022/06/18/typescript-1/</id>
    <published>2022-06-18T04:43:40.000Z</published>
    <updated>2022-06-18T04:56:17.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攀爬TS之路-一-原始数据类型、任意值类型"><a href="#攀爬TS之路-一-原始数据类型、任意值类型" class="headerlink" title="攀爬TS之路(一) 原始数据类型、任意值类型"></a>攀爬TS之路(一) 原始数据类型、任意值类型</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>之前简单了解过TypeScript，但是没有系统、深入学习，现在就来系统学习一下。实际上，也算是必备知识了，印象最深的就是<code>Element-Plus</code>的示例代码都是TS了。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>TypeScript是JavaScript的超集(添加了<strong>类型系统</strong>)，<strong>适用于任何规模</strong>的项目。</p><p>TypeScript也可以编译为JavaScript：</p><ol><li><code>npm install -g typescript</code>全局安装TypeScript的命令行工具</li><li><code>tsc hello.ts</code>编译TypeScript为JavaScript</li></ol><h3 id="TypeScript是静态类型"><a href="#TypeScript是静态类型" class="headerlink" title="TypeScript是静态类型"></a>TypeScript是静态类型</h3><p>静态类型：在编译阶段就能确定变量的类型，能<strong>在编译阶段暴露大部分的错误</strong><br>动态类型：在运行时才会确定变量的类型，会导致更多错误(如类型匹配错误)</p><p><strong>TS是静态类型。JS是动态类型</strong></p><p>JS</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span><br>num.split(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>编译阶段不报错，运行时才发现<code>number</code>类型调用<code>split</code>，报错。</p><br><p>TS</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span><br>num.split(<span class="hljs-string">&#x27;&#x27;</span>)   <span class="hljs-comment">// 类型“number”上不存在属性“split”。</span><br></code></pre></td></tr></table></figure><p>上面这段代码在编译阶段就会报错，能够提前知道问题所在。</p><p>同样的代码在JS中运行阶段报错，在TS中编译阶段报错。<br>这是因为虽然我们没有声明num的类型，但是在变量初始化时，就已经自动推出它是<code>number</code>类型了，所以上面那一段代码等价于下面：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> num: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span><br>num.split(<span class="hljs-string">&#x27;&#x27;</span>)   <span class="hljs-comment">// 类型“number”上不存在属性“split”。</span><br></code></pre></td></tr></table></figure><h3 id="TypeScript是弱类型"><a href="#TypeScript是弱类型" class="headerlink" title="TypeScript是弱类型"></a>TypeScript是弱类型</h3><p>强类型：不允许隐式类型转换。<br>弱类型：允许隐式类型转换。如<code>1+&#39;1&#39;</code>不会报错</p><p><strong>TS和JS都是弱类型</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span> + <span class="hljs-string">&#x27;1&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在TS和JS中都不会报错，因为TS是完全兼容JS的，不会修改JS运行时的特性，所以它们都是弱类型。</p><h2 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h2><p>原始数据类型包括：<code>number</code>、<code>string</code>、<code>boolean</code>、<code>null</code>、<code>undefined</code>和<code>Symbol</code>、<code>BigInt</code>(ES6新增)</p><p>这个部分实际上，TS和JS差别不大，举个例子就能懂了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> myNumber: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> myString: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;赤蓝紫&#x27;</span><br><span class="hljs-keyword">let</span> myBoolean: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span><br><span class="hljs-keyword">let</span> myNull: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span><br><span class="hljs-keyword">let</span> myUndefined: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">let</span> mySymbol: symbol = <span class="hljs-built_in">Symbol</span>()<br><br><span class="hljs-keyword">let</span> myBigInt: bigint = <span class="hljs-number">123n</span>;<br><br><span class="hljs-built_in">console</span>.error(<span class="hljs-keyword">typeof</span> myNumber)<br><span class="hljs-built_in">console</span>.error(<span class="hljs-keyword">typeof</span> myString)<br><span class="hljs-built_in">console</span>.error(<span class="hljs-keyword">typeof</span> myBoolean)<br><span class="hljs-built_in">console</span>.error(<span class="hljs-keyword">typeof</span> myNull)<br><span class="hljs-built_in">console</span>.error(<span class="hljs-keyword">typeof</span> myUndefined)<br><span class="hljs-built_in">console</span>.error(<span class="hljs-keyword">typeof</span> mySymbol)<br><span class="hljs-built_in">console</span>.error(<span class="hljs-keyword">typeof</span> myBigInt)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c69d2a7a2f0a4d7585a511054ebfd654~tplv-k3u1fbpfcp-zoom-1.image"></p><p><strong>注意</strong>：如果使用<code>bigint</code>类型时，可能会报错：<code>BigInt literals are not available when targeting lower than ES2020</code></p><p>这时候需要在项目根目录下添加配置文件<code>tsconfig.json</code>添加<code>es</code>配置项，指定编译之后的版本目标</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;compilerOptions&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;target&quot;</span>: <span class="hljs-string">&quot;ESNEXT&quot;</span><br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="任意值类型"><a href="#任意值类型" class="headerlink" title="任意值类型"></a>任意值类型</h2><p>任意值类型(<code>any</code>)可以用来表示允许赋值为任意类型。但是，应该慎用，如果都是用<code>any</code>类型，那就是多此一举了，直接回到解放前了。</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181243595.png"></p><p>允许在任意值上访问任何属性(有错误也是运行时才会报错)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> myNumber: <span class="hljs-built_in">any</span> = <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(myNumber.a)     <span class="hljs-comment">// undefined</span><br><span class="hljs-built_in">console</span>.log(myNumber.a.b)   <span class="hljs-comment">// 运行时报错</span><br></code></pre></td></tr></table></figure><p>也允许调用任何方法(有错误也是运行时才会报错)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> myNumber: <span class="hljs-built_in">any</span> = <span class="hljs-number">1</span><br>myNumber.sayHello()<br>myNumber.sayHello().sayHi()<br></code></pre></td></tr></table></figure><p>因为<strong>如果一个变量是任意值类型的话，那么对它的操作，返回的结果的类型都是任意值</strong>，而且任意值也就意味着有可能会是对象，所以是没法在编译时暴露出错误的。</p><p>另外，除了上面声明时指定类型的情况，如果变量在声明时，没有指定它的类型，也没有被赋值，那么就会被识别成任意值类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> myAny<br><br>myAny = <span class="hljs-number">1</span><br>myAny.sayHello()<br><br><br><span class="hljs-comment">// 等价于：</span><br><span class="hljs-comment">// let myAny: any</span><br><br><span class="hljs-comment">// myAny = 1</span><br><span class="hljs-comment">// myAny.sayHello()</span><br></code></pre></td></tr></table></figure><p><strong>如果没有指定类型，但是在声明的同时赋值了，那就会按照类型推论的规则推断出一个类型</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> myNum = <span class="hljs-number">1</span><br>myNum = <span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-comment">// 编译时报错，因为类型推论的原因，myNum实际上已经被认为是`number`类型了</span><br><br><span class="hljs-comment">// 等价于</span><br><span class="hljs-comment">// let myNum: number = 1</span><br><span class="hljs-comment">// myNum = &#x27;hello&#x27; // 编译时报错，因为类型推论的原因，myNum实际上已经被认为是`number`类型了</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;攀爬TS之路-一-原始数据类型、任意值类型&quot;&gt;&lt;a href=&quot;#攀爬TS之路-一-原始数据类型、任意值类型&quot; class=&quot;headerlink&quot; title=&quot;攀爬TS之路(一) 原始数据类型、任意值类型&quot;&gt;&lt;/a&gt;攀爬TS之路(一) 原始数据类型、任意值类型</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://www.clzczh.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>重走Ajax之路2</title>
    <link href="https://www.clzczh.top/2022/06/18/%E9%87%8D%E8%B5%B0Ajax%E4%B9%8B%E8%B7%AF2/"/>
    <id>https://www.clzczh.top/2022/06/18/%E9%87%8D%E8%B5%B0Ajax%E4%B9%8B%E8%B7%AF2/</id>
    <published>2022-06-18T04:42:18.000Z</published>
    <updated>2022-06-18T04:42:46.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重走Ajax之路-二"><a href="#重走Ajax之路-二" class="headerlink" title="重走Ajax之路(二)"></a>重走Ajax之路(二)</h1><p>前一篇已经简单介绍了下Ajax的用法了(只是简单的GET请求)，下面就来捣鼓下Ajax的其他内容</p><blockquote><p>后端可以使用上一篇最后的<code>express</code>。</p></blockquote><h2 id="同步请求"><a href="#同步请求" class="headerlink" title="同步请求"></a>同步请求</h2><p>调用<code>open</code>方法时，第三个参数是<code>false</code>时，就是同步请求，这时候，JavaScript会堵塞，当服务器响应之后才继续执行。</p><p>这时候，绑定的<code>readystatechange</code>事件不会有反应，因为同步请求的话，<strong>JavaScript会堵塞，当服务器响应之后才继续执行</strong>，所以当我们绑定事件时，已经接收到响应了，所以状态不会再变也就不会触发<code>readystatechange</code>事件。</p><p>这时候可以直接把<code>readystatechange</code>事件的逻辑外移，不再需要绑定事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br><br>    xhr.open(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:8088&#x27;</span>, <span class="hljs-literal">false</span>)<br><br>    xhr.send(<span class="hljs-literal">null</span>)<br><br>    <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">if</span> ((xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) || xhr.status === <span class="hljs-number">304</span>) &#123;<br>            <span class="hljs-built_in">console</span>.log(xhr.responseText)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以把绑定<code>readystatechange</code>事件的步骤提前到调用<code>open</code>方法之前，这样子，当服务器响应之后，状态会从0变成4，就会触发事件。</p><h2 id="设置请求头"><a href="#设置请求头" class="headerlink" title="设置请求头"></a>设置请求头</h2><p>有时候，我们发送请求时，还需要设置请求头，比如请求头需要携带<code>token</code>。这时候就需要在<code>open()</code>之后，<code>send()</code>之前调用<code>setRequestHeader</code>设置请求头。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br><br>    xhr.open(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:8088&#x27;</span>)<br><br>    <span class="hljs-comment">// 设置请求头</span><br>    xhr.setRequestHeader(<span class="hljs-string">&#x27;token&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>)<br><br>    xhr.send(<span class="hljs-literal">null</span>)<br><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) || xhr.status === <span class="hljs-number">304</span>) &#123;<br>                <span class="hljs-built_in">console</span>.log(xhr.responseText)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bce233fa0ce4bfe9a490e13a5f0c771~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="获取响应头"><a href="#获取响应头" class="headerlink" title="获取响应头"></a>获取响应头</h2><p>和设置请求头类似，我们有时候从服务器响应中获取响应头，比如把<code>token</code>放到了响应头里。</p><p>我们可以通过<code>getAllResponseHeaders</code>方法得到能访问的所有响应头，也可以通过<code>getResponseHeader(&#39;myheader&#39;)</code>来获取特定的响应头。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">if</span> ((xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) || xhr.status === <span class="hljs-number">304</span>) &#123;<br>            <span class="hljs-comment">// 获取全部响应头</span><br>            <span class="hljs-keyword">const</span> allHeaders = xhr.getAllResponseHeaders()<br>            <span class="hljs-built_in">console</span>.log(allHeaders)<br><br>            <span class="hljs-comment">// 获取特定响应头</span><br>            <span class="hljs-keyword">const</span> token = xhr.getResponseHeader(<span class="hljs-string">&#x27;token&#x27;</span>)<br>            <span class="hljs-built_in">console</span>.error(token)<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d9928ecfa424c07a79594478bfe15fd~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="POST请求发送数据-json格式"><a href="#POST请求发送数据-json格式" class="headerlink" title="POST请求发送数据(json格式)"></a>POST请求发送数据(json格式)</h2><p>GET请求就是通过给GET请求URL后面添加查询字符串参数，如<code>/getName?user=clz&amp;age=21</code></p><p>这个只需要使用字符串拼接即可。</p><p>POST请求稍微复杂一点点。<br>先改造一下提供接口的<code>express</code>先。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>)<br><br><span class="hljs-keyword">const</span> app = express()<br><br>app.use(cors())<br><br><span class="hljs-comment">// 解析请求体的中间件(json格式)</span><br>app.use(express.json())<br><br>app.post(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(req.body)<br><br>    res.status(<span class="hljs-number">200</span>).json(&#123;<br>        <span class="hljs-attr">data</span>: &#123;<br>            ...req.body,<br>            <span class="hljs-attr">tt</span>: <span class="hljs-string">&#x27;ttt&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;登录&#x27;</span><br>    &#125;)<br>&#125;)<br><br>app.listen(<span class="hljs-number">8088</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.error(<span class="hljs-string">&#x27;http://localhost:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>我们可以通过<code>send</code>方法，接收一个参数，作为请求体发送出去。<br>那么能不能直接把一个对象作为请求体发送出去呢？<br>试一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br><br>    xhr.open(<span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:8088/login&#x27;</span>)<br><br>    xhr.send(&#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">21</span><br>    &#125;)<br><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) || xhr.status === <span class="hljs-number">304</span>) &#123;<br>                <span class="hljs-built_in">console</span>.log(xhr.responseText)<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>答案是不行的。如果我们直接将对象发过去，会自动调用<code>toString</code>方法变成字符串形式。<br><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181242968.png"></p><p>那么，我们在换成JSON字符串再试试。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.send(<span class="hljs-built_in">JSON</span>.stringify(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span><br>&#125;))<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f94fefb0d7f480a98b57127429d5e6f~tplv-k3u1fbpfcp-zoom-1.image"></p><p>这时候，我们的数据已经正常的发出去了，但是，后端那边并没有介绍到，打印的<code>req.body</code>是空的。<br>这是因为浏览器发送请求是由严格规范的，我们的请求体是JSON字符串格式，还得设置内容类型<code>Content-Type</code>为<code>json</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/json; charset=utf-8&#x27;</span>)<br>xhr.send(<span class="hljs-built_in">JSON</span>.stringify(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span><br>&#125;))<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89c0b80f2fd0419cb811fbc5933afa47~tplv-k3u1fbpfcp-zoom-1.image"><br>后端正常收到请求体</p><h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><p>我们可以给<code>XHR</code>对象增加<code>timeout</code>属性，表示发送请求后等待多少毫秒，如果在这段时间内响应不成功就中断请求，并且会触发<code>timeout</code>事件。(可以在<code>express</code>增加一个定时器响应，时间设置长一点，来模拟请求超时)<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78fbeccc38444ba5b6242318a928e235~tplv-k3u1fbpfcp-zoom-1.image"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 设置2s超时</span><br>xhr.timeout = <span class="hljs-number">2000</span><br><br>xhr.ontimeout = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    alert(<span class="hljs-string">&#x27;响应超时，要中断请求啦&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181242225.gif" alt="ajax"></p><h2 id="取消未响应的请求"><a href="#取消未响应的请求" class="headerlink" title="取消未响应的请求"></a>取消未响应的请求</h2><p>上面我们可以设置超时取消请求，当然也可以手动取消请求。<br>在没收到响应之前，调用<code>abort</code>方法可以取消请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br><br><span class="hljs-keyword">const</span> cancelBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;cancel-btn&#x27;</span>)<br>cancelBtn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    xhr.abort()<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181242213.gif" alt="ajax"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;重走Ajax之路-二&quot;&gt;&lt;a href=&quot;#重走Ajax之路-二&quot; class=&quot;headerlink&quot; title=&quot;重走Ajax之路(二)&quot;&gt;&lt;/a&gt;重走Ajax之路(二)&lt;/h1&gt;&lt;p&gt;前一篇已经简单介绍了下Ajax的用法了(只是简单的GET请求)，下面就来</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>重走Ajax之路1</title>
    <link href="https://www.clzczh.top/2022/06/18/%E9%87%8D%E8%B5%B0Ajax%E4%B9%8B%E8%B7%AF1/"/>
    <id>https://www.clzczh.top/2022/06/18/%E9%87%8D%E8%B5%B0Ajax%E4%B9%8B%E8%B7%AF1/</id>
    <published>2022-06-18T04:41:42.000Z</published>
    <updated>2022-06-18T04:42:07.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重走Ajax之路-一"><a href="#重走Ajax之路-一" class="headerlink" title="重走Ajax之路(一)"></a>重走Ajax之路(一)</h1><blockquote><p>复习篇。现在做的项目请求这块都是用的<code>axios</code>，但是还是不能忘本。</p></blockquote><p>Ajax：Asynchronous JavaScript+XML(异步 JavaScript+XML)的技术。它可以向服务器请求数据，而不刷新页面，即能够局部刷新，可以让用户有更好的用户体验。</p><p>插一嘴：Ajax 名字中包含 XML，但是这并不意味着并不代表格式一定是<code>XML</code>。实际上，感觉<code>JSON</code>更香。</p><h2 id="Ajax-使用步骤-异步"><a href="#Ajax-使用步骤-异步" class="headerlink" title="Ajax 使用步骤(异步)"></a>Ajax 使用步骤(异步)</h2><p>Ajax 的使用主要分为 4 步。</p><h3 id="1-创建-XHR-对象"><a href="#1-创建-XHR-对象" class="headerlink" title="1. 创建 XHR 对象"></a>1. 创建 XHR 对象</h3><p>AJAX 的关键就是<code>XMLHttpRequest对象</code>(<code>XHR对象</code>)。所以第一步，首先就是创建<code>XHR对象</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br></code></pre></td></tr></table></figure><h3 id="2-调用-open-方法"><a href="#2-调用-open-方法" class="headerlink" title="2. 调用 open 方法"></a>2. 调用 open 方法</h3><p>调用<code>open</code>方法启动请求，准备发送。这时候并<strong>不会发送请求，而只是启动一个请求</strong></p><p><code>open</code>方法接收 3 个参数：请求类型、请求 URL、请求是否异步(默认为<code>true</code>，表示异步执行)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.open(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;example.txt&quot;</span>, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h3 id="3-调用-send-方法"><a href="#3-调用-send-方法" class="headerlink" title="3. 调用 send 方法"></a>3. 调用 send 方法</h3><p>发送请求需要调用<code>send</code>方法,调用 send 之后，请求就会发送到服务器。接收一个参数，是作为请求体发送的数据。默认值为<code>null</code></p><p>那么，问题来了：如果我们请求体没有数据，我们能不能不调用<code>send</code>方法？<br>不能，我们上面已经说过了，调用<code>open</code>方法只是启动一个请求，并不会发送请求。调用<code>send</code>方法才会发送请求，所以不调用<code>send</code>方法，就相当于发送请求的准备都做好了，但是就是不发请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.send(<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><h3 id="4-绑定-readystatechange-事件"><a href="#4-绑定-readystatechange-事件" class="headerlink" title="4. 绑定 readystatechange 事件"></a>4. 绑定 readystatechange 事件</h3><p>XHR 对象会有一个<code>readyState</code>属性，这个属性表示当前处于请求响应过程的哪个阶段</p><ul><li>0(未初始化)：还没有调用<code>open</code>方法</li><li>1(已打开)：已经调用<code>open</code>方法，还没调用<code>send</code>方法</li><li>2(已发送)：已经调用<code>send</code>方法，还没有收到响应</li><li>3(接收中)：已经接收到部分响应了</li><li><strong>4(完成)：已经接收到全部的响应了</strong></li></ul><p>实际上，我们这里只需要状态为 4 的，即已经接收到全部响应了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(xhr.readyState);<br><br>  <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>当收到响应后，XHR 对象的以下属性也会有对应数据。</p><ul><li><code>status</code>：相应的 HTTP 描述</li><li><code>statusText</code>：响应的 HTTP 状态描述</li><li><code>responseText</code>：响应体文本</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>    <span class="hljs-keyword">if</span> ((xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) || xhr.status === <span class="hljs-number">304</span>) &#123;<br>      <span class="hljs-comment">// HTTP状态码为2xx表示成功。304表示资源没有修改过，是直接从浏览器缓存中拿的，即也算收到正确的响应</span><br>      <span class="hljs-built_in">console</span>.log(xhr.responseText);<br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="4-绑定-load-事件"><a href="#4-绑定-load-事件" class="headerlink" title="4. 绑定 load 事件"></a>4. 绑定 load 事件</h3><p>上面我们用的是绑定<code>readystatechanges</code>事件，再通过判断<code>readyState</code>属性为 4 来判断响应是否接收完成。</p><p>这时候，也可以给<code>XHR对象</code>绑定<code>load事件</code>，来简化一点。<code>load事件</code>在响应接收完成后立即触发，所以我们就不再需要检查<code>readyState</code>属性了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> ((xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) || xhr.status === <span class="hljs-number">304</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(xhr.responseText);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>获取信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;btn&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">        btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, fetchData)</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 1. 创建XHR对象</span></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 2. 调用open方法</span></span></span><br><span class="javascript"><span class="xml">            xhr.open(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:8088&#x27;</span>)</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 3. 调用send方法</span></span></span><br><span class="javascript"><span class="xml">            xhr.send(<span class="hljs-literal">null</span>)</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 4. 绑定readystatechange事件</span></span></span><br><span class="javascript"><span class="xml">            xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;</span></span><br><span class="javascript"><span class="xml">                    <span class="hljs-keyword">if</span> ((xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) || xhr.status === <span class="hljs-number">304</span>) &#123;</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-comment">// HTTP状态码为2xx表示成功。304表示资源没有修改过，是直接从浏览器缓存中拿的，即也算收到正确的响应</span></span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-built_in">console</span>.log(xhr.responseText)</span></span><br><span class="javascript"><span class="xml">                    &#125;</span></span><br><span class="javascript"><span class="xml">                &#125;</span></span><br><span class="javascript"><span class="xml">            &#125;</span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>最终效果: 有后端接口实验效果更好</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95c5509e76354c738ee694e528ca0551~tplv-k3u1fbpfcp-zoom-1.image" alt="ajax"></p><h2 id="附赠：测试用express-有需要自取"><a href="#附赠：测试用express-有需要自取" class="headerlink" title="附赠：测试用express(有需要自取)"></a>附赠：测试用<code>express</code>(有需要自取)</h2><blockquote><p>如果想简单学习下<code>express</code>，可以访问本人的博客网站。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cors&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.use(cors());<br><br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.header(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br><br>  <span class="hljs-comment">// 设置允许前端访问自定义响应头</span><br>  res.header(<span class="hljs-string">&quot;Access-Control-Expose-Headers&quot;</span>, <span class="hljs-string">&quot;token&quot;</span>);<br><br>  res.status(<span class="hljs-number">200</span>).json(&#123;<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    &#125;,<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;获取信息成功&quot;</span>,<br>  &#125;);<br>&#125;);<br><br>app.listen(<span class="hljs-number">8088</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.error(<span class="hljs-string">&quot;http://localhost:8088&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;重走Ajax之路-一&quot;&gt;&lt;a href=&quot;#重走Ajax之路-一&quot; class=&quot;headerlink&quot; title=&quot;重走Ajax之路(一)&quot;&gt;&lt;/a&gt;重走Ajax之路(一)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;复习篇。现在做的项目请求这块都是用的&lt;code</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JSON的使用之灵活版</title>
    <link href="https://www.clzczh.top/2022/06/18/JSON%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8B%E7%81%B5%E6%B4%BB%E7%89%88/"/>
    <id>https://www.clzczh.top/2022/06/18/JSON%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8B%E7%81%B5%E6%B4%BB%E7%89%88/</id>
    <published>2022-06-18T04:40:26.000Z</published>
    <updated>2022-06-18T04:40:53.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON的使用之灵活版"><a href="#JSON的使用之灵活版" class="headerlink" title="JSON的使用之灵活版"></a>JSON的使用之灵活版</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>JSON在正常开发的时候我们经常能够遇到，但是一般情况下，<code>JSON.stringify()</code>和<code>JSON.parse()</code>已经够用了。在看红宝书的时候，感觉打开了新世界的大门。下面就来探秘一下灵活的JSON使用方法。</p></blockquote><h2 id="JSON-stringify-的几个作用"><a href="#JSON-stringify-的几个作用" class="headerlink" title="JSON.stringify()的几个作用"></a><code>JSON.stringify()</code>的几个作用</h2><p><code>JSON.stringify()</code>方法将一个JavaScript对象转换成JSON字符串。</p><p>当属性值为<code>undefined</code>、函数时会跳过这个属性,转换的JSON字符串中不存在跳过的属性。</p><h3 id="过滤结果"><a href="#过滤结果" class="headerlink" title="过滤结果"></a>过滤结果</h3><h4 id="第二个参数是数组"><a href="#第二个参数是数组" class="headerlink" title="第二个参数是数组"></a>第二个参数是数组</h4><p>如果第二个参数是一个数组，那么<code>JSON.stringify()</code>得到的结果只包含该数组中列出的对象属性。 得到的结果也会按数组中对象的属性顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>,<br>    <span class="hljs-attr">hobbies</span>: [<br>        <span class="hljs-string">&quot;Animate&quot;</span>,<br>        <span class="hljs-string">&quot;Music&quot;</span>,<br>        <span class="hljs-string">&#x27;FrontEnd&#x27;</span><br>    ],<br>    <span class="hljs-attr">nowTime</span>: <span class="hljs-number">2022</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> jsonText = <span class="hljs-built_in">JSON</span>.stringify(person, [<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>])<br><br><span class="hljs-built_in">console</span>.log(jsonText)<span class="hljs-comment">// &#123;&quot;age&quot;:22,&quot;name&quot;:&quot;clz&quot;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="第二个参数是函数"><a href="#第二个参数是函数" class="headerlink" title="第二个参数是函数"></a>第二个参数是函数</h4><p>如果第二个参数是一个函数,那么该函数接收两个参数: 属性名(key)和属性值(value)。返回的值就是得到的对象字符串,该属性的值。</p><p>如果函数返回的值不是对象,那么得到的结果就是返回的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>,<br>    <span class="hljs-attr">hobbies</span>: [<br>        <span class="hljs-string">&quot;Animate&quot;</span>,<br>        <span class="hljs-string">&quot;Music&quot;</span>,<br>        <span class="hljs-string">&#x27;FrontEnd&#x27;</span><br>    ],<br>    <span class="hljs-attr">nowTime</span>: <span class="hljs-number">2022</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> jsonText = <span class="hljs-built_in">JSON</span>.stringify(person, <span class="hljs-function">(<span class="hljs-params">key, value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;key: &#x27;</span>, key)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;value: &#x27;</span>, value)<br><br>    <span class="hljs-comment">// return 123</span><br><br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(jsonText)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82d04f0e5a814a53999529069556569b~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220529125044285"></p><p>那么,怎么得到最初的结果呢?<br>答案很简单,可以直接返回<code>value</code>值就行了。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44fb823dad0147a49b2831cc360985ec~tplv-k3u1fbpfcp-zoom-1.image"></p><p>那么如果想修改某一个属性值,就只需要增加条件,根据条件返回就行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>,<br>    <span class="hljs-attr">hobbies</span>: [<br>        <span class="hljs-string">&quot;Animate&quot;</span>,<br>        <span class="hljs-string">&quot;Music&quot;</span>,<br>        <span class="hljs-string">&#x27;FrontEnd&#x27;</span><br>    ],<br>    <span class="hljs-attr">nowTime</span>: <span class="hljs-number">2022</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> jsonText = <span class="hljs-built_in">JSON</span>.stringify(person, <span class="hljs-function">(<span class="hljs-params">key, value</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">switch</span> (key) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;name&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;赤蓝紫&#x27;</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;hobbies&#x27;</span>:<br>            <span class="hljs-keyword">return</span> value.join(<span class="hljs-string">&#x27;,&#x27;</span>)<br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-keyword">return</span> value<br>    &#125;<br><br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(jsonText)   <span class="hljs-comment">// &#123;&quot;name&quot;:&quot;赤蓝紫&quot;,&quot;age&quot;:22,&quot;hobbies&quot;:&quot;Animate,Music,FrontEnd&quot;,&quot;nowTime&quot;:2022&#125;</span><br></code></pre></td></tr></table></figure><p>如果想要得到的结果中过滤掉某个属性,那么只需要当<code>key</code>等于该属性时,返回<code>undefined</code>即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">switch</span> (key) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;name&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;赤蓝紫&#x27;</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;hobbies&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span><br>    <span class="hljs-attr">default</span>:<br>        <span class="hljs-keyword">return</span> value<br>&#125;<br></code></pre></td></tr></table></figure><p>假如我们想要全部属性都变成<code>ccc</code>,是不是只需要返回<code>ccc</code>就行了呢?<br>这个上面已经说过了,如果只是返回<code>ccc</code>的话,那么最后的结果只是一个<code>ccc</code>字符串,而不是<code>JSON对象字符串</code>。</p><p>如果想要把全部属性都变成<code>ccc</code>,除了返回<code>ccc</code>外，还需要当<code>key</code>等于空串时,需要返回<code>value</code>。</p><p>因为只有当<code>key</code>等于空串时返回一个对象,才会继续去转换该对象的属性为字符串。否则,就直接拿到值就返回了。(注意: <strong>如果返回的是函数,得到的结果是<code>undefined</code></strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> value<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ccc&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// 结果:&#123;&quot;name&quot;:&quot;ccc&quot;,&quot;age&quot;:&quot;ccc&quot;,&quot;hobbies&quot;:&quot;ccc&quot;,&quot;nowTime&quot;:&quot;ccc&quot;&#125;</span><br></code></pre></td></tr></table></figure><p>接下来玩点有意思的,我们可以在<code>key</code>等于空串时,返回另一个对象,这样就能做到<strong>狸猫换太子</strong>了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">test</span>: &#123;<br>            <span class="hljs-attr">test1</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">test2</span>: <span class="hljs-number">2</span><br>        &#125;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> value<br>&#125;<br><br><span class="hljs-comment">// 结果:&#123;&quot;test&quot;:&#123;&quot;test1&quot;:1,&quot;test2&quot;:2&#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="字符串缩进"><a href="#字符串缩进" class="headerlink" title="字符串缩进"></a>字符串缩进</h3><p>上面我们通过<code>JSON.stringify()</code>得到的<code>JSON对象字符串</code>是没有格式的,看起来有点杂乱无章。这时候就轮到我们的第三个参数出场了,第三个参数用来控制缩进字符。</p><p>如果第三个参数是数值,表示缩进的空格数。最大缩进值为10,大于10的值会自动设置为10。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>,<br>    <span class="hljs-attr">hobbies</span>: [<br>        <span class="hljs-string">&quot;Animate&quot;</span>,<br>        <span class="hljs-string">&quot;Music&quot;</span>,<br>        <span class="hljs-string">&#x27;FrontEnd&#x27;</span><br>    ],<br>    <span class="hljs-attr">nowTime</span>: <span class="hljs-number">2022</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> jsonText = <span class="hljs-built_in">JSON</span>.stringify(person, <span class="hljs-literal">null</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">console</span>.log(jsonText) <br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/314460d2d2cc41b88104a713a473afda~tplv-k3u1fbpfcp-zoom-1.image"></p><p>第三个参数也可以是字符串,这样子就会使用这个字符串来缩进。<br>比如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> jsonText = <span class="hljs-built_in">JSON</span>.stringify(person, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;--&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0532f12e2be945f6b2719f1467a743a9~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="toJSON-方法"><a href="#toJSON-方法" class="headerlink" title="toJSON()方法"></a>toJSON()方法</h3><p>如果对象的值是函数,那么我们使用<code>JSON.stringify()</code>时,就会忽略掉这个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>,<br>    <span class="hljs-attr">hobbies</span>: [<br>        <span class="hljs-string">&quot;Animate&quot;</span>,<br>        <span class="hljs-string">&quot;Music&quot;</span>,<br>        <span class="hljs-string">&#x27;FrontEnd&#x27;</span><br>    ],<br>    <span class="hljs-attr">nowTime</span>: <span class="hljs-number">2022</span>,<br>    <span class="hljs-attr">tt</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> jsonText = <span class="hljs-built_in">JSON</span>.stringify(person, <span class="hljs-literal">null</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">console</span>.log(jsonText) <br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b69f3898fe14c4f96410194215efb92~tplv-k3u1fbpfcp-zoom-1.image"></p><p>但是,当名称是<code>toJSON</code>时,就不太一样了,如果调用<code>toJSON</code>能获取到实际的值,那么<code>JSON.stringify()</code>会得到<code>toJSON</code>返回的实际值。当然,这个实际值也是会受到第二个参数、第三个参数的影响的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>,<br>    <span class="hljs-attr">hobbies</span>: [<br>        <span class="hljs-string">&quot;Animate&quot;</span>,<br>        <span class="hljs-string">&quot;Music&quot;</span>,<br>        <span class="hljs-string">&#x27;FrontEnd&#x27;</span><br>    ],<br>    <span class="hljs-attr">nowTime</span>: <span class="hljs-number">2022</span>,<br>    <span class="hljs-attr">toJSON</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;haha&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>,<br>            <span class="hljs-attr">job</span>: &#123;<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;Coder&#x27;</span>,<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> jsonText = <span class="hljs-built_in">JSON</span>.stringify(person, [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>], <span class="hljs-number">4</span>)<br><span class="hljs-built_in">console</span>.log(jsonText) <br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a07fcb6e925d4a9793f65b398e364030~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h2><p><code>JSON.parse()</code>方法可以把JSON字符串转换为JSON对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = <span class="hljs-string">&#x27;&#123;&quot;name&quot;: &quot;clz&quot;&#125;&#x27;</span><br><br><span class="hljs-keyword">const</span> jsonObj = <span class="hljs-built_in">JSON</span>.parse(person)<br><br><span class="hljs-built_in">console</span>.log(jsonObj)    <span class="hljs-comment">// &#123;name: &#x27;clz&#x27;&#125;</span><br></code></pre></td></tr></table></figure><p><strong>JSON字符串属性必须使用双引号,单引号会导致语法错误</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = <span class="hljs-string">&quot;&#123;&#x27;name&#x27;: &#x27;clz&#x27;&#125;&quot;</span><br><span class="hljs-comment">// SyntaxError: Unexpected token &#x27; in JSON</span><br><br><span class="hljs-keyword">const</span> jsonObj = <span class="hljs-built_in">JSON</span>.parse(person)<br><span class="hljs-built_in">console</span>.log(jsonObj)    <br></code></pre></td></tr></table></figure><p>如果属性值是字符串,也需要使用<code>双引号</code>,否则会语法错误。如果属性值不是字符串,那么就不需要引号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = <span class="hljs-string">`&#123;&quot;name&quot;: &quot;clz&quot;&#125;`</span>      <span class="hljs-comment">// 正常,不报错</span><br>person = <span class="hljs-string">&#x27;&#123;&quot;age&quot;: 21&#125;&#x27;</span>              <span class="hljs-comment">// 属性值不是字符串,属性值就不需要双引号(属性名还是需要滴)</span><br><br>person = <span class="hljs-string">`&#123;&quot;name&quot;: &#x27;clz&#x27;&#125;`</span>       <span class="hljs-comment">// 报语法错误</span><br><span class="hljs-keyword">const</span> jsonObj = <span class="hljs-built_in">JSON</span>.parse(person)<br><span class="hljs-built_in">console</span>.log(jsonObj)    <br></code></pre></td></tr></table></figure><p>值不能是<code>undefined</code>和函数,会报错,加上双引号后,不会报错,但值也变成字符串类型了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = <span class="hljs-string">`&#123;&quot;name&quot;: &quot;undefined&quot;&#125;`</span>      <span class="hljs-comment">// 不报错,但是值会变成字符串类型</span><br><span class="hljs-comment">// person = `&#123;&quot;name&quot;: undefined&#125;`      // 语法错误</span><br><br><span class="hljs-keyword">const</span> jsonObj = <span class="hljs-built_in">JSON</span>.parse(person)<br><span class="hljs-built_in">console</span>.log(jsonObj)    <br></code></pre></td></tr></table></figure><h3 id="第二个参数"><a href="#第二个参数" class="headerlink" title="第二个参数"></a>第二个参数</h3><p><code>JSON.parse()</code>可以接收第二个参数(函数), 用来修改解析生成的原始值。每个键值对都会调用一次,有点点像数组的<code>map</code>函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">nowTime</span>: <span class="hljs-number">2022</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> jsonStr = <span class="hljs-built_in">JSON</span>.stringify(person)<br><br><span class="hljs-keyword">const</span> jsonObj = <span class="hljs-built_in">JSON</span>.parse(jsonStr, <span class="hljs-function">(<span class="hljs-params">key, value</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;name&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;赤蓝紫&#x27;</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;age&#x27;</span>) &#123;<br>        <span class="hljs-comment">// 如果返回undefined，则相当于跳过这个属性，实际就会隐藏这个属性</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> value<br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> jsonObj)    <span class="hljs-comment">// object</span><br><span class="hljs-built_in">console</span>.log(jsonObj)        <span class="hljs-comment">// &#123;name: &#x27;赤蓝紫&#x27;, nowTime: 2022&#125;</span><br></code></pre></td></tr></table></figure><p>用处: 比如可以把日期字符串转换为<code>Date</code>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">nowTime</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2022</span>, <span class="hljs-number">11</span>, <span class="hljs-number">31</span>) <span class="hljs-comment">// 月：0代表1月，11代表12月</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> jsonStr = <span class="hljs-built_in">JSON</span>.stringify(person)<br><br><span class="hljs-keyword">const</span> jsonObj = <span class="hljs-built_in">JSON</span>.parse(jsonStr)<br><br><span class="hljs-built_in">console</span>.log(jsonObj.nowTime)        <span class="hljs-comment">// 2022-12-30T16:00:00.000Z</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> jsonObj.nowTime) <span class="hljs-comment">// string</span><br></code></pre></td></tr></table></figure><p>如果不进行任何操作，上面的<code>Date对象</code>转换成字符串，再转换成对象，会变成日期字符串了。而且，日期还减了一天。</p><p>如果我们想要还原成<code>Date对象</code>，并得到正确的时间，可以使用第二个参数来实现，只需要用该日期字符串实例化一个日期对象，再返回就行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">nowTime</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2022</span>, <span class="hljs-number">11</span>, <span class="hljs-number">31</span>) <span class="hljs-comment">// 月：0代表1月，11代表12月</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> jsonStr = <span class="hljs-built_in">JSON</span>.stringify(person)<br><br><span class="hljs-keyword">const</span> jsonObj = <span class="hljs-built_in">JSON</span>.parse(jsonStr, <span class="hljs-function">(<span class="hljs-params">key, value</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;nowTime&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(value)<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> value<br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(jsonObj.nowTime)        <span class="hljs-comment">// Sat Dec 31 2022 00:00:00 GMT+0800 (中国标准时间)</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> jsonObj.nowTime) <span class="hljs-comment">// object</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JSON的使用之灵活版&quot;&gt;&lt;a href=&quot;#JSON的使用之灵活版&quot; class=&quot;headerlink&quot; title=&quot;JSON的使用之灵活版&quot;&gt;&lt;/a&gt;JSON的使用之灵活版&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;head</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Canvas生成缩略图</title>
    <link href="https://www.clzczh.top/2022/06/18/Canvas%E7%94%9F%E6%88%90%E7%BC%A9%E7%95%A5%E5%9B%BE/"/>
    <id>https://www.clzczh.top/2022/06/18/Canvas%E7%94%9F%E6%88%90%E7%BC%A9%E7%95%A5%E5%9B%BE/</id>
    <published>2022-06-18T04:03:02.000Z</published>
    <updated>2022-06-18T04:04:41.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Canvas生成缩略图"><a href="#Canvas生成缩略图" class="headerlink" title="Canvas生成缩略图"></a>Canvas生成缩略图</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>个人博客的图片太大了，想换成缩略图，正好学了点Canvas，发现用Canvas画出来的图片就有点缩略图的感觉，于是就开始搞起来了</p></blockquote><h2 id="利用canvas实现绘制图片"><a href="#利用canvas实现绘制图片" class="headerlink" title="利用canvas实现绘制图片"></a>利用canvas实现绘制图片</h2><p>先通过<code>canvas.getContext(&#39;2d&#39;)</code>获取2D绘图上下文，然后调用绘图上下文的<code>drawImage</code>方法，实现图片的绘制。详情可查看之前写的Canvas的文章。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mycanvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;640&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;360&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;mycanvas&#x27;</span>)<br><br><span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br><span class="hljs-comment">// 获取图像</span><br><span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> Image();<br>img.src = <span class="hljs-string">&quot;./big.png&quot;</span>;<br><br><span class="hljs-comment">// 图片加载完成后，绘制图片到canvas上</span><br>img.onload = <span class="hljs-function">() =&gt;</span> &#123;<br>    context.drawImage(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">640</span>, <span class="hljs-number">360</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181203588.png" alt="image-20220521184441072"></p><h2 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h2><p>上面我们就已经绘制图片了，但是下载图片比较麻烦，得通过右键浏览器自带的另存方法。</p><p>所以我们可以通过Canvas的<code>toDataURL</code>方法，将绘制的图片转成<code>base64</code>编码，然后通过<code>a链接</code>方式下载。具体的下载方法的实现同样可以查看以前写的文章。(偷懒，不想贴地址，手动狗头)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;mycanvas&#x27;</span>)<br><br><span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br><span class="hljs-comment">// 获取图像</span><br><span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> Image();<br>img.src = <span class="hljs-string">&quot;./big.png&quot;</span>;<br><br><span class="hljs-comment">// 图片加载完成后，绘制图片到canvas上</span><br>img.onload = <span class="hljs-function">() =&gt;</span> &#123;<br>    context.drawImage(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">640</span>, <span class="hljs-number">360</span>);<br><br><br>    <span class="hljs-keyword">const</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;a&#x27;</span>)<br>    a.href = mycanvas.toDataURL()<br><br>    <span class="hljs-comment">// 获取源图片的名字</span><br>    a.download = img.src.split(<span class="hljs-string">&#x27;/&#x27;</span>)[img.src.split(<span class="hljs-string">&#x27;/&#x27;</span>).length - <span class="hljs-number">1</span>]<br><br>    a.click()<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/220bf3f107554ab49e131c83dc1a2054~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220521185207447"></p><p>刷新页面，我们就能发现自动下载了。接下来，我们就来看看，是不是我们想要的效果。</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181203556.png" alt="image-20220521185605337"></p><p>美滋滋</p><h2 id="去掉html结构中的canvas"><a href="#去掉html结构中的canvas" class="headerlink" title="去掉html结构中的canvas"></a>去掉html结构中的canvas</h2><p>实际上，我们可以自己生成Canvas，然后设置宽高，这样就不需要上DOM树，也能实现下载图片。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> w = <span class="hljs-number">640</span><br><span class="hljs-keyword">const</span> h = <span class="hljs-number">360</span><br><br><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;canvas&#x27;</span>)<br>mycanvas.width = w<br>mycanvas.height = h<br><br><span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br><span class="hljs-comment">// 获取图像</span><br><span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> Image();<br>img.src = <span class="hljs-string">&quot;./big.png&quot;</span>;<br><br><span class="hljs-comment">// 图片加载完成后，绘制图片到canvas上</span><br>img.onload = <span class="hljs-function">() =&gt;</span> &#123;<br>    context.drawImage(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, w, h);<br><br><br>    <span class="hljs-keyword">const</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;a&#x27;</span>)<br>    a.href = mycanvas.toDataURL()<br><br>    <span class="hljs-comment">// 获取源图片的名字</span><br>    a.download = img.src.split(<span class="hljs-string">&#x27;/&#x27;</span>)[img.src.split(<span class="hljs-string">&#x27;/&#x27;</span>).length - <span class="hljs-number">1</span>]<br><br>    a.click()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用input-file实现生成多张缩略图"><a href="#使用input-file实现生成多张缩略图" class="headerlink" title="使用input:file实现生成多张缩略图"></a>使用<code>input:file</code>实现生成多张缩略图</h2><p>因为安全的关系，网页中的js访问文件夹下的图片会有很多限制。所以选了一个比较简单地方法，利用<code>input:file</code>来实现。通过<code>input:file</code>的<code>files</code>属性可以访问选择的文件列表。</p><p>下面为了方便，使用了<code>form</code>元素，通过<code> document.form[0]</code>方式访问<code>form</code>元素，通过<code>form.elements[0]</code>访问<code>input</code>元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;generatePreview()&quot;</span>&gt;</span>生成缩略图<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> w = <span class="hljs-number">640</span><br><span class="hljs-keyword">const</span> h = <span class="hljs-number">360</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generatePreview</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">const</span> files = <span class="hljs-built_in">document</span>.forms[<span class="hljs-number">0</span>].elements[<span class="hljs-number">0</span>].files<br>    <span class="hljs-built_in">console</span>.log(files)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181203559.png" alt="image-20220521191518818"></p><p>这样子就能够获取选中的文件信息了，但是实际上我们只需要文件数量信息和文件名信息即可。</p><p>遍历图片列表，下载图片。(图片的<code>src</code>属性需要改成对应文件名，生成的图片也需要更改名字。)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">a.download = fileName.replace(<span class="hljs-regexp">/(\w+)/</span>, <span class="hljs-string">&#x27;$1_preview&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这里我使用的是<code>正则表达式+replace</code>方法去修改名字(简单版本，勿喷)</p><ul><li><code>\w</code>：匹配一个单字字符（字母、数字或者下划线）。等价于 <code>[A-Za-z0-9_]</code></li><li><code>+</code>：匹配前面一个表达式 1 次或者多次</li><li><code>$1</code>：捕获匹配项，前面的正则表达式中，使用括号包住了<code>\w+</code>，所以<code>$1</code>实际上就是这部分</li></ul><p>完整代码：(<strong><code>html</code>文件要放到图片文件夹下才有效</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;generatePreview()&quot;</span>&gt;</span>生成缩略图<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">const</span> w = <span class="hljs-number">640</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">const</span> h = <span class="hljs-number">360</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generatePreview</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">      <span class="hljs-keyword">const</span> files = <span class="hljs-built_in">document</span>.forms[<span class="hljs-number">0</span>].elements[<span class="hljs-number">0</span>].files</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> file <span class="hljs-keyword">of</span> files) &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">const</span> fileName = file.name</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-built_in">console</span>.log(file)</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;canvas&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">        mycanvas.width = w</span></span><br><span class="javascript"><span class="xml">        mycanvas.height = h</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">// 获取图像</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> Image();</span></span><br><span class="javascript"><span class="xml">        img.src = <span class="hljs-string">`./<span class="hljs-subst">$&#123;fileName&#125;</span>`</span>;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">// 图片加载完成后，绘制图片到canvas上</span></span></span><br><span class="javascript"><span class="xml">        img.onload = <span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="javascript"><span class="xml">          context.drawImage(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, w, h);</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">          <span class="hljs-keyword">const</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;a&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">          a.href = mycanvas.toDataURL()</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">          <span class="hljs-comment">// 获取源图片的名字</span></span></span><br><span class="javascript"><span class="xml">          a.download = fileName.replace(<span class="hljs-regexp">/(\w+)/</span>, <span class="hljs-string">&#x27;$1_preview&#x27;</span>)</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">          a.click()</span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">      &#125;</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f603307987840eca895bb6ba1dcd3e9~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220521193533209"></p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181203510.png" alt="image-20220521193331550"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>另外，直接本地打开，执行会报错，因为没有服务器环境，本地的html网页，本地的图片</p><p>本地的位置是没有域名的，所以会认为是跨域，会报错，可以使用<code>VSCode</code>的<code>Live Server</code>插件，然后右键，点击<code>Open with Live Server</code>就能够以服务器环境打开。</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202206181203701.png" alt="image-20220521200601567"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Canvas生成缩略图&quot;&gt;&lt;a href=&quot;#Canvas生成缩略图&quot; class=&quot;headerlink&quot; title=&quot;Canvas生成缩略图&quot;&gt;&lt;/a&gt;Canvas生成缩略图&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;head</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
    <category term="Canvas" scheme="https://www.clzczh.top/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>Canvas简单入门</title>
    <link href="https://www.clzczh.top/2022/05/29/Canvas/"/>
    <id>https://www.clzczh.top/2022/05/29/Canvas/</id>
    <published>2022-05-29T15:18:36.000Z</published>
    <updated>2022-05-29T15:23:23.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Canvas简单入门"><a href="#Canvas简单入门" class="headerlink" title="Canvas简单入门"></a>Canvas简单入门</h1><p>创建<code>canvas</code>至少需要提供<code>width</code>和<code>height</code>属性，才能通知浏览器需要多大位置画图。标签的内容是后备数据，在浏览器不支持<code>canvas</code>元素时显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mycanvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span>haha<span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以通过<code>if(canvas.getContext)</code>来判断浏览器是否支持<code>canvas</code>。</p><p>通过<code>canvas.getContext(&#39;2d&#39;)</code>可以获取 2D 绘图上下文。2D 绘图上下文提供了绘制 2D 图形的方法。左边原点(0, 0)在<code> canvas</code>元素的左上角，x 坐标向右增长，y 坐标向下增长。</p><h2 id="从画布上导出一张-PNG-格式的图片"><a href="#从画布上导出一张-PNG-格式的图片" class="headerlink" title="从画布上导出一张 PNG 格式的图片"></a>从画布上导出一张 PNG 格式的图片</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mycanvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span>haha<span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 确保浏览器支持canvas</span></span><br><span class="javascript">    <span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;</span><br><span class="javascript">      <span class="hljs-comment">// 获得图像的数据URI</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> imgURI = mycanvas.toDataURL(<span class="hljs-string">&quot;image/png&quot;</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(imgURI);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292320516.png" alt="image-20220522110709840"></p><p>我们查看控制台可以发现，输出了一串<code>base64</code>编码，也就是说，<code>canvas.toDataURL</code>就是将画布<code> canvas</code>转换成<code>base64</code>编码。</p><h2 id="填充与描边"><a href="#填充与描边" class="headerlink" title="填充与描边"></a>填充与描边</h2><ul><li><p>填充就是以特定的样式填充形状，包括颜色、渐变、图像</p></li><li><p>描边就是只给形状边界着色。</p></li></ul><p>显示效果取决于两个属性：<code>fillStyle</code>和<code>strokeStyle</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  context.fillStyle = <span class="hljs-string">&quot;#000&quot;</span>;<br>  context.strokeStyle = <span class="hljs-string">&quot;red&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>没有效果？<br>别急，这是因为我们只是设置了填充和描边而已，想要它生效，还需要绘制出来才能有效果。</p><h2 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h2><p>与绘制矩形相关的方法有三个。它们都接收 4 个参数：矩形 x 坐标、矩形 y 坐标、矩形宽度和矩形高度。(单位是像素，但是传参时不需要传单位)</p><ol><li><code>fillRect</code></li><li><code>strokeRect</code></li><li><code>clearRect</code></li></ol><h3 id="fillRect：绘制并填充矩形"><a href="#fillRect：绘制并填充矩形" class="headerlink" title="fillRect：绘制并填充矩形"></a><code>fillRect</code>：绘制并填充矩形</h3><p><code>fillRect</code>：以指定颜色在画布上绘制并填充矩形，填充色使用<code>fillStyle</code>来设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  context.fillStyle = <span class="hljs-string">&quot;pink&quot;</span>;<br>  context.fillRect(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);<br><br>  context.fillStyle = <span class="hljs-string">&quot;rgba(0, 0, 0, .1)&quot;</span>;<br>  context.fillRect(<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292320709.png" alt="image-20220522110314237"></p><h3 id="stokeRect：绘制矩形轮廓"><a href="#stokeRect：绘制矩形轮廓" class="headerlink" title="stokeRect：绘制矩形轮廓"></a><code>stokeRect</code>：绘制矩形轮廓</h3><p><code>stokeRect</code>：绘制矩形轮廓，颜色由<code>strokeStyle</code>来指定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  context.strokeStyle = <span class="hljs-string">&quot;red&quot;</span>;<br>  <span class="hljs-comment">// 设置描边宽度</span><br>  context.lineWidth = <span class="hljs-number">5</span>;<br>  context.strokeRect(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);<br><br>  context.strokeStyle = <span class="hljs-string">&quot;blue&quot;</span>;<br>  context.fillStyle = <span class="hljs-string">&quot;rgba(0, 0, 0, .1)&quot;</span>;<br>  context.strokeRect(<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292319241.png" alt="image-20220522110410841"></p><h3 id="clearRect：擦除画布中某个区域"><a href="#clearRect：擦除画布中某个区域" class="headerlink" title="clearRect：擦除画布中某个区域"></a><code>clearRect</code>：擦除画布中某个区域</h3><p><code>clearRect</code>：擦除画布中某个区域，把擦除的区域变透明。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  context.fillStyle = <span class="hljs-string">&quot;red&quot;</span>;<br>  context.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br><br>  context.clearRect(<span class="hljs-number">50</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292320228.png" alt="image-20220522110449360"></p><h2 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a>绘制路径</h2><p>绘制路径需要先调用<code>beginPath</code>，表示要开始绘制路径，再调用以下方法来绘制路径。</p><ul><li><code>lineTo(x, y)</code>：绘制一条从上一个点到(x, y)的直线</li><li><code>moveTo(x, y)</code>：不绘制线条，只是把画笔移动到(x, y)</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D">更多</a></li></ul><p>绘制完路径后，可以指定<code>fillStyle</code>属性并调用<code>fill</code>方法来填充路径，也可以指定<code>strokeStyle</code>属性并调用<code>stoke</code>方法来描画路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  <span class="hljs-comment">// 创建路径</span><br>  context.beginPath();<br><br>  <span class="hljs-comment">// 绘制圆弧，参数分别是圆心x坐标、圆形y坐标、圆弧半径、圆弧起始点(单位：弧度)、圆弧终点(单位：弧度)、绘制方向(false为顺时针绘制，true为逆时针绘制)</span><br>  context.arc(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">99</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-built_in">Math</span>.PI, <span class="hljs-literal">true</span>);<br><br>  <span class="hljs-comment">// context.fillStyle = &#x27;pink&#x27;</span><br>  <span class="hljs-comment">// context.fill()</span><br><br>  context.strokeStyle = <span class="hljs-string">&quot;pink&quot;</span>;<br>  context.stroke();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292321089.png" alt="image-20220522111214015"></p><p>还可以调用<code>clip</code>方法创建一个新的剪切区域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  <span class="hljs-comment">// 创建路径</span><br>  context.beginPath();<br><br>  <span class="hljs-comment">// 绘制圆弧，参数分别是圆心x坐标、圆形y坐标、圆弧半径、圆弧起始点(单位：弧度)、圆弧终点(单位：弧度)、绘制方向(false为顺时针绘制，true为逆时针绘制)</span><br>  context.arc(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-built_in">Math</span>.PI, <span class="hljs-literal">true</span>);<br><br>  context.fillStyle = <span class="hljs-string">&quot;pink&quot;</span>;<br>  context.clip();<br><br>  context.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的扇形怎么出来的呢？<br>我们可以把<code>clip</code>变成<code>fill</code>，看下没有被剪切的话，是什么样子。</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292321085.png" alt="img"></p><p>也就是说，实际上剪切就是两个图形相交部分。</p><p>如果使用<code>lineTo</code>需要注意：没有设置<code>moveTo</code>时，这个位置并不是(0, 0)，而是空，所以第一次的<code>lineTo</code>没法画出结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br>  <span class="hljs-comment">// 创建路径</span><br>  context.beginPath();<br><br>  <span class="hljs-comment">// context.moveTo(0, 0);</span><br>  context.lineTo(<span class="hljs-number">100</span>, <span class="hljs-number">50</span>);<br>  context.lineTo(<span class="hljs-number">200</span>, <span class="hljs-number">0</span>);<br><br>  context.lineWidth = <span class="hljs-number">8</span>;<br>  context.strokeStyle = <span class="hljs-string">&quot;pink&quot;</span>;<br><br>  <span class="hljs-comment">// 描画路径</span><br>  context.stroke();<br>&#125;<br></code></pre></td></tr></table></figure><p>没有<code>moveTo</code>：</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292321928.png" alt="image-20220522112404156"></p><p>有<code>moveTo</code>：</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292321959.png" alt="image-20220522112440786"></p><h3 id="beginPath-的作用"><a href="#beginPath-的作用" class="headerlink" title="beginPath 的作用"></a>beginPath 的作用</h3><p>上面的例子中，<code>beginPath</code>并没有作用，也就是说上面的例子中，其实有没有<code>beginPath</code>都一样。那么<code>beginPath</code>有什么作用呢？</p><p><strong><code>beginPath</code>表示下面绘制的图形是一个新的路径</strong>。具体看下实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><span class="hljs-comment">// 创建路径</span><br>context.beginPath();<br><br>context.moveTo(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>context.lineTo(<span class="hljs-number">100</span>, <span class="hljs-number">50</span>);<br><br>context.lineWidth = <span class="hljs-number">8</span>;<br>context.strokeStyle = <span class="hljs-string">&quot;pink&quot;</span>;<br><br><span class="hljs-comment">// 描画路径</span><br>context.stroke();<br><br>context.lineTo(<span class="hljs-number">200</span>, <span class="hljs-number">0</span>);<br>context.strokeStyle = <span class="hljs-string">&quot;purple&quot;</span>;<br>context.stroke();<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292320049.png" alt="image-20220522112513152"></p><p>想要的效果是画出两条不一样颜色的线，但是最后是一种颜色折线，这是因为我们只是用了一次<code>beginPath</code>，所以就会把这两条线当成同一个路径，最后调用的<code>stroke</code>就会把原本是粉色的线再用紫色画一遍，所以最终的效果就是只有一条折线。</p><p>所以需要使用<code>beginPath</code>创建新路径，新的路径还是会有<strong>没有设置<code>moveTo</code>时，这个位置并不是(0, 0)，而是空</strong>的问题，所以需要使用<code>moveTo</code>设置位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br>  <span class="hljs-comment">// 创建路径</span><br>  context.beginPath();<br><br>  context.moveTo(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  context.lineTo(<span class="hljs-number">100</span>, <span class="hljs-number">50</span>);<br><br>  context.lineWidth = <span class="hljs-number">8</span>;<br>  context.strokeStyle = <span class="hljs-string">&quot;pink&quot;</span>;<br>  context.stroke();<br><br>  context.beginPath();<br>  <span class="hljs-comment">// 创建新的路径，需要重新设置位置</span><br>  context.moveTo(<span class="hljs-number">100</span>, <span class="hljs-number">50</span>);<br>  context.lineTo(<span class="hljs-number">200</span>, <span class="hljs-number">0</span>);<br>  context.strokeStyle = <span class="hljs-string">&quot;purple&quot;</span>;<br>  context.stroke();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292321827.png" alt="image-20220522112538976"></p><h3 id="closePath-的作用"><a href="#closePath-的作用" class="headerlink" title="closePath 的作用"></a>closePath 的作用</h3><p>有可能会陷进<code>closePath</code>是结束路径的误区，认为<code>closePath</code>就是<code>beginPath</code>的配套。但是<code>closePath</code>和<code>beginPath</code>并不是配套的，它们的功能不一样。所以<code>closePath</code>之后的路径也不是新的路径，只有<code>beginPath</code>才行。</p><p>而<code>closePath</code>的作用是将最近绘制的路径闭合，<strong>和之前有没有<code>beginPath</code>无关</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  <span class="hljs-comment">// context.beginPath();  // 有无`beginPath`都没有影响</span><br><br>  context.moveTo(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>  context.lineTo(<span class="hljs-number">100</span>, <span class="hljs-number">50</span>);<br>  context.lineTo(<span class="hljs-number">20</span>, <span class="hljs-number">70</span>);<br>  context.closePath();<br><br>  context.lineWidth = <span class="hljs-number">8</span>;<br>  context.strokeStyle = <span class="hljs-string">&quot;pink&quot;</span>;<br>  context.stroke();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292320241.png" alt="image-20220522112629070"></p><p>上面我们只绘制了两条线，但是最终得到的结果是一个三角形，这是因为我们使用<code>closePath</code>把最近绘制的路径闭合了。</p><h2 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h2><p>绘制文本有两种方法。</p><ol><li><code>fillText</code>：使用<code>fillStyle</code>属性绘制文本</li><li><code>strokeText</code>：使用<code>strokeStyle</code>属性绘制文本</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  context.moveTo(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>  context.lineTo(<span class="hljs-number">150</span>, <span class="hljs-number">75</span>);<br>  context.lineTo(<span class="hljs-number">30</span>, <span class="hljs-number">100</span>);<br>  context.closePath();<br><br>  context.lineWidth = <span class="hljs-number">1</span>;<br>  context.strokeStyle = <span class="hljs-string">&quot;pink&quot;</span>;<br><br>  context.fillStyle = <span class="hljs-string">&quot;purple&quot;</span>;<br>  context.fillText(<span class="hljs-string">&quot;CLZ&quot;</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>);<br>  context.strokeText(<span class="hljs-string">&quot;CLZ&quot;</span>, <span class="hljs-number">50</span>, <span class="hljs-number">80</span>);<br><br>  context.stroke();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292320806.png" alt="image-20220522112741066"></p><p>可以通过<code>font</code>、<code>textAlign</code>、<code>textBaseline</code>属性设置文本的字体、对齐方式、基线。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">context.font = <span class="hljs-string">&quot;700 16px Arial&quot;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292320835.png" alt="img"></p><p><code>textAlign</code>：</p><ul><li>如果是<code>start</code>，那么 x 坐标就是文本的左侧坐标</li><li>如果是<code>center</code>，那么 x 坐标就是文本的中心点坐标</li><li>如果是<code>end</code>，那么 x 坐标就是文本的右侧坐标</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  context.moveTo(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>  context.lineTo(<span class="hljs-number">150</span>, <span class="hljs-number">75</span>);<br>  context.lineTo(<span class="hljs-number">30</span>, <span class="hljs-number">100</span>);<br>  context.closePath();<br><br>  context.lineWidth = <span class="hljs-number">1</span>;<br>  context.strokeStyle = <span class="hljs-string">&quot;pink&quot;</span>;<br><br>  context.font = <span class="hljs-string">&quot;700 16px Arial&quot;</span>;<br>  context.fillStyle = <span class="hljs-string">&quot;purple&quot;</span>;<br><br>  context.textAlign = <span class="hljs-string">&quot;start&quot;</span>;<br>  context.strokeText(<span class="hljs-string">&quot;CLZ&quot;</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);<br><br>  context.textAlign = <span class="hljs-string">&quot;center&quot;</span>;<br>  context.fillText(<span class="hljs-string">&quot;CLZ&quot;</span>, <span class="hljs-number">50</span>, <span class="hljs-number">65</span>);<br><br>  context.textAlign = <span class="hljs-string">&quot;end&quot;</span>;<br>  context.strokeText(<span class="hljs-string">&quot;CLZ&quot;</span>, <span class="hljs-number">50</span>, <span class="hljs-number">80</span>);<br><br>  context.stroke();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292320368.png" alt="image-20220522112924112"></p><p><strong><code>textBaseline</code>类似</strong></p><h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><p>2D 换图上下文支持所有常见的绘制变化。<br><code>rotate(a)</code>：围绕原点把图像旋转 a 弧度<br><code>scale(x, y)</code>：缩放图像<br><code>translate(x, y)</code>：移动原点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  <span class="hljs-comment">// 创建路径</span><br>  context.beginPath();<br><br>  <span class="hljs-comment">// 绘制圆弧，参数分别是圆心x坐标、圆形y坐标、圆弧半径、圆弧起始点(单位：弧度)、圆弧终点(单位：弧度)、绘制方向(false为顺时针绘制，true为逆时针绘制)</span><br>  context.arc(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-built_in">Math</span>.PI, <span class="hljs-literal">true</span>);<br><br>  context.lineWidth = <span class="hljs-string">&quot;8&quot;</span>;<br>  context.strokeStyle = <span class="hljs-string">&quot;pink&quot;</span>;<br><br>  <span class="hljs-comment">// 移动原点</span><br>  context.translate(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><br>  <span class="hljs-comment">// 旋转</span><br>  context.rotate(<span class="hljs-built_in">Math</span>.PI);<br><br>  <span class="hljs-comment">// 缩放</span><br>  context.scale(<span class="hljs-number">0.75</span>, <span class="hljs-number">0.75</span>);<br><br>  <span class="hljs-comment">// 因为已经移动过原点了，所以这时候(0, 0)就是圆心</span><br>  context.moveTo(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  context.lineTo(<span class="hljs-number">25</span>, <span class="hljs-number">30</span>);<br><br>  context.stroke();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292321235.png" alt="image-20220522113048545"></p><p>上面的例子中，已经把很多变化都使用上了，如果想要了解具体例子可以注释掉其他部分。</p><h3 id="save-和-restore-的作用"><a href="#save-和-restore-的作用" class="headerlink" title="save 和 restore 的作用"></a>save 和 restore 的作用</h3><p><code>save</code>方法可以保存应用到绘图上下文的设置和变换，不保存绘图上下文的内容。后续可以通过<code>restore</code>方法，恢复上下文的设置和变换。<code>save</code>和<code>restore</code>的使用类似于栈，后进先出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  context.fillStyle = <span class="hljs-string">&quot;red&quot;</span>;<br>  context.save();<br><br>  context.fillStyle = <span class="hljs-string">&quot;blue&quot;</span>;<br>  context.translate(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>  context.save();<br><br>  context.fillStyle = <span class="hljs-string">&quot;purple&quot;</span>;<br>  context.translate(-<span class="hljs-number">100</span>, -<span class="hljs-number">100</span>);<br>  context.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><br>  context.restore();<br>  context.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><br>  context.restore();<br>  context.fillRect(<span class="hljs-number">100</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><br>  context.restore();<br>  context.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292321143.png" alt="image-20220522113308234"></p><p>分析：设 XXX 为<strong>绘图上下文的设置和变化</strong></p><ol><li>设置填充色为红色，<code>save</code>保存</li><li>设置填充色为蓝色，移动原点，<code>save</code>保存</li><li>设置填充色为紫色，移动原点，画出紫色的矩形</li><li><code>restore</code>恢复<strong>XXX</strong>，此时，原点为(100, 100)，填充色为蓝色。画出蓝色的矩形</li><li><code>restore</code>恢复**XXX**，此时，原点为(0, 0)，填充色为红色。画出红色的矩形</li><li><code>restore</code>已经没有保存的<strong>XXX</strong>，所以<strong>XXX</strong>不会变化</li></ol><h2 id="绘制图像"><a href="#绘制图像" class="headerlink" title="绘制图像"></a>绘制图像</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./avatar.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mycanvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span>haha<span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过<code>drawImage</code>把 HTML 的 img 元素或另一个 canvas 元素绘制到当前画布中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  <span class="hljs-comment">// 获取图像</span><br>  <span class="hljs-keyword">const</span> img = <span class="hljs-built_in">document</span>.images[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">// 在画布的坐标出绘制图像，此时图像和原来的图像一样大，指的是原文件的大小</span><br>  <span class="hljs-comment">// context.drawImage(img, 10, 10)</span><br><br>  <span class="hljs-comment">// 传入另外两个参数，设置绘制图像的宽高</span><br>  context.drawImage(img, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>只传3个参数，画到画布上的跟原来的图像一样大，但画布没那么大。所以会只有一部分。</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292322993.png" alt="image-20220522113739829"></p><p>传入五个参数，可以让设置图像的宽高，显示完整的图像。</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292321509.png" alt="image-20220522113901338"></p><h3 id="去掉DOM树上的img"><a href="#去掉DOM树上的img" class="headerlink" title="去掉DOM树上的img"></a>去掉DOM树上的img</h3><p>上面的做法是需要<code>html</code>中有<code>img</code>元素才能执行的.实际上,我们也可以通过<code>image</code>对象来实现。</p><p>即获取图像不再是通过<code>document.images[0]</code>，而是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> Image();<br>img.src = <span class="hljs-string">&quot;./avatar.png&quot;</span>;<br></code></pre></td></tr></table></figure><p>另外，绘制图像应该在<code>img</code>的<code>load</code>事件回调中调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> Image();<br>img.src = <span class="hljs-string">&quot;./avatar.png&quot;</span>;<br>img.onload = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 传入另外两个参数，设置绘制图像的宽高</span><br>  context.drawImage(img, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292322851.png" alt="image-20220522114113263"></p><p>还可以接收 9 个参数，实现把原始图像的一部分绘制到画布上。<br>如：<code>context.drawImage(img, 0, 10, 50, 50, 0, 100, 20, 30)</code>，从原始图像的(0, 10)开始，50 像素宽、50 像素高，画到画布上(0, 100)开始，宽 40 像素、高 60 像素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  <span class="hljs-comment">// 获取图像</span><br>  <span class="hljs-keyword">const</span> img = <span class="hljs-built_in">document</span>.images[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">// // 9个参数</span><br>  context.drawImage(img, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">300</span>, <span class="hljs-number">300</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">40</span>, <span class="hljs-number">40</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292321579.png" alt="image-20220522114232024"></p><h3 id="下载图像"><a href="#下载图像" class="headerlink" title="下载图像"></a>下载图像</h3><p>操作的结果可以使用<code>canvas.toDataURL()</code>方法获取。</p><p>再搭配下载图片的方式就能实现下载图片。(这里用的是<code>a</code>标签方法)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;a&quot;</span>);<br>a.href = mycanvas.toDataURL();<br><br><span class="hljs-comment">// 获取源图片的名字</span><br>a.download = img.src.split(<span class="hljs-string">&quot;/&quot;</span>)[img.src.split(<span class="hljs-string">&quot;/&quot;</span>).length - <span class="hljs-number">1</span>];<br><br>a.click();<br></code></pre></td></tr></table></figure><h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><p>设置好阴影有关的属性值，就能够自动为要绘制的形状或路径生成阴影</p><ul><li><code>shadowOffsetX</code>：阴影相对于形状或路径的 x 坐标偏移。默认为 0</li><li><code>shadowOffsetY</code>：阴影相对于形状或路径的 y 坐标偏移。默认为 0</li><li><code>shadowBlur</code>：阴影的模糊量。默认值为 0，表示不模糊</li><li><code>shadowColor</code>：阴影的颜色。默认为黑色</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  context.shadowOffsetX = <span class="hljs-number">5</span>;<br>  context.shadowOffsetY = <span class="hljs-number">10</span>;<br>  context.shadowBlur = <span class="hljs-number">5</span>;<br>  context.shadowColor = <span class="hljs-string">&quot;rgba(0, 0, 0, .2)&quot;</span>;<br><br>  context.fillStyle = <span class="hljs-string">&quot;red&quot;</span>;<br>  context.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);<br><br>  context.moveTo(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>  context.lineTo(<span class="hljs-number">180</span>, <span class="hljs-number">20</span>);<br><br>  context.lineWidth = <span class="hljs-number">12</span>;<br>  context.stroke();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292323370.png" alt="image-20220522114457032"></p><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><p>线性渐变可以调用上下文的<code>createLinearGradient</code>方法，接收四个参数：起点 x 坐标、起点 y 坐标、终点 x 坐标、终点 y 坐标，创建<code>CanvasGradient</code>对象。</p><p>有了渐变对象后，就需要添加渐变色标了，通过<code>addColorStop</code>可以添加色标，第一个参数范围为 0~1，第二个参数是 CSS 颜色字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> gradient = context.createLinearGradient(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">180</span>, <span class="hljs-number">180</span>);<br><br>  gradient.addColorStop(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;red&quot;</span>);<br>  gradient.addColorStop(<span class="hljs-number">0.5</span>, <span class="hljs-string">&quot;blue&quot;</span>);<br>  gradient.addColorStop(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;purple&quot;</span>);<br><br>  context.fillStyle = gradient;<br>  context.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292322784.png" alt="image-20220522114554072"></p><p>为了让渐变覆盖整个矩形，渐变的坐标和矩形的坐标应该搭配合适，不然只会显示部分渐变。</p><p>还可以调用上下文的<code>createRadialGradient</code>方法来创建径向渐变。接收 6 个参数，前 3 个参数指定起点圆形中心的 x 坐标、y 坐标和半径，后 3 个参数指定终点圆形中心的 x 坐标和半径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  <span class="hljs-keyword">let</span> gradient = context.createRadialGradient(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">20</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">80</span>);<br>  gradient.addColorStop(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;white&quot;</span>);<br>  gradient.addColorStop(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;black&quot;</span>);<br><br>  context.fillStyle = gradient;<br>  context.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这个渐变，简单理解就是内层圆为半径为 20 像素的<code>纯白圆</code>，外层圆为 80 像素的<code>白渐变黑圆</code>，剩余部分就是黑色。</p><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292323582.png" alt="image-20220522114630535"></p><h2 id="图案"><a href="#图案" class="headerlink" title="图案"></a>图案</h2><blockquote><p>图案适用于填充和描画图形的重复图像。<br>通过<code>createPattern</code>方法，该方法接收两个参数，第一个参数是<code>img</code>元素，第二个参数是是否重复，和<code>background-repeat</code>属性一样。</p></blockquote><p>然后，像渐变一样，把<code>pattern</code>对象赋值给<code>fillStyle</code>属性即可。</p><p>这个图案实际上就有点背景图像的味道了，通过创建<code>pattern</code>对象，来控制图像的重复。然后，给绘图上下文的<code>fillStyle</code>赋值，设置填充样式，最后再通过<code>fillRect</code>来设置图案的位置和大小。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mycanvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br><br><span class="hljs-comment">// 确保浏览器支持canvas</span><br><span class="hljs-keyword">if</span> (mycanvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> context = mycanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> image = <span class="hljs-built_in">document</span>.images[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-keyword">const</span> pattern = context.createPattern(image, <span class="hljs-string">&quot;repeat&quot;</span>);<br>  <span class="hljs-comment">// const pattern = context.createPattern(image, &#x27;repeat-y&#x27;)</span><br>  <span class="hljs-comment">// const pattern = context.createPattern(image, &#x27;no-repeat&#x27;)</span><br><br>  context.fillStyle = pattern;<br>  context.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">190</span>, <span class="hljs-number">190</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/13535944743/CLZ_img/master/images/202205292322852.png" alt="image-20220522115145807"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Canvas简单入门&quot;&gt;&lt;a href=&quot;#Canvas简单入门&quot; class=&quot;headerlink&quot; title=&quot;Canvas简单入门&quot;&gt;&lt;/a&gt;Canvas简单入门&lt;/h1&gt;&lt;p&gt;创建&lt;code&gt;canvas&lt;/code&gt;至少需要提供&lt;code&gt;width</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>element-plus下拉框全选</title>
    <link href="https://www.clzczh.top/2022/05/29/element-plus%E4%B8%8B%E6%8B%89%E6%A1%86%E5%85%A8%E9%80%89/"/>
    <id>https://www.clzczh.top/2022/05/29/element-plus%E4%B8%8B%E6%8B%89%E6%A1%86%E5%85%A8%E9%80%89/</id>
    <published>2022-05-29T15:15:25.000Z</published>
    <updated>2022-05-29T15:15:47.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="element-plus-下拉框实现全选功能"><a href="#element-plus-下拉框实现全选功能" class="headerlink" title="element-plus 下拉框实现全选功能"></a>element-plus 下拉框实现全选功能</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>实习确实能学到不少东西，但是学到的东西果然还是需要沉淀下来，不然后面立马又忘记了。</p><h2 id="下拉框的简单使用"><a href="#下拉框的简单使用" class="headerlink" title="下拉框的简单使用"></a>下拉框的简单使用</h2><p>使用方法还是比较简单的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;user.name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in nameList&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>首先需要使用到<code> el-select</code>和<code> el-option</code>，<code> el-select</code>就是下拉框，所以需要使用<code> v-model</code>双向绑定数据。而<code> el-option</code>就是下拉框的选项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; reactive, toRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> state = reactive(&#123;<br>  <span class="hljs-attr">nameList</span>: [<span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-string">&quot;czh&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>],<br>  <span class="hljs-attr">user</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">const</span> &#123; nameList, user &#125; = toRefs(state);<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ddb4f206d7847f8a92cf773a586b1d3~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220514103938933"></p><h2 id="全选互斥"><a href="#全选互斥" class="headerlink" title="全选互斥"></a>全选互斥</h2><p>需求：下拉框选项中有全选以及其他项，需要实现点击全选后不能选择其他项，选中了其他项同样不能选择全选。</p><h3 id="下拉框多选"><a href="#下拉框多选" class="headerlink" title="下拉框多选"></a>下拉框多选</h3><p>先来简单了解下下拉框的多选。</p><p>理论上来说，是只需要给<code> el-select</code>添加上<code> multiple</code>就能实现多选，但是效果不太好。选中的会挤在一起。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7436da9652f94cd8b101414a3a135b92~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220514105832257"></p><p>这个时候，我们可以添加<code> collapse-tags</code>属性，这样子，这样子就只会显示一个选项，没显示的以数量的形式在后面。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e857cea66bb740d186c45f460fa61b70~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220514110218782"></p><p>再添加<code>   collapse-tags-tooltip</code>属性，还能实现，悬浮在<code> +X</code>上方时，显示全部选中的选项。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8da9fe9c52646bc9b1987e4440ee926~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220514110356573"></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-select</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.ages&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">multiple</span></span><br><span class="hljs-tag">  <span class="hljs-attr">collapse-tags</span></span><br><span class="hljs-tag">  <span class="hljs-attr">collapse-tags-tooltip</span></span><br><span class="hljs-tag">&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in ageList&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; reactive, toRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> state = reactive(&#123;<br>  <span class="hljs-attr">ageList</span>: [<span class="hljs-string">&quot;全部&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>],<br>  <span class="hljs-attr">form</span>: &#123;<br>    <span class="hljs-attr">ages</span>: [],<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">const</span> &#123; ageList, form &#125; = toRefs(state);<br></code></pre></td></tr></table></figure><h3 id="全选互斥的实现"><a href="#全选互斥的实现" class="headerlink" title="全选互斥的实现"></a>全选互斥的实现</h3><p>这个主要就是依靠<code> disabled</code>属性来实现，只不过属性值变成一个返回<code> boolean</code>值的函数了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-select</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.ages&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">multiple</span></span><br><span class="hljs-tag">  <span class="hljs-attr">collapse-tags</span></span><br><span class="hljs-tag">  <span class="hljs-attr">collapse-tags-tooltip</span></span><br><span class="hljs-tag">&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in ageList&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;checkAge&quot;</span></span><br><span class="hljs-tag">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> checkAge = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad32d35961344186a13590c467b578e1~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220514111132828"></p><p>可以看到，当绑定的<code> checkAge</code>返回<code> true</code>的时候，全部选项都不能选了。</p><p>明白原理后，我们便只需要理清思路就行了。</p><p>首先，我们绑定的<code> checkAge</code>应该要把选中项(<code> item</code>)作为参数传给<code> checkAge</code>，这样子才能得到选中的项。</p><p>接着，就是思路了。我们禁选的情况就两种：</p><ol><li>选择了<code>全部</code>，此时禁选<code>非全部的选项</code></li><li>选择了<code>非全部的选项</code>，此时<code>禁选全部</code></li></ol><p>也就是说，只有这两个情况返回<code> true</code>，其他时候返回<code> false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> checkAge = <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (form.value.ages.includes(<span class="hljs-string">&quot;全部&quot;</span>) &amp;&amp; item !== <span class="hljs-string">&quot;全部&quot;</span>) &#123;<br>    <span class="hljs-comment">// 选择了`全部`，此时禁选`非全部的选项`</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!form.value.ages.includes(<span class="hljs-string">&quot;全部&quot;</span>) &amp;&amp; item === <span class="hljs-string">&quot;全部&quot;</span>) &#123;<br>    <span class="hljs-comment">// 选择了`非全部的选项`，此时`禁选全部`</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>是不是很简单，但是还没完，上面那样子还会有小问题。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/397fedff8cd34121b2b49c5a19fc3036~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220514112808070"></p><p>我们什么都没有选择的时候，<code>全部选项</code>不能选。这是因为上面选择非全部选项时的判断，写成了没有选择<code>全部</code>的时候，所以一开始确实没有选择<code>全部</code>，那么就不能选择了。所以在一开始应该判断有没有已经选中的，如果没有，就返回`` false`</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> checkAge = <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (form.value.ages.length === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (form.value.ages.includes(<span class="hljs-string">&quot;全部&quot;</span>) &amp;&amp; item !== <span class="hljs-string">&quot;全部&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!form.value.ages.includes(<span class="hljs-string">&quot;全部&quot;</span>) &amp;&amp; item === <span class="hljs-string">&quot;全部&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1d40521b8064444b135f82b1d3eecbe~tplv-k3u1fbpfcp-zoom-1.image" alt="select"></p><h2 id="多个下拉框互斥"><a href="#多个下拉框互斥" class="headerlink" title="多个下拉框互斥"></a>多个下拉框互斥</h2><p>多个下拉框不能同时选择同样的选项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;hobbys.hobby1&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择爱好&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in hobbyList&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;checkHobby(item)&quot;</span></span><br><span class="hljs-tag">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>有三个上面的下拉框，依次是<code> hobby1</code>， <code> hobby2</code>， <code> hobby3</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; reactive, toRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> state = reactive(&#123;<br>  <span class="hljs-attr">hobbyList</span>: [<span class="hljs-string">&quot;听歌&quot;</span>, <span class="hljs-string">&quot;动漫&quot;</span>, <span class="hljs-string">&quot;前端&quot;</span>],<br>  <span class="hljs-attr">hobbys</span>: &#123;<br>    <span class="hljs-attr">hobby1</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">hobby2</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">hobby3</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">const</span> &#123; hobbyList, hobbys &#125; = toRefs(state);<br></code></pre></td></tr></table></figure><p>老样子，通过给<code> disabled</code>属性绑定方法，把选中的值传过去。</p><p>多个下拉框互斥的实现就比较简单了，只需要遍历选中的值，是不是等于要选的值，等于的话就禁止选择(<code>return true</code>)。如果能遍历完，即该选项没有被其他下拉框选中过，那么就能选择(<code> return false</code>)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> checkHobby = <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> hobbyKey <span class="hljs-keyword">in</span> hobbys.value) &#123;<br>    <span class="hljs-comment">// 如果已经有选中过该选项的下拉框，则禁止再次选择</span><br>    <span class="hljs-keyword">if</span> (item === hobbys.value[hobbyKey]) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8540c876da941e497fbb3f66a36b205~tplv-k3u1fbpfcp-zoom-1.image" alt="select"></p><h2 id="一般全选的实现"><a href="#一般全选的实现" class="headerlink" title="一般全选的实现"></a>一般全选的实现</h2><p>什么是一般全选？其实只是为了区分上面的全选互斥。就是常见的点击全选复选框，就会选中全部选项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-select</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.ages&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">multiple</span></span><br><span class="hljs-tag">  <span class="hljs-attr">collapse-tags</span></span><br><span class="hljs-tag">  <span class="hljs-attr">collapse-tags-tooltip</span></span><br><span class="hljs-tag">&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span> /&gt;</span>全选<br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in ageList&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; reactive, toRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> state = reactive(&#123;<br>  <span class="hljs-attr">ageList</span>: [<span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>],<br>  <span class="hljs-attr">form</span>: &#123;<br>    <span class="hljs-attr">ages</span>: [],<br>  &#125;,<br>  <span class="hljs-attr">checked</span>: <span class="hljs-literal">false</span>,<br>&#125;);<br><br><span class="hljs-keyword">const</span> &#123; ageList, form, checked &#125; = toRefs(state);<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81c1f16210d24415ab605bb3aab03575~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220514153047297"></p><p>这个时候，全选和下面的选项是互不关联的，所以我们可以通过添加<code> change</code>事件，但复选框状态变化时，去修改下面的选项的选中与否。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;handleCheckAllChange&quot;</span> /&gt;</span>全选<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> handleCheckAllChange = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (checked.value) &#123;<br>    form.value.ages = ageList.value;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    form.value.ages = [];<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>到这一步的时候，我们就能够做到点击全选复选框，能同时修改下面选项的选中状态了，但是，还不能实现选中下面全部选项时，同时修改全选复选框为选中状态。</p><p>可以通过添加侦听器，侦听选中结果，如果发生变化，就会触发侦听器，并根据选中结果的长度和选项总长度对比。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">watch(<br>  <span class="hljs-function">() =&gt;</span> form.value.ages,<br>  <span class="hljs-function">(<span class="hljs-params">newValue</span>) =&gt;</span> &#123;<br>    checked.value = newValue.length === ageList.value.length;<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5104a5c8b77046de916cd24255f9e6d2~tplv-k3u1fbpfcp-zoom-1.image" alt="select"></p><p>如果想要加个中间态的话，就需要用到<code> element-plus</code>复选框的<code> indeterminate</code>属性。</p><p>这时候，复选框的状态不再是只依靠<code> checked</code>了，而是<code> indeterminate</code>和<code> v-model</code>同时作用。</p><ul><li><code> indeterminate</code>为<code> false</code>，<code>v-model</code>为<code> true</code>时，状态为<code> √</code></li><li><code> indeterminate</code>为<code> false</code>，<code>v-model</code>为<code> false</code>时，状态为空</li><li><code> indeterminate</code>为<code> true</code>时，状态为<code> -</code></li></ul><p>所以要实现中间态，只需要当选中的选项的个数比总选项的个数少，且选中的选项的个数不为0时,<code> indeterminate</code>的值为<code> true</code>即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-checkbox</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:indeterminate</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">    form.ages.length &lt; ageList.length &amp;&amp; form.ages.length !== 0</span></span><br><span class="hljs-string"><span class="hljs-tag">  &quot;</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;handleCheckAllChange&quot;</span></span><br><span class="hljs-tag">/&gt;</span>全选<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;element-plus-下拉框实现全选功能&quot;&gt;&lt;a href=&quot;#element-plus-下拉框实现全选功能&quot; class=&quot;headerlink&quot; title=&quot;element-plus 下拉框实现全选功能&quot;&gt;&lt;/a&gt;element-plus 下拉框实现全选</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://www.clzczh.top/tags/Vue/"/>
    
    <category term="Element" scheme="https://www.clzczh.top/tags/Element/"/>
    
  </entry>
  
</feed>
