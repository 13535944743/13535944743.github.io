<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赤蓝紫</title>
  
  <subtitle>赤蓝紫</subtitle>
  <link href="https://www.clzczh.top/atom.xml" rel="self"/>
  
  <link href="https://www.clzczh.top/"/>
  <updated>2022-03-25T17:14:08.166Z</updated>
  <id>https://www.clzczh.top/</id>
  
  <author>
    <name>赤蓝紫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>居中对齐的几种方法</title>
    <link href="https://www.clzczh.top/2022/03/25/css-center/"/>
    <id>https://www.clzczh.top/2022/03/25/css-center/</id>
    <published>2022-03-25T10:40:18.000Z</published>
    <updated>2022-03-25T17:14:08.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="居中对齐的几种方法"><a href="#居中对齐的几种方法" class="headerlink" title="居中对齐的几种方法"></a>居中对齐的几种方法</h1><p>看面试题，自己总结了下，顺便写了对应例子，加深印象。</p><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="给-div设置一个宽度，再添加-margin-0-auto"><a href="#给-div设置一个宽度，再添加-margin-0-auto" class="headerlink" title="给 div设置一个宽度，再添加 margin: 0 auto"></a>给<code> div</code>设置一个宽度，再添加<code> margin: 0 auto</code></h3><p><b style="color: red">必须要添加宽度，只对块级元素有效</b></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.inline-block-box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>块级元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inline-block-box&quot;</span>&gt;</span>行内块元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>行内元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/24/d3PXbaQ47yeNMcB.png" alt="image-20220324213321588"></p><br><h3 id="给父元素添加-text-aligin-center"><a href="#给父元素添加-text-aligin-center" class="headerlink" title="给父元素添加 text-aligin: center"></a>给父元素添加<code> text-aligin: center</code></h3><p><b style="color: red">只对行内块元素、行内元素有效</b></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: purple;<br>&#125;<br><br><span class="hljs-selector-class">.inline-block-box</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: purple;<br>&#125;<br><br><span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: skyblue;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/24/34np6EksUagW8X5.png" alt="image-20220324214157484"></p><br><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><h3 id="计算法"><a href="#计算法" class="headerlink" title="计算法"></a>计算法</h3><h4 id="父元素跟着子元素-margin-top-移动问题"><a href="#父元素跟着子元素-margin-top-移动问题" class="headerlink" title="父元素跟着子元素 margin-top 移动问题"></a>父元素跟着子元素 margin-top 移动问题</h4><p>开始之前，先看下一个小问题</p><p>下面的例子中，我们想要让子元素离父元素有距离</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">150px</span> auto;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/24/Lwy6iaJDdVrYnKm.png" alt="image-20220324220516244"></p><br><p>结果，子元素并没有外边距效果，反而是父元素出现了外边距的效果。</p><p>这是因为，根据规范，父元素的子元素的上边距(<code> margin-top</code>)，如果碰不到有效的<code> border</code>或者<code> padding</code>，就会一层一层的找自己的祖先元素，直到找到祖先元素有有效的<code> border</code>或<code>border</code>为止</p><br><p>解决方案：</p><ol><li>给父元素添加<code> padding-top</code></li><li>给父元素添加<code> border-top</code></li><li><strong>给父元素添加<code> overflow: hidden</code></strong>(<b style="color: red">推荐</b>)</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br><br>  <span class="hljs-comment">/* padding-top: 1px; */</span><br>  <span class="hljs-comment">/* border-top: 1px solid transparent; */</span><br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>首先<code> margin</code>左右可以直接设置<code> auto</code>实现居中，但是的上下不行。</p><p>计算法：<code>margin上下值 = (父元素高度-子元素高度)/2</code></p><p>在这个例子中，父元素的高度为<code> 400px</code>，子元素的高度为<code> 100px</code>，所以<code> margin上下值</code>设置为<code> 150px</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: purple;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">150px</span> auto;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/24/zV8YmsNHEGtWyXP.png" alt="image-20220324222200326"></p><br><h3 id="绝对定位四-0-法"><a href="#绝对定位四-0-法" class="headerlink" title="绝对定位四 0 法"></a>绝对定位四 0 法</h3><p><strong>设置四个方向都为 0，然后设置<code> margin</code>为<code> auto</code>，因为宽高固定，所以对应方向平分，可以实现水平垂直居中</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">.container &#123;<br>  <span class="hljs-attr">position</span>: relative;<br>  width: 600px;<br>  height: 400px;<br>  background-color: pink;<br>  color: #fff;<br>&#125;<br><br>.box &#123;<br>  <span class="hljs-attr">position</span>: absolute;<br>  width: 200px;<br>  height: 100px;<br>  top: <span class="hljs-number">0</span>;<br>  right: <span class="hljs-number">0</span>;<br>  bottom: <span class="hljs-number">0</span>;<br>  left: <span class="hljs-number">0</span>;<br>  margin: auto;<br>  background-color: purple;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="绝对定位-计算法-margin负值"><a href="#绝对定位-计算法-margin负值" class="headerlink" title="绝对定位 + 计算法( margin负值)"></a>绝对定位 + 计算法(<code> margin</code>负值)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">margin</span>: -<span class="hljs-number">50px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> -<span class="hljs-number">100px</span>;<br>  <span class="hljs-comment">/* margin-top、margin-left 分别是该子元素高宽的一半(负值)*/</span><br>  <span class="hljs-attribute">background-color</span>: purple;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="绝对定位-transform"><a href="#绝对定位-transform" class="headerlink" title="绝对定位 +  transform"></a>绝对定位 + <code> transform</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>  <span class="hljs-attribute">background-color</span>: purple;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="flex-布局法"><a href="#flex-布局法" class="headerlink" title="flex 布局法"></a>flex 布局法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-comment">/* 垂直居中 */</span><br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-comment">/* 水平居中 */</span><br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: purple;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>对于<strong>宽高不定</strong>的元素，后面两种方法(<b style="color: red">绝对定位+<code> transform</code>、<code> flex</code>布局法</b>)，可以实现元素的水平垂直居中。</p><br><p>参考资料：</p><ul><li><p><a href="https://segmentfault.com/a/1190000022021557">104 道 CSS 面试题，助你查漏补缺</a></p></li><li><p><a href="https://blog.csdn.net/weixin_45786214/article/details/106297864">父盒子跟随子盒子 margin-top 移动问题</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;居中对齐的几种方法&quot;&gt;&lt;a href=&quot;#居中对齐的几种方法&quot; class=&quot;headerlink&quot; title=&quot;居中对齐的几种方法&quot;&gt;&lt;/a&gt;居中对齐的几种方法&lt;/h1&gt;&lt;p&gt;看面试题，自己总结了下，顺便写了对应例子，加深印象。&lt;/p&gt;
&lt;h2 id=&quot;水平居</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://www.clzczh.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码之mustache模板引擎(一)</title>
    <link href="https://www.clzczh.top/2022/03/24/vue-mustache/"/>
    <id>https://www.clzczh.top/2022/03/24/vue-mustache/</id>
    <published>2022-03-24T10:38:00.000Z</published>
    <updated>2022-03-25T17:16:19.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-源码之-mustache-模板引擎-一"><a href="#Vue-源码之-mustache-模板引擎-一" class="headerlink" title="Vue 源码之 mustache 模板引擎(一)"></a>Vue 源码之 mustache 模板引擎(一)</h1><p>个人练习结果仓库(持续更新)：<a href="https://github.com/13535944743/Vue_Source_Code_Practise">Vue 源码解析</a></p><br><p>抽空把之前学的东西写成笔记。</p><p>学习视频链接：<a href="https://www.bilibili.com/video/BV1EV411h79m">【尚硅谷】Vue 源码解析之 mustache 模板引擎</a></p><h2 id="模板引擎是什么"><a href="#模板引擎是什么" class="headerlink" title="模板引擎是什么"></a>模板引擎是什么</h2><p><strong>模板引擎是将数据变为视图最优雅的解决方案。</strong></p><p><img src="https://s2.loli.net/2022/03/12/wQJFumIdge6ZzbT.png" alt="image-20220312180129318"></p><p>其中，Vue 中的列表渲染指令<code> v-for</code>就是一种模板引擎。而**插值表达式<code>&#123;&#123;&#125;&#125;`**便是本次要研究的` mustache模板引擎`的语法<br>## 将数据变为视图的方法### 纯 DOM 法很笨拙。需要频繁创建节点，添加数据，添加节点。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cc&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;女&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> list = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;list&quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>  <span class="hljs-keyword">const</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;li&quot;</span>); <span class="hljs-comment">// 新建li元素</span><br><br>  <span class="hljs-keyword">const</span> bd = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;div&quot;</span>);<br>  bd.className = <span class="hljs-string">&quot;bd&quot;</span>;<br>  bd.innerText = arr[i].name + <span class="hljs-string">&quot;的基本信息&quot;</span>;<br>  li.appendChild(bd);<br><br>  <span class="hljs-keyword">const</span> hd = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;div&quot;</span>);<br>  hd.className = <span class="hljs-string">&quot;hd&quot;</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">in</span> arr[i]) &#123;<br>    <span class="hljs-keyword">const</span> p = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;p&quot;</span>);<br>    p.innerText = item + <span class="hljs-string">&quot;: &quot;</span> + arr[i][item];<br>    hd.appendChild(p);<br>  &#125;<br><br>  li.appendChild(hd);<br>  list.appendChild(li);<br>&#125;<br></code></pre></td></tr></table></figure>![image-20220312182355046](https://s2.loli.net/2022/03/12/chJLPs9TlfwmSey.png)<br>### 数组 join 法本质上就是字符串拼接，只是用过数组 join 法，可以让结构变得更清晰<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cc&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;女&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>  list.innerHTML += [<br>    <span class="hljs-string">&quot;&lt;li&gt;&quot;</span>,<br>    <span class="hljs-string">&#x27;  &lt;div class=&quot;hd&quot;&gt;&#x27;</span> + arr[i].name + <span class="hljs-string">&quot;的基本信息&lt;/div&gt;&quot;</span>,<br>    <span class="hljs-string">&#x27;  &lt;div class=&quot;bd&quot;&gt;&#x27;</span>,<br>    <span class="hljs-string">&quot;    &lt;p&gt;name: &quot;</span> + arr[i].name + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;    &lt;p&gt;age: &quot;</span> + arr[i].age + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;    &lt;p&gt;sex&quot;</span> + arr[i].sex + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;  &lt;/div&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;&lt;/li&gt;&quot;</span>,<br>  ].join(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>### ES6 的模板字符串法- 反引号中，文本可以直接换行- 反引号中的$&#123;expression&#125;占位符中 expression 可以为任意的 JavaScript 表达式，甚至为模板字符串<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cc&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;女&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;赤蓝紫&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>  list.innerHTML += <span class="hljs-string">`</span><br><span class="hljs-string">      &lt;li&gt;</span><br><span class="hljs-string">          &lt;div class=&quot;hd&quot;&gt;<span class="hljs-subst">$&#123;arr[i].name&#125;</span> 的基本信息&lt;/div&gt;</span><br><span class="hljs-string">          &lt;div class=&quot;bd&quot;&gt;</span><br><span class="hljs-string">            &lt;p&gt;name: <span class="hljs-subst">$&#123;arr[i].name&#125;</span> &lt;/p&gt;</span><br><span class="hljs-string">            &lt;p&gt;age: <span class="hljs-subst">$&#123;arr[i].age&#125;</span> &lt;/p&gt;</span><br><span class="hljs-string">            &lt;p&gt;sex: <span class="hljs-subst">$&#123;arr[i].sex&#125;</span> &lt;/p&gt;</span><br><span class="hljs-string">          &lt;/div&gt;</span><br><span class="hljs-string">        &lt;/li&gt;</span><br><span class="hljs-string">      `</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br>### 模板引擎 mustache[mustache 仓库](https://github.com/janl/mustache.js)mustache 是**最早的模板引擎库**。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/mustache.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">  // console.log(Mustache)</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">  const templateStr = `</span></span><br><span class="xml"><span class="handlebars">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">      </span><span class="hljs-template-variable">&#123;&#123; #<span class="hljs-name">arr</span> &#125;&#125;</span><span class="xml"></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hd&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">name</span> &#125;&#125;</span><span class="xml">的基本信息<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bd&quot;</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">name</span> &#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>age: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">age</span> &#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>sex: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">sex</span> &#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">      </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">/arr</span> &#125;&#125;</span><span class="xml"></span></span><br><span class="xml"><span class="handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">  `;</span></span><br><span class="xml"><span class="handlebars">  const data = &#123;</span></span><br><span class="xml"><span class="handlebars">    arr: [</span></span><br><span class="xml"><span class="handlebars">      &#123;</span></span><br><span class="xml"><span class="handlebars">        name: &quot;clz&quot;,</span></span><br><span class="xml"><span class="handlebars">        age: 21,</span></span><br><span class="xml"><span class="handlebars">        sex: &quot;男&quot;,</span></span><br><span class="xml"><span class="handlebars">      &#125;,</span></span><br><span class="xml"><span class="handlebars">      &#123;</span></span><br><span class="xml"><span class="handlebars">        name: &quot;cc&quot;,</span></span><br><span class="xml"><span class="handlebars">        age: 21,</span></span><br><span class="xml"><span class="handlebars">        sex: &quot;女&quot;,</span></span><br><span class="xml"><span class="handlebars">      &#125;,</span></span><br><span class="xml"><span class="handlebars">      &#123;</span></span><br><span class="xml"><span class="handlebars">        name: &quot;赤蓝紫&quot;,</span></span><br><span class="xml"><span class="handlebars">        age: 21,</span></span><br><span class="xml"><span class="handlebars">        sex: &quot;男&quot;,</span></span><br><span class="xml"><span class="handlebars">      &#125;,</span></span><br><span class="xml"><span class="handlebars">    ],</span></span><br><span class="xml"><span class="handlebars">  &#125;;</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">  const domStr = Mustache.render(templateStr, data);</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">  document.getElementsByClassName(&quot;container&quot;)[0].innerHTML = domStr;</span></span><br><span class="xml"><span class="handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>引入` mustache`后，就会后一个` Mustache`对象，其中有一个方法` render`就可以用来实现将数据变为视图。- render 的第一个参数是模板字符串，第二个参数是数据- 如果需要使用数据，直接通过` &#123;&#123; &#125;&#125;</code>使用即可</p><ul><li>要实现循环的话，则需要用<code> &#123;&#123; #arr &#125;&#125;</code>,<code> &#123;&#123; /arr &#125;&#125;</code>包住要循环的内容</li></ul><h2 id="mustache-的基本使用"><a href="#mustache-的基本使用" class="headerlink" title="mustache 的基本使用"></a><span id="jump">mustache 的基本使用</span></h2><p><a href="https://unpkg.com/mustache@4.2.0/mustache.js">mustache.js</a></p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁&lt;/h2&gt;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> domStr = Mustache.render(templateStr, data);<br><br><span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;container&quot;</span>)[<span class="hljs-number">0</span>].innerHTML = domStr;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/I9EnyTRuYc1ibga.png" alt="image-20220312211938118"></p><h3 id="循环简单数组"><a href="#循环简单数组" class="headerlink" title="循环简单数组"></a>循环简单数组</h3><p>循环的不是对象数组，而是简单数组时，使用<code> .</code>即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &#123;&#123;#arr&#125;&#125;</span><br><span class="hljs-string">    &lt;h2 style=&quot;color: &#123;&#123;.&#125;&#125;&quot;&gt;&#123;&#123;.&#125;&#125;&lt;/h2&gt;</span><br><span class="hljs-string">  &#123;&#123;/arr&#125;&#125;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">arr</span>: [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;purple&quot;</span>],<br>&#125;;<br><br><span class="hljs-keyword">const</span> domStr = Mustache.render(templateStr, data);<br><br><span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;container&quot;</span>)[<span class="hljs-number">0</span>].innerHTML = domStr;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/t5acM2UO3xPIDAB.png" alt="image-20220312212348808"></p><br><h3 id="数组嵌套"><a href="#数组嵌套" class="headerlink" title="数组嵌套"></a>数组嵌套</h3><p>就是上面两部分的结合版本。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;ul&gt;</span><br><span class="hljs-string">    &#123;&#123;#arr&#125;&#125;</span><br><span class="hljs-string">      &lt;li&gt;</span><br><span class="hljs-string">        &#123;&#123;name&#125;&#125;喜欢的颜色是:</span><br><span class="hljs-string">        &lt;ol&gt;</span><br><span class="hljs-string">          &#123;&#123;#colors&#125;&#125;</span><br><span class="hljs-string">            &lt;li&gt;&#123;&#123;.&#125;&#125;&lt;/li&gt;</span><br><span class="hljs-string">          &#123;&#123;/colors&#125;&#125;</span><br><span class="hljs-string">        &lt;/ol&gt;</span><br><span class="hljs-string">      &lt;/li&gt;</span><br><span class="hljs-string">    &#123;&#123;/arr&#125;&#125;</span><br><span class="hljs-string">  &lt;/ul&gt;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">arr</span>: [<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>      <span class="hljs-attr">colors</span>: [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;purple&quot;</span>],<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cc&quot;</span>,<br>      <span class="hljs-attr">colors</span>: [<span class="hljs-string">&quot;white&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;black&quot;</span>],<br>    &#125;,<br>  ],<br>&#125;;<br><br><span class="hljs-keyword">const</span> domStr = Mustache.render(templateStr, data);<br><br><span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;container&quot;</span>)[<span class="hljs-number">0</span>].innerHTML = domStr;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/zHboe6pFn8cBfyq.png" alt="image-20220312214124863"></p><br><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>和循环类似，通过使用<code> &#123;&#123;#布尔值属性&#125;&#125;</code>,<code>&#123;&#123;/布尔值属性&#125;&#125;</code>，包住要条件渲染的内容即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &#123;&#123;#arr&#125;&#125;</span><br><span class="hljs-string">    &#123;&#123;#show&#125;&#125;</span><br><span class="hljs-string">      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="hljs-string">    &#123;&#123;/show&#125;&#125;</span><br><span class="hljs-string">  &#123;&#123;/arr&#125;&#125;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">arr</span>: [<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>      <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;czh&quot;</span>,<br>      <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>    &#125;,<br>  ],<br>&#125;;<br><br><span class="hljs-keyword">const</span> domStr = Mustache.render(templateStr, data);<br><br><span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;container&quot;</span>)[<span class="hljs-number">0</span>].innerHTML = domStr;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/Vxk2CwiaAsbRHcM.png" alt="image-20220312214938151"></p><br><p>通过查看 DOM 树，可以发现和 Vue 中的<code> v-if</code>指令类似，是压根就没有上 DOM 树。另外，Vue 中的<code> v-show</code>指令则是动态为元素添加或移除<code> display: none;</code>来控制元素的显示与隐藏。</p><br><h3 id="es6-之前使用-mustache"><a href="#es6-之前使用-mustache" class="headerlink" title="es6 之前使用 mustache"></a>es6 之前使用 mustache</h3><p>众所周知，es6 之前是没有模板字符串(反引号)的。那么方便的使用 mustache 呢？</p><p>当然，可以使用上面的数组 join 法，不过，还有一个更方便的方法。</p><p>通过使用<code> script</code>标签，只要添加<code>type</code>为<code> text/template</code>，然后在里面填模板字符串即可(实际上，只要不被浏览器识别即可)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/template&quot;</span> id=<span class="hljs-string">&quot;templateStr&quot;</span>&gt;<br>  &#123;&#123;#arr&#125;&#125;<br>    &#123;&#123;#show&#125;&#125;<br>      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>    &#123;&#123;/show&#125;&#125;<br>  &#123;&#123;/arr&#125;&#125;<br>&lt;/script&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/mustache.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">const</span> templateStr = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;templateStr&#x27;</span>).innerHTML</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">const</span> data = &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">arr</span>: [</span></span><br><span class="javascript"><span class="xml">      &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span></span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">      &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;czh&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span></span></span><br><span class="javascript"><span class="xml">      &#125;</span></span><br><span class="javascript"><span class="xml">    ]</span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">const</span> domStr = Mustache.render(templateStr, data)</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;container&#x27;</span>)[<span class="hljs-number">0</span>].innerHTML = domStr</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>只能说<strong>想到这个方法的人太优秀了</strong></p><br><h2 id="mustache-底层原理"><a href="#mustache-底层原理" class="headerlink" title="mustache 底层原理"></a>mustache 底层原理</h2><br><h3 id="正则表达式实现最简单的-mustache"><a href="#正则表达式实现最简单的-mustache" class="headerlink" title="正则表达式实现最简单的 mustache"></a>正则表达式实现最简单的 mustache</h3><br><h4 id="String-prototype-replace"><a href="#String-prototype-replace" class="headerlink" title="String.prototype.replace()"></a>String.prototype.replace()</h4><p>在开始之前，首先需要了解一下字符串的<code> replace</code>方法</p><blockquote><p><strong>语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">str.replace(regexp|substr, newSubStr|<span class="hljs-function"><span class="hljs-keyword">function</span>)</span><br></code></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><p><code>regexp </code>(pattern)：一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp"><code>RegExp</code></a> 对象或者其字面量。该正则所匹配的内容会被第二个参数的返回值替换掉。</p></li><li><p><code>substr </code>(pattern)：一个将被 <code>newSubStr</code> 替换的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String"><code>字符串</code></a>。其被视为一整个字符串，而不是一个正则表达式。仅第一个匹配项会被替换。</p></li><li><p><code>newSubStr</code> (replacement)：用于替换掉第一个参数在原字符串中的匹配部分的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String"><code>字符串</code></a>。该字符串中可以内插一些特殊的变量名。参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E4%BD%BF%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0">使用字符串作为参数</a>。</p></li><li><p><code>function</code> (replacement)：一个用来创建新子字符串的函数，该函数的返回值将替换掉第一个参数匹配到的结果。参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E6%8C%87%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0">指定一个函数作为参数</a>。</p></li></ul><p><strong>返回值</strong></p><p>一个部分或全部匹配由替代模式所取代的新的字符串。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁&lt;/h2&gt;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(templateStr.replace(<span class="hljs-regexp">/\&#123;\&#123;\w+\&#125;\&#125;/g</span>, <span class="hljs-string">&quot;123&quot;</span>));<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/rRUxDw2Gg9IYu1e.png" alt="image-20220313091349829"></p><br><p>可以发现，上面的做法还无法实现，所以研究一下，第二个参数为函数的情况</p><blockquote><table><thead><tr><th align="left">变量名</th><th align="left">代表的值</th></tr></thead><tbody><tr><td align="left"><code>match</code></td><td align="left">匹配的子串。（对应于上述的$&amp;。）</td></tr><tr><td align="left"><code>p1,p2, ...</code></td><td align="left">假如 replace()方法的第一个参数是一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp"><code>RegExp</code></a> 对象，则代表第 n 个括号匹配的字符串。（对应于上述的$1，$2 等。）例如，如果是用 <code>/(\a+)(\b+)/</code> 这个来匹配，<code>p1</code> 就是匹配的 <code>\a+</code>，<code>p2</code> 就是匹配的 <code>\b+</code>。</td></tr><tr><td align="left"><code>offset</code></td><td align="left">匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是 <code>&#39;abcd&#39;</code>，匹配到的子字符串是 <code>&#39;bc&#39;</code>，那么这个参数将会是 1）</td></tr><tr><td align="left"><code>string</code></td><td align="left">被匹配的原字符串。</td></tr><tr><td align="left">NamedCaptureGroup</td><td align="left">命名捕获组匹配的对象</td></tr></tbody></table></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁&lt;/h2&gt;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>&#125;;<br><br>templateStr.replace(<span class="hljs-regexp">/\&#123;\&#123;(\w+)\&#125;\&#125;/g</span>, <span class="hljs-function">(<span class="hljs-params">match, p1, offset, string</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(match);<br>  <span class="hljs-built_in">console</span>.log(p1);<br>  <span class="hljs-built_in">console</span>.log(offset);<br>  <span class="hljs-built_in">console</span>.log(string);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/7AVX6LyhJfCvual.png" alt="image-20220313092139759"></p><p>可以发现，只需要在正则表达式中使用<code> ()</code>把要捕获的内容包起来，然后通过<code> replace</code>方法的函数参数中的 p1 参数获取捕获内容，既然如此，那就可以开始使用正则表达式实现简单的 mustache 了。</p><br><h4 id="实现简单的-mustache"><a href="#实现简单的-mustache" class="headerlink" title="实现简单的 mustache"></a>实现简单的 mustache</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> templateStr = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁&lt;/h2&gt;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> render = <span class="hljs-function">(<span class="hljs-params">templateStr, data</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> templateStr.replace(<br>    <span class="hljs-regexp">/\&#123;\&#123;(\w+)\&#125;\&#125;/g</span>,<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">match, p1, offset, string</span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> data[p1]; <span class="hljs-comment">// 把正则所匹配的内容替换成return的内容</span><br>    &#125;<br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> domStr = render(templateStr, data);<br><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.container&quot;</span>).innerHTML = domStr;<br></code></pre></td></tr></table></figure><br><h3 id="mustache-底层-tokens-原理"><a href="#mustache-底层-tokens-原理" class="headerlink" title="mustache 底层 tokens 原理"></a>mustache 底层 tokens 原理</h3><p><img src="https://s2.loli.net/2022/03/13/mF5Bg6EGYriKyVz.png" alt="image-20220313094603475"></p><p><strong>mustache 底层主要干两件事</strong>：</p><ul><li>将模板字符串编译为 tokens 形式</li><li>tokens 结合数据，解析为 dom 字符串</li></ul><br><h4 id="tokens-是什么"><a href="#tokens-是什么" class="headerlink" title="tokens 是什么"></a>tokens 是什么</h4><ul><li>tokens 是一个嵌套数组，也可以说是<strong>模板字符串的 JS 表示</strong>。</li><li><strong>tokens</strong>是<strong>抽象语法树</strong>(AST)、<strong>虚拟节点</strong>的开山鼻祖</li></ul><br><p>看下下面的例子，就能明白了</p><hr><p>简单 tokens</p><p><strong>模板字符串</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是&#123;&#123;name&#125;&#125;, 年龄为&#123;&#123;age&#125;&#125;岁<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>tokens</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;h2&gt;我是&quot;</span>],<br>  [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>],<br>  [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;, 年龄为&quot;</span>],<br>  [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>],<br>  [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;岁&lt;/h2&gt;&quot;</span>],<br>];<br></code></pre></td></tr></table></figure><hr><p>简单数组情况下的 tokens</p><p><strong>模板字符串</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;&#123;#arr&#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: &#123;&#123;.&#125;&#125;&quot;</span>&gt;</span>&#123;&#123;.&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>&#123;&#123;/arr&#125;&#125;<br></code></pre></td></tr></table></figure><br><p><strong>tokens</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>    [<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;arr&quot;</span>, [<br>        [<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;&lt;h2 style=&#x27;color: &quot;</span>],<br>        [<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;.&quot;</span>],<br>        [<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;&#x27;&gt;&quot;</span>],<br>        [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>        [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;/h2&gt;&quot;</span>]<br>    ]]<br>]<br></code></pre></td></tr></table></figure><hr><p>嵌套数组情况下的 tokens</p><p><strong>模板字符串</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  &#123;&#123;#arr&#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    &#123;&#123;name&#125;&#125;喜欢的颜色是:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>      &#123;&#123;#colors&#125;&#125;<br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;.&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      &#123;&#123;/colors&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  &#123;&#123;/arr&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>tokens</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>    [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;ul&gt;&quot;</span>],<br>    [<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;arr&quot;</span>, [<br>        [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;li&quot;</span>],<br>        [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>],<br>        [<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;喜欢的颜色是:&lt;ol&gt;&quot;</span>],<br>        [<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;colors&quot;</span>, [<br>            [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;li&gt;&quot;</span>],<br>            [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>],<br>            [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;/li&gt;&quot;</span>]<br>        ]],<br>        [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;/ol&gt;&lt;/li&gt;&quot;</span>]<br>    ]],<br>    [<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;&lt;/ul&gt;&quot;</span>]<br>]<br></code></pre></td></tr></table></figure><br><h4 id="查看-mustache-的-tokens"><a href="#查看-mustache-的-tokens" class="headerlink" title="查看 mustache 的 tokens"></a>查看 mustache 的 tokens</h4><p>进入之前下载的源码文件中，<code> ctrl+f</code>，搜索<code> parseTemplate</code>，到该方法最后把返回值存好并打印</p><p><img src="https://s2.loli.net/2022/03/13/KRfBS2sopDuvXYg.png" alt="image-20220313122831330"></p><br><p>重新去跑<a href="#jump">mustache 的基本使用</a>的代码，就可以在控制台中看到<code> tokens</code></p><p>如循环简单数组</p><p><img src="https://s2.loli.net/2022/03/13/IslPNEDt2xLywkp.png" alt="image-20220313123423702"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-源码之-mustache-模板引擎-一&quot;&gt;&lt;a href=&quot;#Vue-源码之-mustache-模板引擎-一&quot; class=&quot;headerlink&quot; title=&quot;Vue 源码之 mustache 模板引擎(一)&quot;&gt;&lt;/a&gt;Vue 源码之 mustache</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://www.clzczh.top/tags/Vue/"/>
    
    <category term="Vue源码" scheme="https://www.clzczh.top/tags/Vue%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>自定义工具函数库(三)</title>
    <link href="https://www.clzczh.top/2022/03/22/javascript-toolFunction-3/"/>
    <id>https://www.clzczh.top/2022/03/22/javascript-toolFunction-3/</id>
    <published>2022-03-22T05:38:47.000Z</published>
    <updated>2022-03-25T17:15:06.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义工具函数库-三"><a href="#自定义工具函数库-三" class="headerlink" title="自定义工具函数库(三)"></a>自定义工具函数库(三)</h1><p>最终仓库：<a href="https://github.com/13535944743/utils">utils: 自定义工具库</a></p><h2 id="1-自定义-instanceof"><a href="#1-自定义-instanceof" class="headerlink" title="1. 自定义 instanceof"></a>1. 自定义 instanceof</h2><blockquote><ul><li>语法: myInstanceOf(obj, Type)</li><li>功能: 判断 obj 是否是 Type 类型的实例</li><li>实现: Type 的原型对象是否是 obj 的原型链上的某个对象, 如果是返回 true, 否则返回 false</li></ul></blockquote><p>之前的笔记：<a href="https://www.clzczh.top/2022/03/16/javascript-prototype/">详解原型链</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 自定义instanceof</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myInstanceof</span>(<span class="hljs-params">obj, fn</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> prototype = fn.prototype; <span class="hljs-comment">// 获取函数的显示原型</span><br><br>  <span class="hljs-keyword">let</span> proto = obj.__proto__; <span class="hljs-comment">// 获取obj的隐式原型对象</span><br><br>  <span class="hljs-comment">// 遍历原型链</span><br>  <span class="hljs-keyword">while</span> (proto) &#123;<br>    <span class="hljs-keyword">if</span> (prototype === proto) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    proto = proto.__proto__;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>对象相关<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./myInstanceof.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;&#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> Person();</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(myInstanceof(p, Person));</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(myInstanceof(p, <span class="hljs-built_in">Object</span>));</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(myInstanceof(Person, <span class="hljs-built_in">Object</span>));</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(myInstanceof(Person, <span class="hljs-built_in">Function</span>));</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(myInstanceof(p, <span class="hljs-built_in">Function</span>));</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-对象-数组拷贝"><a href="#2-对象-数组拷贝" class="headerlink" title="2. 对象/数组拷贝"></a>2. 对象/数组拷贝</h2><h3 id="2-1-浅拷贝与深拷贝"><a href="#2-1-浅拷贝与深拷贝" class="headerlink" title="2.1 浅拷贝与深拷贝"></a>2.1 浅拷贝与深拷贝</h3><p><strong>深拷贝和浅拷贝只针对 Object 和 Array 这样的引用数据类型</strong>。</p><ul><li>浅拷贝：只复制某个对象的引用地址值，而不复制对象本身，新旧对象还是共享同一块内存(<b style="color: red">即修改旧对象引用类型也会修改到新对象</b>)</li><li>深拷贝：新建一个一摸一样的对象，新对象与旧对象不共享内存，所以修改新对象不会跟着修改原对象。</li></ul><h3 id="2-2-浅拷贝"><a href="#2-2-浅拷贝" class="headerlink" title="2.2 浅拷贝"></a>2.2 浅拷贝</h3><h4 id="2-2-1-利用扩展运算符…实现"><a href="#2-2-1-利用扩展运算符…实现" class="headerlink" title="2.2.1 利用扩展运算符…实现"></a>2.2.1 利用扩展运算符…实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 浅拷贝1：利用扩展运算符...实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shallowClone</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; target !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(target)) &#123;<br>      <span class="hljs-keyword">return</span> [...target];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123; ...target &#125;;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> target; <span class="hljs-comment">// 是null或者不是引用数据类型直接返回</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// const obj = &#123; x: &#x27;clz&#x27;, y: &#123; age: 21 &#125; &#125;</span><br><span class="hljs-comment">// const cloneObj = shallowClone(obj)</span><br><span class="hljs-comment">// console.log(cloneObj)</span><br><br><span class="hljs-comment">// obj.y.age = 111</span><br><span class="hljs-comment">// console.log(obj, cloneObj)    // 浅拷贝，修改旧对象的引用类型会同步修改新对象</span><br><br><span class="hljs-comment">// obj.x = &#x27;xxx&#x27;               // 修改的若不是引用数据类型的没有影响</span><br><span class="hljs-comment">// console.log(obj, cloneObj)</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-遍历实现"><a href="#2-2-2-遍历实现" class="headerlink" title="2.2.2 遍历实现"></a>2.2.2 遍历实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 浅拷贝2：遍历实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shallowClone</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; target !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">let</span> ret = <span class="hljs-built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> target) &#123;<br>      <span class="hljs-comment">// 遍历拷贝</span><br>      <span class="hljs-keyword">if</span> (target.hasOwnProperty(key)) &#123;<br>        <span class="hljs-comment">// 不需要考虑原型链上的属性</span><br>        ret[key] = target[key];<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> target; <span class="hljs-comment">// 是null或者不是引用数据类型直接返回</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// const obj = &#123; x: &#x27;clz&#x27;, y: &#123; age: 21 &#125; &#125;</span><br><span class="hljs-comment">// const cloneObj = shallowClone(obj)</span><br><span class="hljs-comment">// console.log(cloneObj)</span><br><br><span class="hljs-comment">// obj.y.age = 111</span><br><span class="hljs-comment">// console.log(obj, cloneObj)    // 浅拷贝，修改旧对象的引用类型会同步修改新对象</span><br><br><span class="hljs-comment">// obj.x = &#x27;xxx&#x27;               // 修改的若不是引用数据类型的没有影响</span><br><span class="hljs-comment">// console.log(obj, cloneObj)</span><br></code></pre></td></tr></table></figure><h3 id="2-3-深拷贝"><a href="#2-3-深拷贝" class="headerlink" title="2.3 深拷贝"></a>2.3 深拷贝</h3><h4 id="2-3-1-JSON-转换"><a href="#2-3-1-JSON-转换" class="headerlink" title="2.3.1 JSON 转换"></a>2.3.1 JSON 转换</h4><p><b style="color: red">不能拷贝对象方法</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 深拷贝1: 通过JSON转换</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(target); <span class="hljs-comment">// 转换为字符串</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.parse(str); <span class="hljs-comment">// 再把字符串转换为对象</span><br>&#125;<br><br><span class="hljs-comment">// const obj = &#123; x: &#x27;clz&#x27;, y: &#123; age: 21 &#125;, z: &#123; name: &#x27;clz&#x27; &#125;, f: function () &#123; &#125; &#125;</span><br><span class="hljs-comment">// const cloneObj = deepClone(obj)</span><br><span class="hljs-comment">// console.log(cloneObj)</span><br><br><span class="hljs-comment">// // obj.y.z = obj.z</span><br><span class="hljs-comment">// // obj.z.y = obj.y  // 循环引用</span><br><br><span class="hljs-comment">// obj.y.age = 111</span><br><span class="hljs-comment">// console.log(obj, cloneObj)</span><br></code></pre></td></tr></table></figure><h4 id="2-3-2-递归"><a href="#2-3-2-递归" class="headerlink" title="2.3.2 递归"></a>2.3.2 递归</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 深拷贝2: 通过递归实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; target !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">const</span> ret = <span class="hljs-built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> target) &#123;<br>      <span class="hljs-keyword">if</span> (target.hasOwnProperty(key)) &#123;<br>        ret[key] = deepClone(target[key]); <span class="hljs-comment">// 递归调用函数实现深拷贝，直接赋值的话则只是浅拷贝，因为是引用数据类型时只是复制了引用地址而已</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> target;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">x</span>: <span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-attr">y</span>: &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;, <span class="hljs-attr">z</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span> &#125;, <span class="hljs-attr">f</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125; &#125;;<br><span class="hljs-keyword">const</span> cloneObj = deepClone(obj);<br><br>obj.y.age = <span class="hljs-number">111</span>;<br><span class="hljs-built_in">console</span>.log(obj, cloneObj);<br></code></pre></td></tr></table></figure><p>开开心心收工？有点问题，如果对象中有循环引用，即”你中有我，我中有你”的话，就会导致形成死循环，会导致无法跑出结果，直到超出最大调用堆栈大小</p><p>怎么解决这个 bug 呢？使用 map 来存取拷贝过的数据，每次调用函数时判断有无拷贝过，有的话，直接返回之前拷贝的数据就行了。而且，这里还有个有意思的地方：<b style="color: red">递归调用函数需要共享变量时，可以通过添加一个参数，一直传同一个变量</b></p><p>改进后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 深拷贝2: 通过递归实现：使用map来存取拷贝过的数据，每次调用函数时判断有无拷贝过，有的话，直接返回之前拷贝的数据就行了。</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">target, map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>()</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; target !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">const</span> cache = map.get(target);<br>    <span class="hljs-keyword">if</span> (cache) &#123;<br>      <span class="hljs-keyword">return</span> cache; <span class="hljs-comment">// 有拷贝过的话，直接返回之前拷贝过的数据</span><br>    &#125;<br><br>    <span class="hljs-keyword">const</span> ret = <span class="hljs-built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;<br><br>    map.set(target, ret); <span class="hljs-comment">// 键为拷贝的目标，值为拷贝的结果</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> target) &#123;<br>      <span class="hljs-keyword">if</span> (target.hasOwnProperty(key)) &#123;<br>        ret[key] = deepClone(target[key], map); <span class="hljs-comment">// 递归调用函数实现深拷贝，直接赋值的话则只是浅拷贝，因为是引用数据类型时只是复制了引用地址而已</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> target;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// const obj = &#123; x: &#x27;clz&#x27;, y: &#123; age: 21 &#125;, z: &#123; name: &#x27;clz&#x27; &#125;, f: function () &#123; &#125; &#125;</span><br><br><span class="hljs-comment">// obj.y.z = obj.z</span><br><span class="hljs-comment">// obj.z.y = obj.y  // 循环引用可能会造成死循环</span><br><br><span class="hljs-comment">// const cloneObj = deepClone(obj)</span><br><br><span class="hljs-comment">// obj.y.age = 111</span><br><span class="hljs-comment">// console.log(obj, cloneObj)</span><br></code></pre></td></tr></table></figure><p><strong>优化遍历性能</strong>：</p><blockquote><ul><li>数组: while | for | forEach() 优于 for-in | keys()&amp;forEach()</li><li>对象: for-in 与 keys()&amp;forEach() 差不多</li></ul></blockquote><p>变更部分：分成数组和对象分别处理，使用更优的遍历方式(<strong>个人看不出有什么大的区别</strong>，先记一下)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(target)) &#123;<br>  target.forEach(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    ret[index] = deepClone(item, map);<br>  &#125;);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-built_in">Object</span>.keys(target).forEach(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>    ret[key] = deepClone(target[key], map);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-事件"><a href="#3-事件" class="headerlink" title="3. 事件"></a>3. 事件</h2><p><a href="https://clz.vercel.app/2021/09/09/javascript-Event/">JavaScript 事件回顾</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.outter</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.inner</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: auto;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: blue;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;outter&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> outter = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.outter&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> inner = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.inner&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      outter.addEventListener(</span><br><span class="javascript">        <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;捕获 outter&quot;</span>);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-literal">true</span></span><br><span class="javascript">      ); <span class="hljs-comment">// true表示在事件捕获阶段， false或不传参表示在事件冒泡阶段</span></span><br><span class="javascript"></span><br><span class="javascript">      inner.addEventListener(</span><br><span class="javascript">        <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;捕获 inner&quot;</span>);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-literal">true</span></span><br><span class="javascript">      );</span><br><span class="javascript"></span><br><span class="javascript">      outter.addEventListener(</span><br><span class="javascript">        <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;冒泡 outter&quot;</span>);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-literal">false</span></span><br><span class="javascript">      ); <span class="hljs-comment">// true表示在事件捕获阶段， false或不传参表示在事件冒泡阶段</span></span><br><span class="javascript"></span><br><span class="javascript">      inner.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;冒泡 inner&quot;</span>);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-1-自定义事件委托函数"><a href="#3-1-自定义事件委托函数" class="headerlink" title="3.1 自定义事件委托函数"></a>3.1 自定义事件委托函数</h3><p>自定义事件委托函数关键：获取真正触发事件的目标元素，若和子元素相匹配，则使用 call 调用回调函数(this 指向，变更为 target)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addEventListener</span>(<span class="hljs-params">el, type, fn, selector</span>) </span>&#123;<br>  <span class="hljs-comment">// selector是子元素</span><br>  el = <span class="hljs-built_in">document</span>.querySelector(el);<br><br>  <span class="hljs-keyword">if</span> (!selector) &#123;<br>    el.addEventListener(type, fn); <span class="hljs-comment">// 没有传递子元素的选择器，则是普通的给el元素绑定事件</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    el.addEventListener(type, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>      <span class="hljs-keyword">const</span> target = e.target; <span class="hljs-comment">// 获取真正触发事件的目标元素</span><br><br>      <span class="hljs-keyword">if</span> (target.matches(selector)) &#123;<br>        <span class="hljs-comment">// 判断选择器与目标元素是否符合</span><br>        fn.call(target, e);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;items&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>01<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>02<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>03<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>04<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>05<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>06<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  addEventListener(</span><br><span class="javascript">    <span class="hljs-string">&quot;#items&quot;</span>,</span><br><span class="javascript">    <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.style.color = <span class="hljs-string">&quot;red&quot;</span>;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-string">&quot;li&quot;</span></span><br><span class="javascript">  );</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-手写事件总线"><a href="#3-2-手写事件总线" class="headerlink" title="3.2 手写事件总线"></a>3.2 手写事件总线</h3><blockquote><p>on(eventName, listener): 绑定事件监听<br>emit(eventName, data): 分发事件<br>off(eventName): 解绑指定事件名的事件监听, 如果没有指定解绑所有</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 事件总线</span><br><span class="hljs-comment">// on(eventName, listener): 绑定事件监听</span><br><span class="hljs-comment">// emit(eventName, data): 分发事件</span><br><span class="hljs-comment">// off(eventName): 解绑指定事件名的事件监听, 如果没有指定解绑所有</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventBus</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.callbacks = &#123;&#125;;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">on</span>(<span class="hljs-params">eventName, fn</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.callbacks[eventName]) &#123;<br>      <span class="hljs-built_in">this</span>.callbacks[eventName].push(fn);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks[eventName] = [fn];<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">emit</span>(<span class="hljs-params">eventName, data</span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> callbacks = <span class="hljs-built_in">this</span>.callbacks[eventName];<br>    <span class="hljs-keyword">if</span> (callbacks &amp;&amp; <span class="hljs-built_in">this</span>.callbacks[eventName].length !== <span class="hljs-number">0</span>) &#123;<br>      callbacks.forEach(<span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> &#123;<br>        callback(data);<br>      &#125;);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">off</span>(<span class="hljs-params">eventName</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (eventName) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.callbacks[eventName]) &#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.callbacks[eventName];<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks = &#123;&#125;;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> eventBus = <span class="hljs-keyword">new</span> EventBus();<br><br>eventBus.on(<span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>登录了`</span>);<br>&#125;);<br><br>eventBus.on(<span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>又登录了`</span>);<br>&#125;);<br><br>eventBus.on(<span class="hljs-string">&quot;logout&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>退出登录了`</span>);<br>&#125;);<br><br><span class="hljs-comment">// eventBus.off(&#x27;login&#x27;)</span><br><span class="hljs-comment">// console.log(eventBus)</span><br><br>eventBus.emit(<span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-string">&quot;赤蓝紫&quot;</span>);<br>eventBus.emit(<span class="hljs-string">&quot;logout&quot;</span>, <span class="hljs-string">&quot;赤蓝紫&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="4-自定义发布订阅"><a href="#4-自定义发布订阅" class="headerlink" title="4. 自定义发布订阅"></a>4. 自定义发布订阅</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 自定义消息订阅与发布</span><br><span class="hljs-comment">// PubSub: 包含所有功能的订阅/发布消息的管理者</span><br><span class="hljs-comment">// PubSub.subscribe(msg, subscriber): 订阅消息: 指定消息名和订阅者回调函数</span><br><span class="hljs-comment">// PubSub.publish(msg, data): 发布消息: 指定消息名和数据</span><br><span class="hljs-comment">// PubSub.unsubscribe(flag): 取消订阅: 根据标识取消某个或某些消息的订阅</span><br><span class="hljs-comment">//  1).没有传值, flag为undefined：清空全部订阅</span><br><span class="hljs-comment">//  2).传入token字符串: 清除唯一订阅</span><br><span class="hljs-comment">//  3).msgName字符串: 清除指定消息的全部订阅</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PubSub</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.callbacks = &#123;&#125;;<br>    <span class="hljs-built_in">this</span>.id = <span class="hljs-number">0</span>; <span class="hljs-comment">// 订阅唯一标识</span><br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">subscribe</span>(<span class="hljs-params">msg, subscriber</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> token = <span class="hljs-string">&quot;token_&quot;</span> + ++<span class="hljs-built_in">this</span>.id;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.callbacks[msg]) &#123;<br>      <span class="hljs-comment">// 有过此消息的另一个订阅</span><br>      <span class="hljs-built_in">this</span>.callbacks[msg][token] = subscriber;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.callbacks[msg] = &#123;<br>        [token]: subscriber,<br>      &#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> token; <span class="hljs-comment">// 返回token。用于取消唯一订阅</span><br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">publish</span>(<span class="hljs-params">msg, data</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> callbacksOfmsg = <span class="hljs-built_in">this</span>.callbacks[msg];<br>    <span class="hljs-keyword">if</span> (callbacksOfmsg) &#123;<br>      <span class="hljs-comment">// 有此消息的订阅</span><br>      <span class="hljs-built_in">Object</span>.values(callbacksOfmsg).forEach(<span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> &#123;<br>        callback(data);<br>      &#125;);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">unsubscribe</span>(<span class="hljs-params">flag</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (flag === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 1. 清空全部订阅</span><br>      <span class="hljs-built_in">this</span>.callbacks = &#123;&#125;;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> flag === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>      <span class="hljs-keyword">if</span> (flag.indexOf(<span class="hljs-string">&quot;token&quot;</span>) === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 2. 取消唯一订阅</span><br>        <span class="hljs-keyword">const</span> callbacks = <span class="hljs-built_in">Object</span>.values(<span class="hljs-built_in">this</span>.callbacks).find(<span class="hljs-function">(<span class="hljs-params">callbacksOfmsg</span>) =&gt;</span><br>          callbacksOfmsg.hasOwnProperty(flag)<br>        ); <span class="hljs-comment">// 找到flag对应的callbacks：callbacks: &#123;pay: &#123;token_1: f1, token_2: f2&#125;&#125;</span><br>        <span class="hljs-keyword">delete</span> callbacks[flag];<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 3. 取消指定消息的全部订阅</span><br>        <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.callbacks[flag];<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;如果传入参数, 必须是字符串类型&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> pubsub = <span class="hljs-keyword">new</span> PubSub();<br><br><span class="hljs-keyword">let</span> pid1 = pubsub.subscribe(<span class="hljs-string">&quot;pay&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;商家接单: &quot;</span>, data);<br>&#125;);<br><span class="hljs-keyword">let</span> pid2 = pubsub.subscribe(<span class="hljs-string">&quot;pay&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;骑手接单&quot;</span>);<br>&#125;);<br><span class="hljs-keyword">let</span> pid3 = pubsub.subscribe(<span class="hljs-string">&quot;feedback&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`评价: <span class="hljs-subst">$&#123;data.title&#125;</span><span class="hljs-subst">$&#123;data.feedback&#125;</span>`</span>);<br>&#125;);<br><br><span class="hljs-comment">// console.log(pubsub)</span><br><br>pubsub.publish(<span class="hljs-string">&quot;pay&quot;</span>, &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;炸鸡&quot;</span>,<br>  <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;预定11:11起送&quot;</span>,<br>&#125;);<br><br>pubsub.publish(<span class="hljs-string">&quot;feedback&quot;</span>, &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;炸鸡&quot;</span>,<br>  <span class="hljs-attr">feedback</span>: <span class="hljs-string">&quot;还好&quot;</span>,<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;%c%s&quot;</span>, <span class="hljs-string">&quot;color: blue;font-size: 20px&quot;</span>, <span class="hljs-string">&quot;取消订阅&quot;</span>);<br><br><span class="hljs-comment">// // 1. 取消全部订阅</span><br><span class="hljs-comment">// pubsub.unsubscribe()</span><br><span class="hljs-comment">// console.log(pubsub)</span><br><br><span class="hljs-comment">// // 2. 取消唯一订阅</span><br><span class="hljs-comment">// pubsub.unsubscribe(pid1)</span><br><span class="hljs-comment">// console.log(pubsub)</span><br><br><span class="hljs-comment">// 3. 取消指定消息的订阅</span><br>pubsub.unsubscribe(<span class="hljs-string">&quot;pay&quot;</span>);<br><span class="hljs-built_in">console</span>.log(pubsub);<br></code></pre></td></tr></table></figure><h2 id="5-封装-axios"><a href="#5-封装-axios" class="headerlink" title="5. 封装 axios"></a>5. 封装 axios</h2><p>详见：<a href="https://www.clzczh.top/2022/03/10/axios-1/">axios 笔记</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 封装axios</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">axios</span>(<span class="hljs-params">&#123; url, method = <span class="hljs-string">&quot;GET&quot;</span>, params = &#123;&#125;, data = &#123;&#125; &#125;</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    method = method.toUpperCase();<br><br>    <span class="hljs-keyword">let</span> queryString = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-built_in">Object</span>.keys(params).forEach(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      queryString += <span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;params[key]&#125;</span>&amp;`</span>; <span class="hljs-comment">// 查询参数以key1=value1&amp;key2=value2的形式连接起来</span><br>    &#125;);<br><br>    queryString = queryString.slice(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 去掉后面可能出现的&amp;</span><br>    url += <span class="hljs-string">`?<span class="hljs-subst">$&#123;queryString&#125;</span>`</span>;<br><br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    xhr.open(method, url);<br>    <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&quot;GET&quot;</span>) &#123;<br>      xhr.send();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      xhr.setRequestHeader(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>      xhr.send(<span class="hljs-built_in">JSON</span>.stringify(data)); <span class="hljs-comment">// 只能发送字符串形式的数据</span><br>    &#125;<br><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123; status &#125; = xhr;<br>        <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) &#123;<br>          <span class="hljs-keyword">const</span> response = &#123;<br>            status,<br>            <span class="hljs-attr">data</span>: <span class="hljs-built_in">JSON</span>.parse(xhr.response),<br>          &#125;;<br><br>          resolve(response);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          reject(<span class="hljs-string">`<span class="hljs-subst">$&#123;status&#125;</span>`</span>);<br>        &#125;<br>      &#125;<br>    &#125;;<br>  &#125;);<br>&#125;<br><br>axios.get = <span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(<span class="hljs-built_in">Object</span>.assign(options, &#123; url, <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span> &#125;)); <span class="hljs-comment">// 把methods和url合并到options中去</span><br>&#125;;<br><br>axios.post = <span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(<span class="hljs-built_in">Object</span>.assign(options, &#123; url, <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span> &#125;));<br>&#125;;<br><br>axios.put = <span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(<span class="hljs-built_in">Object</span>.assign(options, &#123; url, <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;PUT&quot;</span> &#125;));<br>&#125;;<br><br>axios.delete = <span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(<span class="hljs-built_in">Object</span>.assign(options, &#123; url, <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;DELETE&quot;</span> &#125;));<br>&#125;;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: data1 &#125; = <span class="hljs-keyword">await</span> axios(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://api.apiopen.top/getJoke&quot;</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>      <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">a</span>: <span class="hljs-number">10</span>,<br>        <span class="hljs-attr">b</span>: <span class="hljs-number">15</span>,<br>      &#125;,<br>    &#125;);<br>    <span class="hljs-built_in">console</span>.log(data1);<br><br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: data2 &#125; = <span class="hljs-keyword">await</span> axios.post(<br>      <span class="hljs-string">&quot;https://api.apiopen.top/getJoke&quot;</span>,<br>      &#123;<br>        <span class="hljs-attr">params</span>: &#123;<br>          <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>        &#125;,<br>      &#125;<br>    );<br>    <span class="hljs-built_in">console</span>.log(data2);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>  &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自定义工具函数库-三&quot;&gt;&lt;a href=&quot;#自定义工具函数库-三&quot; class=&quot;headerlink&quot; title=&quot;自定义工具函数库(三)&quot;&gt;&lt;/a&gt;自定义工具函数库(三)&lt;/h1&gt;&lt;p&gt;最终仓库：&lt;a href=&quot;https://github.com/135</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>自定义工具函数库(二)   数组相关</title>
    <link href="https://www.clzczh.top/2022/03/20/javascript-toolFunction-2/"/>
    <id>https://www.clzczh.top/2022/03/20/javascript-toolFunction-2/</id>
    <published>2022-03-20T13:04:34.000Z</published>
    <updated>2022-03-25T17:15:04.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义工具函数库-二-数组相关"><a href="#自定义工具函数库-二-数组相关" class="headerlink" title="自定义工具函数库(二) 数组相关"></a>自定义工具函数库(二) 数组相关</h1><p>最终仓库：<a href="https://github.com/13535944743/utils">utils: 自定义工具库</a></p><p>以前的笔记：<a href="https://www.clzczh.top/2021/11/14/js-array-methods/">JS 数组常用的方法</a></p><h2 id="1-数组声明式系列方法"><a href="#1-数组声明式系列方法" class="headerlink" title="1. 数组声明式系列方法"></a>1. 数组声明式系列方法</h2><h3 id="1-1-map-函数封装实现"><a href="#1-1-map-函数封装实现" class="headerlink" title="1.1 map 函数封装实现"></a>1.1 map 函数封装实现</h3><blockquote><p><code> map()</code>方法创建一个新数组，其结果是该数组中的每个元素各自调用一次提供的函数后的返回值</p></blockquote><p>循环，数组的每个元素都调用一次函数，并把每次循环得到的返回值都存好，循环结束后，把存好的数组返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// map函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">map</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = [];<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    ret.push(callback(arr[i], i));<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>map函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./map.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result = map(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(index);</span><br><span class="javascript">        <span class="hljs-keyword">return</span> item + <span class="hljs-number">1</span>;</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.map((item, index) =&gt; &#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//   console.log(index)</span></span><br><span class="javascript">      <span class="hljs-comment">//   return item + 1</span></span><br><span class="javascript">      <span class="hljs-comment">// &#125;)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-reduce-函数"><a href="#1-2-reduce-函数" class="headerlink" title="1.2 reduce 函数"></a>1.2 reduce 函数</h3><blockquote><p>对数组中的每个元素执行一个由您提供的<strong>reducer</strong>函数(升序执行)，将其结果汇总为单个返回值。</p></blockquote><p>循环遍历数组，并每次都把调用函数得到的值，重新赋值给<code> ret</code>变量，然后作为下一次调用函数时的第一个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// reduce函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduce</span>(<span class="hljs-params">arr, callback, initValue</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = initValue;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>    ret = callback(ret, item); <span class="hljs-comment">// 每次调用都把最新的值重新赋给ret</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>reduce函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./reduce.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result = reduce(</span><br><span class="javascript">        arr,</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">preValue, curValue</span>) =&gt;</span> preValue + curValue,</span><br><span class="javascript">        <span class="hljs-number">10</span></span><br><span class="javascript">      );</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.reduce(</span></span><br><span class="javascript">      <span class="hljs-comment">//   (preValue, curValue) =&gt; preValue + curValue,</span></span><br><span class="javascript">      <span class="hljs-comment">//   0)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-3-filter-函数"><a href="#1-3-filter-函数" class="headerlink" title="1.3 filter 函数"></a>1.3 filter 函数</h3><blockquote><p>创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p></blockquote><p>循环，如果以该数组元素作为参数调用函数的返回值为<code> true</code>，则存好。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// filter函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (callback(arr[i], i)) &#123;<br>      ret.push(arr[i]);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>filter函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./filter.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result = filter(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> index % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.filter(item =&gt; item &gt;= 3)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-4-find-函数"><a href="#1-4-find-函数" class="headerlink" title="1.4 find 函数"></a>1.4 find 函数</h3><blockquote><p>返回数组中满足提供的测试函数的第一个元素的值。否则返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// find函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (callback(arr[i], i)) &#123;<br>      <span class="hljs-keyword">return</span> arr[i];<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>find函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./find.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result1 = find(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt;= <span class="hljs-number">3</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result1);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result2 = find(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt;= <span class="hljs-number">10</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result2);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.find((item, index) =&gt; item &gt;= 3)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-5-findIndex-函数"><a href="#1-5-findIndex-函数" class="headerlink" title="1.5 findIndex 函数"></a>1.5 findIndex 函数</h3><blockquote><p>返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。若没有找到对应元素则返回-1。</p></blockquote><p>和 find()函数类似，只不过是返回满足条件的第一个元素的索引，以及没有满足的是返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// findIndex函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findIndex</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (callback(arr[i], i)) &#123;<br>      <span class="hljs-keyword">return</span> i;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>findIndex函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./findIndex.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result1 = findIndex(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt;= <span class="hljs-number">3</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result1);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result2 = findIndex(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt;= <span class="hljs-number">10</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result2);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.findIndex((item, index) =&gt; item &gt;= 10)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-6-every-函数"><a href="#1-6-every-函数" class="headerlink" title="1.6 every 函数"></a>1.6 every 函数</h3><blockquote><p>测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// every函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">every</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (!callback(arr[i], i)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>every函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./every.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result1 = every(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt;= <span class="hljs-number">3</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result1);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result2 = every(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &lt; <span class="hljs-number">10</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result2);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.every((item, index) =&gt; item &lt; 10)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-7-some-函数"><a href="#1-7-some-函数" class="headerlink" title="1.7 some 函数"></a>1.7 some 函数</h3><blockquote><p>测试数组中是不是至少有 1 个元素通过了被提供的函数测试。它返回的是一个 Boolean 类型的值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// some函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">some</span>(<span class="hljs-params">arr, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (callback(arr[i], i)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>some函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./some.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">      <span class="hljs-comment">// 自定义</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result1 = some(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &lt; <span class="hljs-number">3</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result1);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result2 = some(arr, <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &lt; <span class="hljs-number">0</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result2);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 原生</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.some((item, index) =&gt; item &lt; 3)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-数组去重"><a href="#2-数组去重" class="headerlink" title="2. 数组去重"></a>2. 数组去重</h2><h3 id="2-1-forEach-indexOf"><a href="#2-1-forEach-indexOf" class="headerlink" title="2.1 forEach() + indexOf()"></a>2.1 forEach() + indexOf()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组去重方法1：forEach() + indexOf()</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ret = [];<br><br>  arr.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (ret.indexOf(item) === -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// 如果数组中不存在当前值，则存进去</span><br>      ret.push(item);<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-forEach-容器-对象"><a href="#2-2-forEach-容器-对象" class="headerlink" title="2.2 forEach() + 容器(对象)"></a>2.2 forEach() + 容器(对象)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组去重方法2：forEach() + 容器(对象)</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ret = [];<br>  <span class="hljs-keyword">const</span> obj = &#123;&#125;; <span class="hljs-comment">// 键是数组之前出现过的元素，值是是否有出现过。</span><br>  <span class="hljs-comment">// 出现过值是true，没出现过只是undefined</span><br><br>  arr.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (obj[item]) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    obj[item] = <span class="hljs-literal">true</span>;<br>    ret.push(item);<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-Set-Array-from-或-扩展运算符-…"><a href="#2-3-Set-Array-from-或-扩展运算符-…" class="headerlink" title="2.3 Set + Array.from() 或 扩展运算符(…)"></a>2.3 Set + Array.from() 或 扩展运算符(…)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组去重方法3：Set + Array.from() 或 扩展运算符(...)</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr);<br>  <span class="hljs-comment">// return Array.from(set)      // Array.from()可以通过可迭代对象(包括数组、Set等)创建一个新的数组</span><br><br>  <span class="hljs-keyword">return</span> [...set]; <span class="hljs-comment">// 使用ES6的扩展运算符`...`</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-concat-函数"><a href="#3-concat-函数" class="headerlink" title="3. concat 函数"></a>3. concat 函数</h2><blockquote><p>用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// concat函数的封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">concat</span>(<span class="hljs-params">arr, ...args</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ret = [...arr];<br><br>  args.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(item)) &#123;<br>      <span class="hljs-comment">// 如果是数组，则通过扩展运算符把数组中的元素push到新数组中</span><br>      ret.push(...item);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ret.push(item);<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>concat函数实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./concat.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 自定义函数</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result = concat(arr, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>]);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 内置方法</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.concat([4, 5, 6], 7, 8)</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-slice-数组切片"><a href="#4-slice-数组切片" class="headerlink" title="4. slice 数组切片"></a>4. slice 数组切片</h2><blockquote><p>返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的<strong>浅拷贝</strong>（包括 <code>begin</code>，不包括<code>end</code>）。原始数组不会被改变。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// slice函数实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">slice</span>(<span class="hljs-params">arr, begin, end</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (arr.length === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> [];<br>  &#125;<br><br>  begin = begin || <span class="hljs-number">0</span>; <span class="hljs-comment">// 如果begin没有传，则从0开始切</span><br>  <span class="hljs-keyword">if</span> (begin &gt;= arr.length) &#123;<br>    <span class="hljs-keyword">return</span> [];<br>  &#125;<br><br>  end = end || arr.length;<br><br>  <span class="hljs-keyword">const</span> ret = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= begin &amp;&amp; i &lt; end) &#123;<br>      ret.push(arr[i]);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>slice函数实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./slice.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>];</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 自定义函数</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result1 = slice(arr, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result1);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result2 = slice(arr);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result2);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result3 = slice(arr, <span class="hljs-number">2</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result3);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> result4 = slice(arr, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(result4);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 内置方法</span></span><br><span class="javascript">      <span class="hljs-comment">// const result = arr.slice(2, 6) // 截取索引在[2， 6)范围内的元素</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-数组扁平化"><a href="#5-数组扁平化" class="headerlink" title="5. 数组扁平化"></a>5. 数组扁平化</h2><p>数组扁平化是指将一个多维数组变为一维数组</p><p><strong>内置方法 flat</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [[<span class="hljs-number">5</span>], <span class="hljs-number">6</span>], <span class="hljs-number">7</span>];<br><br><span class="hljs-keyword">const</span> result = arr.flat(<span class="hljs-literal">Infinity</span>);<br><span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">//  [1, 2, 3, 4, 5, 6, 7]</span><br></code></pre></td></tr></table></figure><h3 id="5-1-递归"><a href="#5-1-递归" class="headerlink" title="5.1 递归"></a>5.1 递归</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组扁平化(1): 通过concat和forEach实现，遇到多维数组时，通过递归调用flatten实现扁平化</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flatten</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = [];<br><br>  arr.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(item)) &#123;<br>      ret = ret.concat(flatten(item)); <span class="hljs-comment">// 如果是数组，继续打平</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ret = ret.concat(item);<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-扩展运算符…"><a href="#5-2-扩展运算符…" class="headerlink" title="5.2 扩展运算符…"></a>5.2 扩展运算符…</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组扁平化(2): 通过concat函数和扩展运算符...实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flatten</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = [...arr];<br><br>  <span class="hljs-keyword">while</span> (ret.some(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-built_in">Array</span>.isArray(item))) &#123;<br>    ret = [].concat(...ret);<br>    <span class="hljs-comment">// 举例：arr = [1, 2, 3, 4, [5, 6]]</span><br>    <span class="hljs-comment">// 则ret = [].concat(1, 2, 3, 4, [5, 6]) = [1, 2, 3, 4, 5, 6]</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="5-3-toString-join-split-map"><a href="#5-3-toString-join-split-map" class="headerlink" title="5.3 toString / join + split + map"></a>5.3 toString / join + split + map</h3><p>先通过<code> toString</code>或<code> join</code>把数组转成字符串，在通过<code> split</code>转换成数组，最后还需要通过<code> map</code>函数，把数组的每一个元素变回数字。(不考虑其他类型的数组的话)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flatten</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> arr<br>    .toString()<br>    .split(<span class="hljs-string">&quot;,&quot;</span>)<br>    .map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-built_in">Number</span>(item));<br>  <span class="hljs-comment">// return arr.join().split(&#x27;,&#x27;).map(item =&gt; Number(item))</span><br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="5-4-reduce"><a href="#5-4-reduce" class="headerlink" title="5.4 reduce"></a>5.4 reduce</h3><p>遍历数组，如果是数组，则递归遍历，否则，通过<code> concat</code>拼接起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flatten</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> arr.reduce(<span class="hljs-function">(<span class="hljs-params">pre, cur</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> pre.concat(<span class="hljs-built_in">Array</span>.isArray(cur) ? flatten(cur) : cur);<br>  &#125;, []);<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="6-数组分块"><a href="#6-数组分块" class="headerlink" title="6. 数组分块"></a>6. 数组分块</h2><blockquote><p>语法：<code> chunk(array, size)</code></p><p>功能：将数组拆分成多个 size 大小长度的区块，每个区块组成小数组，整体组成一个二维数组</p><p>例子：[1, 2, 3, 4, 5, 6]调用 chunk(arr, 4) =&gt; [[1, 2, 3, 4], [5, 6]]</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组分块：这里用了比较巧妙的方法。暂存分块好的数组为0时，把它push到ret数组中，然后通过数组的引用性质，给temp数组push值，从而也改变ret数组的值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">chunk</span>(<span class="hljs-params">arr, size = <span class="hljs-number">1</span></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ret = [];<br>  <span class="hljs-keyword">let</span> temp = []; <span class="hljs-comment">// 暂存分块好的数组，再push到ret中</span><br><br>  arr.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (temp.length === <span class="hljs-number">0</span>) &#123;<br>      ret.push(temp);<br>      <span class="hljs-comment">// console.log(1, ret)   // 如需测试，请在node环境测试</span><br>    &#125;<br><br>    temp.push(item);<br>    <span class="hljs-comment">// console.log(2, ret)</span><br><br>    <span class="hljs-keyword">if</span> (temp.length === size) &#123;<br>      temp = [];<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">// console.log(chunk([1, 2, 3, 4, 5, 6, 7], 3))</span><br></code></pre></td></tr></table></figure><h2 id="7-数组差集"><a href="#7-数组差集" class="headerlink" title="7. 数组差集"></a>7. 数组差集</h2><blockquote><ul><li>语法: difference(arr1, arr2)</li><li>功能: 得到当前数组中所有不在 arr 中的元素组成的数组(不改变原数组)</li><li>例子: difference([1,3,5,7], [5, 8]) ==&gt; [1, 3, 7]</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组差集</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">difference</span>(<span class="hljs-params">arr1, arr2 = []</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (arr1.length === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> [];<br>  &#125;<br>  <span class="hljs-keyword">if</span> (arr2.length === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> arr1.slice();<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> ret = arr1.filter(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> !arr2.includes(item));<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">// console.log(difference([1, 2, 3, 4], [3, 4, 5]))</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自定义工具函数库-二-数组相关&quot;&gt;&lt;a href=&quot;#自定义工具函数库-二-数组相关&quot; class=&quot;headerlink&quot; title=&quot;自定义工具函数库(二) 数组相关&quot;&gt;&lt;/a&gt;自定义工具函数库(二) 数组相关&lt;/h1&gt;&lt;p&gt;最终仓库：&lt;a href=&quot;ht</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>自定义工具函数库(一)  函数相关</title>
    <link href="https://www.clzczh.top/2022/03/19/javascript-toolFunction-1/"/>
    <id>https://www.clzczh.top/2022/03/19/javascript-toolFunction-1/</id>
    <published>2022-03-19T03:40:10.000Z</published>
    <updated>2022-03-25T17:15:02.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义工具函数库-一-函数相关"><a href="#自定义工具函数库-一-函数相关" class="headerlink" title="自定义工具函数库(一) 函数相关"></a>自定义工具函数库(一) 函数相关</h2><p>最终仓库：<a href="https://github.com/13535944743/utils">utils: 自定义工具库</a></p><p>之前在哔哩哔哩看的视频的笔记。整理了一下。</p><h3 id="1-1-call-函数封装实现"><a href="#1-1-call-函数封装实现" class="headerlink" title="1.1 call 函数封装实现"></a>1.1 call 函数封装实现</h3><p>原理：为传入的 obj 添加临时方法，然后去调用这个临时方法，这样子，这个方法的<code>this</code>就会指向调用它的对象了，最后还需要把临时方法删除掉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// call函数封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">call</span>(<span class="hljs-params">fn, obj, ...args</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (obj === <span class="hljs-literal">undefined</span> || obj === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 如果call函数的第二个参数undefined(包括不传参)或null时，让obj等于全局对象</span><br>    obj = globalThis; <span class="hljs-comment">// 浏览器下globalThis是window，而node环境下则是global</span><br>  &#125;<br><br>  <span class="hljs-comment">// 为obj添加临时方法</span><br>  obj.temp = fn;<br><br>  <span class="hljs-comment">// 调用temp方法，此时方法中的this就是指向obj</span><br>  <span class="hljs-keyword">let</span> result = obj.temp(...args);<br><br>  <span class="hljs-comment">// 删除temp方法</span><br>  <span class="hljs-keyword">delete</span> obj.temp;<br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>  <span class="hljs-keyword">return</span> a + b + <span class="hljs-built_in">this</span>.c;<br>&#125;<br><br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>,<br>&#125;;<br><br><span class="hljs-comment">// 添加全局属性</span><br><span class="hljs-built_in">window</span>.c = <span class="hljs-number">100</span>;<br><br><span class="hljs-built_in">console</span>.log(call(add, obj, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">// 6：1 + 2 + obj.c，此时add函数中的this是obj</span><br><span class="hljs-built_in">console</span>.log(obj); <span class="hljs-comment">// &#123;c: 3&#125;</span><br><br><span class="hljs-built_in">console</span>.log(call(add, <span class="hljs-literal">null</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">// 103：1 + 2 + window.c，此时add函数中的this是window</span><br></code></pre></td></tr></table></figure><br><h3 id="1-2-apply-函数"><a href="#1-2-apply-函数" class="headerlink" title="1.2 apply 函数"></a>1.2 apply 函数</h3><p>原理：和<code> call</code>函数一样，就只是第三个参数是数组，而不是多个参数而已，所以不需要使用扩展运算符<code> ...</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// apply函数封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">apply</span>(<span class="hljs-params">fn, obj, args</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (obj === <span class="hljs-literal">undefined</span> || obj === <span class="hljs-literal">null</span>) &#123;<br>    obj = globalThis;<br>  &#125;<br>  obj.temp = fn;<br><br>  <span class="hljs-keyword">let</span> result = obj.temp(...args);<br><br>  <span class="hljs-keyword">delete</span> obj.temp;<br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="1-3-bind-函数"><a href="#1-3-bind-函数" class="headerlink" title="1.3 bind 函数"></a>1.3 bind 函数</h3><p>需要依赖自定义 call 函数或内置 call 函数</p><p>这个函数功能和<code> call</code>函数一样，所以可以调用内置的<code> call</code>函数来实现，当然也可以调用自定义版本的。</p><p>不同的是，返回是一个函数，而不是立即调用。而且<strong>在调用<code> bind</code>时可以传参，调用返回的函数也可以传参，只是如果传两次参数，则只有第一次的参数会起作用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// bind函数封装实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bind</span>(<span class="hljs-params">fn, obj, ...args1</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args2</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> fn.call(obj, ...args1, ...args2); <span class="hljs-comment">// 如果传两次参数，则只有第一次的参数会起作用。如果只传一次，则那一次的参数就会起作用</span><br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./bind.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>);</span><br><span class="javascript">        <span class="hljs-keyword">return</span> a + b + <span class="hljs-built_in">this</span>.c;</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> obj = &#123;</span><br><span class="javascript">        <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 添加全局属性</span></span><br><span class="javascript">      <span class="hljs-built_in">window</span>.c = <span class="hljs-number">100</span>;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> fn1 = bind(add, obj, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(fn1());</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> fn2 = bind(add, obj, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(fn2(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>));</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> fn3 = bind(add, obj);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(fn3(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>));</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> fn4 = bind(add, <span class="hljs-literal">null</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(fn4());</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 内置版本</span></span><br><span class="javascript">      <span class="hljs-comment">// const fn1 = add.bind(obj, 3, 4)</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(fn1())</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// const fn2 = add.bind(obj, 3, 4)</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(fn2(5, 6))</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// const fn3 = add.bind(obj)</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(fn3(5, 6))</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// const fn4 = add.bind(null, 3, 4)</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(fn4())</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="1-4-函数节流和函数防抖"><a href="#1-4-函数节流和函数防抖" class="headerlink" title="1.4 函数节流和函数防抖"></a>1.4 函数节流和函数防抖</h3><ul><li>事件频繁触发可能造成问题<ul><li>一些浏览器事件如<code> window.onresize</code>、<code> window.mousedown</code>等，触发频率高，会造成界面卡顿</li><li>向后台发送请求，频繁触发的话，对服务器会造成不必要的麻烦</li></ul></li></ul><p>解决方案：通过函数节流和函数防抖限制事件处理函数的频繁调用</p><br><h4 id="1-4-1-函数节流-throttle"><a href="#1-4-1-函数节流-throttle" class="headerlink" title="1.4.1 函数节流(throttle)"></a>1.4.1 函数节流(throttle)</h4><ul><li><p><strong>在函数需要频繁触发时：函数执行一次后，经过设定的间隔后才可以执行第二次。</strong></p></li><li><p>适合多次时间按时间平均分配触发</p></li></ul><p>场景：</p><ul><li>resize 事件(窗口调整)</li><li>scroll 事件(页面滚动)</li><li>mousemove 事件(拖拽功能)</li><li>click 事件(疯狂点击点击)</li></ul><p>语法：<code> throttle(callback, wait)</code></p><p>功能：创建一个节流函数，在 wait 毫秒内最多执行<code> callback</code>一次</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数节流</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">callback, wait</span>) </span>&#123;<br>  <span class="hljs-comment">// 定义开始时间</span><br>  <span class="hljs-keyword">let</span> start = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">// 返回结果是一个函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>    <span class="hljs-comment">// 获取当前时间戳</span><br>    <span class="hljs-keyword">let</span> now = <span class="hljs-built_in">Date</span>.now();<br><br>    <span class="hljs-keyword">if</span> (now - start &gt;= wait) &#123;<br>      callback.call(<span class="hljs-built_in">this</span>, event); <span class="hljs-comment">// 满足条件，执行回调函数</span><br><br>      <span class="hljs-comment">// 修改开始时间</span><br>      start = now;<br>    &#125;<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">// // 之前青训营时，月影老师教的版本：通过定义一个计时器，当计时器到期时，清除之前的计时器，而清除计时器的时候才可以再次调用回调函数</span><br><span class="hljs-comment">// function throttle(fn, time = 500) &#123;</span><br><span class="hljs-comment">//   let timer;</span><br><span class="hljs-comment">//   return function (...args) &#123;</span><br><span class="hljs-comment">//     if (timer == null) &#123;</span><br><span class="hljs-comment">//       fn.apply(this, args);</span><br><span class="hljs-comment">//       timer = setTimeout(() =&gt; &#123;</span><br><span class="hljs-comment">//         timer = null;/* 到期的话，清除之前的计时器 */</span><br><span class="hljs-comment">//       &#125;, time)</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">2000px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./throttle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// window.addEventListener(&#x27;scroll&#x27;, () =&gt; &#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//   console.log(this.scrollY) // 直接绑定滚动事件，一滚动，疯狂输出</span></span><br><span class="javascript">      <span class="hljs-comment">// &#125;)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">window</span>.addEventListener(</span><br><span class="javascript">        <span class="hljs-string">&quot;scroll&quot;</span>,</span><br><span class="javascript">        throttle(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.scrollY); <span class="hljs-comment">// 成功实现节流</span></span><br><span class="javascript">        &#125;, <span class="hljs-number">500</span>)</span><br><span class="javascript">      );</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h4 id="1-4-2-函数防抖-debounce"><a href="#1-4-2-函数防抖-debounce" class="headerlink" title="1.4.2 函数防抖(debounce)"></a>1.4.2 函数防抖(debounce)</h4><ul><li>在函数需要频繁触发时：<strong>在规定时间内，只让最后一次生效，前面的不生效</strong></li><li>适合多个事件一次相应的情况</li></ul><p>场景：输入框实时搜索联想（keyup / input）</p><blockquote><p>语法：<code> debounce(callback, wait)</code></p><p>功能：创建一个防抖动函数，该函数会从上一次被触发后，延迟<code> wait</code>毫秒后调用<code> callback</code></p><p>如果触发一次，还没过<code> wait</code>毫秒，再次触发，那么又得重新计时，依此类推，直到延迟<code> wait</code>毫秒后才调用<code> callback</code>(即<b style="color: red">频繁触发时，只让最后一次生效</b>)</p></blockquote><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数防抖</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">callback, time</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 定时器变量</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">clearTimeout</span>(timer); <span class="hljs-comment">// 每一次新的触发都会把前一次的定时器给清除掉，直到没有新的触发且时间经过time毫秒后才调用callback</span><br><br>    <span class="hljs-comment">// 启动计时器</span><br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      callback.call(<span class="hljs-built_in">this</span>, e);<br>    &#125;, time);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>函数封装实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./debounce.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;input&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      input.onkeydown = debounce(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(e.keyCode);</span><br><span class="javascript">      &#125;, <span class="hljs-number">1000</span>);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><a href="https://www.bilibili.com/video/BV1Cy4y117vt">尚硅谷 Web 前端自定义工具函数库视频教程_哔哩哔哩_bilibili</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自定义工具函数库-一-函数相关&quot;&gt;&lt;a href=&quot;#自定义工具函数库-一-函数相关&quot; class=&quot;headerlink&quot; title=&quot;自定义工具函数库(一) 函数相关&quot;&gt;&lt;/a&gt;自定义工具函数库(一) 函数相关&lt;/h2&gt;&lt;p&gt;最终仓库：&lt;a href=&quot;ht</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript实现继承的六种方式</title>
    <link href="https://www.clzczh.top/2022/03/17/javascript-inherit/"/>
    <id>https://www.clzczh.top/2022/03/17/javascript-inherit/</id>
    <published>2022-03-17T09:06:21.000Z</published>
    <updated>2022-03-25T17:14:54.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-实现继承的六种方式"><a href="#JavaScript-实现继承的六种方式" class="headerlink" title="JavaScript 实现继承的六种方式"></a>JavaScript 实现继承的六种方式</h1><hr><p><strong>父类</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;1 + 1 = 2&quot;</span>);<br>  &#125;;<br>&#125;<br><br>Person.prototype.listen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;エウテルペ&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><hr><h2 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h2><p><strong>将父类的实例作为子类的原型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;1 + 1 = 2&quot;</span>);<br>  &#125;;<br>&#125;<br><br>Person.prototype.listen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;エウテルペ&quot;</span>);<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><br>Student.prototype = <span class="hljs-keyword">new</span> Person(); <span class="hljs-comment">//关键</span><br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student();<br><br>stu.grade = <span class="hljs-number">3</span>;<br><br><span class="hljs-built_in">console</span>.log(stu.grade); <span class="hljs-comment">// 3</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br></code></pre></td></tr></table></figure><br><p><strong>优点</strong>：</p><ul><li><p>简单易实现</p></li><li><p>父类新增原型方法/原型属性，子类都能访问</p></li><li><p>实例是子类的实例也是父类的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">stu <span class="hljs-keyword">instanceof</span> Student; <span class="hljs-comment">// true</span><br>stu <span class="hljs-keyword">instanceof</span> Person; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li></ul><br><p><strong>缺点</strong>：</p><ul><li>为子类新增属性和方法，不能在构造函数中</li><li>无法实现多继承</li><li>创建子类实例时，不能向父类构造函数传参数</li><li>所有新实例都会共享父类实例的属性。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改！）</li></ul><br><p><strong>存在的问题：</strong></p><ul><li><p><code>prototype</code>里有个属性<code>constructor</code>指向构造函数本身，但是，<code> Student</code>的原型已经被父类的实例取代了，所以指向也不正确，所以需要修复构造函数指向(这里网上的教程只是对组合继承、寄生组合式继承进行了修复，不知道是不是因为这个不常用的关系)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-built_in">console</span>.log(Student.prototype.constructor);<br><br>Student.prototype = <span class="hljs-keyword">new</span> Person(); <span class="hljs-comment">//关键</span><br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student();<br><br>stu.grade = <span class="hljs-number">3</span>;<br><br><span class="hljs-built_in">console</span>.log(stu.grade); <span class="hljs-comment">// 3</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br><span class="hljs-built_in">console</span>.log(Student.prototype.constructor);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/5jp73YhObJIxtM2.png" alt="image-20220317095122520"></p></li></ul><br><p><strong>解决问题</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">Student.prototype.constructor = Student;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/4eCavAGMltys9TK.png" alt="image-20220317095215698"></p><hr><h2 id="2-借用构造函数继承"><a href="#2-借用构造函数继承" class="headerlink" title="2. 借用构造函数继承"></a>2. 借用构造函数继承</h2><p><strong>在一个类中执行另一个类的构造函数，通过<code> call</code>函数设置<code> this</code>的指向，这样就可以得到另一个类的所有属性</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">WebsiteMaster</span>(<span class="hljs-params">site</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.site = site;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, grade, site</span>) </span>&#123;<br>  Person.call(<span class="hljs-built_in">this</span>, name);<br>  WebsiteMaster.call(<span class="hljs-built_in">this</span>, site);<br>  <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;https://clz.vercel.app&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade, stu.site); <span class="hljs-comment">// clz, 3, https://clz.vercel.app</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// Uncaught TypeError: stu.listen is not a function</span><br></code></pre></td></tr></table></figure><br><p><strong>优点：</strong></p><ul><li>创建子类实例时，可以向父类传递参数</li><li>可以实现多继承(call 多个对象)</li><li>不需要修复构造函数指向</li></ul><br><p><strong>缺点：</strong></p><ul><li><p>方法在构造函数中定义，无法复用</p></li><li><p>只能继承父类的实例属性，不能继承原型属性、方法</p></li><li><p>实例并不是父类的实例，而只是子类的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">stu <span class="hljs-keyword">instanceof</span> Student; <span class="hljs-comment">// true</span><br>stu <span class="hljs-keyword">instanceof</span> Person; <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>继承继着不再是人了(笑)</p></li></ul><hr><h2 id="3-原型式继承"><a href="#3-原型式继承" class="headerlink" title="3. 原型式继承"></a>3. 原型式继承</h2><p>为父类实例添加属性、方法，作为子类实例。</p><blockquote><p>道格拉斯·克罗克福德在一篇文章中介绍了一种实现继承的方法，这种方法并没有使用严格意义上的构造函数。它的想法是借助原型可以基于已有的对象创建新对象，同时还不必因此创建自定义类型。为了达到这个目的，他给出了如下函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">object</span>(<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  F.prototype = o;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F();<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">object</span>(<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  F.prototype = o;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F();<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br><span class="hljs-keyword">const</span> stu = object(person);<br><br>stu.grade = <span class="hljs-number">3</span>;<br>stu.study = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;FrontEnd&quot;</span>);<br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade); <span class="hljs-comment">// clz, 3</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br><br>stu.study(); <span class="hljs-comment">// FrontEnd</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/HRrLnl6oKQhDiv7.png" alt="image-20220316224057344"></p><br><p><strong>优点</strong>：</p><ul><li>感觉没啥优点，不太像继承</li></ul><br><p><strong>缺点：</strong></p><ul><li>不支持多继承</li><li>实例是父类的实例</li></ul><hr><h2 id="4-寄生式继承"><a href="#4-寄生式继承" class="headerlink" title="4. 寄生式继承"></a>4. 寄生式继承</h2><p>为父类实例添加属性、方法，作为子类实例。(原理和原型式继承一样)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">object</span>(<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  F.prototype = o;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, grade</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> person = object(<span class="hljs-keyword">new</span> Person(name));<br><br>  person.grade = grade;<br>  person.study = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;FrontEnd&quot;</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> person;<br>&#125;<br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-number">3</span>);<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade); <span class="hljs-comment">// clz, 3</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br><br>stu.study(); <span class="hljs-comment">// FrontEnd</span><br></code></pre></td></tr></table></figure><p><strong>优点</strong>：</p><ul><li>有了子类的雏形，但是换汤不换药，原理和原型式继承一样</li></ul><br><p><strong>缺点：</strong></p><ul><li><p>不支持多继承</p></li><li><p>实例是父类的实例，不是子类的实例(因为只是在父类的实例上添加属性、方法而已)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">stu <span class="hljs-keyword">instanceof</span> Student; <span class="hljs-comment">// false</span><br>stu <span class="hljs-keyword">instanceof</span> Person; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="5-组合继承"><a href="#5-组合继承" class="headerlink" title="5. 组合继承"></a>5. 组合继承</h2><p>原型链继承+借用构造函数继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">WebsiteMaster</span>(<span class="hljs-params">site</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.site = site;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, grade, site</span>) </span>&#123;<br>  Person.call(<span class="hljs-built_in">this</span>, name); <span class="hljs-comment">// 继承属性</span><br>  WebsiteMaster.call(<span class="hljs-built_in">this</span>, site);<br>  <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><br>Student.prototype = <span class="hljs-keyword">new</span> Person(); <span class="hljs-comment">// 继承方法</span><br>Student.prototype.constructor = Student;<br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;https://clz.vercel.app&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade, stu.site); <span class="hljs-comment">// clz, 3, https://clz.vercel.app</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br><br><span class="hljs-built_in">console</span>.log(stu.constructor);<br></code></pre></td></tr></table></figure><br><p><strong>优点</strong>：</p><ul><li>可以继承实例属性、方法，也可以继承原型属性、方法</li><li>可传参、可复用</li><li>实例既是子类的实例，也是父类的实例</li></ul><br><p><strong>缺点</strong>：</p><ul><li>调用了两次父类构造函数，耗内存</li><li>需要修复构造函数指向</li></ul><br><h2 id="6-寄生组合式继承"><a href="#6-寄生组合式继承" class="headerlink" title="6. 寄生组合式继承"></a>6. 寄生组合式继承</h2><p>通过<code> Object.create()</code>来代替给子类原型赋值的过程，解决了两次调用父类构造函数的问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">WebsiteMaster</span>(<span class="hljs-params">site</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.site = site;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, grade, site</span>) </span>&#123;<br>  Person.call(<span class="hljs-built_in">this</span>, name); <span class="hljs-comment">// 继承属性</span><br>  WebsiteMaster.call(<span class="hljs-built_in">this</span>, site);<br>  <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><br>Student.prototype = <span class="hljs-built_in">Object</span>.create(Person.prototype); <span class="hljs-comment">// 继承方法</span><br>Student.prototype.constructor = Student; <span class="hljs-comment">// 修复构造函数指向</span><br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;https://clz.vercel.app&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade, stu.site); <span class="hljs-comment">// clz, 3, https://clz.vercel.app</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br></code></pre></td></tr></table></figure><br><p>有人可能会提出：为什么不可以直接把父类原型赋值给子类原型来实现呢？</p><p>这是因为直接赋值的话，那就是引用关系。下面就来看看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">WebsiteMaster</span>(<span class="hljs-params">site</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.site = site;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, grade, site</span>) </span>&#123;<br>  Person.call(<span class="hljs-built_in">this</span>, name); <span class="hljs-comment">// 继承属性</span><br>  WebsiteMaster.call(<span class="hljs-built_in">this</span>, site);<br>  <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><br>Student.prototype = Person.prototype; <span class="hljs-comment">// 继承方法</span><br>Student.prototype.constructor = Student; <span class="hljs-comment">// 修复实例</span><br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;clz&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;https://clz.vercel.app&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(stu.name, stu.grade, stu.site); <span class="hljs-comment">// clz, 3, https://clz.vercel.app</span><br><br>stu.say(); <span class="hljs-comment">// 1 + 1 = 2</span><br>stu.listen(); <span class="hljs-comment">// エウテルペ</span><br><br>Student.prototype.listen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;EGOIST&quot;</span>);<br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(Person.prototype.listen);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/tSLzqmKE1jRk4iJ.png" alt="image-20220316234707764"></p><p>可以看到，修改<code> Student</code>原型上的方法时，<code> Person</code>的原型上的也会跟着变化。</p><blockquote><p>**<code>Object.create()</code>**方法创建一个新对象，使用现有的对象来提供新创建的对象的<code>__proto__</code>。</p><p>所以，此时修改<code> Student</code>原型上的方法时，<code> Person</code>的原型上的不会跟着变化。</p></blockquote><hr><p>es6 之前没有<code> Object.create()</code>方法，可以自己实现(实际就是原型式继承的关键函数)</p><p><strong>关键</strong>：</p><ul><li>接受一个对象 obj</li><li>返回一个新对象 newObj</li><li>让<code> newObj.__proto__ === obj</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">object</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125; <span class="hljs-comment">// 新的构造函数</span><br>  F.prototype = obj; <span class="hljs-comment">// 继承传入的参数obj</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F(); <span class="hljs-comment">// 返回新的函数对象</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><p>参考链接：</p><ul><li><p><a href="https://zhuanlan.zhihu.com/p/37735247">js 继承的几种方式 - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://www.cnblogs.com/ranyonsue/p/11201730.html">js 继承的 6 种方式 - ranyonsue - 博客园 (cnblogs.com)</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript-实现继承的六种方式&quot;&gt;&lt;a href=&quot;#JavaScript-实现继承的六种方式&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 实现继承的六种方式&quot;&gt;&lt;/a&gt;JavaScript 实现继承的六种方式&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>github添加README文件后导致的问题</title>
    <link href="https://www.clzczh.top/2022/03/17/git-readme/"/>
    <id>https://www.clzczh.top/2022/03/17/git-readme/</id>
    <published>2022-03-17T06:09:30.000Z</published>
    <updated>2022-03-25T17:14:32.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="github-添加-README-文件后导致的问题"><a href="#github-添加-README-文件后导致的问题" class="headerlink" title="github 添加 README 文件后导致的问题"></a>github 添加 README 文件后导致的问题</h1><p>github 添加<code> README.md</code>文件后，<code> git push origin main</code>报错，<code> git pull origin main</code>后再推也无济于事。</p><p>这是因为<code> github</code>处添加<code> README</code>文件导致历史不一样。</p><p>通过<code> git pull</code>指令后添加<code> --allow-unrelated-histories</code>选项解决问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull origin main --allow-unrelated-histories<br></code></pre></td></tr></table></figure><p>该选项可以合并两个独立启动仓库的历史。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;github-添加-README-文件后导致的问题&quot;&gt;&lt;a href=&quot;#github-添加-README-文件后导致的问题&quot; class=&quot;headerlink&quot; title=&quot;github 添加 README 文件后导致的问题&quot;&gt;&lt;/a&gt;github 添加 R</summary>
      
    
    
    
    <category term="小技能" scheme="https://www.clzczh.top/categories/%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="git" scheme="https://www.clzczh.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>详解原型与原型链</title>
    <link href="https://www.clzczh.top/2022/03/16/javascript-prototype/"/>
    <id>https://www.clzczh.top/2022/03/16/javascript-prototype/</id>
    <published>2022-03-16T10:05:54.000Z</published>
    <updated>2022-03-25T17:14:58.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="详解原型与原型链"><a href="#详解原型与原型链" class="headerlink" title="详解原型与原型链"></a>详解原型与原型链</h1><p>其实，刚开始学 JavaScript 时，就有学过原型与原型链的相关知识了，只是当时还没有养成写笔记的习惯，导致现在已经忘的七七八八了。</p><p>这边文章真是花了很多心思，写了两天，看了很多篇篇博文，其中有小参考的，有解决一点疑惑的，但是最后只标注了一篇帮助最大的。</p><br><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p><strong>实例的构造函数属性(<code> constructor</code>)指向其构造函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person.constructor === Person); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><br><p><b style="color: red">实例的构造函数并不是自身属性，而是从原型对象上继承的属性</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person.constructor === Person); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(Person.prototype.constructor === Person); <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">console</span>.log(person.hasOwnProperty(<span class="hljs-string">&quot;constructor&quot;</span>)); <span class="hljs-comment">// false：constructor属性并不是实例自身的属性，而是继承来的</span><br></code></pre></td></tr></table></figure><br><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><ul><li><strong><code>__proto__(隐式原型)</code>：每个对象(除了<code> null</code>)都具有的属性</strong>，该属性指向该对象的原型</li><li><strong><code>prototype(显式原型)</code>：只有函数对象才有的属性</strong>，该属性指向函数的原型对象</li></ul><p>来看来看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-built_in">console</span>.log(obj);<br><span class="hljs-built_in">console</span>.log(add);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/8GRutdoLNb27qAz.png" alt="image-20220314161614197"></p><br><p><b syule="color: red">红框框中的<code> [[prototype]]</code>和<code> __proto__</code>意义相同，都是指对象的内部属性</b></p><p><strong>而所有函数都拥有<code> prototype</code>属性</strong>，所以可以通过<code> f.prototype</code>得到，那么自然也不需要通过<code> [[prototype]]</code>显示出来(毕竟<code> prototype</code>是显式原型，而<code> __proto__</code>是隐式原型，好吧，这是我猜的)</p><p><img src="https://s2.loli.net/2022/03/14/l1ebmHdsivJWNoT.png" alt="image-20220314162705526"></p><br><p><b style="color: red">箭头函数没有<code> prototype</code>属性</b></p><br><h3 id="访问原型"><a href="#访问原型" class="headerlink" title="访问原型"></a>访问原型</h3><p>通过实例对象访问原型对象有 3 种方法</p><ul><li><code>obj.__proto__</code></li><li><code>obj.constructor.prototype</code></li><li><code>Object.getPrototypeOf(obj)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br><span class="hljs-keyword">const</span> proto1 = person.__proto__;<br><span class="hljs-keyword">const</span> proto2 = person.constructor.prototype;<br><span class="hljs-keyword">const</span> proto3 = <span class="hljs-built_in">Object</span>.getPrototypeOf(person);<br><br><span class="hljs-keyword">const</span> proto = Person.prototype; <span class="hljs-comment">// 原型</span><br><br><span class="hljs-built_in">console</span>.log(proto1 === proto); <span class="hljs-comment">// true: 第一种方法</span><br><span class="hljs-built_in">console</span>.log(proto2 === proto); <span class="hljs-comment">// true: 第二种方法</span><br><span class="hljs-built_in">console</span>.log(proto3 === proto); <span class="hljs-comment">// true: 第三种方法</span><br></code></pre></td></tr></table></figure><br><p><strong>比较安全的做法是<code>Object.getPrototypeOf(obj)</code></strong></p><p><strong>以下部分会涉及一丢丢原型链的知识(如果没看懂，可以看下原型链再来看)</strong></p><ul><li><p><code> __proto__</code>属性是私有属性，存在浏览器兼容性问题，缺乏非浏览器环境的支持</p></li><li><p>如果 obj 的<code> constructor</code>属性被覆盖，那么<code>obj.constructor.prototype</code>将会失效。(因为 obj 自身是没有<code> constructor</code>属性的，是通过原型链去它的原型上获取<code> constructor</code>属性，所以覆盖该属性时，将不会再去原型链上查找)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Temp</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br>person.constructor = Temp;<br><br><span class="hljs-keyword">const</span> proto = Person.prototype; <span class="hljs-comment">// 原型</span><br><br><span class="hljs-built_in">console</span>.log(person.__proto__ === proto); <span class="hljs-comment">// true: 第一种方法</span><br><span class="hljs-built_in">console</span>.log(person.constructor.prototype === proto); <span class="hljs-comment">// false: 第二种方法</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getPrototypeOf(person) === proto); <span class="hljs-comment">// true: 第三种方法</span><br></code></pre></td></tr></table></figure></li></ul><br><h3 id="设置原型"><a href="#设置原型" class="headerlink" title="设置原型"></a>设置原型</h3><p>设置原型对象有 3 种方法</p><ul><li><code>obj.__proto__=prototypeObj</code></li><li><code>Object.setPrototypeOf(obj, prototypeObj)</code></li><li><code>Object.create(prototypeObj)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> proto = &#123;<br>  <span class="hljs-comment">// 原型对象</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;prototype&quot;</span>,<br>&#125;;<br><br><span class="hljs-comment">// 第一种方法</span><br><span class="hljs-keyword">const</span> obj1 = &#123;&#125;;<br>obj1.__proto__ = proto; <span class="hljs-comment">// 设置原型</span><br><span class="hljs-built_in">console</span>.log(obj1.name); <span class="hljs-comment">// prototype</span><br><span class="hljs-built_in">console</span>.log(obj1.__proto__ === proto); <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 第二种方法</span><br><span class="hljs-keyword">const</span> obj2 = &#123;&#125;;<br><span class="hljs-built_in">Object</span>.setPrototypeOf(obj2, proto); <span class="hljs-comment">// 设置原型</span><br><span class="hljs-built_in">console</span>.log(obj2.name); <span class="hljs-comment">// prototype</span><br><span class="hljs-built_in">console</span>.log(obj2.__proto__ === proto); <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 第三种方法</span><br><span class="hljs-keyword">const</span> obj3 = <span class="hljs-built_in">Object</span>.create(proto); <span class="hljs-comment">// 创建对象并设置原型</span><br><span class="hljs-built_in">console</span>.log(obj3.name); <span class="hljs-comment">// prototype</span><br><span class="hljs-built_in">console</span>.log(obj3.__proto__ === proto); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><br><h3 id="检测原型"><a href="#检测原型" class="headerlink" title="检测原型"></a>检测原型</h3><p>使用<code> obj1.isPrototypeOf(obj2)</code>方法判断<code> obj1</code>是否为·<code> obj2</code>的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> proto = &#123;<br>  <span class="hljs-comment">// 原型对象</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;prototype&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> proto1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;prototype&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> obj = &#123;&#125;;<br>obj.__proto__ = proto; <span class="hljs-comment">// 设置原型</span><br><br><span class="hljs-built_in">console</span>.log(proto.isPrototypeOf(obj)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.isPrototypeOf(obj)); <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">console</span>.log(proto1.isPrototypeOf(obj)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><br><h2 id="prototype、-proto-、constructor-之间的关系"><a href="#prototype、-proto-、constructor-之间的关系" class="headerlink" title="prototype、__proto__、constructor 之间的关系"></a>prototype、<code>__proto__</code>、constructor 之间的关系</h2><p><img src="https://s2.loli.net/2022/03/14/FO6IgxSiPm9pVWu.png" alt="image-20220314170210850"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(person.__proto__ === Person.prototype); <span class="hljs-comment">// true：因为创建person对象的构造函数是Person，所以person对象的隐式原型(__proto__)指向Person函数的原型(prototype)</span><br><span class="hljs-built_in">console</span>.log(Person.prototype.constructor === Person); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><br><p><strong>同一个构造函数创建的多个实例的原型是同一个</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-keyword">const</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(person1 === person2); <span class="hljs-comment">// false: 不是同一个对象</span><br><span class="hljs-built_in">console</span>.log(person1.__proto__ === person2.__proto__); <span class="hljs-comment">// true：同一个构造函数创建的实例对象的原型是同一个</span><br></code></pre></td></tr></table></figure><br><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>由上面的知识可以知道，实例对象具有属性<code> __proto__</code>，会指向原型对象。而原型对象也是对象，所以也会有属性<code> __proto__</code>，也会继续指向它的原型对象。</p><p><b style="color: red">实例对象在查找属性时，如果查找不到，就会沿着<code> __proto__</code>去它的原型上查找，还找不到，则继续去原型的原型上查找，直到找到或到最顶层为止。这就是原型链的概念。</b></p><br><p><strong>对象本身的方法(第一层：把方法当成属性)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;听音乐&quot;</span>);<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person);<br><span class="hljs-built_in">console</span>.log(<br>  <span class="hljs-string">&quot;实例对象本身是否有listenMusic方法&quot;</span>,<br>  person.hasOwnProperty(<span class="hljs-string">&quot;listenMusic&quot;</span>)<br>);<br>person.listenMusic();<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/wVuWlXUHCbSGhx9.png" alt="image-20220315094508947"></p><br><p><strong>对象的原型上添加方法(第二层)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>Person.prototype.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;听音乐&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person);<br><span class="hljs-built_in">console</span>.log(<br>  <span class="hljs-string">&quot;实例对象本身是否有listenMusic方法&quot;</span>,<br>  person.hasOwnProperty(<span class="hljs-string">&quot;listenMusic&quot;</span>)<br>);<br>person.listenMusic();<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/5bNeTitq3vJIU16.png" alt="image-20220314183755250"></p><br><p><strong>原型的原型上的方法(第三层)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>Person.prototype.__proto__.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;听音乐&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person);<br>person.listenMusic();<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/WwhLDopOEvJuxcG.png" alt="image-20220314184300125"></p><br><p>但是呢，没法玩第四层，因为已经到顶了(<strong><code> Object.prototype</code>没有原型(原型为 null)</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>Person.prototype.__proto__.__proto__.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;听音乐&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person);<br>person.listenMusic();<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/xD67UynCkVE4waz.png" alt="image-20220314184424877"></p><hr><p><strong>person -&gt; Person.prototype -&gt; Object.prototype -&gt; null</strong></p><p>那么，这里就来看看第三层是不是真的是<code> Object.prototype</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>Person.prototype.__proto__.listenMusic = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;听音乐&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person);<br><br><span class="hljs-built_in">console</span>.log(Person.prototype.__proto__ === person.__proto__.__proto__);<br><span class="hljs-built_in">console</span>.log(person.__proto__.__proto__ === <span class="hljs-built_in">Object</span>.prototype); <span class="hljs-comment">// 这里就是判断处</span><br><br>person.listenMusic();<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/Vq8hgzA6YsF5KLm.png" alt="image-20220315095211650"></p><p>发现，确实如此。</p><p><strong>下面这张图就是原型链的简单图</strong>(找不到是在哪里截的图了，侵删)</p><p><img src="https://s2.loli.net/2022/03/14/gvmpCyaXMPxNiZ1.png" alt="image-20220314233252631"></p><br><h3 id="原型链的作用"><a href="#原型链的作用" class="headerlink" title="原型链的作用"></a>原型链的作用</h3><h4 id="为对象设置默认值"><a href="#为对象设置默认值" class="headerlink" title="为对象设置默认值"></a>为对象设置默认值</h4><blockquote><p>利用原型为对象设置默认值。当原型属性与私有属性同名时，删除私有属性之后，可以访问原型属性，即可以把原型属性值作为初始化默认值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br>Person.prototype.name = <span class="hljs-string">&quot;赤蓝紫&quot;</span>;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person.name); <span class="hljs-comment">// clz</span><br><br><span class="hljs-keyword">delete</span> person.name;<br><span class="hljs-built_in">console</span>.log(person.name); <span class="hljs-comment">// 赤蓝紫</span><br></code></pre></td></tr></table></figure><br><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承内容部分之后单独写。</p><br><h4 id="扩展原型方法"><a href="#扩展原型方法" class="headerlink" title="扩展原型方法"></a>扩展原型方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Array</span>.prototype.test = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;扩展原型方法: 有风险&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>arr.test(); <span class="hljs-comment">// 扩展原型方法: 有风险</span><br></code></pre></td></tr></table></figure><br><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p>typeof 是判断类型时大多数人的选择(当然也包括我啦)，但是，判断非基本数据类型(<code>function</code>除外)时，只能得到<code> Object</code>。(null 也是，但是 null 这个属于是历史遗留 bug 了)。</p><blockquote><p><strong>js 在底层存储变量的时候，会在变量的机器码的低位 1-3 位存储其类型信息</strong></p><ul><li>000：对象</li><li>010：浮点数</li><li>100：字符串</li><li>110：布尔</li><li>1：整数</li></ul><p>null：所有机器码均为 0<br>undefined：用 −2^30 整数来表示</p></blockquote><hr><p><code> symbol</code>和<code> bigint</code>是后来新增的数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> num = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-keyword">const</span> bool = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">const</span> n = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">const</span> u = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">const</span> sym = <span class="hljs-built_in">Symbol</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">const</span> big = <span class="hljs-built_in">BigInt</span>(<span class="hljs-number">123</span>);<br><br><span class="hljs-keyword">const</span> fun = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> num); <span class="hljs-comment">// number</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> str); <span class="hljs-comment">// string</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> bool); <span class="hljs-comment">// boolean</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> n); <span class="hljs-comment">// object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> u); <span class="hljs-comment">// undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> sym); <span class="hljs-comment">// symbol</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> big); <span class="hljs-comment">//bigint</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fun); <span class="hljs-comment">//function</span><br></code></pre></td></tr></table></figure><br><p><strong><code>function</code>除外的非基本数据类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [];<br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>&#125;;<br><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> arr);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> set);<br></code></pre></td></tr></table></figure><p><strong>清一色<code> object</code></strong></p><br><p>通过<code>Object.prototype.toString.call(obj)</code>来识别对象类型。会返回<code>&quot;[object Type]&quot;</code>来告诉你所指对象的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">let</span> arr = []<br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;clz&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>])<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(arr))  <span class="hljs-comment">// [object Array]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(obj))  <span class="hljs-comment">// [object Object]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(set))  <span class="hljs-comment">// [object Set]</span><br></code></pre></td></tr></table></figure><hr><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p><strong><code>instanceof</code>只要右边变量的 prototype 在左边变量的原型链上，就会返回<code>true</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;clz&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> Person); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>); <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> Test); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><br><h2 id="普通对象与函数对象"><a href="#普通对象与函数对象" class="headerlink" title="普通对象与函数对象"></a>普通对象与函数对象</h2><ul><li><p><strong>所有的函数都是通过<code> new Function()</code>来创建的，即是函数对象</strong></p></li><li><p>**其他的都是普通对象 **</p></li></ul><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">const</span> fn2 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br><span class="hljs-keyword">const</span> fn3 = <span class="hljs-function">() =&gt;</span> &#123;&#125;;<br><span class="hljs-keyword">const</span> fn4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>();<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn1); <span class="hljs-comment">//function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn2); <span class="hljs-comment">//function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn3); <span class="hljs-comment">//function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn4); <span class="hljs-comment">//function</span><br><br><span class="hljs-keyword">const</span> obj1 = &#123;&#125;;<br><span class="hljs-keyword">const</span> obj2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><span class="hljs-keyword">const</span> obj3 = <span class="hljs-keyword">new</span> fn1();<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj1); <span class="hljs-comment">//object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj2); <span class="hljs-comment">//object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj3); <span class="hljs-comment">//object</span><br></code></pre></td></tr></table></figure><br><p>上面的例子中，<code> fn1</code>、<code> fn2</code>、<code> fn3</code>、<code> fn4</code>是函数对象，<code> obj1</code>、<code> obj2</code>、<code> obj3</code>是普通对象</p><blockquote><ul><li><strong>Object 是构造函数，即也是函数，所以<code> Object</code>也是函数对象，相当于<code>Function</code>的实例，即<code> Object.__proto__ === Function.prototype</code></strong></li><li><strong><code>Object.prototype</code>是<code>Object</code>构造函数的原型，处于原型链的顶端，<code>Object.prototype.__proto__</code>已经没有可以指向的上层原型，因此其值为<code>null</code></strong></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span>); <span class="hljs-comment">// function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.__proto__ === <span class="hljs-built_in">Function</span>.prototype); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.__proto__); <span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure><br><blockquote><ul><li><strong><code> Function.prototype</code>是<code> Function</code>的原型，是所有函数对象的原型</strong></li><li><strong><code>Function.prototype</code>是一个普通对象，所以<code> Function.prototype.__proto__ === Object.prototype</code></strong></li><li><strong><code>Function</code>函数不通过任何东西创建，<code>JS</code>引擎启动时，添加到内存中</strong>，所以**<code> Function.__proto__ === Function.prototype</code>**</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Function</span>); <span class="hljs-comment">// function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.prototype.__proto__ === <span class="hljs-built_in">Object</span>.prototype); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.__proto__ === <span class="hljs-built_in">Function</span>.prototype); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><br><h2 id="经典原型链图"><a href="#经典原型链图" class="headerlink" title="经典原型链图"></a>经典原型链图</h2><p><img src="https://s2.loli.net/2022/03/15/HXe9vi2ADnSVC6J.png" alt="img"></p><br><h2 id="练手福利"><a href="#练手福利" class="headerlink" title="练手福利"></a>练手福利</h2><p>题目来自<a href="https://juejin.cn/post/7018355953955241997">JavaScript 之彻底理解原型与原型链</a></p><p>有加一道</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">User</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>User.prototype.sayHello = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br><span class="hljs-keyword">var</span> u1 = <span class="hljs-keyword">new</span> User();<br><span class="hljs-keyword">var</span> u2 = <span class="hljs-keyword">new</span> User();<br><br><span class="hljs-built_in">console</span>.log(u1.sayHello === u2.sayHello);<br><span class="hljs-built_in">console</span>.log(User.prototype.constructor);<br><br><span class="hljs-built_in">console</span>.log(User.prototype === <span class="hljs-built_in">Function</span>.prototype);<br><span class="hljs-built_in">console</span>.log(User.prototype.__proto__ === <span class="hljs-built_in">Function</span>.prototype.__proto__);<br><span class="hljs-built_in">console</span>.log(User.prototype === u1.__proto__);<br><br><span class="hljs-built_in">console</span>.log(User.__proto__ === <span class="hljs-built_in">Function</span>.prototype);<br><span class="hljs-built_in">console</span>.log(User.__proto__ === <span class="hljs-built_in">Function</span>.__proto__);<br><br><span class="hljs-built_in">console</span>.log(u1.__proto__ === u2.__proto__);<br><span class="hljs-built_in">console</span>.log(u1.__proto__ === User.__proto__);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.__proto__ === <span class="hljs-built_in">Object</span>.__proto__);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.prototype.__proto__ === <span class="hljs-built_in">Object</span>.prototype.__proto__);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.prototype.__proto__ === <span class="hljs-built_in">Object</span>.prototype);<br></code></pre></td></tr></table></figure><br><p><strong>校对答案</strong>：(可能有点难，细嚼慢咽后再反复看就行)</p><p><img src="https://s2.loli.net/2022/03/15/h6jEpTSG4RaIfoQ.png" alt="image-20220315162828873"></p><br><p>参考链接：<a href="http://c.biancheng.net/view/5805.html">JS 原型（prototype）和原型链完全攻略</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;详解原型与原型链&quot;&gt;&lt;a href=&quot;#详解原型与原型链&quot; class=&quot;headerlink&quot; title=&quot;详解原型与原型链&quot;&gt;&lt;/a&gt;详解原型与原型链&lt;/h1&gt;&lt;p&gt;其实，刚开始学 JavaScript 时，就有学过原型与原型链的相关知识了，只是当时还没有养</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>微软自带的日语输入法怎么切换平假名和片假名</title>
    <link href="https://www.clzczh.top/2022/03/16/life-skill/"/>
    <id>https://www.clzczh.top/2022/03/16/life-skill/</id>
    <published>2022-03-16T09:32:17.000Z</published>
    <updated>2022-03-25T17:15:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微软自带的日语输入法怎么切换平假名和片假名"><a href="#微软自带的日语输入法怎么切换平假名和片假名" class="headerlink" title="微软自带的日语输入法怎么切换平假名和片假名"></a>微软自带的日语输入法怎么切换平假名和片假名</h1><p>使用按键 ctrl+caps lock，切换平假名。</p><p>使用按键 alt+caps lock，切换片假名。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微软自带的日语输入法怎么切换平假名和片假名&quot;&gt;&lt;a href=&quot;#微软自带的日语输入法怎么切换平假名和片假名&quot; class=&quot;headerlink&quot; title=&quot;微软自带的日语输入法怎么切换平假名和片假名&quot;&gt;&lt;/a&gt;微软自带的日语输入法怎么切换平假名和片假名&lt;/</summary>
      
    
    
    
    <category term="小技能" scheme="https://www.clzczh.top/categories/%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue Router深入学习(二)</title>
    <link href="https://www.clzczh.top/2022/03/15/vue-router-deep-2/"/>
    <id>https://www.clzczh.top/2022/03/15/vue-router-deep-2/</id>
    <published>2022-03-15T08:41:51.000Z</published>
    <updated>2022-03-25T17:16:25.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-Router-深入学习-二"><a href="#Vue-Router-深入学习-二" class="headerlink" title="Vue Router 深入学习(二)"></a>Vue Router 深入学习(二)</h1><p>通过阅读文档，自己写一些 demo 来加深自己的理解。(主要针对 Vue3)<br>上一篇：<a href="https://clz.vercel.app/2022/03/12/vue-router-deep-1/">Vue Router 深入学习(一)</a></p><h2 id="1-路由元信息"><a href="#1-路由元信息" class="headerlink" title="1. 路由元信息"></a>1. 路由元信息</h2><blockquote><p>有时，你可能希望将任意信息附加到路由上，如过渡名称、谁可以访问路由等。这些事情可以通过接收属性对象的<code>meta</code>属性来实现，并且它可以在路由地址和导航守卫上都被访问到。定义路由的时候你可以这样配置 <code>meta</code> 字段</p></blockquote><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;用户&quot;</span>,<br>      <span class="hljs-attr">isLogin</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><h3 id="1-1-简单使用"><a href="#1-1-简单使用" class="headerlink" title="1.1 简单使用"></a>1.1 简单使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;用户&quot;</span>,<br>      <span class="hljs-attr">isLogin</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; route.meta &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(route.meta);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/spOZRvIcYXwPtHm.png" alt="image-20220304103855475"></p><h3 id="1-2-搭配路由守卫使用"><a href="#1-2-搭配路由守卫使用" class="headerlink" title="1.2 搭配路由守卫使用"></a>1.2 搭配路由守卫使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;用户&quot;</span>,<br>      <span class="hljs-attr">isLogin</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;:id(\\d+)&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/UserId.vue&quot;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;id&quot;</span>,<br>          <span class="hljs-attr">requireAuth</span>: <span class="hljs-literal">true</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;:name&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/UserName.vue&quot;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;name&quot;</span>,<br>          <span class="hljs-attr">requireAuth</span>: <span class="hljs-literal">false</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>&#125;);<br></code></pre></td></tr></table></figure><p>路由前置守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (to.meta.requireAuth) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>      <span class="hljs-attr">query</span>: &#123;<br>        <span class="hljs-attr">redirect</span>: to.path, <span class="hljs-comment">// 保存要去的位置，获得权限后再去</span><br>      &#125;,<br>    &#125;;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/nImTkXpSrcCadJB.gif" alt="vue-router"></p><h2 id="2-数据获取"><a href="#2-数据获取" class="headerlink" title="2. 数据获取"></a>2. 数据获取</h2><blockquote><p>有时候，进入某个路由后，需要从服务器获取数据。例如，在渲染用户信息时，你需要从服务器获取用户的数据。</p></blockquote><h3 id="2-1-导航完成后获取数据"><a href="#2-1-导航完成后获取数据" class="headerlink" title="2.1 导航完成后获取数据"></a>2.1 导航完成后获取数据</h3><blockquote><p>当你使用这种方式时，我们会马上导航和渲染组件，然后在组件的 created 钩子中获取数据。这让我们有机会在数据获取期间展示一个 loading 状态，还可以在不同视图间展示不同的 loading 状态。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>id: &#123;&#123; post.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 222 &#125; &#125;&quot;</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 333 &#125; &#125;&quot;</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 444 &#125; &#125;&quot;</span>&gt;</span>444<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; reactive, watchEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">let</span> post = reactive(&#123;</span><br><span class="javascript">    <span class="hljs-attr">id</span>: <span class="hljs-literal">null</span>,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> fetchData = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// 数据获取，不需要生命周期钩子。因为beforeCreate和created没有API，因为setup实际上就相当于这两个生命周期函数</span></span><br><span class="javascript">    post.id = route.params.id;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><br><span class="javascript">  watchEffect(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> id = post.id;</span><br><span class="javascript">    fetchData();</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/468dhyarpVXUOWm.gif" alt="vue-router"></p><h3 id="2-2-在导航完成前获取数据"><a href="#2-2-在导航完成前获取数据" class="headerlink" title="2.2 在导航完成前获取数据"></a>2.2 在导航完成前获取数据</h3><blockquote><p>通过这种方式，我们在导航转入新的路由前获取数据。我们可以在接下来的组件的 <code>beforeRouteEnter</code> 守卫中获取数据，当数据获取成功后只调用 <code>next</code> 方法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>id: &#123;&#123; post.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 222 &#125; &#125;&quot;</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 333 &#125; &#125;&quot;</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;Post&#x27;, params: &#123; id: 444 &#125; &#125;&quot;</span>&gt;</span>444<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">post</span>: &#123;&#125;,</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">beforeRouteEnter</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-comment">// 不要写在setup里</span></span><br><span class="javascript">      next(<span class="hljs-function">(<span class="hljs-params">vm</span>) =&gt;</span> &#123;</span><br><span class="javascript">        vm.setData(to.params);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">beforeRouteUpdate</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.post = to.params;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">setData</span>(<span class="hljs-params">post</span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.post = post;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果和上图一样。这里有点问题，通过<code>beforeRouteEnter</code>无法获取到<code> setup</code>里的函数、数据等，所以变成了使用 Vue2 的形式来实现。</p><h2 id="3-过渡动效"><a href="#3-过渡动效" class="headerlink" title="3. 过渡动效"></a>3. 过渡动效</h2><h3 id="3-1-transition-简单了解"><a href="#3-1-transition-简单了解" class="headerlink" title="3.1 transition 简单了解"></a>3.1 transition 简单了解</h3><blockquote><p><code>&lt;Transition&gt;</code> 会在一个元素或组件进入和离开 DOM 时应用动画</p></blockquote><p><img src="https://s2.loli.net/2022/03/15/FBeshZCdVrvYul6.png" alt="image-20220304182013408"></p><h3 id="3-2-简单使用"><a href="#3-2-简单使用" class="headerlink" title="3.2 简单使用"></a>3.2 简单使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; Component &#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fade&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 router-view 上使用 v-slot 获取对应的组件，使用 component 动态组件来渲染这个组件，然后用 transition 包裹住这个动态组件</p><p><b style="color: red">对应的路由组件只能有一个根元素，否则过渡将没有效果</b></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.fade-enter-from</span>,<br><span class="hljs-selector-class">.fade-leave-to</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100px</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fade-enter-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2022/03/15/HNFL6CBem9nM3ao.gif" alt="vue-router"></p><h4 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; Component &#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fade&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.fade-enter-from</span>,</span><br><span class="css">  <span class="hljs-selector-class">.fade-leave-to</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100px</span>);</span><br><span class="css">    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.fade-enter-active</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-单个路由的过渡"><a href="#3-3-单个路由的过渡" class="headerlink" title="3.3 单个路由的过渡"></a>3.3 单个路由的过渡</h3><p>原理很简单，路由配置时在<code>meta上</code>添加上<code>trasition</code>属性，再动态地和<code> name</code>结合在一起就行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/post&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Post&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Post.vue&quot;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">transition</span>: <span class="hljs-string">&quot;slide-left&quot;</span>,<br>    &#125;,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">transition</span>: <span class="hljs-string">&quot;slide-right&quot;</span>,<br>    &#125;,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; Component, route &#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">:name</span>=<span class="hljs-string">&quot;route.meta.transition || fade&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再添加上对应的 css 样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.fade-enter-from</span>,<br><span class="hljs-selector-class">.fade-leave-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fade-enter-active</span>,<br><span class="hljs-selector-class">.slide-left-enter-active</span>,<br><span class="hljs-selector-class">.slide-right-enter-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.slide-left-enter-from</span>,<br><span class="hljs-selector-class">.slide-left-leave-to</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">200px</span>);<br>&#125;<br><br><span class="hljs-selector-class">.slide-right-enter-from</span>,<br><span class="hljs-selector-class">.slide-right-leave-to</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">200px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/15/ueE7mi691FaULNR.gif"></p><h3 id="3-4-基于路由的动态过渡"><a href="#3-4-基于路由的动态过渡" class="headerlink" title="3.4 基于路由的动态过渡"></a>3.4 基于路由的动态过渡</h3><p>根据目标路由和当前路由之间的关系，动态地确定使用的过渡</p><p>如：添加一个 <a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%90%8E%E7%BD%AE%E9%92%A9%E5%AD%90">全局后置钩子</a>，根据路径的深度动态添加信息到 <code>meta</code> 字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">router.afterEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> toDepth = to.path.split(<span class="hljs-string">&quot;/&quot;</span>).length;<br>  <span class="hljs-keyword">const</span> fromDepth = <span class="hljs-keyword">from</span>.path.split(<span class="hljs-string">&quot;/&quot;</span>).length;<br><br>  to.meta.transition = toDepth &lt; fromDepth ? <span class="hljs-string">&quot;slide-right&quot;</span> : <span class="hljs-string">&quot;slide-left&quot;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/04/M2gyJ1QtPL4aqEV.gif" alt="vue-router"></p><h2 id="4-滚动行为"><a href="#4-滚动行为" class="headerlink" title="4. 滚动行为"></a>4. 滚动行为</h2><p>在创建 Router 示例时，提供一个<code> scrollBehavior</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  <span class="hljs-attr">routes</span>: [...],<br>  scrollBehavior (to, <span class="hljs-keyword">from</span>, savedPosition) &#123;<br>    <span class="hljs-comment">// return 期望滚动到哪个的位置</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="4-1-普通用法"><a href="#4-1-普通用法" class="headerlink" title="4.1 普通用法"></a>4.1 普通用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">50</span>, <span class="hljs-comment">// 始终滚动到距离顶部50px处</span><br>    &#125;;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/EV8YKSlftByWXr3.gif" alt="vue-router1"></p><p>如果浏览器支持<a href="https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions/behavior">滚动行为</a>，可以通过<code>behavior</code>变得更流畅</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">50</span>, <span class="hljs-comment">// 始终滚动到距离顶部50px处</span><br>      <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;smooth&quot;</span>,<br>    &#125;;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/oOms145iPFjnIMG.gif" alt="vue-router1"></p><h3 id="4-2-通过-el实现相对元素的偏移"><a href="#4-2-通过-el实现相对元素的偏移" class="headerlink" title="4.2 通过 el实现相对元素的偏移"></a>4.2 通过<code> el</code>实现相对元素的偏移</h3><p><code> el</code>可接受一个 CSS 选择器或一个 DOM 元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;h2&quot;</span>,<br>      <span class="hljs-attr">top</span>: <span class="hljs-number">50</span>,<br>    &#125;;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/b4Dv5ZBGsw7OLNm.gif" alt="vue-router1"></p><h3 id="4-3-恢复之前的位置"><a href="#4-3-恢复之前的位置" class="headerlink" title="4.3 恢复之前的位置"></a>4.3 恢复之前的位置</h3><p>返回 <code>savedPosition</code>，在按下 后退/前进 按钮时，就会恢复之前的位置。像浏览器的原生表现那样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (savedPosition) &#123;<br>      <span class="hljs-comment">// console.log(savedPosition)</span><br>      <span class="hljs-keyword">return</span> savedPosition;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,<br>      &#125;;<br>    &#125;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/bg2IuKXjRE1rPoY.gif" alt="vue-router1"></p><h3 id="4-4-延迟滚动"><a href="#4-4-延迟滚动" class="headerlink" title="4.4 延迟滚动"></a>4.4 延迟滚动</h3><p>通过返回一个 Promise 来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>  <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        resolve(&#123;<br>          <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,<br>          <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;smooth&quot;</span>,<br>        &#125;);<br>      &#125;, <span class="hljs-number">500</span>);<br>    &#125;);<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/VkiJHyfjaZDvIPc.gif" alt="vue-router1"></p><h2 id="5-路由懒加载"><a href="#5-路由懒加载" class="headerlink" title="5. 路由懒加载"></a>5. 路由懒加载</h2><blockquote><p>把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，会更高效</p></blockquote><p>静态导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> User <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../components/User.vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: User,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><p>动态导入：(实际上还省字)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><h2 id="6-动态路由"><a href="#6-动态路由" class="headerlink" title="6. 动态路由"></a>6. 动态路由</h2><h3 id="6-1-添加路由"><a href="#6-1-添加路由" class="headerlink" title="6.1 添加路由"></a>6.1 添加路由</h3><p>路由配置：初始只有一个路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>在导航守卫处添加新路由：实际上要限制那些页面的权限就可以这样添加，只有满足条件才会动态添加路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  router.addRoute(&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./components/User.vue&quot;</span>),<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="6-2-删除路由"><a href="#6-2-删除路由" class="headerlink" title="6.2 删除路由"></a>6.2 删除路由</h3><p><b style="color: red">当路由被删除时，所有的别名和子路由都会被同时删掉</b></p><h4 id="6-2-1-通过添加一个名字冲突的路由"><a href="#6-2-1-通过添加一个名字冲突的路由" class="headerlink" title="6.2.1 通过添加一个名字冲突的路由"></a>6.2.1 通过添加一个名字冲突的路由</h4><p>如果添加与现有名称相同的路由，会先删除路由，再添加路由。</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">router.addRoute(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">component</span>: About &#125;);<br><span class="hljs-comment">// 这将会删除之前已经添加的路由，因为他们具有相同的名字且名字必须是唯一的</span><br>router.addRoute(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/other&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">component</span>: Other &#125;);<br></code></pre></td></tr></table></figure></blockquote><h4 id="6-2-2-通过调用-router-addRoute-返回的回调"><a href="#6-2-2-通过调用-router-addRoute-返回的回调" class="headerlink" title="6.2.2 通过调用 router.addRoute() 返回的回调"></a>6.2.2 通过调用 <code>router.addRoute()</code> 返回的回调</h4><p>情境：路由没有名称，没法覆盖删除掉路由</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> removeRoute = router.addRoute(routeRecord);<br>removeRoute(); <span class="hljs-comment">// 删除路由如果存在的话</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="6-2-3-通过使用-router-removeRoute-按名称删除路由"><a href="#6-2-3-通过使用-router-removeRoute-按名称删除路由" class="headerlink" title="6.2.3 通过使用 router.removeRoute() 按名称删除路由"></a>6.2.3 通过使用 <code>router.removeRoute()</code> 按名称删除路由</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">router.addRoute(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">component</span>: About &#125;);<br><span class="hljs-comment">// 删除路由</span><br>router.removeRoute(<span class="hljs-string">&quot;about&quot;</span>);<br></code></pre></td></tr></table></figure></blockquote><h3 id="6-3-添加嵌套路由"><a href="#6-3-添加嵌套路由" class="headerlink" title="6.3 添加嵌套路由"></a>6.3 添加嵌套路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">router.addRoute(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/admin&quot;</span>,<br>  <span class="hljs-attr">component</span>: Admin,<br>  <span class="hljs-attr">children</span>: [&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;settings&quot;</span>, <span class="hljs-attr">component</span>: AdminSettings &#125;],<br>&#125;);<br></code></pre></td></tr></table></figure><p>也可以将路由的<code> name</code>作为第一个参数传递给<code> router.addRoute()</code>，这样就可以有效的添加路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">router.addRoute(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/admin&quot;</span>, <span class="hljs-attr">component</span>: Admin &#125;);<br>router.addRoute(<span class="hljs-string">&quot;admin&quot;</span>, &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;settings&quot;</span>, <span class="hljs-attr">component</span>: AdminSettings &#125;);<br></code></pre></td></tr></table></figure><h3 id="6-4-查看现有路由"><a href="#6-4-查看现有路由" class="headerlink" title="6.4 查看现有路由"></a>6.4 查看现有路由</h3><ul><li><a href="https://router.vuejs.org/zh/api/#hasroute"><code>router.hasRoute()</code></a>：检查路由是否存在。</li><li><a href="https://router.vuejs.org/zh/api/#getroutes"><code>router.getRoutes()</code></a>：获取一个包含所有路由记录的数组。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-Router-深入学习-二&quot;&gt;&lt;a href=&quot;#Vue-Router-深入学习-二&quot; class=&quot;headerlink&quot; title=&quot;Vue Router 深入学习(二)&quot;&gt;&lt;/a&gt;Vue Router 深入学习(二)&lt;/h1&gt;&lt;p&gt;通过阅读文档，自</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://www.clzczh.top/tags/Vue/"/>
    
    <category term="Vue Router" scheme="https://www.clzczh.top/tags/Vue-Router/"/>
    
  </entry>
  
  <entry>
    <title>详解JavaScript 执行机制</title>
    <link href="https://www.clzczh.top/2022/03/14/javascript-eventloop/"/>
    <id>https://www.clzczh.top/2022/03/14/javascript-eventloop/</id>
    <published>2022-03-14T04:27:51.000Z</published>
    <updated>2022-03-25T17:14:55.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="详解-JavaScript-执行机制"><a href="#详解-JavaScript-执行机制" class="headerlink" title="详解 JavaScript 执行机制"></a>详解 JavaScript 执行机制</h1><h2 id="热身"><a href="#热身" class="headerlink" title="热身"></a>热身</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 先打印1， 3， 2s后打印2 */</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">/* 先打印1， 3， 后打印2 */</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>第一个例子的话不难理解，定时器函数就是 1s 后才调用回调函数.</p><p>而第二个例子则可能优点小问题，JavaScript 从上到下执行，那么遇到 0s 的计时器函数，就应该先输出 2 才对啊。这就是因为后面要提到的 JavaScript 执行机制导致的啦，因为 setTimeout 是异步任务。</p><h2 id="JavaScript-是单线程"><a href="#JavaScript-是单线程" class="headerlink" title="JavaScript 是单线程"></a>JavaScript 是单线程</h2><p>JavaScript 的核心特征就是<strong>单线程</strong>，即同一时间只能做一件事。</p><p>为什么它是单线程呢？因为 JavaScript 作为浏览器脚本语言，它的主要用途就是与用户互动、操作 DOM。既然如此，如果它不是单线程的话，假如一个线程在 DOM 节点上添加内容，同时另一个线程删除这个节点。可以看出，如果 JavaScript 不是单线程的话，那么将会导致同步问题。</p><br><h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><p>JavaScript 是单线程语言，这也就导致了如果有一个任务等待很长的时间，这个时候就会导致阻塞，程序就会“卡死”，用户体验非常差。所以 JavaScript 需要异步任务。</p><br><p>那么，为什么 JavsScript 明明是单线程的，为什么能异步呢？这是因为浏览器是多线程的，通过事件循环<code> Event Loop</code>即可实现异步。</p><br><p>所有任务都可以分成两种。</p><ul><li><strong>同步任务</strong>：在主线程上排队执行的任务，只有前一个任务执行完，才能执行后一个任务</li><li><strong>异步任务</strong>：不进入主线程，而是进入任务队列的任务。<b style="color: red">当异步任务的触发条件满足时，异步任务才会进入任务队列，而当主线程空了，就会去任务队列中取异步任务到主线程中执行</b></li></ul><br><p><strong>常见异步任务</strong>：</p><ul><li>JS 事件</li><li>AJAX 请求</li><li>setTimeout 和 setInterval</li><li>Promise(<b style="color: red">Promise 定义部分为同步任务，回调部分为异步任务</b>)</li></ul><br><h2 id="Event-Loop-事件循环机制-1"><a href="#Event-Loop-事件循环机制-1" class="headerlink" title="Event Loop 事件循环机制 1"></a>Event Loop 事件循环机制 1</h2><ol><li>所有同步任务进入主线程，而异步任务则是进入<code> Event Table</code>注册回调函数</li><li>当异步任务的<b style="color: red">触发条件满足</b>时，异步任务注册的回调函数将会从<code> Event Table</code>移入到任务队列<code> Event Queue</code>中</li><li>当主线程中的所有同步任务执行完毕后，系统就会去看看<code> Event Queue</code>中看看有没有回调函数，有的话就推到主线程中</li><li>主线程不断重复上面的步骤</li></ol><p><img src="https://s2.loli.net/2022/03/14/hANCZjRUYIsFrgf.jpg" alt="preview"></p><p>这就是<strong>Event Loop</strong></p><h2 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h2><p>异步任务又可以进行更精细的划分为宏任务和微任务。</p><h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><p>setTimeout、setInterval、requestAnimationFrame</p><ul><li>当宏任务队列中的任务全部都执行完之后，如果微任务队列不为空，则先执行微任务队列中的所有任务</li></ul><h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><p>Promise 回调部分、process.nextTick</p><ul><li>在上一个宏任务队列执行完毕后如果有微任务就会执行微任务队列中的所有元素</li></ul><h2 id="Event-Loop-事件循环机制-2"><a href="#Event-Loop-事件循环机制-2" class="headerlink" title="Event Loop 事件循环机制 2"></a>Event Loop 事件循环机制 2</h2><ol><li>首先执行<code> script</code>下的同步任务</li><li>执行过程中，如果遇到异步任务，则需要把它放到对应的任务队列中(遇到宏任务，则放到宏任务中；遇到微任务，则放到微任务队列中)</li><li>同步任务执行完毕，查看微任务队列<ul><li>如果存在微任务，则将微任务队列全部执行(<b style="color: red">包括执行微任务中产生的新微任务</b>)</li><li>如果不存在微任务，则查看宏任务队列，执行第一个宏任务，宏任务执行完后，又看看微任务队列是否有任务，有的话，又先全部执行完微任务队列，重复上述操作，知道宏任务队列为空。</li></ul></li></ol><p><img src="https://s2.loli.net/2022/03/14/xzo2leVm165AkLd.png" alt="preview"></p><h3 id="练手-1"><a href="#练手-1" class="headerlink" title="练手 1"></a>练手 1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">3</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>  &#125;<br>  resolve();<br>&#125;).then(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>);<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>);<br></code></pre></td></tr></table></figure><p>打印顺序：1, 3, 4, 5, 7, 6, 2</p><br><p>解析：</p><ol><li>首先，程序从上往下走，直接输出 1，遇到<code> setTimeout</code>后，把它放到宏任务队列中<ul><li>此时，宏任务队列中为<code>[setTimeout]</code>(<strong>这里用数组表示任务队列，左边代表先进入的任务队列</strong>)</li></ul></li><li>继续往下跑，遇到<code> Promise</code>，因为<b style="color: red">Promise 定义部分为同步任务</b>，依次输出 3, 4, 5，遇到<code> Promise.then()</code>，把它放到微任务队列中<ul><li>此时，宏任务队列为<code>[setTimeout]</code></li><li>此时，微任务队列为<code>[Promise.then()]</code></li></ul></li><li>输出 7 后，执行微任务队列中全部的任务，输出 6， 再执行宏任务队列中的任务，输出 2</li></ol><h3 id="练手-2"><a href="#练手-2" class="headerlink" title="练手 2"></a>练手 2</h3><p><strong>题目是本人自己想的，分析有误请见谅(希望评论指示)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>  <span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>  &#125;);<br>&#125;, <span class="hljs-number">10</span>);<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br>  resolve(<span class="hljs-number">5</span>);<br>&#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>    <span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>);<br>    &#125;);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>);<br>    &#125;);<br>  &#125;)<br>  .then(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">8</span>);<br>  &#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">9</span>);<br></code></pre></td></tr></table></figure><p>输出顺序：1, 4, 9, 5, 6, 8, 7, 2, 3</p><br><p>解析：</p><ol><li><strong>先输出 1</strong>， 遇到定时器，但是此时并不满足触发条件，所以 2(后面还有其他的内容)只能存放在<code> Event Table</code>中<ul><li>此时，<code> Event Table</code>中有<code> [2(后面还有其他的内容)]</code>。<b style="color: red"><code> Event Table</code>中没有顺序，满足触发条件后，就会进入对应的任务队列</b></li></ul></li><li><strong>输出 4</strong>，5(后面还有内容)进入微任务队列<ul><li>此时，<code> Event Table</code>中有<code> [2(后面还有其他的内容)]</code></li><li>微任务队列为[5(后面还有内容)]</li></ul></li><li>8 进入微任务队列<ul><li>此时，<code> Event Table</code>中有<code> [2(后面还有其他的内容)]</code></li><li>微任务队列为[5(后面还有内容), 8]</li></ul></li><li><strong>输出 9</strong>， 然后执行微任务中的任务<ol><li><strong>输出 5</strong>， 6 进入微任务队列, 7 进入宏任务队列<ul><li>此时，<code> Event Table</code>中有<code> [2(后面还有其他的内容)]</code></li><li>微任务队列为<code>[6, 8]</code>，<b style="color: red">6 会在 8 之前，因为 6 是微任务队列 5 里的微任务</b></li><li>宏任务队列为[7]</li></ul></li><li>依次执行完微任务队列中的任务，然后再执行宏任务队列的任务。<strong>输出顺序为 6，8，7</strong></li></ol></li><li>10ms 后，满足触发条件，进入宏任务队列，此时，宏任务队列和微任务队列中都没有任务，所以直接执行。<strong>输出 2</strong>，3 进入微任务队列，<strong>输出 3</strong></li></ol><br><h2 id="async-await"><a href="#async-await" class="headerlink" title="async, await"></a>async, await</h2><blockquote><p>async/await 本质上还是基于 Promise 的一些封装，而 Promise 是属于微任务的一种。所以在使用 await 关键字与 Promise.then 相同。<br>async 函数在 await 之前的代码都是同步执行的，await 之后的代码则是属于微任务(类似于 Promise)<b style="color: red">await 的表达式还是属于同步任务</b></p></blockquote><p>下面就继续练手</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">await</span> async2();<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>&#125;<br>async1();<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br><br>  <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>);<br>    resolve(<span class="hljs-number">6</span>);<br>  &#125;).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>  &#125;);<br><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>);<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">8</span>);<br></code></pre></td></tr></table></figure><p>输出顺序为：1, 2, 4, 5, 8, 6, 7, 3</p><br><p>分析：</p><ol><li><strong>先输出 1</strong>，调用<code> async1</code>函数，因为<code> await</code>之前包括<code> await</code>的表达式都是同步任务，所以，<strong>输出 2</strong>后，进入到<code> async2</code>函数中</li><li><strong>输出 4</strong>，<code>await</code>一个<code> Promise</code>也是同理，<strong>输出 5</strong>，6 进入微任务队列，因为<b style="color: red">await 之后的代码则是属于微任务(不包括 await 的表达式)</b>，所以 7 进入微任务队列<ul><li>此时，微任务队列为[6, 7]</li></ul></li><li>执行完<code> async2</code>函数后，回到<code> async1</code>函数中，之后的 3 进入微任务队列<ul><li>此时，微任务队列为[6, 7, 3]</li></ul></li><li><strong>输出 8</strong>，执行微任务队列中的任务，<strong>输出 6, 7, 3</strong></li></ol><br><p>参考链接：<br><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html">JavaScript 运行机制详解：再谈 Event Loop</a><br><a href="https://zhuanlan.zhihu.com/p/379475079">彻底搞懂 JavaScript 执行机制</a><br><a href="https://juejin.cn/post/7020328988715270157">JavaScript 之彻底理解 EventLoop</a><br><a href="https://segmentfault.com/a/1190000012806637">10 分钟理解 JS 引擎的执行机制</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;详解-JavaScript-执行机制&quot;&gt;&lt;a href=&quot;#详解-JavaScript-执行机制&quot; class=&quot;headerlink&quot; title=&quot;详解 JavaScript 执行机制&quot;&gt;&lt;/a&gt;详解 JavaScript 执行机制&lt;/h1&gt;&lt;h2 id=&quot;热</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.clzczh.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS实现渐变字</title>
    <link href="https://www.clzczh.top/2022/03/13/gradients-word/"/>
    <id>https://www.clzczh.top/2022/03/13/gradients-word/</id>
    <published>2022-03-13T04:04:06.000Z</published>
    <updated>2022-03-25T17:13:33.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-实现渐变字"><a href="#CSS-实现渐变字" class="headerlink" title="CSS 实现渐变字"></a>CSS 实现渐变字</h1><p><img src="https://s2.loli.net/2022/03/13/AmGSj5UWvXZO6gw.png" alt="image-20220309200715875"></p><p>先来下前置知识。如果想速通，也可指直接到<a href="#jump">渐变字实现</a></p><h2 id="什么是渐变"><a href="#什么是渐变" class="headerlink" title="什么是渐变"></a>什么是渐变</h2><blockquote><p>CSS3 渐变（gradients）可以让你在两个或多个指定的颜色之间显示平稳的过渡。</p><p>以前，你必须使用图像来实现这些效果。但是，通过使用 CSS3 渐变（gradients），你可以减少下载的时间和宽带的使用。此外，渐变效果的元素在放大时看起来效果更好，因为渐变（gradient）是由浏览器生成的。</p></blockquote><h2 id="渐变类型"><a href="#渐变类型" class="headerlink" title="渐变类型"></a>渐变类型</h2><p>渐变主要有三种类型：线性渐变(<code> linear-gradient</code>)、径向渐变(<code> radial-gradient</code>)、圆锥渐变(<code> conic-gradient</code>)</p><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><p>线性渐变创建了一条沿直线前进的颜色带。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(direction, color-start, ..., color-end);<br></code></pre></td></tr></table></figure><ul><li>第一个参数为<strong>渐变方向</strong></li><li>第二个参数为<strong>渐变起点</strong></li><li>第三个参数为<strong>渐变终点</strong></li></ul><br><h4 id="基础线性渐变"><a href="#基础线性渐变" class="headerlink" title="基础线性渐变"></a>基础线性渐变</h4><p>使用<code> linear-gradient</code>函数，至少指定两种颜色即可(也被称为色标)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(red, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(red, blue, purple);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/R8zcYlsv2UZXOED.png" alt="image-20220309000309356"></p><h4 id="改变渐变方向"><a href="#改变渐变方向" class="headerlink" title="改变渐变方向"></a>改变渐变方向</h4><p>线性渐变的方向默认是从上到下，可以通过关键字<code> to</code>改变渐变方向。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, blue, purple);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to bottom right, red, blue, purple);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/xY7GDQJC35ef24R.png" alt="image-20220309000853385"></p><h4 id="设置渐变角度"><a href="#设置渐变角度" class="headerlink" title="设置渐变角度"></a>设置渐变角度</h4><p>上面说了，可以通过关键字<code> to</code>来改变角度，但是可选方向有较大限制。此时可以给渐变设置一个具体的角度。</p><p><img src="https://s2.loli.net/2022/03/13/CSpdiucQHfUPzsO.png" alt="image-20220309154501119"></p><p><strong>此图来自菜鸟教程</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span>,<br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">0deg</span>, red, blue, purple);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">60deg</span>, red, blue, purple);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">180deg</span>, red, blue, purple);<br>&#125;<br><br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(-<span class="hljs-number">60deg</span>, red, blue, purple);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/JQvosu2C3YmVD5z.png" alt="image-20220309001836218"></p><h4 id="颜色终止位置"><a href="#颜色终止位置" class="headerlink" title="颜色终止位置"></a>颜色终止位置</h4><p>可以给颜色设置像素值或百分比等其他数值来调整位置。没有明确设置的话，会自动计算</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">90deg</span>, red <span class="hljs-number">70%</span>, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">90deg</span>, red <span class="hljs-number">30%</span>, blue <span class="hljs-number">70%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">180deg</span>, red <span class="hljs-number">200px</span>, blue);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/ol751QfJuVFE4pR.png" alt="image-20220309083036610"></p><h4 id="创建实线"><a href="#创建实线" class="headerlink" title="创建实线"></a>创建实线</h4><p>根据颜色终止位置的知识点，很容易就能知道可以通过设置相邻的颜色的终止位置设置为相同即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red <span class="hljs-number">50%</span>, blue <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">135deg</span>, red <span class="hljs-number">33%</span>, blue <span class="hljs-number">33%</span>, blue <span class="hljs-number">66%</span>, purple <span class="hljs-number">66%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/vponawje52IUPA6.png" alt="image-20220309084146642"></p><h4 id="设置渐变中心点"><a href="#设置渐变中心点" class="headerlink" title="设置渐变中心点"></a>设置渐变中心点</h4><p>默认情况下，渐变会平滑地从一种颜色过渡到另一种颜色。但是可以设置一个值修改渐变的中心点。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, <span class="hljs-number">50%</span>, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, <span class="hljs-number">80%</span>, blue);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/RfwzUOsLdcDpEnl.png" alt="image-20220309084757700"></p><h4 id="创建色带和条纹"><a href="#创建色带和条纹" class="headerlink" title="创建色带和条纹"></a>创建色带和条纹</h4><p>要创建一个颜色的区域的话，一个颜色需要两个位置，这样子，这个颜色在两个颜色起止点都将会是完全饱和(即会保持该饱和度)。而和相邻的不同颜色还是正常的过渡。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<br>    to right,<br>    red <span class="hljs-number">30%</span>,<br>    blue <span class="hljs-number">35%</span>,<br>    blue <span class="hljs-number">65%</span>,<br>    purple <span class="hljs-number">70%</span><br>  );<br><br>  <span class="hljs-comment">/* 简洁写法 */</span><br>  <span class="hljs-comment">/* background: linear-gradient(to right, red 30%, blue 35% 65%, purple 70%);   */</span><br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red <span class="hljs-number">33%</span>, blue <span class="hljs-number">33%</span> <span class="hljs-number">66%</span>, purple <span class="hljs-number">66%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/EMTkJjYA6B38uc9.png" alt="image-20220309090648171"></p><h4 id="堆叠背景、渐变"><a href="#堆叠背景、渐变" class="headerlink" title="堆叠背景、渐变"></a>堆叠背景、渐变</h4><p>渐变支持透明度，因此可以堆叠多个背景。背景从上到下堆叠，第一个指定在顶部</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">480px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to left, transparent <span class="hljs-number">50%</span>, red),<br>    <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;https://s2.loli.net/2022/03/09/8OjEFf5GQy6iTcm.png&quot;</span>) no-repeat;<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">800px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">480px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;https://s2.loli.net/2022/03/09/8OjEFf5GQy6iTcm.png&quot;</span>)<br>      no-repeat, <span class="hljs-built_in">linear-gradient</span>(to left, transparent <span class="hljs-number">50%</span>, red);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">800px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/B3ObCwQDSXgoKVG.png" alt="image-20220309114848001"></p><br><p>同理：渐变也是可以和其他渐变叠加的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">480px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to left, transparent, red), <span class="hljs-built_in">linear-gradient</span>(to top, transparent, blue);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/m94dTQjl7fZE8au.png" alt="image-20220309122310300"></p><h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><p>径向渐变类似于线性渐变，只是它们从中心点向外辐射。可以指定该中心点在哪里。也可以把它们做成圆形或椭圆形。</p><p>语法：</p><p><code>radial-gradient(center, shape size, start-color, ..., last-color);</code></p><ul><li>第一个参数为<strong>渐变起点</strong></li><li>第二个参数为<strong>渐变形状</strong>和<strong>渐变大小</strong></li><li>第三个参数为<strong>渐变起点色标</strong></li><li>第四个参数为<strong>渐变终点色标</strong></li></ul><br><h4 id="基础径向渐变"><a href="#基础径向渐变" class="headerlink" title="基础径向渐变"></a>基础径向渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red, blue);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red, blue, purple);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/4Lg2QEa5jIsRM9J.png" alt="image-20220309123443478"></p><h4 id="颜色终止位置-1"><a href="#颜色终止位置-1" class="headerlink" title="颜色终止位置"></a>颜色终止位置</h4><p>和线性渐变一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/tyrkoNGT74EevBm.png" alt="image-20220309131245750"></p><h4 id="设置渐变中心"><a href="#设置渐变中心" class="headerlink" title="设置渐变中心"></a>设置渐变中心</h4><p>通过关键字<code>at</code>实现: 第一个参数是横轴，最左是 0%, 最右是 100%. 第二个参数是纵轴.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-comment">/* 关键字at: 第一个参数是横轴，最左是0%, 最右是100%. 第二个参数是纵轴. */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(at <span class="hljs-number">0%</span> <span class="hljs-number">100%</span>, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(<br>    at <span class="hljs-number">100px</span> <span class="hljs-number">200px</span>,<br>    red <span class="hljs-number">10px</span>,<br>    yellow <span class="hljs-number">30%</span>,<br>    <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/dFDMOVX4xnE8tGK.png" alt="image-20220309131916527"></p><h4 id="设置形状"><a href="#设置形状" class="headerlink" title="设置形状"></a>设置形状</h4><p>shape 参数定义了形状。可以是值 circle 或 ellipse。其中，circle 表示圆形，ellipse 表示椭圆形。默认值是 ellipse</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(circle, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(ellipse, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/nV4MxdHZIANbzD7.png" alt="image-20220309154415832"></p><p><b style="color: red">如果盒子是正方形，那么设置形状为椭圆可能不起效</b></p><h4 id="设置渐变大小"><a href="#设置渐变大小" class="headerlink" title="设置渐变大小"></a>设置渐变大小</h4><p>size 参数定义了渐变的大小。它可以是以下四个值：</p><ul><li><code>closest-side</code>，指定径向渐变的半径长度为<strong>从圆心到离圆心最近的边</strong></li><li><code>farthest-side</code>，指定径向渐变的半径长度为<strong>从圆心到离圆心最远的边</strong></li><li><code>closest-corner</code>，指定径向渐变的半径长度为<strong>从圆心到离圆心最近的角</strong></li><li><code>farthest-corner</code>，指定径向渐变的半径长度为<strong>从圆心到离圆心最远的角</strong></li></ul><p>默认值为<code>farthest-corner</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span>,<br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(closest-side, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(farthest-side, red <span class="hljs-number">10px</span>, yellow <span class="hljs-number">30%</span>, <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(<br>    closest-corner,<br>    red <span class="hljs-number">10px</span>,<br>    yellow <span class="hljs-number">30%</span>,<br>    <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span><br>  );<br>&#125;<br><br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(<br>    farthest-corner,<br>    red <span class="hljs-number">10px</span>,<br>    yellow <span class="hljs-number">30%</span>,<br>    <span class="hljs-number">#1e90ff</span> <span class="hljs-number">50%</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/UGvjcOD1HkRQySW.png" alt="image-20220309171611188"></p><h4 id="堆叠径向渐变"><a href="#堆叠径向渐变" class="headerlink" title="堆叠径向渐变"></a>堆叠径向渐变</h4><p>和线性渐变一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(<br>      at <span class="hljs-number">50%</span> <span class="hljs-number">0</span>,<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>),<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    ), <span class="hljs-built_in">radial-gradient</span>(at <span class="hljs-number">25%</span> <span class="hljs-number">75%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.5</span>), <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>)),<br>    <span class="hljs-built_in">radial-gradient</span>(at <span class="hljs-number">75%</span> <span class="hljs-number">75%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>), <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/Ol4kNXsi9pQMyYh.png" alt="image-20220309174059818"></p><h3 id="重复渐变"><a href="#重复渐变" class="headerlink" title="重复渐变"></a>重复渐变</h3><blockquote><p><code>linear-gradient</code>和<code>radial-gradient</code>属性不支持自动重复色标。但是，<code>repeating-linear-gradient</code> 和<code>repeating-radial-gradient</code>属性可用于提供此功能。</p></blockquote><h4 id="重复线性渐变"><a href="#重复线性渐变" class="headerlink" title="重复线性渐变"></a>重复线性渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">repeating-linear-gradient</span>(<span class="hljs-number">45deg</span>, red <span class="hljs-number">0</span> <span class="hljs-number">20px</span>, blue <span class="hljs-number">20px</span> <span class="hljs-number">40px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/E98RIZTLbDrVWgu.png" alt="image-20220309175418709"></p><p>看多难受，勿贪看。</p><h4 id="重复径向渐变"><a href="#重复径向渐变" class="headerlink" title="重复径向渐变"></a>重复径向渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">repeating-radial-gradient</span>(red <span class="hljs-number">0</span> <span class="hljs-number">20px</span>, blue <span class="hljs-number">20px</span> <span class="hljs-number">40px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/6womYBMjpVqb591.png" alt="image-20220309175910740"></p><h2 id="background-clip-属性"><a href="#background-clip-属性" class="headerlink" title="background-clip 属性"></a>background-clip 属性</h2><p><code>background-clip</code> 设置元素的背景（背景图片或颜色）是否延伸到边框、内边距盒子、内容盒子下面。</p><ul><li><p>border-box：背景延伸至边框外沿（但是在边框下层）。</p></li><li><p>padding-box：背景延伸至内边距（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding"><code>padding</code></a>）外沿。不会绘制到边框处。</p></li><li><p>content-box：背景被裁剪至内容区（content box）外沿。</p></li><li><p>text：背景被裁剪成文字的前景色。（即文字的背景即为区块的背景，文字之外的区域都将被裁剪掉）</p></li></ul><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">40px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span>,<br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span>,<br><span class="hljs-selector-class">.box4</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">20px</span> dashed blue;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">background-clip</span>: padding-box;<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">background-clip</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">background-clip</span>: content-box;<br>&#125;<br><br><span class="hljs-selector-class">.box4</span> &#123;<br>  -webkit-<span class="hljs-attribute">background-clip</span>: text;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/oqR4vUajV9PhWdz.png" alt="image-20220309193146881"></p><p><b style="color: red">一眼望去，最后一个最特殊</b>，所以要加上前缀<code> -webkit</code>，好吧，原因并不是这样。网上有种说法是 background-clip: text; 只兼容 chrome,要想兼容其他浏览器就要用: <code>-webkit-background-clip: text;</code>。然而，我的 chrome 浏览器都需要<code>-webkit-background-clip: text;</code>才能实现。<b style="color: red">另外，文字的颜色应该设置为透明，否则会覆盖掉背景色。</b></p><h2 id="渐变字实现"><a href="#渐变字实现" class="headerlink" title="渐变字实现"></a><span id="jump">渐变字实现</span></h2><p>看到这里，基本就能实现渐变字啦。</p><p>代码如下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>渐变字实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(</span><br><span class="css">          to right,</span><br><span class="css">          <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">0%</span>,</span><br><span class="css">          <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.8</span>) <span class="hljs-number">50%</span>,</span><br><span class="css">          <span class="hljs-built_in">rgb</span>(<span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">128</span>) <span class="hljs-number">80%</span></span><br><span class="css">        );</span><br><span class="css">        -webkit-<span class="hljs-attribute">background-clip</span>: text;</span><br><span class="css">        <span class="hljs-attribute">color</span>: transparent;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>赤蓝紫<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/BL9Zesh6qIzRw2g.png" alt="image-20220309200709951"></p><br /><p>参考链接：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Images/Using_CSS_gradients">使用 CSS 渐变 - CSS（层叠样式表） | MDN (mozilla.org)</a></p><p><a href="https://www.runoob.com/css3/css3-gradients.html">CSS3 渐变 | 菜鸟教程 </a></p><p><a href="https://blog.csdn.net/weixin_45337959/article/details/123004306">CSS3 新特性概述_阿锐丫的博客-CSDN 博客_css3 新增特性</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS-实现渐变字&quot;&gt;&lt;a href=&quot;#CSS-实现渐变字&quot; class=&quot;headerlink&quot; title=&quot;CSS 实现渐变字&quot;&gt;&lt;/a&gt;CSS 实现渐变字&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/03/13/A</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://www.clzczh.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue Router深入学习(一)</title>
    <link href="https://www.clzczh.top/2022/03/12/vue-router-deep-1/"/>
    <id>https://www.clzczh.top/2022/03/12/vue-router-deep-1/</id>
    <published>2022-03-12T03:34:18.000Z</published>
    <updated>2022-03-25T17:16:24.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-Router-深入学习-一"><a href="#Vue-Router-深入学习-一" class="headerlink" title="Vue Router 深入学习(一)"></a>Vue Router 深入学习(一)</h1><p>之前的笔记：<a href="https://clz.vercel.app/2021/10/15/vue-3/#toc-heading-9">Vue 路由</a></p><p>通过阅读文档，自己写一些 demo 来加深自己的理解。(主要针对 Vue3)</p><h2 id="1-动态路由匹配"><a href="#1-动态路由匹配" class="headerlink" title="1. 动态路由匹配"></a>1. 动态路由匹配</h2><h3 id="1-1-捕获所有路由-404-路由"><a href="#1-1-捕获所有路由-404-路由" class="headerlink" title="1.1 捕获所有路由(404 路由)"></a>1.1 捕获所有路由(404 路由)</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">// 将匹配所有内容并将其放在 `$route.params.pathMatch` 下</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:pathMatch(.*)*&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;NotFound&quot;</span>, <span class="hljs-attr">component</span>: NotFound &#125;,<br>  <span class="hljs-comment">// 将匹配以 `/user-` 开头的所有内容，并将其放在 `$route.params.afterUser` 下</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user-:afterUser(.*)&quot;</span>, <span class="hljs-attr">component</span>: UserGeneric &#125;,<br>];<br></code></pre></td></tr></table></figure></blockquote><p><strong>使用</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user-:afterUser(.*)&quot;</span>,<br>    <span class="hljs-comment">// 将匹配以 `/user-` 开头的所有内容，并将其放在 `$route.params.afterUser` 下</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:pathMatch(.*)*&quot;</span>,<br>    <span class="hljs-comment">// 将匹配所有内容并将其放在 `$route.params.pathMatch` 下</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;NotFound&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/NotFound.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>app.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  &#123;&#123; route.params &#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/NpOPi2VMot3wJfh.png" alt="image-20220302183444782"></p><h2 id="2-路由的匹配语法"><a href="#2-路由的匹配语法" class="headerlink" title="2 路由的匹配语法"></a>2 路由的匹配语法</h2><p>主要是通过正则表达式的语法来实现</p><h3 id="2-1-在参数中自定义正则"><a href="#2-1-在参数中自定义正则" class="headerlink" title="2.1 在参数中自定义正则"></a>2.1 在参数中自定义正则</h3><p>语法：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">// /:orderId -&gt; 仅匹配数字</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:orderId(\\d+)&quot;</span> &#125;,<br>  <span class="hljs-comment">// /:productName -&gt; 匹配其他任何内容</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:productName&quot;</span> &#125;,<br>];<br></code></pre></td></tr></table></figure></blockquote><p>实践：</p><p>路由配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:userid(\\d+)&quot;</span>, <span class="hljs-comment">// 两个\是因为会被转义</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;UserId&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/UserId.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:username&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;UserName&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/UserName.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/kU9syn7R3pvidCm.gif" alt="vue-router"></p><h3 id="2-2-可重复的参数"><a href="#2-2-可重复的参数" class="headerlink" title="2.2 可重复的参数"></a>2.2 可重复的参数</h3><p>可以使用<code> *</code>(0 个或多个)和<code> +</code>(1 个或多个)将参数标记为可重复</p><p>语法：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">// /:chapters -&gt;  匹配 /one, /one/two, /one/two/three, 等</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:chapters+&quot;</span> &#125;,<br>  <span class="hljs-comment">// /:chapters -&gt; 匹配 /, /one, /one/two, /one/two/three, 等</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:chapters*&quot;</span> &#125;,<br>];<br></code></pre></td></tr></table></figure></blockquote><p>实践：</p><p><b style="color: red">*</b>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:chapters*&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Chapters&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Chapters.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/EBaOnpYLSKrdQjz.gif" alt="vue-router"></p><p><b style="color: red">+</b>：</p><p><img src="https://s2.loli.net/2022/03/12/Yhb82rAMQsOk1vF.gif" alt="vue-router"></p><h3 id="2-3-可选参数"><a href="#2-3-可选参数" class="headerlink" title="2.3 可选参数"></a>2.3 可选参数</h3><p>使用 <code>?</code> 修饰符(0 个或 1 个)将一个参数标记为可选</p><p>语法：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">// 匹配 /users 和 /users/posva</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/users/:userId?&quot;</span> &#125;,<br>  <span class="hljs-comment">// 匹配 /users 和 /users/42</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/users/:userId(\\d+)?&quot;</span> &#125;,<br>];<br></code></pre></td></tr></table></figure></blockquote><p>实践：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:userid(\\d+)?&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:pathMatch(.*)*&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;NotFound&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/NotFound.vue&quot;</span>),<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/TVynubejJ6OfsFa.png" alt="image-20220303103934235"></p><p>如果没加可选限制，那么访问/user 时也会匹配到 404 去</p><p><img src="https://s2.loli.net/2022/03/12/cIr1pqQnsf4CeRE.png" alt="image-20220303104039713"></p><h2 id="3-编程式导航"><a href="#3-编程式导航" class="headerlink" title="3. 编程式导航"></a>3. 编程式导航</h2><p><strong><code>params</code> 不能与 <code>path</code> 一起使用，而应该使用<code>name</code>(命名路由)</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript">      <span class="hljs-keyword">const</span> router = useRouter();</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// // query编程式导航传参</span></span><br><span class="javascript">      <span class="hljs-comment">// router.push(&#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//   path: &quot;/user/123&quot;,</span></span><br><span class="javascript">      <span class="hljs-comment">//   query: &#123;</span></span><br><span class="javascript">      <span class="hljs-comment">//     id: 666</span></span><br><span class="javascript">      <span class="hljs-comment">//   &#125;</span></span><br><span class="javascript">      <span class="hljs-comment">// &#125;)</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// params编程式导航传参</span></span><br><span class="javascript">      router.push(&#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-comment">// 需要使用命名路由</span></span><br><span class="javascript">        <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">userid</span>: <span class="hljs-number">666</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-1-替换当前位置"><a href="#3-1-替换当前位置" class="headerlink" title="3.1 替换当前位置"></a>3.1 替换当前位置</h3><p>不会向<code> history</code>添加新纪录，而是替换当前的记录</p><p><strong>声明式</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">replace</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>编程式</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">router.replace(&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>&#125;);<br><br><span class="hljs-comment">// 或</span><br><span class="hljs-comment">// router.push(&#123;</span><br><span class="hljs-comment">//   path: &#x27;/home&#x27;,</span><br><span class="hljs-comment">//   replace: true</span><br><span class="hljs-comment">// &#125;)</span><br></code></pre></td></tr></table></figure><h2 id="4-命名视图"><a href="#4-命名视图" class="headerlink" title="4. 命名视图"></a>4. 命名视图</h2><p>需要同时同级展示多个视图，而不是嵌套展示时，命名视图就能够派上用场了</p><p>首先路由配置需要使用<code> components</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;home&quot;</span>,<br>    <span class="hljs-attr">components</span>: &#123;<br>      <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./views/First.vue&quot;</span>),<br>      <span class="hljs-attr">second</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./views/Second.vue&quot;</span>),<br>      <span class="hljs-attr">third</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./views/Third.vue&quot;</span>),<br>    &#125;,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><p>使用<code> router-view</code>时，添加上<code>name</code>属性即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;second&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;third&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例：</p><p><a href="https://codesandbox.io/s/ming-ming-shi-tu-8275iy">命名视图</a></p><h2 id="5-路由组件传参"><a href="#5-路由组件传参" class="headerlink" title="5. 路由组件传参"></a>5. 路由组件传参</h2><p>首先可通过<code> route</code>来实现路由传参，不过也可以通过<code> props</code>配置来开启<code> props传参</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    <span class="hljs-attr">props</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  routes,<br>&#125;);<br></code></pre></td></tr></table></figure><p>通过<code> props</code>获取参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> props = defineProps([<span class="hljs-string">&quot;id&quot;</span>]);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/q7KwpDYVS4EzRkN.png" alt="image-20220303194719540"></p><p><a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html">更多</a></p><p>参考链接：<a href="https://router.vuejs.org/zh/">Vue Router</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-Router-深入学习-一&quot;&gt;&lt;a href=&quot;#Vue-Router-深入学习-一&quot; class=&quot;headerlink&quot; title=&quot;Vue Router 深入学习(一)&quot;&gt;&lt;/a&gt;Vue Router 深入学习(一)&lt;/h1&gt;&lt;p&gt;之前的笔记：&lt;a</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://www.clzczh.top/tags/Vue/"/>
    
    <category term="Vue Router" scheme="https://www.clzczh.top/tags/Vue-Router/"/>
    
  </entry>
  
  <entry>
    <title>axios笔记(二)    深入了解axios</title>
    <link href="https://www.clzczh.top/2022/03/10/axios-2/"/>
    <id>https://www.clzczh.top/2022/03/10/axios-2/</id>
    <published>2022-03-10T15:20:20.000Z</published>
    <updated>2022-03-25T17:13:43.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios-笔记-二-深入了解-axios"><a href="#axios-笔记-二-深入了解-axios" class="headerlink" title="axios 笔记(二) 深入了解 axios"></a>axios 笔记(二) 深入了解 axios</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><ul><li>前端最流行的 ajax 请求库</li><li>react / vue 官方推荐使用 axios 发送 ajax 请求</li><li><a href="https://github.com/axios/axios">axios 仓库</a></li></ul><h2 id="2-axios-特点"><a href="#2-axios-特点" class="headerlink" title="2. axios 特点"></a>2. axios 特点</h2><ul><li>基于 promise 的异步 ajax 请求库</li><li>浏览器端 / node 端都可以使用</li><li>支持请求 / 响应拦截器</li><li>支持请求取消</li><li>请求 / 响应数据转换</li><li>批量发送多个请求</li></ul><h2 id="3-axios-常用语法"><a href="#3-axios-常用语法" class="headerlink" title="3. axios 常用语法"></a>3. axios 常用语法</h2><ul><li><p>axios(config)：最本质的能发任何类型请求的方式</p></li><li><p>axios.get(url, config)：发 get 请求</p></li><li><p>axios.put(url, config)：发 put 请求</p></li><li><p>axios.defaults.xxx：请求的默认全局配置，如 baseURL</p></li><li><p>axios.interceptors.request.use()：添加请求拦截器</p></li><li><p>axios.interceptors.response.use()：添加响应拦截器</p></li><li><p>axios.create(config)：新建一个 axios 实例(没有以下的功能)</p></li><li><p>axios.Cancel()：用于创建取消请求的错误对象</p></li><li><p>axios.CancelToken()：用于创建取消请求的 token 对象</p></li><li><p>axios.isCancel()：判断是否是一个取消请求的错误</p></li><li><p>axios.all(promises)：用于批量执行多个异步错误</p></li></ul><h3 id="3-1-axios-简单使用"><a href="#3-1-axios-简单使用" class="headerlink" title="3.1 axios 简单使用"></a>3.1 axios 简单使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testGet()&quot;</span>&gt;</span>GET请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testPost()&quot;</span>&gt;</span>POST请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      axios.defaults.baseURL = <span class="hljs-string">&quot;http://localhost:3000&quot;</span>; <span class="hljs-comment">// 设置请求的基址,后面就不需要写完整的路径了</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// GET请求: 服务端获取数据</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> testGet = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios(&#123;</span><br><span class="javascript">          <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">        &#125;).then(</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(response);</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">            alert(error.message);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        );</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// POST请求: 服务端增加数据</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> testPost = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios(&#123;</span><br><span class="javascript">          <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;axios&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;clz&quot;</span>,</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">        &#125;).then(</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(response);</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">            alert(error.message);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        );</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-axios-create-config"><a href="#3-2-axios-create-config" class="headerlink" title="3.2 axios.create(config)"></a>3.2 axios.create(config)</h3><p>简单使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> instance1 = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;http://localhost:3000&quot;</span>,<br>&#125;);<br><br><span class="hljs-comment">// 使用instance发送请求</span><br>instance1(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>可以发现用法和 axios()很像，和下面一样效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.defaults.baseURL = <span class="hljs-string">&quot;http://localhost:3000&quot;</span>;<br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>那么，axios.create(config)肯定得有它的过人之处，否则，早就会被淘汰掉了。</p><p>先来一个情景：我们要向端口 3000 发送 get 请求，要向端口 4000 发送 post 请求</p><p><strong>通过 axios.create(config)实现</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> instance1 = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;http://localhost:3000&quot;</span>,<br>&#125;);<br><br><span class="hljs-comment">// 使用instance发送请求</span><br>instance1(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>&#125;);<br><br><span class="hljs-keyword">const</span> instance2 = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;http://localhost:4000&quot;</span>,<br>&#125;);<br><br><span class="hljs-comment">// 使用instance发送请求</span><br>instance2(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>直接通过 axios()实现</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.defaults.baseURL = <span class="hljs-string">&quot;http://localhost:3000&quot;</span>;<br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>&#125;);<br><br>axios.defaults.baseURL = <span class="hljs-string">&quot;http://localhost:4000&quot;</span>;<br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>可能有人会提出疑问：不是一样都能实现吗？但是，如果我需要最后在向端口 3000 再发送一次 GET 请求的话。</p><p>让我们再看一下代码：</p><p><strong>通过 axios.create(config)实现</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> instance1 = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;http://localhost:3000&quot;</span>,<br>&#125;);<br><br>instance1(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>&#125;);<br><br><span class="hljs-keyword">const</span> instance2 = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;http://localhost:4000&quot;</span>,<br>&#125;);<br><br>instance2(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>&#125;);<br><br>instance1(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>直接通过 axios()实现</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.defaults.baseURL = <span class="hljs-string">&quot;http://localhost:3000&quot;</span>;<br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>&#125;);<br><br>axios.defaults.baseURL = <span class="hljs-string">&quot;http://localhost:4000&quot;</span>;<br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>&#125;);<br><br>axios.defaults.baseURL = <span class="hljs-string">&quot;http://localhost:3000&quot;</span>;<br>axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/posts&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>比较上面的两种情况，就能发现**axios.create(config)<strong>的好处了。因为是新建 axios 实例，所以 3000 和 4000 两个端口分别使用的是不同的 axios 实例。所以能够很好地各司其责。而 axios()则不能，仅仅只是简单地修改 baseURL，都需要每次发送请求前重新修改，还是未考虑异步的情况。这么一看，在这种情况下，</strong>axios.create()**新建 axios 实例还是很香的。</p><h3 id="3-3-拦截器及运行流程"><a href="#3-3-拦截器及运行流程" class="headerlink" title="3.3 拦截器及运行流程"></a>3.3 拦截器及运行流程</h3><h4 id="3-3-1-添加请求拦截器"><a href="#3-3-1-添加请求拦截器" class="headerlink" title="3.3.1 添加请求拦截器"></a>3.3.1 添加请求拦截器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.interceptors.request.use(<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) </span>&#123;<br>    <span class="hljs-comment">// Do something before request is sent</span><br>    <span class="hljs-keyword">return</span> config; <span class="hljs-comment">// 用于把任务串联起来</span><br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>    <span class="hljs-comment">// Do something with request error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error); <span class="hljs-comment">// 一定要返回错误，不让之后能进入成功的流程</span><br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h4 id="3-3-2-添加响应拦截器"><a href="#3-3-2-添加响应拦截器" class="headerlink" title="3.3.2 添加响应拦截器"></a>3.3.2 添加响应拦截器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.interceptors.response.use(<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>    <span class="hljs-comment">// Any status code that lie within the range of 2xx cause this function to trigger</span><br>    <span class="hljs-comment">// Do something with response data</span><br>    <span class="hljs-keyword">return</span> response;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>    <span class="hljs-comment">// Any status codes that falls outside the range of 2xx cause this function to trigger</span><br>    <span class="hljs-comment">// Do something with response error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h4 id="3-3-3-拦截器简单使用"><a href="#3-3-3-拦截器简单使用" class="headerlink" title="3.3.3 拦截器简单使用"></a>3.3.3 拦截器简单使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>拦截器简单使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 添加请求拦截器(回调函数，成功的必须返回config：用于把任务串联起来)</span></span><br><span class="javascript">      axios.interceptors.request.use(</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;request interceptor1 onResolved()&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> config;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;request interceptor1 onRejected()&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error); <span class="hljs-comment">// 一定要返回错误，不让之后能进入成功的流程</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">      );</span><br><span class="javascript">      axios.interceptors.request.use(</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;request interceptor2 onResolved()&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> config;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;request interceptor2 onRejected()&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      );</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 添加响应拦截器(回调函数，成功的必须返回response：用于把任务串联起来)</span></span><br><span class="javascript">      axios.interceptors.response.use(</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;response interceptor1 onResolved()&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> response;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;response interceptor1 onRejected()&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      );</span><br><span class="javascript">      axios.interceptors.response.use(</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;response interceptor2 onResolved()&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> response;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;response interceptor2 onRejected()&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      );</span><br><span class="javascript"></span><br><span class="javascript">      axios</span><br><span class="javascript">        .get(<span class="hljs-string">&quot;http://localhost:3000/posts&quot;</span>)</span><br><span class="javascript">        .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;data: &quot;</span>, response.data);</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        .catch(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;error: &quot;</span>, error.message);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/10/pRVPvKnuZqzJ3Uf.png" alt="image-20220301001039494"></p><p>先发送请求，再接收响应。所以会先触发请求拦截器，再触发响应拦截器，经过响应拦截器后才能得到数据</p><h4 id="3-3-4-取消请求"><a href="#3-3-4-取消请求" class="headerlink" title="3.3.4 取消请求"></a>3.3.4 取消请求</h4><p>express 知识：<a href="https://clz.vercel.app/tags/Express/">Express 笔记: clz</a></p><p>先搭建一个服务器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cors&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.use(cors()); <span class="hljs-comment">// 使用cors，允许跨域</span><br><br>app.use(express.json()); <span class="hljs-comment">// 解析Content-Type为 application/json格式的请求体</span><br><br>app.get(<span class="hljs-string">&quot;/product1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    res.send([<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;product1&quot;</span>,<br>      &#125;,<br>    ]);<br>  &#125;, <span class="hljs-number">2000</span>);<br>&#125;);<br><br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;http://localhost:3000&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>开启服务器，<code> node server.js</code>或<code> nodemon server.js</code>（支持热更新）</p><p><strong>取消请求的简单使用</strong>：</p><ol><li><p>先定义一个变量<code> cancel</code>，用于保存取消请求的函数</p></li><li><p>设置请求路径、请求方法时，还要设置属性<code> cancelToken</code>，值为一个<code> CancelToken对象</code>，CancelToken 类的构造函数的参数是用于请求的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">cancelToken: <span class="hljs-keyword">new</span> axios.CancelToken(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// c是用于取消当前请求的函数</span><br>  cancel = c; <span class="hljs-comment">// 保存取消请求函数，用于之后取消请求</span><br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>在需要请求的地方，调用保存的取消请求的函数</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>取消请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getProducts1()&quot;</span>&gt;</span>获取商品列表1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;cancelReq()&quot;</span>&gt;</span>取消请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/axios/dist/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> cancel; <span class="hljs-comment">// 用于保存取消请求的函数</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> getProducts1 = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios(&#123;</span><br><span class="javascript">          <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/products1&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">cancelToken</span>: <span class="hljs-keyword">new</span> axios.CancelToken(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-comment">// c是用于取消当前请求的函数</span></span><br><span class="javascript">            cancel = c; <span class="hljs-comment">// 保存取消请求函数，用于之后取消请求</span></span><br><span class="javascript">          &#125;),</span><br><span class="javascript">        &#125;).then(</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">            cancel = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 请求结束后保存的取消请求的函数不在需要保存</span></span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求1成功: &quot;</span>, response.data);</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">            cancel = <span class="hljs-literal">null</span>;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求1失败: &quot;</span>, error.message, error);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        );</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> cancelReq = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cancel === <span class="hljs-string">&quot;function&quot;</span>) &#123;</span><br><span class="javascript">          cancel(<span class="hljs-string">&quot;强制取消请求1&quot;</span>);</span><br><span class="javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;没有可以取消的请求&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/10/mdoGr4ALWMKQDlc.gif" alt="axios"></p><p>另外，取消请求的函数可以传参，传的参数将变成请求失败时，Cancel 对象的 message(这个时候并不是 Error 对象)<br></p><p><strong>取消请求优化</strong>：发送请求前取消掉未完成的请求</p><p>在点击事件最前面添加判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cancel === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>  cancel(<span class="hljs-string">&quot;取消请求&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里会出现一个问题，如果连续发送三个请求(在收到响应之前)，会发现，第三个请求没有取消掉前一个未完成的请求</p><p><img src="https://s2.loli.net/2022/03/10/356pd2mBaUYRKuw.gif" alt="axios"></p><p>为什么会这样呢？看下下面的流程图就可能可以迎刃而解了(有错可评论指出)</p><p><img src="https://s2.loli.net/2022/03/10/m8NGi7p5w6FyrjR.png" alt="image-20220301185301548"></p><p>为了解决上面的问题，这时候就需要使用<code> axios.isCancel(error)</code>判断是不是取消请求导致的请求失败，如果是，则此时不需要把<code> cancel</code>变为<code>null</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>  &lt;meta charset=&quot;UTF-8&quot;&gt;<br>  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>  &lt;title&gt;取消请求&lt;/title&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>  &lt;button onclick=&quot;getProducts1()&quot;&gt;获取商品列表1&lt;/button&gt;&lt;br&gt;<br><br>  &lt;button onclick=&quot;cancelReq()&quot;&gt;取消请求&lt;/button&gt;<br><br>  &lt;script src=&quot;./node_modules/axios/dist/axios.js&quot;&gt;&lt;/script&gt;<br>  &lt;script&gt;<br>    let cancel // 用于保存取消请求的函数<br><br>    const getProducts1 = () =&gt; &#123;<br>      if (typeof cancel === &#x27;function&#x27;) &#123;<br>        cancel(&#x27;取消请求&#x27;)<br>      &#125;<br><br>      axios(&#123;<br>        url: &#x27;http://localhost:3000/products1&#x27;,<br>        cancelToken: new axios.CancelToken((c) =&gt; &#123; // c是用于取消当前请求的函数<br>          cancel = c // 保存取消请求函数，用于之后取消请求<br>        &#125;)<br>      &#125;).then(response =&gt; &#123;<br>        cancel = null // 请求结束后保存的取消请求的函数不在需要保存<br>        console.log(&#x27;请求1成功: &#x27;, response.data)<br>      &#125;, error =&gt; &#123;<br>        if (axios.isCancel(error)) &#123;<br>          console.log(&#x27;请求1失败: &#x27;, error.message)<br>        &#125; else &#123;<br>          cancel = null<br>          console.log(&#x27;请求1失败: &#x27;, error.message)<br>        &#125;<br><br>      &#125;)<br>    &#125;<br><br>    const cancelReq = () =&gt; &#123;<br>      if (typeof cancel === &#x27;function&#x27;) &#123;<br>        cancel(&#x27;强制取消请求1&#x27;)<br>      &#125; else &#123;<br>        console.log(&#x27;没有可以取消的请求&#x27;)<br>      &#125;<br>    &#125;<br>  &lt;/script&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/10/kwRCNruZ1cSe8hs.png" alt="image-20220301185709307"></p><p><img src="https://s2.loli.net/2022/03/10/tqs5JXMgWpIhHwl.gif" alt="axios"></p><p><strong>通过拦截器再优化</strong>：增加代码可复用性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 请求拦截器</span><br>axios.interceptors.request.use(<span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cancel === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>    cancel(<span class="hljs-string">&quot;取消请求&quot;</span>);<br>  &#125;<br>  config.cancelToken = <span class="hljs-keyword">new</span> axios.CancelToken(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// c是用于取消当前请求的函数</span><br>    cancel = c; <span class="hljs-comment">// 保存取消请求函数，用于之后取消请求</span><br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> config;<br>&#125;);<br><br><span class="hljs-comment">// 响应拦截器</span><br>axios.interceptors.response.use(<br>  <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>    cancel = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> response;<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (axios.isCancel(error)) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求取消: &quot;</span>, error.message);<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;); <span class="hljs-comment">// 中断Promise链。因为返回一个pending状态的对象时，后续的回调就不能执行了。</span><br>      <span class="hljs-comment">// 因为后面的回调函数只有在状态发生变化时才能执行。</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      cancel = <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error); <span class="hljs-comment">// 将错误向下传递</span><br>    &#125;<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>取消请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getProducts1()&quot;</span>&gt;</span>获取商品列表1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getProducts2()&quot;</span>&gt;</span>获取商品列表2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;cancelReq()&quot;</span>&gt;</span>取消请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/axios/dist/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 请求拦截器</span></span><br><span class="javascript">      axios.interceptors.request.use(<span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cancel === <span class="hljs-string">&quot;function&quot;</span>) &#123;</span><br><span class="javascript">          cancel(<span class="hljs-string">&quot;取消请求&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        config.cancelToken = <span class="hljs-keyword">new</span> axios.CancelToken(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">// c是用于取消当前请求的函数</span></span><br><span class="javascript">          cancel = c; <span class="hljs-comment">// 保存取消请求函数，用于之后取消请求</span></span><br><span class="javascript">        &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">return</span> config;</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 响应拦截器</span></span><br><span class="javascript">      axios.interceptors.response.use(</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">          cancel = <span class="hljs-literal">null</span>;</span><br><span class="javascript">          <span class="hljs-keyword">return</span> response;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (axios.isCancel(error)) &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求取消: &quot;</span>, error.message);</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;); <span class="hljs-comment">// 中断Promise链。因为返回一个pending状态的对象时，后续的回调就不能执行了。</span></span><br><span class="javascript">            <span class="hljs-comment">// 因为后面的回调函数只有在状态发生变化时才能执行。</span></span><br><span class="javascript">          &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">            cancel = <span class="hljs-literal">null</span>;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error); <span class="hljs-comment">// 将错误向下传递</span></span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      );</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> cancel; <span class="hljs-comment">// 用于保存取消请求的函数</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> getProducts1 = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios(&#123;</span><br><span class="javascript">          <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/products1&quot;</span>,</span><br><span class="javascript">        &#125;).then(</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求1成功: &quot;</span>, response.data);</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求1失败: &quot;</span>, error.message);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        );</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> getProducts2 = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios(&#123;</span><br><span class="javascript">          <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/products1&quot;</span>,</span><br><span class="javascript">        &#125;).then(</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求2成功: &quot;</span>, response.data);</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">          <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求2失败: &quot;</span>, error.message);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        );</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> cancelReq = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cancel === <span class="hljs-string">&quot;function&quot;</span>) &#123;</span><br><span class="javascript">          cancel(<span class="hljs-string">&quot;强制取消请求1&quot;</span>);</span><br><span class="javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;没有可以取消的请求&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;axios-笔记-二-深入了解-axios&quot;&gt;&lt;a href=&quot;#axios-笔记-二-深入了解-axios&quot; class=&quot;headerlink&quot; title=&quot;axios 笔记(二) 深入了解 axios&quot;&gt;&lt;/a&gt;axios 笔记(二) 深入了解 axios</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="axios" scheme="https://www.clzczh.top/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>axios笔记(一)    简单入门</title>
    <link href="https://www.clzczh.top/2022/03/10/axios-1/"/>
    <id>https://www.clzczh.top/2022/03/10/axios-1/</id>
    <published>2022-03-10T01:37:44.000Z</published>
    <updated>2022-03-25T17:13:40.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios-笔记-一-简单入门"><a href="#axios-笔记-一-简单入门" class="headerlink" title="axios 笔记(一) 简单入门"></a>axios 笔记(一) 简单入门</h1><p>又是前端必备知识的笔记。</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>之前的笔记：<a href="https://clz.vercel.app/2022/02/09/yc-http/">HTTP 笔记 | 赤蓝紫 (clz.vercel.app)</a></p><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><blockquote><p>HTTP 是一种能够获取如 HTML 这样的网络资源的<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Protocol">protocol</a>(通讯协议)。它是在 Web 上进行数据交换的基础，是一种 client-server 协议，也就是说，请求通常是由像浏览器这样的接受方发起的。一个完整的 Web 文档通常是由不同的子文档拼接而成的，像是文本、布局描述、图片、视频、脚本等等。</p></blockquote><p>文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview">HTTP</a></p><h3 id="2-HTTP-请求交互的基本过程"><a href="#2-HTTP-请求交互的基本过程" class="headerlink" title="2. HTTP 请求交互的基本过程"></a>2. HTTP 请求交互的基本过程</h3><p><img src="https://s2.loli.net/2022/03/10/xBUuGF69vNS78mI.png" alt="image-20220228094936947"></p><ol><li>浏览器向服务器发送请求报文</li><li>后台服务器接收到请求后，调度服务器应用处理请求，向浏览器返回 HTTP 响应(响应报文)</li><li>浏览器接收到响应，解析显示响应体 / 调用监视回调</li></ol><p>查看 HTTP 请求响应信息：DevTools Network 面板</p><p><img src="https://s2.loli.net/2022/03/10/AZN5J6KEwiovrYu.png" alt="image-20220228095526783"></p><h3 id="3-API-分类"><a href="#3-API-分类" class="headerlink" title="3. API 分类"></a>3. API 分类</h3><h4 id="3-1-REST-API-restful"><a href="#3-1-REST-API-restful" class="headerlink" title="3.1 REST API(restful)"></a>3.1 REST API(restful)</h4><p><a href="https://clz.vercel.app/2022/02/28/RESTful/">RESTful 接口设计规范</a></p><ul><li>发送请求进行 CRUD 哪个操作由请求方式来决定</li><li>同一个请求路径可以进行多个操作</li><li>请求方式会用到 GET / POST / PUT / DELETE 等</li></ul><h4 id="3-2-非-REST-API-restless"><a href="#3-2-非-REST-API-restless" class="headerlink" title="3.2 非 REST API(restless)"></a>3.2 非 REST API(restless)</h4><ul><li>请求方式不决定请求的 CRUD 操作(甚至可以用 GET 请求进行删除操作)</li><li>一个请求路径只对应一个操作</li><li>请求方式一般只有 GET / POST</li></ul><h3 id="4-json-server-搭建-REST-接口"><a href="#4-json-server-搭建-REST-接口" class="headerlink" title="4. json-server 搭建 REST 接口"></a>4. json-server 搭建 REST 接口</h3><p><a href="https://github.com/typicode/json-server">json-server 仓库</a></p><ol><li><p>全局安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g json-server<br></code></pre></td></tr></table></figure></li><li><p>新建<code> db.json</code>文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;posts&quot;</span>: [&#123; <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;json-server&quot;</span>, <span class="hljs-attr">&quot;author&quot;</span>: <span class="hljs-string">&quot;typicode&quot;</span> &#125;],<br>  <span class="hljs-attr">&quot;comments&quot;</span>: [&#123; <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">&quot;body&quot;</span>: <span class="hljs-string">&quot;some comment&quot;</span>, <span class="hljs-attr">&quot;postId&quot;</span>: <span class="hljs-number">1</span> &#125;],<br>  <span class="hljs-attr">&quot;profile&quot;</span>: &#123; <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;typicode&quot;</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>开启服务器(支持热更新)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">json-server --watch db.json<br></code></pre></td></tr></table></figure></li><li><p>打开<code> http://localhost:3000/</code>，可以在 Resources 中看到所有的接口</p><p><img src="https://s2.loli.net/2022/03/10/aMDp4T9JQ2ruvqV.png" alt="image-20220228105153779"></p></li><li><p>点击对应接口，可以获取对应数据</p><p><img src="https://s2.loli.net/2022/03/10/pg9WGrXK1HhINBm.png" alt="image-20220228105310624"></p></li><li><p>支持携带参数</p><ul><li><p>params 参数</p><p><img src="https://s2.loli.net/2022/03/10/Ux4IzmPwQ3BFLuA.png" alt="image-20220228105412534"></p></li><li><p>query 参数</p><p><img src="https://s2.loli.net/2022/03/10/j65GDoirbMQa27A.png" alt="image-20220228105530166"></p></li><li><p>两种参数区别：query 参数是从所有的数据中筛选，所以最后是数组的形式；params 参数则是特定查找的形式，所以最后是对象的形式</p></li></ul></li></ol><h2 id="使用-axios-请求-REST-接口"><a href="#使用-axios-请求-REST-接口" class="headerlink" title="使用 axios 请求 REST 接口"></a>使用 axios 请求 REST 接口</h2><p><b style="color:red">上面开启的服务器不要关</b></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testGet()&quot;</span>&gt;</span>GET请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testPost()&quot;</span>&gt;</span>POST请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testPut()&quot;</span>&gt;</span>PUT请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;testDelete()&quot;</span>&gt;</span>DELETE请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> testGet = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios</span><br><span class="javascript">          .get(<span class="hljs-string">&quot;http://localhost:3000/posts&quot;</span>, &#123;</span><br><span class="javascript">            <span class="hljs-comment">// params: &#123;</span></span><br><span class="javascript">            <span class="hljs-comment">//   id: 2</span></span><br><span class="javascript">            <span class="hljs-comment">// &#125;</span></span><br><span class="javascript">          &#125;)</span><br><span class="javascript">          .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;/posts get&quot;</span>, response.data);</span><br><span class="javascript">          &#125;);</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> testPost = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios</span><br><span class="javascript">          .post(<span class="hljs-string">&quot;http://localhost:3000/posts&quot;</span>, &#123;</span><br><span class="javascript">            <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;czh&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;czh&quot;</span>,</span><br><span class="javascript">          &#125;)</span><br><span class="javascript">          .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;/posts post&quot;</span>, response.data);</span><br><span class="javascript">          &#125;);</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> testPut = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios</span><br><span class="javascript">          .put(<span class="hljs-string">&quot;http://localhost:3000/posts/3&quot;</span>, &#123;</span><br><span class="javascript">            <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;czh...&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;czh...&quot;</span>,</span><br><span class="javascript">          &#125;)</span><br><span class="javascript">          .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;/posts put&quot;</span>, response.data);</span><br><span class="javascript">          &#125;);</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> testDelete = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        axios.delete(<span class="hljs-string">&quot;http://localhost:3000/posts/3&quot;</span>).then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;/posts delete&quot;</span>, response.data);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="XHR"><a href="#XHR" class="headerlink" title="XHR"></a>XHR</h2><h3 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><blockquote><p><code>XMLHttpRequest</code>（XHR）对象用于与服务器交互。通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。<code>XMLHttpRequest</code> 在 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/AJAX">AJAX</a> 编程中被大量使用。</p></blockquote><p>文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a></p><h3 id="2-ajax-请求与一般的-http-请求"><a href="#2-ajax-请求与一般的-http-请求" class="headerlink" title="2. ajax 请求与一般的 http 请求"></a>2. ajax 请求与一般的 http 请求</h3><ul><li><p>ajax 请求是一种特殊的 http 请求</p></li><li><p>对服务器端来说，没有任何请求，区别在于<strong>浏览器端</strong>(ajax 请求有专门的 ajax 引擎帮忙发送)</p></li><li><p>浏览器端发送请求，只有 XHR 或 fetch 发出的才是 ajax 请求，其他的都不是 ajax 请求</p></li><li><p>浏览器端接收到响应(一般请求浏览器会自动更新页面，而 ajax 请求需要手动更新)</p><ul><li><p>一般请求：浏览器会直接显示响应体数据，即刷新/跳转页面</p></li><li><p>ajax 请求：浏览器不会对页面进行任何更新操作，而只是调用监视的回调函数并传入响应相关数据</p></li></ul></li></ul><h3 id="3-常用-API"><a href="#3-常用-API" class="headerlink" title="3. 常用 API"></a>3. 常用 API</h3><ul><li><p>XMLHttpRequest()：创建 XHR 对象的构造函数</p></li><li><p>status：响应状态码，如 200、404 等</p></li><li><p>statusText：响应状态文本</p></li><li><p>readyState：标识请求状态的只读属性</p><p>​ 0: 初始</p><p>​ 1: open()之后</p><p>​ 2: send()之后</p><p>​ 3: 请求中</p><p>​ 4: 请求完成</p></li><li><p>onreadystatechange：绑定 readyState 改变的监听</p></li><li><p>responseType：指定响应数据类型</p></li><li><p>timeout：指定请求超时时间，默认为 0，表示没有限制</p></li><li><p>open()：初始化一个请求。参数为<code> (method, url [, async])</code></p></li><li><p>send(data)：发送请求</p></li><li><p>setRequestHeader(name, value)：设置请求头</p></li><li><p>getResponseHeader(name)：获取指定名称的响应头值</p></li></ul><h2 id="封装-axios"><a href="#封装-axios" class="headerlink" title="封装 axios"></a>封装 axios</h2><p>axios</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">axios</span>(<span class="hljs-params">&#123; url, method = <span class="hljs-string">&quot;GET&quot;</span>, params = &#123;&#125;, data = &#123;&#125; &#125;</span>) </span>&#123;<br>  <span class="hljs-comment">// 返回Promise对象</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 处理method大小写</span><br>    method = method.toUpperCase();<br><br>    <span class="hljs-comment">// 把请求参数拼接到url中</span><br>    <span class="hljs-keyword">let</span> queryString = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-built_in">Object</span>.keys(params).forEach(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      queryString += <span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;params[key]&#125;</span>&amp;`</span>;<br>    &#125;);<br><br>    <span class="hljs-keyword">if</span> (queryString) &#123;<br>      <span class="hljs-comment">// 有查询参数,需要把最后的&amp;去掉</span><br>      queryString = queryString.substring(<span class="hljs-number">0</span>, queryString.length - <span class="hljs-number">1</span>);<br>      url += <span class="hljs-string">`?<span class="hljs-subst">$&#123;queryString&#125;</span>`</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 1. 执行异步ajax请求</span><br>    <span class="hljs-comment">// 1.1 创建xhr对象</span><br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br><br>    <span class="hljs-comment">// 1.2 打开连接，初始化请求</span><br>    xhr.open(method, url, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 第三个参数表示是否异步执行操作，默认为true。如果值为false，send()方法直到收到答复前不会返回。</span><br><br>    <span class="hljs-comment">// 1.3 发送请求</span><br>    <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&quot;GET&quot;</span> || method === <span class="hljs-string">&quot;DELETE&quot;</span>) &#123;<br>      xhr.send();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&quot;POST&quot;</span> || method === <span class="hljs-string">&quot;PUT&quot;</span>) &#123;<br>      xhr.setRequestHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>); <span class="hljs-comment">// 设置请求头，通知服务器请求体的格式是json</span><br>      xhr.send(<span class="hljs-built_in">JSON</span>.stringify(data)); <span class="hljs-comment">// 发送json格式请求体参数</span><br>    &#125;<br><br>    <span class="hljs-comment">// 1.4 绑定状态的监听,监听的定义能放在后面是因为这里是异步发送请求</span><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (xhr.readyState !== <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">const</span> &#123;<br>        status, <span class="hljs-comment">// 响应状态在[200, 300)之间代表成功,否则失败</span><br>        statusText,<br>      &#125; = xhr;<br><br>      <span class="hljs-comment">// 2.1 如果请求成功，调用resolve()</span><br>      <span class="hljs-keyword">if</span> (status &gt;= <span class="hljs-number">200</span> &amp;&amp; status &lt; <span class="hljs-number">300</span>) &#123;<br>        <span class="hljs-keyword">const</span> response = &#123;<br>          <span class="hljs-attr">data</span>: <span class="hljs-built_in">JSON</span>.parse(xhr.response), <span class="hljs-comment">// 把响应转化成JSON对象</span><br>          status,<br>          statusText,<br>        &#125;;<br>        resolve(response);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 2.2 如果请求失败，调用reject()</span><br>        reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;request error status is &quot;</span> + status));<br>      &#125;<br>    &#125;;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// GET请求: 服务端获取数据</span><br><span class="hljs-keyword">const</span> testGet = <span class="hljs-function">() =&gt;</span> &#123;<br>  axios(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/posts&quot;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>    <span class="hljs-attr">params</span>: &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    &#125;,<br>  &#125;).then(<br>    <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(response);<br>    &#125;,<br>    <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>      alert(error.message);<br>    &#125;<br>  );<br>&#125;;<br><br><span class="hljs-comment">// POST请求: 服务端增加数据</span><br><span class="hljs-keyword">const</span> testPost = <span class="hljs-function">() =&gt;</span> &#123;<br>  axios(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/posts&quot;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;axios&quot;</span>,<br>      <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    &#125;,<br>  &#125;).then(<br>    <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(response);<br>    &#125;,<br>    <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>      alert(error.message);<br>    &#125;<br>  );<br>&#125;;<br><br><span class="hljs-comment">// PUT请求: 服务端更新数据</span><br><span class="hljs-keyword">const</span> testPut = <span class="hljs-function">() =&gt;</span> &#123;<br>  axios(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/posts/1&quot;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;put&quot;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;axios!!!!!&quot;</span>,<br>      <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;clz!!!!!!&quot;</span>,<br>    &#125;,<br>  &#125;).then(<br>    <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(response);<br>    &#125;,<br>    <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>      alert(error.message);<br>    &#125;<br>  );<br>&#125;;<br><br><span class="hljs-comment">// DELETE请求: 服务端删除数据</span><br><span class="hljs-keyword">const</span> testDelete = <span class="hljs-function">() =&gt;</span> &#123;<br>  axios(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/posts/2&quot;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;delete&quot;</span>,<br>  &#125;).then(<br>    <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(response);<br>    &#125;,<br>    <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>      alert(error.message);<br>    &#125;<br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><p><b style="color: red">发送 POST、PUT 等需要修改服务器端的资源的请求时会发送 OPTIONS 请求，查看是否能够修改，即预请求。而 GET 请求不需要，因为 GET 请求不需要修改服务器上的资源</b></p><p><img src="https://s2.loli.net/2022/03/10/XfniK4GOZEIRcVs.png" alt="image-20220228151239576"></p><p>学习链接：<a href="https://www.bilibili.com/video/BV1NJ41197u6">尚硅谷_axios 核心技术</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;axios-笔记-一-简单入门&quot;&gt;&lt;a href=&quot;#axios-笔记-一-简单入门&quot; class=&quot;headerlink&quot; title=&quot;axios 笔记(一) 简单入门&quot;&gt;&lt;/a&gt;axios 笔记(一) 简单入门&lt;/h1&gt;&lt;p&gt;又是前端必备知识的笔记。&lt;/p&gt;</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="axios" scheme="https://www.clzczh.top/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>params编程式导航踩坑</title>
    <link href="https://www.clzczh.top/2022/03/08/vue-router-proplem-2/"/>
    <id>https://www.clzczh.top/2022/03/08/vue-router-proplem-2/</id>
    <published>2022-03-08T08:14:53.000Z</published>
    <updated>2022-03-25T17:41:06.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="params-编程式导航踩坑"><a href="#params-编程式导航踩坑" class="headerlink" title="params 编程式导航踩坑"></a>params 编程式导航踩坑</h1><h2 id="1-params-不能与-path-一起使用"><a href="#1-params-不能与-path-一起使用" class="headerlink" title="1. params 不能与 path 一起使用"></a>1. <code>params</code> 不能与 <code>path</code> 一起使用</h2><p>先来一下路由配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:userid&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>先来一下：query 编程式导航</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> router = useRouter();</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// query编程式导航传参</span></span><br><span class="javascript">      router.push(&#123;</span><br><span class="javascript">        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/123&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">query</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">userid</span>: <span class="hljs-number">666</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/lJkUbH12vCRnus6.png" alt="image-20220303114728772"></p><p>一切正常</p><p>然后，换成 params 编程式导航</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> router = useRouter();</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// params编程式导航传参</span></span><br><span class="javascript">      router.push(&#123;</span><br><span class="javascript">        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">userid</span>: <span class="hljs-number">123</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后跳转到 <a href="http://localhost:3000/#/user%EF%BC%8C%E6%B2%A1%E6%9C%89%E5%90%8E%E9%9D%A2%E7%9A%84">http://localhost:3000/#/user，没有后面的</a> params 参数，这是因为<b style="color: red"><code>params</code> 不能与 <code>path</code> 一起使用</b>，一起使用后，后面的 params 参数将不再起作用。</p><h2 id="2-需要和命名路由搭配使用"><a href="#2-需要和命名路由搭配使用" class="headerlink" title="2. 需要和命名路由搭配使用"></a>2. 需要和命名路由搭配使用</h2><p>先说一下，一开始，本人还以为<code>name</code>就是类似<code>path</code>的用法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> router = useRouter();</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// params编程式导航传参</span></span><br><span class="javascript">      router.push(&#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;user&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">userid</span>: <span class="hljs-number">123</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后报错</p><p><img src="https://s2.loli.net/2022/03/08/BUNkO9yWdXK4JEe.png" alt="image-20220303115736810"></p><p>通过查阅资料后，才知道，这里的 name 属性就是命名路由名称。</p><p>修改路由的配置：变成命名路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:userid&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;user&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/YI82MDXWtHruqwy.png" alt="image-20220303120329957"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;params-编程式导航踩坑&quot;&gt;&lt;a href=&quot;#params-编程式导航踩坑&quot; class=&quot;headerlink&quot; title=&quot;params 编程式导航踩坑&quot;&gt;&lt;/a&gt;params 编程式导航踩坑&lt;/h1&gt;&lt;h2 id=&quot;1-params-不能与-path</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://www.clzczh.top/tags/Vue/"/>
    
    <category term="Vue3" scheme="https://www.clzczh.top/tags/Vue3/"/>
    
    <category term="Vue Router" scheme="https://www.clzczh.top/tags/Vue-Router/"/>
    
  </entry>
  
  <entry>
    <title>刷新页面后this.$route.params 为空</title>
    <link href="https://www.clzczh.top/2022/03/08/vue-router-proplem-1/"/>
    <id>https://www.clzczh.top/2022/03/08/vue-router-proplem-1/</id>
    <published>2022-03-08T08:14:47.000Z</published>
    <updated>2022-03-25T17:40:58.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="刷新页面后-this-route-params-为空"><a href="#刷新页面后-this-route-params-为空" class="headerlink" title="刷新页面后 this.$route.params 为空"></a>刷新页面后 this.$route.params 为空</h1><p>深度学习<code> vue-router</code>时，按官方文档的教程看下来，结果发现刷新页面后，打印的<code>this.$route.params </code>为空</p><h2 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h2><h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>路由配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br>Vue.use(VueRouter);<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>      <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>),<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>    &#125;,<br>  ],<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$route.params);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/FWeYxVU8bqB29yJ.png" alt="image-20220302152502581"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="1-在导航守卫中获取"><a href="#1-在导航守卫中获取" class="headerlink" title="1. 在导航守卫中获取"></a>1. 在导航守卫中获取</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(to.params);<br>  next();<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/dqoSPzYgaDeFAUy.gif" alt="vue-router2"></p><h4 id="2-在跳转后的页面获取，而不是在-app-vue-中获取"><a href="#2-在跳转后的页面获取，而不是在-app-vue-中获取" class="headerlink" title="2. 在跳转后的页面获取，而不是在 app.vue 中获取"></a>2. 在跳转后的页面获取，而不是在 app.vue 中获取</h4><p>User.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$route.params);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">color</span>: purple;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-在-updated生命周期钩子中获取-可能实际开发用不上"><a href="#3-在-updated生命周期钩子中获取-可能实际开发用不上" class="headerlink" title="3. 在 updated生命周期钩子中获取(可能实际开发用不上)"></a>3. 在<code> updated</code>生命周期钩子中获取(可能实际开发用不上)</h4><p>为什么会出这个问题呢？</p><p>以下是个人现阶段的理解。(可能有误)</p><p>结论：<b style="Color: red">此时打印<code> this.$route.params</code>应该在<code> updated</code>生命周期钩子中打印</b></p><p>首先先在<code> created</code>和<code> mounted</code>钩子中打印<code> this.$route</code>看一下情况。</p><p><img src="https://s2.loli.net/2022/03/08/pOfQMSabTkjCt3Z.png" alt="image-20220302153712535"></p><p>发现，信息不符合。猜测可能是组件创建、渲染阶段时，路由还没有跳转，所以打印的信息不对。路由跳转后，修改数据<code> this.$route</code>是在数据更新阶段，所以获取最新的路由信息应该在<code> updated</code>中获取。</p><p><img src="https://s2.loli.net/2022/03/08/oBSyKRIdsVfhw83.png" alt="image-20220302154158334"></p><p>问题解决</p><h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><p>首先，路由配置也不太一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/Home.vue&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../components/User.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="1-在导航守卫中获取-1"><a href="#1-在导航守卫中获取-1" class="headerlink" title="1. 在导航守卫中获取"></a>1. 在导航守卫中获取</h4><p>和 Vue2 的相同。</p><h4 id="2-在跳转后的页面获取，而不是在-app-vue-中获取-1"><a href="#2-在跳转后的页面获取，而不是在-app-vue-中获取-1" class="headerlink" title="2. 在跳转后的页面获取，而不是在 app.vue 中获取"></a>2. 在跳转后的页面获取，而不是在 app.vue 中获取</h4><p><strong>这个在开发中用到的可能性还大一些。毕竟开发时每个页面都需要路由信息的很少，都需要的话就可以采用上面在导航守卫中获取的做法</strong></p><p>User.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; onUpdated &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(route.params);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">color</span>: purple;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果和上图一样</p><h4 id="3-强行实现-不建议"><a href="#3-强行实现-不建议" class="headerlink" title="3. 强行实现(不建议)"></a>3. 强行实现(不建议)</h4><p>Vue3 中，针对 Vue2 的解决方案 3 不再有效。在 Vue3 中，路由的变化不再属于是数据的更新，所以也不会触发<code> onUpdated</code>钩子</p><p>app.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; onUpdated &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// console.log(route.params)</span></span><br><span class="javascript"></span><br><span class="javascript">  onUpdated(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(route.params);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/6mokixOAbLd2PrR.gif" alt="vue-router"></p><p>那么怎么解决呢？</p><br /><p>这个只是个人学习时，想到的暴力法。(现在也只会这个暴力法，开发时应该是嗤之以鼻的做法)</p><p>app.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; onUpdated &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(route.params);</span><br><span class="javascript">  &#125;, <span class="hljs-number">200</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果还是同上</p><h2 id="最后的坑-又能解释的希望评论告知"><a href="#最后的坑-又能解释的希望评论告知" class="headerlink" title="最后的坑(又能解释的希望评论告知)"></a>最后的坑(又能解释的希望评论告知)</h2><p>app.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  params: &#123;&#123; route.params &#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; onUpdated &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute();</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(route);</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(route.params);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/08/v7SWpIYkjZx9FCV.png" alt="image-20220308160130992"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;刷新页面后-this-route-params-为空&quot;&gt;&lt;a href=&quot;#刷新页面后-this-route-params-为空&quot; class=&quot;headerlink&quot; title=&quot;刷新页面后 this.$route.params 为空&quot;&gt;&lt;/a&gt;刷新页面后 t</summary>
      
    
    
    
    <category term="前端" scheme="https://www.clzczh.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://www.clzczh.top/tags/Vue/"/>
    
    <category term="Vue3" scheme="https://www.clzczh.top/tags/Vue3/"/>
    
    <category term="Vue Router" scheme="https://www.clzczh.top/tags/Vue-Router/"/>
    
  </entry>
  
  <entry>
    <title>LeanCloud国际版遇到的问题及解决方案</title>
    <link href="https://www.clzczh.top/2022/03/07/valine-problem/"/>
    <id>https://www.clzczh.top/2022/03/07/valine-problem/</id>
    <published>2022-03-07T04:13:09.000Z</published>
    <updated>2022-03-25T17:16:05.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeanCloud-国际版遇到的问题及解决方案"><a href="#LeanCloud-国际版遇到的问题及解决方案" class="headerlink" title="LeanCloud 国际版遇到的问题及解决方案"></a>LeanCloud 国际版遇到的问题及解决方案</h1><p>首先，为什么要用<code> LeanCloud国际版</code>呢？就是因为设置邮件提醒功能时，需要绑定访问域名来唤醒 leancloud，而国际版提供免费域名，国内的需要备案域名。</p><p><img src="https://s2.loli.net/2022/03/07/52vX34VkWodfMUj.png" alt="image-20220307123838756"></p><p><br />只能说弄这个博客，真的是非常能感受到迭代的快(虽然遇到的不是技术点上的)：</p><ul><li>搭建博客时，刚好遇上 github 默认分支从<code> master</code>变为<code> master</code>，然后网上的教程都还是<code> master</code></li><li>这次的问题也是因为 us.avoscloud.com 这个域名被弃用了，然而报错提示的确实跨域问题</li></ul><p><img src="https://s2.loli.net/2022/03/07/zpYQtBL8f2Fq5ng.png" alt="img"></p><p>这一次属于是长教训了，不看公告，一个月前的事情现在才知道</p><p><img src="https://s2.loli.net/2022/03/07/gLp8f4vniyNwt6D.png" alt="image-20220307122010510"></p><p>最后通过到 leancloud 社区直接询问，通过<a href="https://forum.leancloud.cn/users/shifuchen">shifuchen 大佬</a>的回答解决问题</p><p>那么怎么解决这个问题呢？</p><ul><li><p>首先，登录<a href="https://console.leancloud.app/apps">LeanCloud</a>，进入自己的应用。然后进入<code> 设置 -&gt; 应用凭证</code>，复制<strong>REST API 服务器地址</strong></p><p><img src="https://s2.loli.net/2022/03/07/jFlm6HG42sVtfwM.png" alt="image-20220307122544336"></p><p><img src="https://s2.loli.net/2022/03/07/owuWH5fLhX9T7nm.png" alt="image-20220307122650723"></p></li><li><p>然后，回到你的博客的主题文件夹中，找到使用 valine 部分，<a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a>主题的就在<code> layout \ _partial \ valine.ejs</code>中</p><p><img src="https://s2.loli.net/2022/03/07/uaCetFqbYPLDXpf.png" alt="image-20220307123020590"></p></li><li><p>新建<code>Valine</code>实例时，添加<code> serverURLs</code>属性，值为刚刚复制的地址</p><p><img src="https://s2.loli.net/2022/03/07/xJrIPAlsfVc18i5.png" alt="image-20220307123226134"></p></li></ul><p>成功：<a href="https://clz.vercel.app/contact/">contact | 赤蓝紫</a></p><p><img src="https://s2.loli.net/2022/03/07/zlyf1ZWcmFYhNOX.png" alt="image-20220307123328264"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeanCloud-国际版遇到的问题及解决方案&quot;&gt;&lt;a href=&quot;#LeanCloud-国际版遇到的问题及解决方案&quot; class=&quot;headerlink&quot; title=&quot;LeanCloud 国际版遇到的问题及解决方案&quot;&gt;&lt;/a&gt;LeanCloud 国际版遇到的问</summary>
      
    
    
    
    <category term="小技能" scheme="https://www.clzczh.top/categories/%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="blog" scheme="https://www.clzczh.top/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(二)    JavaScript</title>
    <link href="https://www.clzczh.top/2022/03/06/leetcode-2/"/>
    <id>https://www.clzczh.top/2022/03/06/leetcode-2/</id>
    <published>2022-03-06T12:39:16.000Z</published>
    <updated>2022-03-25T17:15:18.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-刷题-二-JavaScript"><a href="#LeetCode-刷题-二-JavaScript" class="headerlink" title="LeetCode 刷题(二) JavaScript"></a>LeetCode 刷题(二) JavaScript</h1><h2 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/description/">合并两个有序链表</a></h2><p>通过递归实现：判断 list1 和 list2 那个链表的头结点的值更小，然后递归下去决定下一个添加到结果的节点，当两个链表中有为空时，递归结束。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> mergeTwoLists = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">list1, list2</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (list1 === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> list2;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (list2 === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> list1;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (list1.val &lt; list2.val) &#123;<br>    list1.next = mergeTwoLists(list1.next, list2);<br>    <span class="hljs-keyword">return</span> list1;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    list2.next = mergeTwoLists(list1, list2.next);<br>    <span class="hljs-keyword">return</span> list2;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="删除有序数组中的重复项"><a href="#删除有序数组中的重复项" class="headerlink" title="删除有序数组中的重复项"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/description/">删除有序数组中的重复项</a></h2><h3 id="1-简单版本"><a href="#1-简单版本" class="headerlink" title="1. 简单版本"></a>1. 简单版本</h3><p>遍历一遍，通过<code> indexOf</code>和<code> lastIndexOf</code>来判断是否有重复项，有的话，则不相等。然后通过<code> splice</code>删除掉重复项，删除后，因为少一位了，此时的索引也需要-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number[]&#125;</span> <span class="hljs-variable">nums</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> removeDuplicates = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (nums.indexOf(nums[i]) !== nums.lastIndexOf(nums[i])) &#123;<br>      nums.splice(i, <span class="hljs-number">1</span>);<br>      i--;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> nums.length;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2-双指针法"><a href="#2-双指针法" class="headerlink" title="2. 双指针法"></a>2. 双指针法</h3><p>定义两个指针 fast 和 slow，起始都为 1(因为 0 时不可能会有重复)，其中 fast 指针一直在走，而当<code> nums[fast]</code>不等于<code> nums[fast - 1]</code>时，即是不重复项，那么此时就让<code> nums[slow] = nums[fast]</code>，即存下不重复项，<code> slow</code>指针才继续走一步，遍历完后，<code>slow</code>就是删掉重复项后数组的长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number[]&#125;</span> <span class="hljs-variable">nums</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> removeDuplicates = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> n = nums.length;<br>  <span class="hljs-keyword">if</span> (n === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> fast = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">let</span> slow = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">while</span> (fast &lt; n) &#123;<br>    <span class="hljs-keyword">if</span> (nums[fast] !== nums[fast - <span class="hljs-number">1</span>]) &#123;<br>      nums[slow] = nums[fast];<br>      slow++;<br>    &#125;<br>    fast++;<br>  &#125;<br><br>  <span class="hljs-built_in">console</span>.log(slow);<br><br>  <span class="hljs-keyword">return</span> slow;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a><a href="https://leetcode-cn.com/problems/remove-element/description/">移除元素</a></h2><h3 id="1-双指针法"><a href="#1-双指针法" class="headerlink" title="1. 双指针法"></a>1. 双指针法</h3><p>和上面的做法一样，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> removeElement = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, val</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> n = nums.length;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> right = <span class="hljs-number">0</span>; right &lt; n; right++) &#123;<br>    <span class="hljs-keyword">if</span> (nums[right] !== val) &#123;<br>      nums[left] = nums[right]; <span class="hljs-comment">// 不等于要移除的元素，则存起来，等于则不存</span><br>      left++;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> left;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2-双指针优化"><a href="#2-双指针优化" class="headerlink" title="2. 双指针优化"></a>2. 双指针优化</h3><p>做法和双指针法类似，不同的是，初始时，左指针指向 0，右指针指向数组最后一位。</p><p>通过判断 left 指针指向的元素等不等于 val</p><ul><li>等于的话，则把 right 指针指向的元素赋值给 left 指针，然后 right–，继续判断 left 指针指向的元素等不等于 left</li><li>不等于的话，则 left 指针前进</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number[]&#125;</span> <span class="hljs-variable">nums</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number&#125;</span> <span class="hljs-variable">val</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> removeElement = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, val</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>,<br>    right = nums.length;<br><br>  <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-keyword">if</span> (nums[left] === val) &#123;<br>      nums[left] = nums[right - <span class="hljs-number">1</span>]; <span class="hljs-comment">// 把后面的元素放到前面，避免重复赋值。如1,2,3,4,5要去掉1</span><br>      right--;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      left++;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> left;<br>&#125;;<br></code></pre></td></tr></table></figure><p><b style="color: red">可以避免元素的重复赋值操作</b>：</p><p>假设数组为<code> [1, 2, 3, 4]</code>，要删除的元素为 1</p><ul><li>使用普通的双指针法：第一位等于要删的元素，跳过，后面一次赋值<code> nums[0]=2</code>，<code> nums[1]=3</code>，<code> nums[2]=4</code></li><li>使用优化的双指针法：第一轮需要赋值<code> nums[0]=4</code>，后面就不需要在赋值了</li></ul><h2 id="实现-strStr"><a href="#实现-strStr" class="headerlink" title="实现 strStr()"></a><a href="https://leetcode-cn.com/problems/implement-strstr/description/">实现 strStr()</a></h2><h3 id="1-暴力匹配"><a href="#1-暴力匹配" class="headerlink" title="1. 暴力匹配"></a>1. 暴力匹配</h3><p>就是直接嵌套循环，时间复杂度较大。KMP 算法比较麻烦，先留个坑(希望之后会补坑)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> <span class="hljs-variable">haystack</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> <span class="hljs-variable">needle</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> strStr = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">haystack, needle</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> hLen = haystack.length;<br>  <span class="hljs-keyword">let</span> nLen = needle.length;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i + nLen &lt;= hLen; i++) &#123;<br>    <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; nLen; j++) &#123;<br>      <span class="hljs-keyword">if</span> (haystack[i + j] !== needle[j]) &#123;<br>        flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>      <span class="hljs-keyword">return</span> i;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="搜索插入位置"><a href="#搜索插入位置" class="headerlink" title="搜索插入位置"></a><a href="https://leetcode-cn.com/problems/search-insert-position/description/">搜索插入位置</a></h2><p>有序插入：二分法：就是每次都取在中间的那个值，如果<code>target</code>小于等于中间那个值的话，就是说<code> target</code>在左半边，此时，让 right=mid-1，大于则让<code> left=mid+1</code>。最后返回<code> right+1</code>。（这里返回<code> right+1</code>的原因是<code>target</code>小于等于中间那个值都会继续往左移，所以<code>right</code>停的位置会比<code>target</code>小，那么插的位置就是<code> right+1</code>了）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> searchInsert = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, target</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span><br>  <span class="hljs-keyword">let</span> ans = nums.length<br><br>  <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>    <span class="hljs-keyword">let</span> mid = right - <span class="hljs-built_in">Number</span>.parseInt((right - left) / <span class="hljs-number">2</span>)<br><br>    <span class="hljs-keyword">if</span> (target &lt;= nums[mid]) &#123;<br>      right = mid - <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      left = mid + <span class="hljs-number">1</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> right + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode-刷题-二-JavaScript&quot;&gt;&lt;a href=&quot;#LeetCode-刷题-二-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;LeetCode 刷题(二) JavaScript&quot;&gt;&lt;/a&gt;LeetCode 刷题(二</summary>
      
    
    
    
    <category term="算法" scheme="https://www.clzczh.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="https://www.clzczh.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Express实战(二)    登录验证、身份认证、增删改查</title>
    <link href="https://www.clzczh.top/2022/03/06/express-4/"/>
    <id>https://www.clzczh.top/2022/03/06/express-4/</id>
    <published>2022-03-06T05:20:02.000Z</published>
    <updated>2022-03-25T17:14:15.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Express-实战-二-登录验证、身份认证、增删改查"><a href="#Express-实战-二-登录验证、身份认证、增删改查" class="headerlink" title="Express 实战(二) 登录验证、身份认证、增删改查"></a>Express 实战(二) 登录验证、身份认证、增删改查</h1><p>最终结果：<a href="https://github.com/13535944743/realworld-api-express-practise-">realworld-api-express-practise- </a></p><h2 id="1-数据验证-登录验证"><a href="#1-数据验证-登录验证" class="headerlink" title="1. 数据验证(登录验证)"></a>1. 数据验证(登录验证)</h2><p>validate \ user.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.login = [<br>  validate([<br>    body(<span class="hljs-string">&quot;user.email&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;邮箱不能为空&quot;</span>),<br>    body(<span class="hljs-string">&quot;user.password&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;密码不能为空&quot;</span>),<br>  ]),<br>  validate([<br>    <span class="hljs-comment">// 只有上面的验证通过才会执行，利用的是中间件的机制</span><br>    body(<span class="hljs-string">&quot;user.email&quot;</span>).custom(<span class="hljs-keyword">async</span> (email, &#123; req &#125;) =&gt; &#123;<br>      <span class="hljs-comment">// 这里参数的req解构是官网文档用法</span><br>      <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> User.findOne(&#123;<br>        email,<br>      &#125;).select([<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;bio&quot;</span>, <span class="hljs-string">&quot;image&quot;</span>]); <span class="hljs-comment">// 这里需要获取密码的话，因为用户密码的模式设计那里设置了select: false，即通过查找不能查到密码，此时需要通过select()实现能查出密码</span><br>      <span class="hljs-keyword">if</span> (!user) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;用户不存在&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-comment">// 将数据挂载到请求对象上，这样子后续的中间件也可以直接使用</span><br>      req.user = user;<br>    &#125;),<br>  ]),<br>  validate([<br>    body(<span class="hljs-string">&quot;user.password&quot;</span>).custom(<span class="hljs-keyword">async</span> (password, &#123; req &#125;) =&gt; &#123;<br>      <span class="hljs-keyword">if</span> (md5(password) !== req.user.password) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;密码错误&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-built_in">console</span>.log(req.user);<br>    &#125;),<br>  ]),<br>];<br></code></pre></td></tr></table></figure><p>user 的路由那里也要加上</p><p>router \ user.js</p><p><img src="https://s2.loli.net/2022/03/06/VOkFwbflWv32tqx.png" alt="image-20220212175651983"></p><p><img src="https://s2.loli.net/2022/03/06/Q72rvg8PFGHahKW.png" alt="image-20220212175753306"></p><p><img src="https://s2.loli.net/2022/03/06/QeX7S6bxAN98OCP.png" alt="image-20220212175808931"></p><h2 id="2-基于-JWT-的身份认证"><a href="#2-基于-JWT-的身份认证" class="headerlink" title="2. 基于 JWT 的身份认证"></a>2. 基于 JWT 的身份认证</h2><p><a href="https://jwt.io/">JSON Web Tokens - jwt.io</a></p><p>JWT 原理：服务器认证之后，生成一个 JSON 对象，类似下面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;姓名&quot;</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-string">&quot;角色&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>    <span class="hljs-string">&quot;到期时间&quot;</span>: <span class="hljs-string">&quot;2022-02-28&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>以后，用户和服务端通信，都要发回这个 JSON 对象，服务器只靠这个对象确认用户身份。为了防止用户篡改数据，服务器在生成这个对象时，会加上签名。</p><p>实际 JWT：</p><p><img src="https://s2.loli.net/2022/03/06/e6YlBAa9SKiLIyP.png" alt="image-20220212181436946"></p><p>JWT 的三个部分：</p><ul><li>Header（头部）</li><li>Payload（负载）</li><li>Signature（签名）</li></ul><p>Header.Payload.Signature</p><h3 id="2-1-Header"><a href="#2-1-Header" class="headerlink" title="2.1 Header"></a>2.1 Header</h3><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;HS256&quot;</span>,<span class="hljs-comment">// 表示签名的算法，默认是HMAC SHA256</span><br>    <span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><span class="hljs-comment">// 表示令牌（token）的类型，ＪＷＴ令牌写为ＪＷＴ</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最后通过<code> Base64URL</code>算法将上面的ＪＳＯＮ对象转成字符串</p><h3 id="2-2-Payload"><a href="#2-2-Payload" class="headerlink" title="2.2 Payload"></a>2.2 Payload</h3><p>Payload 也是一个 JSON 对象，用来存实际需要传的数据。JWT 规定了 7 个官方字段</p><ul><li>iss(issuer)：签发人</li><li>exp(expiration time)：过期时间</li><li>sub(subject)：主题</li><li>aud(audience)：受众</li><li>nbf(Not Before)：生效时间</li><li>iat(Issued At)：签发时间</li><li>jti(JWT ID)：编号</li></ul><p>除了官方字段，还可以定义私有字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;sub&quot;</span>: <span class="hljs-string">&quot;134567890&quot;</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;clz&quot;</span>,<br>    <span class="hljs-string">&quot;admin&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p><b style="color: red">JWT 默认是不加密的，所以需要保密的信息不应该放在这部分</b></p><p>最后通过<code> Base64URL</code>算法将上面的 JSON 对象转成字符串</p><h3 id="2-3-Signature"><a href="#2-3-Signature" class="headerlink" title="2.3 Signature"></a>2.3 Signature</h3><p>Signature 是对前两部分的签名，防止数据篡改</p><p>首先，需要指定一个密钥(<b style="color: red">这个密钥只有服务器知道，不能泄露给用户</b>)。然后，使用 Header 里面指定的签名算法，按以下公式产生签名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">HMACSHA256(<br>  base64UrlEncode(header) + <span class="hljs-string">&quot;.&quot;</span> + base64UrlEncode(payload),<br>  secret <span class="hljs-comment">// 私钥</span><br>);<br></code></pre></td></tr></table></figure><p>得到签名后，将 Header、Payload、Signature 三个部分拼接成一个字符串，用<code> .</code>分隔，可以返回给用户</p><p><b style="Color: red">在 JWT 中，消息体是透明的，使用签名可以保证消息不被篡改，但不能实现数据加密功能</b></p><p>将 Header 和 Payload 串型化的算法是<code> BaseURL</code>，和<code> Base64</code>算法类似，但有一些不同。</p><p>JWT 作为一个令牌(token)，有时候需要放到 URL 中(如 api.example.com/?token=xxx)。</p><ul><li>Base64 中的三个字符<code> +</code>, <code> /</code>, <code> =</code> ，在 URL 中有特殊意义</li><li>Base64URL：<code> =</code>被省略，<code> +</code>替换成<code> -</code>，<code> /</code>替换成<code> _</code></li></ul><h3 id="2-4-JWT-的使用方式"><a href="#2-4-JWT-的使用方式" class="headerlink" title="2.4 JWT 的使用方式"></a>2.4 JWT 的使用方式</h3><p>客户端收到服务器返回的 JWT，可以存在 Cookie 里，也可以存在 localStorage 中。之后，客户端与服务器通信，都要带上这个 JWT，可以将 JWT 放在 Cookie 里自动发送，不过这样子不能跨域。<b style="color: red">更好的做法是：放在 HTTP 请求头的<code> Authorization</code>字段里面</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Authorization: Bearer &lt;token&gt;<br></code></pre></td></tr></table></figure><h3 id="2-5-使用-jsonwebtoken"><a href="#2-5-使用-jsonwebtoken" class="headerlink" title="2.5 使用 jsonwebtoken"></a>2.5 使用 jsonwebtoken</h3><p><a href="https://github.com/auth0/node-jsonwebtoken">jsonwebtoken 仓库</a></p><p>了解 jsonwebtoken 的使用</p><p>先安装，<code> npm install jsonwebtoken</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;jsonwebtoken&quot;</span>);<br><br><span class="hljs-comment">// 生成jwt：jwt.sign</span><br><span class="hljs-comment">// // 同步方式:</span><br><span class="hljs-comment">// const token = jwt.sign(&#123; foo: &#x27;bar&#x27; &#125;, &#x27;hello&#x27;);</span><br><span class="hljs-comment">// console.log(token)</span><br><br><span class="hljs-comment">// 异步方式：就只是加多一个回调函数</span><br><span class="hljs-keyword">const</span> token = jwt.sign(<br>  &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br>  &#125;,<br>  <span class="hljs-string">&quot;hello&quot;</span>,<br>  <span class="hljs-function">(<span class="hljs-params">err, token</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成token失败&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(token);<br>  &#125;<br>);<br><br><span class="hljs-comment">// 验证jwt：jwt.verify</span><br><span class="hljs-comment">// 同步方式：</span><br><span class="hljs-comment">// const result = jwt.verify(&#x27;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\</span><br><span class="hljs-comment">// eyJmb28iOiJiYXIiLCJpYXQiOjE2NDQ2NjY1NDd9.\</span><br><span class="hljs-comment">// 0Vy596XulYTCxeTrBp27U2T4BMh93IPN5l2b0GqxAMY&#x27;, &#x27;hello&#x27;)</span><br><br><span class="hljs-comment">// console.log(result)</span><br><br><span class="hljs-comment">// 异步方式：</span><br>jwt.verify(<span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\</span><br><span class="hljs-string">eyJmb28iOiJiYXIiLCJpYXQiOjE2NDQ2NjY1NDd9.\</span><br><span class="hljs-string">0Vy596XulYTCxeTrBp27U2T4BMh93IPN5l2b0GqxAMY&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, ret</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;验证token失败&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(ret);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="2-5-1-生成-token"><a href="#2-5-1-生成-token" class="headerlink" title="2.5.1 生成 token"></a>2.5.1 生成 token</h4><p>util \ jwt.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;jsonwebtoken&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; promisify &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;util&quot;</span>); <span class="hljs-comment">// 将回调函数转换成Promise形式</span><br><br><span class="hljs-built_in">exports</span>.sign = promisify(jwt.sign);<br><br><span class="hljs-built_in">exports</span>.verify = promisify(jwt.verify);<br><br><span class="hljs-built_in">exports</span>.decode = promisify(jwt.decode); <span class="hljs-comment">// 不验证，直接解析</span><br></code></pre></td></tr></table></figure><p>config \ config.default.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">dbURL</span>: <span class="hljs-string">&quot;mongodb://localhost:27017/realworld&quot;</span>, <span class="hljs-comment">// MongoDB默认端口17017</span><br>  <span class="hljs-attr">jwtSecret</span>: <span class="hljs-string">&quot;c06eddf5-78eb-494f-b2c6-4a6d45b56cd5&quot;</span>, <span class="hljs-comment">// uuid随机生成(直接搜索uuid)</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>controller userController.js（只改登录部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 类前面引入</span><br><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../util/jwt&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; jwtSecret &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../config/config.default&#x27;</span>)<br><br><span class="hljs-comment">// 用户登录</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 1. 数据验证</span><br>    <span class="hljs-comment">// 2. 生成token</span><br>    <span class="hljs-keyword">const</span> user = req.user.toJSON()<br><br>    <span class="hljs-keyword">const</span> token = <span class="hljs-keyword">await</span> jwt.sign(&#123;<br>      <span class="hljs-attr">userId</span>: user._id    <span class="hljs-comment">// 生成token不需要全部user信息，只要_id即可</span><br>    &#125;, jwtSecret)<br><br>    <span class="hljs-comment">// 3. 发送成功响应(包含token的用户信息)</span><br>    <span class="hljs-keyword">delete</span> user.password<br>    res.status(<span class="hljs-number">200</span>).json(&#123;<br>      ...user,<br>      token<br>    &#125;)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/7E9rMZ3c8QU42sS.png" alt="image-20220212204150260"></p><h3 id="2-6-中间件统一处理-JWT-身份认证"><a href="#2-6-中间件统一处理-JWT-身份认证" class="headerlink" title="2.6 中间件统一处理 JWT 身份认证"></a>2.6 中间件统一处理 JWT 身份认证</h3><p>middleware \ authorization.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; verify &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../util/jwt&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; jwtSecret &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config/config.default&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; User &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../model/index&quot;</span>);<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>  <span class="hljs-comment">// 1. 从请求头获取token</span><br>  <span class="hljs-keyword">let</span> token = req.headers[<span class="hljs-string">&quot;authorization&quot;</span>];<br><br>  token = token ? token.split(<span class="hljs-string">&quot;Bearer &quot;</span>)[<span class="hljs-number">1</span>] : <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">if</span> (!token) &#123;<br>    <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">401</span>).end(<span class="hljs-string">&quot;请求头无token或token格式不对&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 2. 验证token是否有效</span><br>    <span class="hljs-comment">//    无效 ==&gt; 响应401状态码</span><br>    <span class="hljs-comment">//    有效 ==&gt; 把用户信息读取出来，并挂载到req请求对象中，继续往后执行</span><br>    <span class="hljs-keyword">const</span> decodedToken = <span class="hljs-keyword">await</span> verify(token, jwtSecret);<br>    req.user = <span class="hljs-keyword">await</span> User.findById(decodedToken.userId);<br><br>    next();<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">401</span>).end(<span class="hljs-string">&quot;token无效&quot;</span>);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/06/QsY2dEJHM48ISLB.png" alt="image-20220213193413017"></p><p><img src="https://s2.loli.net/2022/03/06/bqK4VkZ9XQsWIyH.png" alt="image-20220213193952500"></p><h3 id="2-7-JWT-过期时间"><a href="#2-7-JWT-过期时间" class="headerlink" title="2.7 JWT 过期时间"></a>2.7 JWT 过期时间</h3><p><img src="https://s2.loli.net/2022/03/06/6lFVXrutyLmdkOo.png" alt="image-20220213194228528"></p><p>设置为 15 秒，体验下过期</p><p><img src="https://s2.loli.net/2022/03/06/XBpAb8rQvGM9qDS.gif" alt="jwt"></p><h3 id="2-8-Postman-自动添加-token"><a href="#2-8-Postman-自动添加-token" class="headerlink" title="2.8 Postman 自动添加 token"></a>2.8 Postman 自动添加 token</h3><p><img src="https://s2.loli.net/2022/03/06/ES316tO8CoMA9BY.png" alt="image-20220213195824827"></p><p><img src="https://s2.loli.net/2022/03/06/2c8tgln6ekvhGYq.png" alt="image-20220213200015365"></p><h2 id="3-新增文章"><a href="#3-新增文章" class="headerlink" title="3. 新增文章"></a>3. 新增文章</h2><p><strong>和注册类似</strong></p><h3 id="3-1-数据验证"><a href="#3-1-数据验证" class="headerlink" title="3.1 数据验证"></a>3.1 数据验证</h3><p>validate \ article.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> validate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../middleware/validate&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; body &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-validator&quot;</span>);<br><br><span class="hljs-built_in">exports</span>.createArticle = validate([<br>  body(<span class="hljs-string">&quot;article.title&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;文章标题不能为空&quot;</span>),<br>  body(<span class="hljs-string">&quot;article.description&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;文章摘要不能为空&quot;</span>),<br>  body(<span class="hljs-string">&quot;article.body&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;文章内容不能为空&quot;</span>),<br>]);<br></code></pre></td></tr></table></figure><h3 id="3-2-文章模型"><a href="#3-2-文章模型" class="headerlink" title="3.2 文章模型"></a>3.2 文章模型</h3><p>model \ article.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><br><span class="hljs-keyword">const</span> baseModel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./base-model&quot;</span>);<br><br><span class="hljs-keyword">const</span> Schema = mongoose.Schema;<br><br><span class="hljs-comment">// 创建文章模型</span><br><span class="hljs-keyword">const</span> articleSchema = mongoose.Schema(&#123;<br>  ...baseModel,<br>  <span class="hljs-attr">title</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">description</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">body</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">tagList</span>: &#123;<br>    <span class="hljs-attr">type</span>: [<span class="hljs-built_in">String</span>],<br>    <span class="hljs-attr">default</span>: <span class="hljs-literal">null</span>,<br>  &#125;,<br>  <span class="hljs-attr">favoritesCount</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">Number</span>,<br>    <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  <span class="hljs-attr">author</span>: &#123;<br>    <span class="hljs-attr">type</span>: Schema.Types.ObjectId,<br>    <span class="hljs-attr">ref</span>: <span class="hljs-string">&quot;User&quot;</span>, <span class="hljs-comment">// 存用户id，之后映射到用户模型去</span><br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-built_in">module</span>.exports = articleSchema;<br></code></pre></td></tr></table></figure><p><b style="Color: red">ref 中的值需要时，model \ index.js 中导出的模型类中启用的名字</b></p><p><img src="https://s2.loli.net/2022/03/06/LgHpIeY5b8FUqdj.png" alt="image-20220214134231860"></p><h3 id="3-3-文章相关路由"><a href="#3-3-文章相关路由" class="headerlink" title="3.3 文章相关路由"></a>3.3 文章相关路由</h3><p><b style="color: red">新增文章部分加上了 JWT 身份认证和数据验证</b></p><p>router \ article.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-keyword">const</span> articleController = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../controller/articleController&quot;</span>);<br><span class="hljs-keyword">const</span> authorization = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../middleware/authorization&quot;</span>);<br><span class="hljs-keyword">const</span> articleValidate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../validate/article&quot;</span>);<br><br><span class="hljs-keyword">const</span> router = express.Router();<br><br><span class="hljs-comment">// 获取所有文章(可增加条件筛选)</span><br>router.get(<span class="hljs-string">&quot;/&quot;</span>, articleController.listArticles);<br><br><span class="hljs-comment">// 获取关注用户的所有文章(可增加条件筛选)</span><br>router.get(<span class="hljs-string">&quot;/feed&quot;</span>, articleController.feedArticles);<br><br><span class="hljs-comment">// 获取单篇文章</span><br>router.get(<span class="hljs-string">&quot;/:slug&quot;</span>, articleController.getArticle); <span class="hljs-comment">// slug类似id，用于确定特定文章</span><br><br><span class="hljs-comment">// 新增文章</span><br>router.post(<br>  <span class="hljs-string">&quot;/&quot;</span>,<br>  authorization,<br>  articleValidate.createArticle,<br>  articleController.createArticle<br>);<br><br><span class="hljs-comment">// 更新文章</span><br>router.put(<span class="hljs-string">&quot;/:slug&quot;</span>, articleController.updateArticle);<br><br><span class="hljs-comment">// 删除文章</span><br>router.delete(<span class="hljs-string">&quot;/:slug&quot;</span>, articleController.deleteArticle);<br><br><span class="hljs-comment">// 增加一篇文章的评论</span><br>router.post(<span class="hljs-string">&quot;/:slug/comments&quot;</span>, articleController.addComments);<br><br><span class="hljs-comment">// 获取一篇文章的所有评论</span><br>router.get(<span class="hljs-string">&quot;/:slug/comments&quot;</span>, articleController.getComments);<br><br><span class="hljs-comment">// 删除文章的一条评论</span><br>router.delete(<span class="hljs-string">&quot;/:slug/comments/:id&quot;</span>, articleController.deleteComment);<br><br><span class="hljs-comment">// 喜欢一篇文章</span><br>router.post(<span class="hljs-string">&quot;/:slug/favorite&quot;</span>, articleController.likeArticle);<br><br><span class="hljs-comment">// 取消喜欢一篇文章</span><br>router.delete(<span class="hljs-string">&quot;/:slug/favorite&quot;</span>, articleController.unlikeArticle);<br><br><span class="hljs-built_in">module</span>.exports = router;<br></code></pre></td></tr></table></figure><h3 id="3-4-处理请求"><a href="#3-4-处理请求" class="headerlink" title="3.4 处理请求"></a>3.4 处理请求</h3><p>controller \ articleController.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; Article &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../model/index&quot;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">articleController</span> </span>&#123;<br>  <span class="hljs-comment">// 获取所有文章(可增加条件筛选)</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">listArticles</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;获取所有文章&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 获取关注用户的所有文章(可增加条件筛选)</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">feedArticles</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;获取关注用户的所有文章&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 获取单篇文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;获取单篇文章&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 新增文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">createArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> article = <span class="hljs-keyword">new</span> Article(req.body.article);<br><br>      article.author = req.user._id; <span class="hljs-comment">// 作者在数据库中只存一个用户id，通过id去获取用户</span><br>      article.populate(<span class="hljs-string">&quot;author&quot;</span>); <span class="hljs-comment">// 简单来说，就是通过populate()以及文章模型中的ref: &#x27;User&#x27;，可以通过id把用户信息放到author中</span><br><br>      <span class="hljs-comment">// article.populate(&#x27;author&#x27;).execPopulate()</span><br><br>      <span class="hljs-keyword">await</span> article.save();<br>      res.status(<span class="hljs-number">201</span>).json(&#123;<br>        article,<br>      &#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 更新文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">updateArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;更新文章&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 删除文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">deleteArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;删除文章&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 增加一篇文章的评论</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">addComments</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;增加一篇文章的评论&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 获取一篇文章的所有评论</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getComments</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;获取一篇文章的评论&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 删除文章的一条评论</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">deleteComment</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;删除文章的一条评论&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 喜欢一篇文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">likeArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;喜欢一篇文章&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 取消喜欢一篇文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">unlikeArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res.send(<span class="hljs-string">&quot;取消喜欢一篇文章&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-keyword">new</span> articleController();<br></code></pre></td></tr></table></figure><p><b style="Color: red">疑点：老师说查询时不需要 execPopulate()，new 出来时需要，相当于执行一次查询。但是个人试验时发现都不需要 execPopulate()，加上反而会出错</b>，类似<code> &quot;article.populate(...).execPopulate is not a function&quot;</code></p><p>可能是时代变了，现在 new 出来的时候，也执行了</p><p><img src="https://s2.loli.net/2022/03/06/ekR29q7nSZfCylB.png" alt="image-20220214134928849"></p><h2 id="4-查询文章"><a href="#4-查询文章" class="headerlink" title="4. 查询文章"></a>4. 查询文章</h2><h3 id="4-1-数据验证"><a href="#4-1-数据验证" class="headerlink" title="4.1 数据验证"></a>4.1 数据验证</h3><p>model \ article.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.getArticle = validate([<br>  param(<span class="hljs-string">&quot;slug&quot;</span>).custom(<span class="hljs-keyword">async</span> (value) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!mongoose.isValidObjectId(value)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;文章ID类型错误&quot;</span>);<br>    &#125;<br>  &#125;),<br>]);<br></code></pre></td></tr></table></figure><h3 id="4-2-路由"><a href="#4-2-路由" class="headerlink" title="4.2 路由"></a>4.2 路由</h3><p>router \ article.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取单篇文章</span><br>router.get(<span class="hljs-string">&quot;/:slug&quot;</span>, articleValidate.getArticle, articleController.getArticle); <span class="hljs-comment">// slug类似id，用于确定特定文章</span><br></code></pre></td></tr></table></figure><h3 id="4-3-处理请求"><a href="#4-3-处理请求" class="headerlink" title="4.3 处理请求"></a>4.3 处理请求</h3><p>controller \ articleController.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取单篇文章</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> article = <span class="hljs-keyword">await</span> Article.findById(req.params.slug).populate(<span class="hljs-string">&#x27;author&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> (!article) &#123;<br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">404</span>).end()<br>    &#125;<br><br>    res.status(<span class="hljs-number">200</span>).json(<br>      article<br>    )<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-获取所有文章"><a href="#5-获取所有文章" class="headerlink" title="5. 获取所有文章"></a>5. 获取所有文章</h2><p>controller \ articleController.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取所有文章(可增加条件筛选)</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">listArticles</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123;<br>        offset = <span class="hljs-number">0</span>,<span class="hljs-comment">// offset默认为0</span><br>        limit = <span class="hljs-number">20</span>,<br>        tag,<br>        author<br>      &#125; = req.query<br><br>      <span class="hljs-keyword">const</span> filter = &#123;&#125;   <span class="hljs-comment">// 用于筛选</span><br><br>      <span class="hljs-keyword">if</span> (tag) &#123;<br>        filter.tagList = tag<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (author) &#123;<br>        <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> User.findOne(&#123; <span class="hljs-attr">username</span>: author &#125;)<br>        filter.author = user ? user._id : <span class="hljs-literal">null</span>  <span class="hljs-comment">// 如果有这个作者，则获取作者的id用于筛选。没有则为null</span><br>      &#125;<br><br>      <span class="hljs-keyword">const</span> articlesCount = <span class="hljs-keyword">await</span> Article.countDocuments()<br><br>      <span class="hljs-keyword">const</span> articles = <span class="hljs-keyword">await</span> Article.find(filter)   <span class="hljs-comment">// 筛选出有这个标签的文章</span><br>        .skip(<span class="hljs-built_in">Number</span>.parseInt(offset))       <span class="hljs-comment">// 跳过多少条</span><br>        .limit(<span class="hljs-built_in">Number</span>.parseInt(limit))      <span class="hljs-comment">// 取多少条</span><br>        .sort(&#123;       <span class="hljs-comment">// 排序， -1代表倒叙，1代表正序</span><br>          <span class="hljs-attr">createdAt</span>: -<span class="hljs-number">1</span><br>        &#125;)<br><br>      res.status(<span class="hljs-number">200</span>).json(&#123;<br>        articles,<br>        articlesCount<br>      &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="6-更新文章"><a href="#6-更新文章" class="headerlink" title="6. 更新文章"></a>6. 更新文章</h2><h3 id="6-1-封装验证-ID-是否有效"><a href="#6-1-封装验证-ID-是否有效" class="headerlink" title="6.1 封装验证 ID 是否有效"></a>6.1 封装验证 ID 是否有效</h3><p>修改 validate 中间件</p><p>middle \ validate.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; validationResult, buildCheckFunction &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-validator&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; isValidObjectId &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><br><span class="hljs-built_in">exports</span> = <span class="hljs-built_in">module</span>.exports = <span class="hljs-function">(<span class="hljs-params">validations</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-built_in">Promise</span>.all(validations.map(<span class="hljs-function">(<span class="hljs-params">validation</span>) =&gt;</span> validation.run(req)));<br><br>    <span class="hljs-keyword">const</span> errors = validationResult(req);<br>    <span class="hljs-keyword">if</span> (errors.isEmpty()) &#123;<br>      <span class="hljs-keyword">return</span> next();<br>    &#125;<br><br>    res.status(<span class="hljs-number">400</span>).json(&#123; <span class="hljs-attr">errors</span>: errors.array() &#125;);<br>  &#125;;<br>&#125;;<br><br><span class="hljs-built_in">exports</span>.isValidObjectId = <span class="hljs-function">(<span class="hljs-params">location, fields</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 第一个参数是验证的数据的位置，第二个参数是验证数据字段</span><br>  <span class="hljs-keyword">return</span> buildCheckFunction(location)(fields).custom(<span class="hljs-keyword">async</span> (value) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!isValidObjectId(value)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;ID不是有效的ObjectID&quot;</span>);<br>    &#125;<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="6-2-修改-article-的验证以及添加更新文章的验证"><a href="#6-2-修改-article-的验证以及添加更新文章的验证" class="headerlink" title="6.2 修改 article 的验证以及添加更新文章的验证"></a>6.2 修改 article 的验证以及添加更新文章的验证</h3><p>validate \ article.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> validate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../middleware/validate&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; body, param &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-validator&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; Article &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../model&quot;</span>);<br><br><span class="hljs-built_in">exports</span>.createArticle = validate([<br>  body(<span class="hljs-string">&quot;article.title&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;文章标题不能为空&quot;</span>),<br>  body(<span class="hljs-string">&quot;article.description&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;文章摘要不能为空&quot;</span>),<br>  body(<span class="hljs-string">&quot;article.body&quot;</span>).notEmpty().withMessage(<span class="hljs-string">&quot;文章内容不能为空&quot;</span>),<br>]);<br><br><span class="hljs-built_in">exports</span>.getArticle = validate([<br>  validate.isValidObjectId([<span class="hljs-string">&quot;params&quot;</span>], <span class="hljs-string">&quot;slug&quot;</span>), <span class="hljs-comment">// 第一个参数是验证的数据的位置，第二个参数是验证数据字段</span><br><br>  <span class="hljs-comment">// param(&#x27;slug&#x27;).custom(async value =&gt; &#123;</span><br>  <span class="hljs-comment">//   if (!mongoose.isValidObjectId(value)) &#123;</span><br><br>  <span class="hljs-comment">//     return Promise.reject(&#x27;文章ID类型错误&#x27;)</span><br>  <span class="hljs-comment">//   &#125;</span><br><br>  <span class="hljs-comment">// &#125;)</span><br>]);<br><br><span class="hljs-built_in">exports</span>.updateArticle = [<br>  validate([<br>    validate.isValidObjectId([<span class="hljs-string">&quot;params&quot;</span>], <span class="hljs-string">&quot;slug&quot;</span>), <span class="hljs-comment">// 第一个参数是验证的数据的位置，第二个参数是验证数据字段</span><br>  ]),<br>  <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>    <span class="hljs-comment">// 校验文章是否存在</span><br>    <span class="hljs-keyword">const</span> articleId = req.params.slug;<br>    <span class="hljs-keyword">const</span> article = <span class="hljs-keyword">await</span> Article.findById(articleId);<br>    req.article = article; <span class="hljs-comment">// 把article挂载到req上</span><br><br>    <span class="hljs-keyword">if</span> (!article) &#123;<br>      <span class="hljs-comment">// 要修改的文章不存在</span><br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">404</span>).end();<br>    &#125;<br>    next(); <span class="hljs-comment">// 文章存在，下一个中间件处理</span><br>  &#125;,<br>  <span class="hljs-keyword">async</span> (req, res, next) =&gt; &#123;<br>    <span class="hljs-comment">// 判断文章作者是否是登录用户(禁止修改别人的文章)</span><br><br>    <span class="hljs-keyword">if</span> (req.user._id.toString() !== req.article.author.toString()) &#123;<br>      <span class="hljs-comment">// ObjectId是一个对象，不能直接比较</span><br>      <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">403</span>).end();<br>    &#125;<br>    next();<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><h3 id="6-3-增加-article-的路由——更新文章"><a href="#6-3-增加-article-的路由——更新文章" class="headerlink" title="6.3 增加 article 的路由——更新文章"></a>6.3 增加 article 的路由——更新文章</h3><p>route \ article.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 更新文章</span><br>router.put(<br>  <span class="hljs-string">&quot;/:slug&quot;</span>,<br>  authorization,<br>  articleValidate.updateArticle,<br>  articleController.updateArticle<br>);<br></code></pre></td></tr></table></figure><h3 id="6-4-处理请求（更新文章）"><a href="#6-4-处理请求（更新文章）" class="headerlink" title="6.4 处理请求（更新文章）"></a>6.4 处理请求（更新文章）</h3><p>controller \ articleController.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 更新文章</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">updateArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> article = req.article<br>      <span class="hljs-keyword">const</span> bodyArticle = req.body.article<br><br>      article.title = bodyArticle.title || article.title  <span class="hljs-comment">// 有修改的则用修改的，否则用原来的</span><br>      article.description = bodyArticle.description || article.description<br>      article.body = bodyArticle.body || article.body<br><br>      <span class="hljs-keyword">await</span> article.save()<br>      res.status(<span class="hljs-number">200</span>).json(&#123;<br>        article<br>      &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      next(err)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="7-删除文章"><a href="#7-删除文章" class="headerlink" title="7. 删除文章"></a>7. 删除文章</h2><h3 id="7-1-数据验证"><a href="#7-1-数据验证" class="headerlink" title="7.1 数据验证"></a>7.1 数据验证</h3><p>middle \ validate.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.deleteArticle = <span class="hljs-built_in">exports</span>.updateArticle;<br></code></pre></td></tr></table></figure><h3 id="7-2-路由"><a href="#7-2-路由" class="headerlink" title="7.2 路由"></a>7.2 路由</h3><p>route \ article.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 删除文章</span><br>router.delete(<br>  <span class="hljs-string">&quot;/:slug&quot;</span>,<br>  authorization,<br>  articleValidate.deleteArticle,<br>  articleController.deleteArticle<br>);<br></code></pre></td></tr></table></figure><h3 id="7-3-处理请求"><a href="#7-3-处理请求" class="headerlink" title="7.3 处理请求"></a>7.3 处理请求</h3><p>controller \ articleController.js（部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 删除文章</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">deleteArticle</span>(<span class="hljs-params">req, res, next</span>)</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> article = req.article<br>    <span class="hljs-keyword">await</span> article.remove()<br>    res.status(<span class="hljs-number">204</span>).end()<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    next(err)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Express-实战-二-登录验证、身份认证、增删改查&quot;&gt;&lt;a href=&quot;#Express-实战-二-登录验证、身份认证、增删改查&quot; class=&quot;headerlink&quot; title=&quot;Express 实战(二) 登录验证、身份认证、增删改查&quot;&gt;&lt;/a&gt;Expr</summary>
      
    
    
    
    <category term="后端" scheme="https://www.clzczh.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Express" scheme="https://www.clzczh.top/tags/Express/"/>
    
  </entry>
  
</feed>
